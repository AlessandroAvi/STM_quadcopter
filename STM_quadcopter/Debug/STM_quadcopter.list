
STM_quadcopter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004458  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  080045f8  080045f8  000145f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004724  08004724  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004724  08004724  00014724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800472c  0800472c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800472c  0800472c  0001472c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004730  08004730  00014730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004734  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  20000070  080047a4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  080047a4  000201b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011b13  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002690  00000000  00000000  00031bb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d88  00000000  00000000  00034248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c80  00000000  00000000  00034fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017304  00000000  00000000  00035c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012056  00000000  00000000  0004cf54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008de9a  00000000  00000000  0005efaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ece44  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003af8  00000000  00000000  000ece98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080045e0 	.word	0x080045e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080045e0 	.word	0x080045e0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <ESC_setSpeed>:
char cmd_rx[1];


// FUNCTIONS *****************************

void ESC_setSpeed(int dutyCycle, ESC_STATUS * ESC_speed){
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	6039      	str	r1, [r7, #0]

	TIM2->CCR1 = ESC_speed->FR + 1000;
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 800058a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800058e:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCR2 = ESC_speed->FL + 1000;
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	785b      	ldrb	r3, [r3, #1]
 8000594:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8000598:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800059c:	639a      	str	r2, [r3, #56]	; 0x38


}
 800059e:	bf00      	nop
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
	...

080005ac <PRINTF>:
#include "debug.h"
#include <stdio.h>
#include <string.h>

void PRINTF(char str[100]){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b09c      	sub	sp, #112	; 0x70
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  char msg[100];
  int msg_len;
  msg_len = sprintf(msg, str);
 80005b4:	f107 0308 	add.w	r3, r7, #8
 80005b8:	6879      	ldr	r1, [r7, #4]
 80005ba:	4618      	mov	r0, r3
 80005bc:	f003 fbe2 	bl	8003d84 <siprintf>
 80005c0:	66f8      	str	r0, [r7, #108]	; 0x6c
  HAL_UART_Transmit(&huart2, (uint8_t *)msg, msg_len, 5000);
 80005c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	f107 0108 	add.w	r1, r7, #8
 80005ca:	f241 3388 	movw	r3, #5000	; 0x1388
 80005ce:	4803      	ldr	r0, [pc, #12]	; (80005dc <PRINTF+0x30>)
 80005d0:	f002 fb6b 	bl	8002caa <HAL_UART_Transmit>
}
 80005d4:	bf00      	nop
 80005d6:	3770      	adds	r7, #112	; 0x70
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20000158 	.word	0x20000158

080005e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08a      	sub	sp, #40	; 0x28
 80005e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
 80005f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	613b      	str	r3, [r7, #16]
 80005fa:	4b31      	ldr	r3, [pc, #196]	; (80006c0 <MX_GPIO_Init+0xe0>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a30      	ldr	r2, [pc, #192]	; (80006c0 <MX_GPIO_Init+0xe0>)
 8000600:	f043 0304 	orr.w	r3, r3, #4
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b2e      	ldr	r3, [pc, #184]	; (80006c0 <MX_GPIO_Init+0xe0>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0304 	and.w	r3, r3, #4
 800060e:	613b      	str	r3, [r7, #16]
 8000610:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	60fb      	str	r3, [r7, #12]
 8000616:	4b2a      	ldr	r3, [pc, #168]	; (80006c0 <MX_GPIO_Init+0xe0>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a29      	ldr	r2, [pc, #164]	; (80006c0 <MX_GPIO_Init+0xe0>)
 800061c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b27      	ldr	r3, [pc, #156]	; (80006c0 <MX_GPIO_Init+0xe0>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	4b23      	ldr	r3, [pc, #140]	; (80006c0 <MX_GPIO_Init+0xe0>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a22      	ldr	r2, [pc, #136]	; (80006c0 <MX_GPIO_Init+0xe0>)
 8000638:	f043 0301 	orr.w	r3, r3, #1
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b20      	ldr	r3, [pc, #128]	; (80006c0 <MX_GPIO_Init+0xe0>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	4b1c      	ldr	r3, [pc, #112]	; (80006c0 <MX_GPIO_Init+0xe0>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a1b      	ldr	r2, [pc, #108]	; (80006c0 <MX_GPIO_Init+0xe0>)
 8000654:	f043 0302 	orr.w	r3, r3, #2
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b19      	ldr	r3, [pc, #100]	; (80006c0 <MX_GPIO_Init+0xe0>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0302 	and.w	r3, r3, #2
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	2120      	movs	r1, #32
 800066a:	4816      	ldr	r0, [pc, #88]	; (80006c4 <MX_GPIO_Init+0xe4>)
 800066c:	f000 fff4 	bl	8001658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000670:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000674:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000676:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800067a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000680:	f107 0314 	add.w	r3, r7, #20
 8000684:	4619      	mov	r1, r3
 8000686:	4810      	ldr	r0, [pc, #64]	; (80006c8 <MX_GPIO_Init+0xe8>)
 8000688:	f000 fe62 	bl	8001350 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800068c:	2320      	movs	r3, #32
 800068e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000690:	2301      	movs	r3, #1
 8000692:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000698:	2300      	movs	r3, #0
 800069a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800069c:	f107 0314 	add.w	r3, r7, #20
 80006a0:	4619      	mov	r1, r3
 80006a2:	4808      	ldr	r0, [pc, #32]	; (80006c4 <MX_GPIO_Init+0xe4>)
 80006a4:	f000 fe54 	bl	8001350 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006a8:	2200      	movs	r2, #0
 80006aa:	2100      	movs	r1, #0
 80006ac:	2028      	movs	r0, #40	; 0x28
 80006ae:	f000 fd86 	bl	80011be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006b2:	2028      	movs	r0, #40	; 0x28
 80006b4:	f000 fd9f 	bl	80011f6 <HAL_NVIC_EnableIRQ>

}
 80006b8:	bf00      	nop
 80006ba:	3728      	adds	r7, #40	; 0x28
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40020000 	.word	0x40020000
 80006c8:	40020800 	.word	0x40020800

080006cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d2:	f000 fc27 	bl	8000f24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d6:	f000 f8bb 	bl	8000850 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006da:	f7ff ff81 	bl	80005e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006de:	f000 fb7d 	bl	8000ddc <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80006e2:	f000 faa3 	bl	8000c2c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */



  PRINTF("\n\r BEGINNING OF THE CODE \n\n\r");
 80006e6:	4850      	ldr	r0, [pc, #320]	; (8000828 <main+0x15c>)
 80006e8:	f7ff ff60 	bl	80005ac <PRINTF>

  // Start the counter for the PWM signal
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80006ec:	2100      	movs	r1, #0
 80006ee:	484f      	ldr	r0, [pc, #316]	; (800082c <main+0x160>)
 80006f0:	f001 fd1a 	bl	8002128 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80006f4:	2104      	movs	r1, #4
 80006f6:	484d      	ldr	r0, [pc, #308]	; (800082c <main+0x160>)
 80006f8:	f001 fd16 	bl	8002128 <HAL_TIM_PWM_Start>

  HAL_UART_Receive_IT(&huart2, (uint8_t*)cmd_rx, 1);
 80006fc:	2201      	movs	r2, #1
 80006fe:	494c      	ldr	r1, [pc, #304]	; (8000830 <main+0x164>)
 8000700:	484c      	ldr	r0, [pc, #304]	; (8000834 <main+0x168>)
 8000702:	f002 fc06 	bl	8002f12 <HAL_UART_Receive_IT>


  ESC_STATUS ESC_speed;

  ESC_speed.FR = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	713b      	strb	r3, [r7, #4]
  ESC_speed.FL = 0;
 800070a:	2300      	movs	r3, #0
 800070c:	717b      	strb	r3, [r7, #5]
  ESC_speed.RR = 0;
 800070e:	2300      	movs	r3, #0
 8000710:	71bb      	strb	r3, [r7, #6]
  ESC_speed.RL = 0;
 8000712:	2300      	movs	r3, #0
 8000714:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(BLUE_BUTTON == 1){
 8000716:	4b48      	ldr	r3, [pc, #288]	; (8000838 <main+0x16c>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	2b01      	cmp	r3, #1
 800071c:	d1fb      	bne.n	8000716 <main+0x4a>


		  if(cmd_rx[0] == 'A' || cmd_rx[0] == 'a'){
 800071e:	4b44      	ldr	r3, [pc, #272]	; (8000830 <main+0x164>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	2b41      	cmp	r3, #65	; 0x41
 8000724:	d003      	beq.n	800072e <main+0x62>
 8000726:	4b42      	ldr	r3, [pc, #264]	; (8000830 <main+0x164>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	2b61      	cmp	r3, #97	; 0x61
 800072c:	d10b      	bne.n	8000746 <main+0x7a>
			  ESC_speed.FL += 1;
 800072e:	797b      	ldrb	r3, [r7, #5]
 8000730:	3301      	adds	r3, #1
 8000732:	b2db      	uxtb	r3, r3
 8000734:	717b      	strb	r3, [r7, #5]
			  if(ESC_speed.FR != 0){
 8000736:	793b      	ldrb	r3, [r7, #4]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d03f      	beq.n	80007bc <main+0xf0>
				  ESC_speed.FR -= 1;
 800073c:	793b      	ldrb	r3, [r7, #4]
 800073e:	3b01      	subs	r3, #1
 8000740:	b2db      	uxtb	r3, r3
 8000742:	713b      	strb	r3, [r7, #4]
			  if(ESC_speed.FR != 0){
 8000744:	e03a      	b.n	80007bc <main+0xf0>
			  }
		  }else if(cmd_rx[0] == 'D' || cmd_rx[0] == 'd'){
 8000746:	4b3a      	ldr	r3, [pc, #232]	; (8000830 <main+0x164>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2b44      	cmp	r3, #68	; 0x44
 800074c:	d003      	beq.n	8000756 <main+0x8a>
 800074e:	4b38      	ldr	r3, [pc, #224]	; (8000830 <main+0x164>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	2b64      	cmp	r3, #100	; 0x64
 8000754:	d10b      	bne.n	800076e <main+0xa2>
			  ESC_speed.FR += 1;
 8000756:	793b      	ldrb	r3, [r7, #4]
 8000758:	3301      	adds	r3, #1
 800075a:	b2db      	uxtb	r3, r3
 800075c:	713b      	strb	r3, [r7, #4]
			  if(ESC_speed.FL != 0){
 800075e:	797b      	ldrb	r3, [r7, #5]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d02b      	beq.n	80007bc <main+0xf0>
				  ESC_speed.FL -= 1;
 8000764:	797b      	ldrb	r3, [r7, #5]
 8000766:	3b01      	subs	r3, #1
 8000768:	b2db      	uxtb	r3, r3
 800076a:	717b      	strb	r3, [r7, #5]
			  if(ESC_speed.FL != 0){
 800076c:	e026      	b.n	80007bc <main+0xf0>
			  }
		  }else if(cmd_rx[0] == 'W' || cmd_rx[0] == 'w'){
 800076e:	4b30      	ldr	r3, [pc, #192]	; (8000830 <main+0x164>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2b57      	cmp	r3, #87	; 0x57
 8000774:	d003      	beq.n	800077e <main+0xb2>
 8000776:	4b2e      	ldr	r3, [pc, #184]	; (8000830 <main+0x164>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b77      	cmp	r3, #119	; 0x77
 800077c:	d108      	bne.n	8000790 <main+0xc4>
			  ESC_speed.FR += 1;
 800077e:	793b      	ldrb	r3, [r7, #4]
 8000780:	3301      	adds	r3, #1
 8000782:	b2db      	uxtb	r3, r3
 8000784:	713b      	strb	r3, [r7, #4]
			  ESC_speed.FL += 1;
 8000786:	797b      	ldrb	r3, [r7, #5]
 8000788:	3301      	adds	r3, #1
 800078a:	b2db      	uxtb	r3, r3
 800078c:	717b      	strb	r3, [r7, #5]
 800078e:	e015      	b.n	80007bc <main+0xf0>
		  }else if(cmd_rx[0] == 'S' || cmd_rx[0] == 's'){
 8000790:	4b27      	ldr	r3, [pc, #156]	; (8000830 <main+0x164>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b53      	cmp	r3, #83	; 0x53
 8000796:	d003      	beq.n	80007a0 <main+0xd4>
 8000798:	4b25      	ldr	r3, [pc, #148]	; (8000830 <main+0x164>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b73      	cmp	r3, #115	; 0x73
 800079e:	d10d      	bne.n	80007bc <main+0xf0>
			  if(ESC_speed.FR != 0){
 80007a0:	793b      	ldrb	r3, [r7, #4]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d003      	beq.n	80007ae <main+0xe2>
				  ESC_speed.FR -= 1;
 80007a6:	793b      	ldrb	r3, [r7, #4]
 80007a8:	3b01      	subs	r3, #1
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	713b      	strb	r3, [r7, #4]
			  }
			  if(ESC_speed.FL != 0){
 80007ae:	797b      	ldrb	r3, [r7, #5]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d003      	beq.n	80007bc <main+0xf0>
				  ESC_speed.FL -= 1;
 80007b4:	797b      	ldrb	r3, [r7, #5]
 80007b6:	3b01      	subs	r3, #1
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	717b      	strb	r3, [r7, #5]
			  }
		  }

		  if(ESC_speed.FL > 500){
			  ESC_speed.FL = 500;
		  }else if(ESC_speed.FL <= 0 || ESC_speed.FL > 1000){
 80007bc:	797b      	ldrb	r3, [r7, #5]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d101      	bne.n	80007c6 <main+0xfa>
			  ESC_speed.FL = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	717b      	strb	r3, [r7, #5]
		  }

		  if(ESC_speed.FR > 500){
			  ESC_speed.FR = 500;
		  }else if(ESC_speed.FR <= 0 || ESC_speed.FR >1000){
 80007c6:	793b      	ldrb	r3, [r7, #4]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d101      	bne.n	80007d0 <main+0x104>
			  ESC_speed.FR = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	713b      	strb	r3, [r7, #4]
		  }

		  msgLen = sprintf(msgDebug, "\n\r UART INTERRUPT");
 80007d0:	491a      	ldr	r1, [pc, #104]	; (800083c <main+0x170>)
 80007d2:	481b      	ldr	r0, [pc, #108]	; (8000840 <main+0x174>)
 80007d4:	f003 fad6 	bl	8003d84 <siprintf>
 80007d8:	4603      	mov	r3, r0
 80007da:	4a1a      	ldr	r2, [pc, #104]	; (8000844 <main+0x178>)
 80007dc:	6013      	str	r3, [r2, #0]
		  HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 10);
 80007de:	4b19      	ldr	r3, [pc, #100]	; (8000844 <main+0x178>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	b29a      	uxth	r2, r3
 80007e4:	230a      	movs	r3, #10
 80007e6:	4916      	ldr	r1, [pc, #88]	; (8000840 <main+0x174>)
 80007e8:	4812      	ldr	r0, [pc, #72]	; (8000834 <main+0x168>)
 80007ea:	f002 fa5e 	bl	8002caa <HAL_UART_Transmit>
		  msgLen = sprintf(msgDebug, "\n\r   LEFT %d    - RIGHT %d", ESC_speed.FL, ESC_speed.FR);
 80007ee:	797b      	ldrb	r3, [r7, #5]
 80007f0:	461a      	mov	r2, r3
 80007f2:	793b      	ldrb	r3, [r7, #4]
 80007f4:	4914      	ldr	r1, [pc, #80]	; (8000848 <main+0x17c>)
 80007f6:	4812      	ldr	r0, [pc, #72]	; (8000840 <main+0x174>)
 80007f8:	f003 fac4 	bl	8003d84 <siprintf>
 80007fc:	4603      	mov	r3, r0
 80007fe:	4a11      	ldr	r2, [pc, #68]	; (8000844 <main+0x178>)
 8000800:	6013      	str	r3, [r2, #0]
		  HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 10);
 8000802:	4b10      	ldr	r3, [pc, #64]	; (8000844 <main+0x178>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	b29a      	uxth	r2, r3
 8000808:	230a      	movs	r3, #10
 800080a:	490d      	ldr	r1, [pc, #52]	; (8000840 <main+0x174>)
 800080c:	4809      	ldr	r0, [pc, #36]	; (8000834 <main+0x168>)
 800080e:	f002 fa4c 	bl	8002caa <HAL_UART_Transmit>


		  // the pulse must go from 0 to 100, the CCR value can go from 100 to 200
		  ESC_setSpeed(dutyCycle, &ESC_speed);
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <main+0x180>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	1d3a      	adds	r2, r7, #4
 8000818:	4611      	mov	r1, r2
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff feac 	bl	8000578 <ESC_setSpeed>

		  BLUE_BUTTON = 0;
 8000820:	4b05      	ldr	r3, [pc, #20]	; (8000838 <main+0x16c>)
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
	  if(BLUE_BUTTON == 1){
 8000826:	e776      	b.n	8000716 <main+0x4a>
 8000828:	080045f8 	.word	0x080045f8
 800082c:	20000110 	.word	0x20000110
 8000830:	200000a0 	.word	0x200000a0
 8000834:	20000158 	.word	0x20000158
 8000838:	2000008c 	.word	0x2000008c
 800083c:	08004618 	.word	0x08004618
 8000840:	200000a8 	.word	0x200000a8
 8000844:	2000010c 	.word	0x2000010c
 8000848:	0800462c 	.word	0x0800462c
 800084c:	20000090 	.word	0x20000090

08000850 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b094      	sub	sp, #80	; 0x50
 8000854:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000856:	f107 0320 	add.w	r3, r7, #32
 800085a:	2230      	movs	r2, #48	; 0x30
 800085c:	2100      	movs	r1, #0
 800085e:	4618      	mov	r0, r3
 8000860:	f003 fa88 	bl	8003d74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000864:	f107 030c 	add.w	r3, r7, #12
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000874:	2300      	movs	r3, #0
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	4b29      	ldr	r3, [pc, #164]	; (8000920 <SystemClock_Config+0xd0>)
 800087a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087c:	4a28      	ldr	r2, [pc, #160]	; (8000920 <SystemClock_Config+0xd0>)
 800087e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000882:	6413      	str	r3, [r2, #64]	; 0x40
 8000884:	4b26      	ldr	r3, [pc, #152]	; (8000920 <SystemClock_Config+0xd0>)
 8000886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000890:	2300      	movs	r3, #0
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	4b23      	ldr	r3, [pc, #140]	; (8000924 <SystemClock_Config+0xd4>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800089c:	4a21      	ldr	r2, [pc, #132]	; (8000924 <SystemClock_Config+0xd4>)
 800089e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008a2:	6013      	str	r3, [r2, #0]
 80008a4:	4b1f      	ldr	r3, [pc, #124]	; (8000924 <SystemClock_Config+0xd4>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008b0:	2302      	movs	r3, #2
 80008b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008b4:	2301      	movs	r3, #1
 80008b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008b8:	2310      	movs	r3, #16
 80008ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008bc:	2302      	movs	r3, #2
 80008be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008c0:	2300      	movs	r3, #0
 80008c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80008c4:	2310      	movs	r3, #16
 80008c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008c8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80008cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008ce:	2304      	movs	r3, #4
 80008d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008d2:	2307      	movs	r3, #7
 80008d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d6:	f107 0320 	add.w	r3, r7, #32
 80008da:	4618      	mov	r0, r3
 80008dc:	f000 ff08 	bl	80016f0 <HAL_RCC_OscConfig>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008e6:	f000 f8cd 	bl	8000a84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ea:	230f      	movs	r3, #15
 80008ec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ee:	2302      	movs	r3, #2
 80008f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000900:	f107 030c 	add.w	r3, r7, #12
 8000904:	2102      	movs	r1, #2
 8000906:	4618      	mov	r0, r3
 8000908:	f001 f96a 	bl	8001be0 <HAL_RCC_ClockConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000912:	f000 f8b7 	bl	8000a84 <Error_Handler>
  }
}
 8000916:	bf00      	nop
 8000918:	3750      	adds	r7, #80	; 0x50
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40023800 	.word	0x40023800
 8000924:	40007000 	.word	0x40007000

08000928 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin==B1_Pin){
 8000932:	88fb      	ldrh	r3, [r7, #6]
 8000934:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000938:	d173      	bne.n	8000a22 <HAL_GPIO_EXTI_Callback+0xfa>


		msgLen = sprintf(msgDebug, "BLUE BUTTON PRESSED \n\r");
 800093a:	493c      	ldr	r1, [pc, #240]	; (8000a2c <HAL_GPIO_EXTI_Callback+0x104>)
 800093c:	483c      	ldr	r0, [pc, #240]	; (8000a30 <HAL_GPIO_EXTI_Callback+0x108>)
 800093e:	f003 fa21 	bl	8003d84 <siprintf>
 8000942:	4603      	mov	r3, r0
 8000944:	4a3b      	ldr	r2, [pc, #236]	; (8000a34 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000946:	6013      	str	r3, [r2, #0]
		if( HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 1000) != HAL_OK ){Error_Handler();}
 8000948:	4b3a      	ldr	r3, [pc, #232]	; (8000a34 <HAL_GPIO_EXTI_Callback+0x10c>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	b29a      	uxth	r2, r3
 800094e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000952:	4937      	ldr	r1, [pc, #220]	; (8000a30 <HAL_GPIO_EXTI_Callback+0x108>)
 8000954:	4838      	ldr	r0, [pc, #224]	; (8000a38 <HAL_GPIO_EXTI_Callback+0x110>)
 8000956:	f002 f9a8 	bl	8002caa <HAL_UART_Transmit>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <HAL_GPIO_EXTI_Callback+0x3c>
 8000960:	f000 f890 	bl	8000a84 <Error_Handler>
		msgLen = sprintf(msgDebug, "  Specify the value of the duty cycle in between 0 and 100 (3 digits required _ _ _) -> \n\r");
 8000964:	4935      	ldr	r1, [pc, #212]	; (8000a3c <HAL_GPIO_EXTI_Callback+0x114>)
 8000966:	4832      	ldr	r0, [pc, #200]	; (8000a30 <HAL_GPIO_EXTI_Callback+0x108>)
 8000968:	f003 fa0c 	bl	8003d84 <siprintf>
 800096c:	4603      	mov	r3, r0
 800096e:	4a31      	ldr	r2, [pc, #196]	; (8000a34 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000970:	6013      	str	r3, [r2, #0]
		if( HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 1000) != HAL_OK ){Error_Handler();}
 8000972:	4b30      	ldr	r3, [pc, #192]	; (8000a34 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	b29a      	uxth	r2, r3
 8000978:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800097c:	492c      	ldr	r1, [pc, #176]	; (8000a30 <HAL_GPIO_EXTI_Callback+0x108>)
 800097e:	482e      	ldr	r0, [pc, #184]	; (8000a38 <HAL_GPIO_EXTI_Callback+0x110>)
 8000980:	f002 f993 	bl	8002caa <HAL_UART_Transmit>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <HAL_GPIO_EXTI_Callback+0x66>
 800098a:	f000 f87b 	bl	8000a84 <Error_Handler>
		// Receive letter
		if( HAL_UART_Receive(&huart2, (uint8_t*)msgRx, 3, 1000) != HAL_OK ){Error_Handler();}
 800098e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000992:	2203      	movs	r2, #3
 8000994:	492a      	ldr	r1, [pc, #168]	; (8000a40 <HAL_GPIO_EXTI_Callback+0x118>)
 8000996:	4828      	ldr	r0, [pc, #160]	; (8000a38 <HAL_GPIO_EXTI_Callback+0x110>)
 8000998:	f002 fa19 	bl	8002dce <HAL_UART_Receive>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <HAL_GPIO_EXTI_Callback+0x7e>
 80009a2:	f000 f86f 	bl	8000a84 <Error_Handler>
		while(HAL_UART_GetState(&huart2) != HAL_UART_STATE_READY){}
 80009a6:	bf00      	nop
 80009a8:	4823      	ldr	r0, [pc, #140]	; (8000a38 <HAL_GPIO_EXTI_Callback+0x110>)
 80009aa:	f002 fd91 	bl	80034d0 <HAL_UART_GetState>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b20      	cmp	r3, #32
 80009b2:	d1f9      	bne.n	80009a8 <HAL_GPIO_EXTI_Callback+0x80>


		// Transform Rx message in number
		dutyCycle = (int)(msgRx[0]-48)*100 + (int)(msgRx[1]-48)*10 +  (int)(msgRx[2]-48);
 80009b4:	4b22      	ldr	r3, [pc, #136]	; (8000a40 <HAL_GPIO_EXTI_Callback+0x118>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	3b30      	subs	r3, #48	; 0x30
 80009ba:	2264      	movs	r2, #100	; 0x64
 80009bc:	fb02 f103 	mul.w	r1, r2, r3
 80009c0:	4b1f      	ldr	r3, [pc, #124]	; (8000a40 <HAL_GPIO_EXTI_Callback+0x118>)
 80009c2:	785b      	ldrb	r3, [r3, #1]
 80009c4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80009c8:	4613      	mov	r3, r2
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	4413      	add	r3, r2
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	18ca      	adds	r2, r1, r3
 80009d2:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <HAL_GPIO_EXTI_Callback+0x118>)
 80009d4:	789b      	ldrb	r3, [r3, #2]
 80009d6:	3b30      	subs	r3, #48	; 0x30
 80009d8:	4413      	add	r3, r2
 80009da:	4a1a      	ldr	r2, [pc, #104]	; (8000a44 <HAL_GPIO_EXTI_Callback+0x11c>)
 80009dc:	6013      	str	r3, [r2, #0]
		if(dutyCycle > 100){
 80009de:	4b19      	ldr	r3, [pc, #100]	; (8000a44 <HAL_GPIO_EXTI_Callback+0x11c>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	2b64      	cmp	r3, #100	; 0x64
 80009e4:	dd02      	ble.n	80009ec <HAL_GPIO_EXTI_Callback+0xc4>
			dutyCycle = 100;
 80009e6:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <HAL_GPIO_EXTI_Callback+0x11c>)
 80009e8:	2264      	movs	r2, #100	; 0x64
 80009ea:	601a      	str	r2, [r3, #0]
		}

		msgLen = sprintf(msgDebug, "  Pulse value is now %d \n\r", dutyCycle);
 80009ec:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <HAL_GPIO_EXTI_Callback+0x11c>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	461a      	mov	r2, r3
 80009f2:	4915      	ldr	r1, [pc, #84]	; (8000a48 <HAL_GPIO_EXTI_Callback+0x120>)
 80009f4:	480e      	ldr	r0, [pc, #56]	; (8000a30 <HAL_GPIO_EXTI_Callback+0x108>)
 80009f6:	f003 f9c5 	bl	8003d84 <siprintf>
 80009fa:	4603      	mov	r3, r0
 80009fc:	4a0d      	ldr	r2, [pc, #52]	; (8000a34 <HAL_GPIO_EXTI_Callback+0x10c>)
 80009fe:	6013      	str	r3, [r2, #0]
		if( HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 1000) != HAL_OK ){Error_Handler();}
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	b29a      	uxth	r2, r3
 8000a06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a0a:	4909      	ldr	r1, [pc, #36]	; (8000a30 <HAL_GPIO_EXTI_Callback+0x108>)
 8000a0c:	480a      	ldr	r0, [pc, #40]	; (8000a38 <HAL_GPIO_EXTI_Callback+0x110>)
 8000a0e:	f002 f94c 	bl	8002caa <HAL_UART_Transmit>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <HAL_GPIO_EXTI_Callback+0xf4>
 8000a18:	f000 f834 	bl	8000a84 <Error_Handler>

		//TIM2->CCR1 = dutyCycle + 100;

		BLUE_BUTTON = 1;
 8000a1c:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x124>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	601a      	str	r2, [r3, #0]
	}


}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	08004648 	.word	0x08004648
 8000a30:	200000a8 	.word	0x200000a8
 8000a34:	2000010c 	.word	0x2000010c
 8000a38:	20000158 	.word	0x20000158
 8000a3c:	08004660 	.word	0x08004660
 8000a40:	200000a4 	.word	0x200000a4
 8000a44:	20000090 	.word	0x20000090
 8000a48:	080046bc 	.word	0x080046bc
 8000a4c:	2000008c 	.word	0x2000008c

08000a50 <HAL_UART_RxCpltCallback>:




void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]


	if(BLUE_BUTTON==0){
 8000a58:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <HAL_UART_RxCpltCallback+0x28>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d102      	bne.n	8000a66 <HAL_UART_RxCpltCallback+0x16>
		BLUE_BUTTON = 1;
 8000a60:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <HAL_UART_RxCpltCallback+0x28>)
 8000a62:	2201      	movs	r2, #1
 8000a64:	601a      	str	r2, [r3, #0]
	}

	HAL_UART_Receive_IT(&huart2, (uint8_t*)cmd_rx, 1);
 8000a66:	2201      	movs	r2, #1
 8000a68:	4904      	ldr	r1, [pc, #16]	; (8000a7c <HAL_UART_RxCpltCallback+0x2c>)
 8000a6a:	4805      	ldr	r0, [pc, #20]	; (8000a80 <HAL_UART_RxCpltCallback+0x30>)
 8000a6c:	f002 fa51 	bl	8002f12 <HAL_UART_Receive_IT>


}
 8000a70:	bf00      	nop
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	2000008c 	.word	0x2000008c
 8000a7c:	200000a0 	.word	0x200000a0
 8000a80:	20000158 	.word	0x20000158

08000a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a88:	b672      	cpsid	i
}
 8000a8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <Error_Handler+0x8>
	...

08000a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	4b18      	ldr	r3, [pc, #96]	; (8000afc <HAL_MspInit+0x6c>)
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9e:	4a17      	ldr	r2, [pc, #92]	; (8000afc <HAL_MspInit+0x6c>)
 8000aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8000aa6:	4b15      	ldr	r3, [pc, #84]	; (8000afc <HAL_MspInit+0x6c>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	603b      	str	r3, [r7, #0]
 8000ab6:	4b11      	ldr	r3, [pc, #68]	; (8000afc <HAL_MspInit+0x6c>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	4a10      	ldr	r2, [pc, #64]	; (8000afc <HAL_MspInit+0x6c>)
 8000abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <HAL_MspInit+0x6c>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ace:	2007      	movs	r0, #7
 8000ad0:	f000 fb6a 	bl	80011a8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	2001      	movs	r0, #1
 8000ada:	f000 fb70 	bl	80011be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8000ade:	2001      	movs	r0, #1
 8000ae0:	f000 fb89 	bl	80011f6 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	2051      	movs	r0, #81	; 0x51
 8000aea:	f000 fb68 	bl	80011be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8000aee:	2051      	movs	r0, #81	; 0x51
 8000af0:	f000 fb81 	bl	80011f6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af4:	bf00      	nop
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40023800 	.word	0x40023800

08000b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <NMI_Handler+0x4>

08000b06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b0a:	e7fe      	b.n	8000b0a <HardFault_Handler+0x4>

08000b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <MemManage_Handler+0x4>

08000b12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b16:	e7fe      	b.n	8000b16 <BusFault_Handler+0x4>

08000b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <UsageFault_Handler+0x4>

08000b1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b4c:	f000 fa3c 	bl	8000fc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8000b58:	f000 fdb0 	bl	80016bc <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b64:	4802      	ldr	r0, [pc, #8]	; (8000b70 <USART2_IRQHandler+0x10>)
 8000b66:	f002 fa05 	bl	8002f74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000158 	.word	0x20000158

08000b74 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000b78:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b7c:	f000 fd86 	bl	800168c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
	...

08000b94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b9c:	4a14      	ldr	r2, [pc, #80]	; (8000bf0 <_sbrk+0x5c>)
 8000b9e:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <_sbrk+0x60>)
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ba8:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <_sbrk+0x64>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d102      	bne.n	8000bb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bb0:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <_sbrk+0x64>)
 8000bb2:	4a12      	ldr	r2, [pc, #72]	; (8000bfc <_sbrk+0x68>)
 8000bb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bb6:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <_sbrk+0x64>)
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d207      	bcs.n	8000bd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bc4:	f003 f8ac 	bl	8003d20 <__errno>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	220c      	movs	r2, #12
 8000bcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bce:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd2:	e009      	b.n	8000be8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bd4:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <_sbrk+0x64>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bda:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <_sbrk+0x64>)
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4413      	add	r3, r2
 8000be2:	4a05      	ldr	r2, [pc, #20]	; (8000bf8 <_sbrk+0x64>)
 8000be4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000be6:	68fb      	ldr	r3, [r7, #12]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3718      	adds	r7, #24
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20018000 	.word	0x20018000
 8000bf4:	00000400 	.word	0x00000400
 8000bf8:	20000094 	.word	0x20000094
 8000bfc:	200001b0 	.word	0x200001b0

08000c00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c04:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <SystemInit+0x28>)
 8000c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c0a:	4a07      	ldr	r2, [pc, #28]	; (8000c28 <SystemInit+0x28>)
 8000c0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c14:	4b04      	ldr	r3, [pc, #16]	; (8000c28 <SystemInit+0x28>)
 8000c16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c1a:	609a      	str	r2, [r3, #8]
#endif
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08e      	sub	sp, #56	; 0x38
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
 8000c3c:	609a      	str	r2, [r3, #8]
 8000c3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c40:	f107 0320 	add.w	r3, r7, #32
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
 8000c58:	615a      	str	r2, [r3, #20]
 8000c5a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c5c:	4b32      	ldr	r3, [pc, #200]	; (8000d28 <MX_TIM2_Init+0xfc>)
 8000c5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c62:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8000c64:	4b30      	ldr	r3, [pc, #192]	; (8000d28 <MX_TIM2_Init+0xfc>)
 8000c66:	2253      	movs	r2, #83	; 0x53
 8000c68:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c6a:	4b2f      	ldr	r3, [pc, #188]	; (8000d28 <MX_TIM2_Init+0xfc>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 8000c70:	4b2d      	ldr	r3, [pc, #180]	; (8000d28 <MX_TIM2_Init+0xfc>)
 8000c72:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000c76:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c78:	4b2b      	ldr	r3, [pc, #172]	; (8000d28 <MX_TIM2_Init+0xfc>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c7e:	4b2a      	ldr	r3, [pc, #168]	; (8000d28 <MX_TIM2_Init+0xfc>)
 8000c80:	2280      	movs	r2, #128	; 0x80
 8000c82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c84:	4828      	ldr	r0, [pc, #160]	; (8000d28 <MX_TIM2_Init+0xfc>)
 8000c86:	f001 f9a7 	bl	8001fd8 <HAL_TIM_Base_Init>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000c90:	f7ff fef8 	bl	8000a84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c98:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4821      	ldr	r0, [pc, #132]	; (8000d28 <MX_TIM2_Init+0xfc>)
 8000ca2:	f001 fbb3 	bl	800240c <HAL_TIM_ConfigClockSource>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000cac:	f7ff feea 	bl	8000a84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000cb0:	481d      	ldr	r0, [pc, #116]	; (8000d28 <MX_TIM2_Init+0xfc>)
 8000cb2:	f001 f9e0 	bl	8002076 <HAL_TIM_PWM_Init>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000cbc:	f7ff fee2 	bl	8000a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cc8:	f107 0320 	add.w	r3, r7, #32
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4816      	ldr	r0, [pc, #88]	; (8000d28 <MX_TIM2_Init+0xfc>)
 8000cd0:	f001 ff30 	bl	8002b34 <HAL_TIMEx_MasterConfigSynchronization>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000cda:	f7ff fed3 	bl	8000a84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cde:	2360      	movs	r3, #96	; 0x60
 8000ce0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	480c      	ldr	r0, [pc, #48]	; (8000d28 <MX_TIM2_Init+0xfc>)
 8000cf6:	f001 fac7 	bl	8002288 <HAL_TIM_PWM_ConfigChannel>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000d00:	f7ff fec0 	bl	8000a84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	2204      	movs	r2, #4
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4807      	ldr	r0, [pc, #28]	; (8000d28 <MX_TIM2_Init+0xfc>)
 8000d0c:	f001 fabc 	bl	8002288 <HAL_TIM_PWM_ConfigChannel>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000d16:	f7ff feb5 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d1a:	4803      	ldr	r0, [pc, #12]	; (8000d28 <MX_TIM2_Init+0xfc>)
 8000d1c:	f000 f826 	bl	8000d6c <HAL_TIM_MspPostInit>

}
 8000d20:	bf00      	nop
 8000d22:	3738      	adds	r7, #56	; 0x38
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000110 	.word	0x20000110

08000d2c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d3c:	d10d      	bne.n	8000d5a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <HAL_TIM_Base_MspInit+0x3c>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	4a08      	ldr	r2, [pc, #32]	; (8000d68 <HAL_TIM_Base_MspInit+0x3c>)
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_TIM_Base_MspInit+0x3c>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000d5a:	bf00      	nop
 8000d5c:	3714      	adds	r7, #20
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	40023800 	.word	0x40023800

08000d6c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b088      	sub	sp, #32
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d74:	f107 030c 	add.w	r3, r7, #12
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d8c:	d11d      	bne.n	8000dca <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60bb      	str	r3, [r7, #8]
 8000d92:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <HAL_TIM_MspPostInit+0x68>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a0f      	ldr	r2, [pc, #60]	; (8000dd4 <HAL_TIM_MspPostInit+0x68>)
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9e:	4b0d      	ldr	r3, [pc, #52]	; (8000dd4 <HAL_TIM_MspPostInit+0x68>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	60bb      	str	r3, [r7, #8]
 8000da8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000daa:	2303      	movs	r3, #3
 8000dac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dae:	2302      	movs	r3, #2
 8000db0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbe:	f107 030c 	add.w	r3, r7, #12
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4804      	ldr	r0, [pc, #16]	; (8000dd8 <HAL_TIM_MspPostInit+0x6c>)
 8000dc6:	f000 fac3 	bl	8001350 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000dca:	bf00      	nop
 8000dcc:	3720      	adds	r7, #32
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40020000 	.word	0x40020000

08000ddc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000de0:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000de2:	4a12      	ldr	r2, [pc, #72]	; (8000e2c <MX_USART2_UART_Init+0x50>)
 8000de4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000de6:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000de8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dee:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000df4:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dfa:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e00:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000e02:	220c      	movs	r2, #12
 8000e04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e06:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e12:	4805      	ldr	r0, [pc, #20]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000e14:	f001 fefc 	bl	8002c10 <HAL_UART_Init>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e1e:	f7ff fe31 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000158 	.word	0x20000158
 8000e2c:	40004400 	.word	0x40004400

08000e30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	; 0x28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a1d      	ldr	r2, [pc, #116]	; (8000ec4 <HAL_UART_MspInit+0x94>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d133      	bne.n	8000eba <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
 8000e56:	4b1c      	ldr	r3, [pc, #112]	; (8000ec8 <HAL_UART_MspInit+0x98>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	4a1b      	ldr	r2, [pc, #108]	; (8000ec8 <HAL_UART_MspInit+0x98>)
 8000e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e60:	6413      	str	r3, [r2, #64]	; 0x40
 8000e62:	4b19      	ldr	r3, [pc, #100]	; (8000ec8 <HAL_UART_MspInit+0x98>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <HAL_UART_MspInit+0x98>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a14      	ldr	r2, [pc, #80]	; (8000ec8 <HAL_UART_MspInit+0x98>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <HAL_UART_MspInit+0x98>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e8a:	230c      	movs	r3, #12
 8000e8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000e96:	2301      	movs	r3, #1
 8000e98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e9a:	2307      	movs	r3, #7
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9e:	f107 0314 	add.w	r3, r7, #20
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4809      	ldr	r0, [pc, #36]	; (8000ecc <HAL_UART_MspInit+0x9c>)
 8000ea6:	f000 fa53 	bl	8001350 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2100      	movs	r1, #0
 8000eae:	2026      	movs	r0, #38	; 0x26
 8000eb0:	f000 f985 	bl	80011be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000eb4:	2026      	movs	r0, #38	; 0x26
 8000eb6:	f000 f99e 	bl	80011f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000eba:	bf00      	nop
 8000ebc:	3728      	adds	r7, #40	; 0x28
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40004400 	.word	0x40004400
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40020000 	.word	0x40020000

08000ed0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ed0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f08 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ed4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ed6:	e003      	b.n	8000ee0 <LoopCopyDataInit>

08000ed8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000eda:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000edc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ede:	3104      	adds	r1, #4

08000ee0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ee0:	480b      	ldr	r0, [pc, #44]	; (8000f10 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ee2:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ee4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ee6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ee8:	d3f6      	bcc.n	8000ed8 <CopyDataInit>
  ldr  r2, =_sbss
 8000eea:	4a0b      	ldr	r2, [pc, #44]	; (8000f18 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000eec:	e002      	b.n	8000ef4 <LoopFillZerobss>

08000eee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000eee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ef0:	f842 3b04 	str.w	r3, [r2], #4

08000ef4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ef4:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ef6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ef8:	d3f9      	bcc.n	8000eee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000efa:	f7ff fe81 	bl	8000c00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000efe:	f002 ff15 	bl	8003d2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f02:	f7ff fbe3 	bl	80006cc <main>
  bx  lr    
 8000f06:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f08:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000f0c:	08004734 	.word	0x08004734
  ldr  r0, =_sdata
 8000f10:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f14:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000f18:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000f1c:	200001b0 	.word	0x200001b0

08000f20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f20:	e7fe      	b.n	8000f20 <ADC_IRQHandler>
	...

08000f24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f28:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <HAL_Init+0x40>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a0d      	ldr	r2, [pc, #52]	; (8000f64 <HAL_Init+0x40>)
 8000f2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f34:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <HAL_Init+0x40>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a0a      	ldr	r2, [pc, #40]	; (8000f64 <HAL_Init+0x40>)
 8000f3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f40:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <HAL_Init+0x40>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a07      	ldr	r2, [pc, #28]	; (8000f64 <HAL_Init+0x40>)
 8000f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f4c:	2003      	movs	r0, #3
 8000f4e:	f000 f92b 	bl	80011a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f52:	2000      	movs	r0, #0
 8000f54:	f000 f808 	bl	8000f68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f58:	f7ff fd9a 	bl	8000a90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40023c00 	.word	0x40023c00

08000f68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f70:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <HAL_InitTick+0x54>)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <HAL_InitTick+0x58>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f86:	4618      	mov	r0, r3
 8000f88:	f000 f943 	bl	8001212 <HAL_SYSTICK_Config>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e00e      	b.n	8000fb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2b0f      	cmp	r3, #15
 8000f9a:	d80a      	bhi.n	8000fb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	6879      	ldr	r1, [r7, #4]
 8000fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa4:	f000 f90b 	bl	80011be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fa8:	4a06      	ldr	r2, [pc, #24]	; (8000fc4 <HAL_InitTick+0x5c>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	e000      	b.n	8000fb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000000 	.word	0x20000000
 8000fc0:	20000008 	.word	0x20000008
 8000fc4:	20000004 	.word	0x20000004

08000fc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <HAL_IncTick+0x20>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <HAL_IncTick+0x24>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	4a04      	ldr	r2, [pc, #16]	; (8000fec <HAL_IncTick+0x24>)
 8000fda:	6013      	str	r3, [r2, #0]
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	20000008 	.word	0x20000008
 8000fec:	2000019c 	.word	0x2000019c

08000ff0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff4:	4b03      	ldr	r3, [pc, #12]	; (8001004 <HAL_GetTick+0x14>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	2000019c 	.word	0x2000019c

08001008 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f003 0307 	and.w	r3, r3, #7
 8001016:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <__NVIC_SetPriorityGrouping+0x44>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800101e:	68ba      	ldr	r2, [r7, #8]
 8001020:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001024:	4013      	ands	r3, r2
 8001026:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001030:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001038:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800103a:	4a04      	ldr	r2, [pc, #16]	; (800104c <__NVIC_SetPriorityGrouping+0x44>)
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	60d3      	str	r3, [r2, #12]
}
 8001040:	bf00      	nop
 8001042:	3714      	adds	r7, #20
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001054:	4b04      	ldr	r3, [pc, #16]	; (8001068 <__NVIC_GetPriorityGrouping+0x18>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	0a1b      	lsrs	r3, r3, #8
 800105a:	f003 0307 	and.w	r3, r3, #7
}
 800105e:	4618      	mov	r0, r3
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107a:	2b00      	cmp	r3, #0
 800107c:	db0b      	blt.n	8001096 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	f003 021f 	and.w	r2, r3, #31
 8001084:	4907      	ldr	r1, [pc, #28]	; (80010a4 <__NVIC_EnableIRQ+0x38>)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	095b      	lsrs	r3, r3, #5
 800108c:	2001      	movs	r0, #1
 800108e:	fa00 f202 	lsl.w	r2, r0, r2
 8001092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	e000e100 	.word	0xe000e100

080010a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	6039      	str	r1, [r7, #0]
 80010b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	db0a      	blt.n	80010d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	490c      	ldr	r1, [pc, #48]	; (80010f4 <__NVIC_SetPriority+0x4c>)
 80010c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c6:	0112      	lsls	r2, r2, #4
 80010c8:	b2d2      	uxtb	r2, r2
 80010ca:	440b      	add	r3, r1
 80010cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d0:	e00a      	b.n	80010e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	4908      	ldr	r1, [pc, #32]	; (80010f8 <__NVIC_SetPriority+0x50>)
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	f003 030f 	and.w	r3, r3, #15
 80010de:	3b04      	subs	r3, #4
 80010e0:	0112      	lsls	r2, r2, #4
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	440b      	add	r3, r1
 80010e6:	761a      	strb	r2, [r3, #24]
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000e100 	.word	0xe000e100
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b089      	sub	sp, #36	; 0x24
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	f1c3 0307 	rsb	r3, r3, #7
 8001116:	2b04      	cmp	r3, #4
 8001118:	bf28      	it	cs
 800111a:	2304      	movcs	r3, #4
 800111c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3304      	adds	r3, #4
 8001122:	2b06      	cmp	r3, #6
 8001124:	d902      	bls.n	800112c <NVIC_EncodePriority+0x30>
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	3b03      	subs	r3, #3
 800112a:	e000      	b.n	800112e <NVIC_EncodePriority+0x32>
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001130:	f04f 32ff 	mov.w	r2, #4294967295
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43da      	mvns	r2, r3
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	401a      	ands	r2, r3
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001144:	f04f 31ff 	mov.w	r1, #4294967295
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	fa01 f303 	lsl.w	r3, r1, r3
 800114e:	43d9      	mvns	r1, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001154:	4313      	orrs	r3, r2
         );
}
 8001156:	4618      	mov	r0, r3
 8001158:	3724      	adds	r7, #36	; 0x24
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
	...

08001164 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3b01      	subs	r3, #1
 8001170:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001174:	d301      	bcc.n	800117a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001176:	2301      	movs	r3, #1
 8001178:	e00f      	b.n	800119a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800117a:	4a0a      	ldr	r2, [pc, #40]	; (80011a4 <SysTick_Config+0x40>)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3b01      	subs	r3, #1
 8001180:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001182:	210f      	movs	r1, #15
 8001184:	f04f 30ff 	mov.w	r0, #4294967295
 8001188:	f7ff ff8e 	bl	80010a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800118c:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <SysTick_Config+0x40>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001192:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <SysTick_Config+0x40>)
 8001194:	2207      	movs	r2, #7
 8001196:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	e000e010 	.word	0xe000e010

080011a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff ff29 	bl	8001008 <__NVIC_SetPriorityGrouping>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011be:	b580      	push	{r7, lr}
 80011c0:	b086      	sub	sp, #24
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	4603      	mov	r3, r0
 80011c6:	60b9      	str	r1, [r7, #8]
 80011c8:	607a      	str	r2, [r7, #4]
 80011ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011d0:	f7ff ff3e 	bl	8001050 <__NVIC_GetPriorityGrouping>
 80011d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	68b9      	ldr	r1, [r7, #8]
 80011da:	6978      	ldr	r0, [r7, #20]
 80011dc:	f7ff ff8e 	bl	80010fc <NVIC_EncodePriority>
 80011e0:	4602      	mov	r2, r0
 80011e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e6:	4611      	mov	r1, r2
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff ff5d 	bl	80010a8 <__NVIC_SetPriority>
}
 80011ee:	bf00      	nop
 80011f0:	3718      	adds	r7, #24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b082      	sub	sp, #8
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	4603      	mov	r3, r0
 80011fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff ff31 	bl	800106c <__NVIC_EnableIRQ>
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b082      	sub	sp, #8
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff ffa2 	bl	8001164 <SysTick_Config>
 8001220:	4603      	mov	r3, r0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b084      	sub	sp, #16
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001236:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001238:	f7ff feda 	bl	8000ff0 <HAL_GetTick>
 800123c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b02      	cmp	r3, #2
 8001248:	d008      	beq.n	800125c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2280      	movs	r2, #128	; 0x80
 800124e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e052      	b.n	8001302 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f022 0216 	bic.w	r2, r2, #22
 800126a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	695a      	ldr	r2, [r3, #20]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800127a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001280:	2b00      	cmp	r3, #0
 8001282:	d103      	bne.n	800128c <HAL_DMA_Abort+0x62>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001288:	2b00      	cmp	r3, #0
 800128a:	d007      	beq.n	800129c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f022 0208 	bic.w	r2, r2, #8
 800129a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f022 0201 	bic.w	r2, r2, #1
 80012aa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012ac:	e013      	b.n	80012d6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012ae:	f7ff fe9f 	bl	8000ff0 <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	2b05      	cmp	r3, #5
 80012ba:	d90c      	bls.n	80012d6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2220      	movs	r2, #32
 80012c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2203      	movs	r2, #3
 80012c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e015      	b.n	8001302 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 0301 	and.w	r3, r3, #1
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1e4      	bne.n	80012ae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012e8:	223f      	movs	r2, #63	; 0x3f
 80012ea:	409a      	lsls	r2, r3
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2201      	movs	r2, #1
 80012f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2200      	movs	r2, #0
 80012fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800130a:	b480      	push	{r7}
 800130c:	b083      	sub	sp, #12
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001318:	b2db      	uxtb	r3, r3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d004      	beq.n	8001328 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2280      	movs	r2, #128	; 0x80
 8001322:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e00c      	b.n	8001342 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2205      	movs	r2, #5
 800132c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f022 0201 	bic.w	r2, r2, #1
 800133e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
	...

08001350 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001350:	b480      	push	{r7}
 8001352:	b089      	sub	sp, #36	; 0x24
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800135e:	2300      	movs	r3, #0
 8001360:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001362:	2300      	movs	r3, #0
 8001364:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]
 800136a:	e159      	b.n	8001620 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800136c:	2201      	movs	r2, #1
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	697a      	ldr	r2, [r7, #20]
 800137c:	4013      	ands	r3, r2
 800137e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	429a      	cmp	r2, r3
 8001386:	f040 8148 	bne.w	800161a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 0303 	and.w	r3, r3, #3
 8001392:	2b01      	cmp	r3, #1
 8001394:	d005      	beq.n	80013a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d130      	bne.n	8001404 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	2203      	movs	r2, #3
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43db      	mvns	r3, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4013      	ands	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	68da      	ldr	r2, [r3, #12]
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013d8:	2201      	movs	r2, #1
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43db      	mvns	r3, r3
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4013      	ands	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	091b      	lsrs	r3, r3, #4
 80013ee:	f003 0201 	and.w	r2, r3, #1
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f003 0303 	and.w	r3, r3, #3
 800140c:	2b03      	cmp	r3, #3
 800140e:	d017      	beq.n	8001440 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	2203      	movs	r2, #3
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	689a      	ldr	r2, [r3, #8]
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4313      	orrs	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f003 0303 	and.w	r3, r3, #3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d123      	bne.n	8001494 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	08da      	lsrs	r2, r3, #3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3208      	adds	r2, #8
 8001454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001458:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	f003 0307 	and.w	r3, r3, #7
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	220f      	movs	r2, #15
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	43db      	mvns	r3, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4013      	ands	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	691a      	ldr	r2, [r3, #16]
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4313      	orrs	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	08da      	lsrs	r2, r3, #3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	3208      	adds	r2, #8
 800148e:	69b9      	ldr	r1, [r7, #24]
 8001490:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	2203      	movs	r2, #3
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	43db      	mvns	r3, r3
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4013      	ands	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f003 0203 	and.w	r2, r3, #3
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4313      	orrs	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	f000 80a2 	beq.w	800161a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	4b57      	ldr	r3, [pc, #348]	; (8001638 <HAL_GPIO_Init+0x2e8>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014de:	4a56      	ldr	r2, [pc, #344]	; (8001638 <HAL_GPIO_Init+0x2e8>)
 80014e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014e4:	6453      	str	r3, [r2, #68]	; 0x44
 80014e6:	4b54      	ldr	r3, [pc, #336]	; (8001638 <HAL_GPIO_Init+0x2e8>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014f2:	4a52      	ldr	r2, [pc, #328]	; (800163c <HAL_GPIO_Init+0x2ec>)
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	089b      	lsrs	r3, r3, #2
 80014f8:	3302      	adds	r3, #2
 80014fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	f003 0303 	and.w	r3, r3, #3
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	220f      	movs	r2, #15
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	43db      	mvns	r3, r3
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	4013      	ands	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a49      	ldr	r2, [pc, #292]	; (8001640 <HAL_GPIO_Init+0x2f0>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d019      	beq.n	8001552 <HAL_GPIO_Init+0x202>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a48      	ldr	r2, [pc, #288]	; (8001644 <HAL_GPIO_Init+0x2f4>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d013      	beq.n	800154e <HAL_GPIO_Init+0x1fe>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a47      	ldr	r2, [pc, #284]	; (8001648 <HAL_GPIO_Init+0x2f8>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d00d      	beq.n	800154a <HAL_GPIO_Init+0x1fa>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a46      	ldr	r2, [pc, #280]	; (800164c <HAL_GPIO_Init+0x2fc>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d007      	beq.n	8001546 <HAL_GPIO_Init+0x1f6>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a45      	ldr	r2, [pc, #276]	; (8001650 <HAL_GPIO_Init+0x300>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d101      	bne.n	8001542 <HAL_GPIO_Init+0x1f2>
 800153e:	2304      	movs	r3, #4
 8001540:	e008      	b.n	8001554 <HAL_GPIO_Init+0x204>
 8001542:	2307      	movs	r3, #7
 8001544:	e006      	b.n	8001554 <HAL_GPIO_Init+0x204>
 8001546:	2303      	movs	r3, #3
 8001548:	e004      	b.n	8001554 <HAL_GPIO_Init+0x204>
 800154a:	2302      	movs	r3, #2
 800154c:	e002      	b.n	8001554 <HAL_GPIO_Init+0x204>
 800154e:	2301      	movs	r3, #1
 8001550:	e000      	b.n	8001554 <HAL_GPIO_Init+0x204>
 8001552:	2300      	movs	r3, #0
 8001554:	69fa      	ldr	r2, [r7, #28]
 8001556:	f002 0203 	and.w	r2, r2, #3
 800155a:	0092      	lsls	r2, r2, #2
 800155c:	4093      	lsls	r3, r2
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4313      	orrs	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001564:	4935      	ldr	r1, [pc, #212]	; (800163c <HAL_GPIO_Init+0x2ec>)
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	089b      	lsrs	r3, r3, #2
 800156a:	3302      	adds	r3, #2
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001572:	4b38      	ldr	r3, [pc, #224]	; (8001654 <HAL_GPIO_Init+0x304>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	43db      	mvns	r3, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4013      	ands	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	4313      	orrs	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001596:	4a2f      	ldr	r2, [pc, #188]	; (8001654 <HAL_GPIO_Init+0x304>)
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800159c:	4b2d      	ldr	r3, [pc, #180]	; (8001654 <HAL_GPIO_Init+0x304>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	43db      	mvns	r3, r3
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4013      	ands	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d003      	beq.n	80015c0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	4313      	orrs	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015c0:	4a24      	ldr	r2, [pc, #144]	; (8001654 <HAL_GPIO_Init+0x304>)
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015c6:	4b23      	ldr	r3, [pc, #140]	; (8001654 <HAL_GPIO_Init+0x304>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	43db      	mvns	r3, r3
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	4013      	ands	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d003      	beq.n	80015ea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015ea:	4a1a      	ldr	r2, [pc, #104]	; (8001654 <HAL_GPIO_Init+0x304>)
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015f0:	4b18      	ldr	r3, [pc, #96]	; (8001654 <HAL_GPIO_Init+0x304>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	43db      	mvns	r3, r3
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4013      	ands	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d003      	beq.n	8001614 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	4313      	orrs	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001614:	4a0f      	ldr	r2, [pc, #60]	; (8001654 <HAL_GPIO_Init+0x304>)
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	3301      	adds	r3, #1
 800161e:	61fb      	str	r3, [r7, #28]
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	2b0f      	cmp	r3, #15
 8001624:	f67f aea2 	bls.w	800136c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001628:	bf00      	nop
 800162a:	bf00      	nop
 800162c:	3724      	adds	r7, #36	; 0x24
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	40023800 	.word	0x40023800
 800163c:	40013800 	.word	0x40013800
 8001640:	40020000 	.word	0x40020000
 8001644:	40020400 	.word	0x40020400
 8001648:	40020800 	.word	0x40020800
 800164c:	40020c00 	.word	0x40020c00
 8001650:	40021000 	.word	0x40021000
 8001654:	40013c00 	.word	0x40013c00

08001658 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	807b      	strh	r3, [r7, #2]
 8001664:	4613      	mov	r3, r2
 8001666:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001668:	787b      	ldrb	r3, [r7, #1]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800166e:	887a      	ldrh	r2, [r7, #2]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001674:	e003      	b.n	800167e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001676:	887b      	ldrh	r3, [r7, #2]
 8001678:	041a      	lsls	r2, r3, #16
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	619a      	str	r2, [r3, #24]
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
	...

0800168c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001696:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001698:	695a      	ldr	r2, [r3, #20]
 800169a:	88fb      	ldrh	r3, [r7, #6]
 800169c:	4013      	ands	r3, r2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d006      	beq.n	80016b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016a2:	4a05      	ldr	r2, [pc, #20]	; (80016b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016a4:	88fb      	ldrh	r3, [r7, #6]
 80016a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016a8:	88fb      	ldrh	r3, [r7, #6]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff f93c 	bl	8000928 <HAL_GPIO_EXTI_Callback>
  }
}
 80016b0:	bf00      	nop
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40013c00 	.word	0x40013c00

080016bc <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 80016c0:	4b06      	ldr	r3, [pc, #24]	; (80016dc <HAL_PWR_PVD_IRQHandler+0x20>)
 80016c2:	695b      	ldr	r3, [r3, #20]
 80016c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d005      	beq.n	80016d8 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 80016cc:	f000 f808 	bl	80016e0 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 80016d0:	4b02      	ldr	r3, [pc, #8]	; (80016dc <HAL_PWR_PVD_IRQHandler+0x20>)
 80016d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016d6:	615a      	str	r2, [r3, #20]
  }
}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40013c00 	.word	0x40013c00

080016e0 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
	...

080016f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d101      	bne.n	8001702 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e264      	b.n	8001bcc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	2b00      	cmp	r3, #0
 800170c:	d075      	beq.n	80017fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800170e:	4ba3      	ldr	r3, [pc, #652]	; (800199c <HAL_RCC_OscConfig+0x2ac>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f003 030c 	and.w	r3, r3, #12
 8001716:	2b04      	cmp	r3, #4
 8001718:	d00c      	beq.n	8001734 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800171a:	4ba0      	ldr	r3, [pc, #640]	; (800199c <HAL_RCC_OscConfig+0x2ac>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001722:	2b08      	cmp	r3, #8
 8001724:	d112      	bne.n	800174c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001726:	4b9d      	ldr	r3, [pc, #628]	; (800199c <HAL_RCC_OscConfig+0x2ac>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800172e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001732:	d10b      	bne.n	800174c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001734:	4b99      	ldr	r3, [pc, #612]	; (800199c <HAL_RCC_OscConfig+0x2ac>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d05b      	beq.n	80017f8 <HAL_RCC_OscConfig+0x108>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d157      	bne.n	80017f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e23f      	b.n	8001bcc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001754:	d106      	bne.n	8001764 <HAL_RCC_OscConfig+0x74>
 8001756:	4b91      	ldr	r3, [pc, #580]	; (800199c <HAL_RCC_OscConfig+0x2ac>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a90      	ldr	r2, [pc, #576]	; (800199c <HAL_RCC_OscConfig+0x2ac>)
 800175c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001760:	6013      	str	r3, [r2, #0]
 8001762:	e01d      	b.n	80017a0 <HAL_RCC_OscConfig+0xb0>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800176c:	d10c      	bne.n	8001788 <HAL_RCC_OscConfig+0x98>
 800176e:	4b8b      	ldr	r3, [pc, #556]	; (800199c <HAL_RCC_OscConfig+0x2ac>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a8a      	ldr	r2, [pc, #552]	; (800199c <HAL_RCC_OscConfig+0x2ac>)
 8001774:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001778:	6013      	str	r3, [r2, #0]
 800177a:	4b88      	ldr	r3, [pc, #544]	; (800199c <HAL_RCC_OscConfig+0x2ac>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a87      	ldr	r2, [pc, #540]	; (800199c <HAL_RCC_OscConfig+0x2ac>)
 8001780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001784:	6013      	str	r3, [r2, #0]
 8001786:	e00b      	b.n	80017a0 <HAL_RCC_OscConfig+0xb0>
 8001788:	4b84      	ldr	r3, [pc, #528]	; (800199c <HAL_RCC_OscConfig+0x2ac>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a83      	ldr	r2, [pc, #524]	; (800199c <HAL_RCC_OscConfig+0x2ac>)
 800178e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001792:	6013      	str	r3, [r2, #0]
 8001794:	4b81      	ldr	r3, [pc, #516]	; (800199c <HAL_RCC_OscConfig+0x2ac>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a80      	ldr	r2, [pc, #512]	; (800199c <HAL_RCC_OscConfig+0x2ac>)
 800179a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800179e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d013      	beq.n	80017d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a8:	f7ff fc22 	bl	8000ff0 <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017b0:	f7ff fc1e 	bl	8000ff0 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b64      	cmp	r3, #100	; 0x64
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e204      	b.n	8001bcc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c2:	4b76      	ldr	r3, [pc, #472]	; (800199c <HAL_RCC_OscConfig+0x2ac>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d0f0      	beq.n	80017b0 <HAL_RCC_OscConfig+0xc0>
 80017ce:	e014      	b.n	80017fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d0:	f7ff fc0e 	bl	8000ff0 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017d8:	f7ff fc0a 	bl	8000ff0 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b64      	cmp	r3, #100	; 0x64
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e1f0      	b.n	8001bcc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ea:	4b6c      	ldr	r3, [pc, #432]	; (800199c <HAL_RCC_OscConfig+0x2ac>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1f0      	bne.n	80017d8 <HAL_RCC_OscConfig+0xe8>
 80017f6:	e000      	b.n	80017fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d063      	beq.n	80018ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001806:	4b65      	ldr	r3, [pc, #404]	; (800199c <HAL_RCC_OscConfig+0x2ac>)
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f003 030c 	and.w	r3, r3, #12
 800180e:	2b00      	cmp	r3, #0
 8001810:	d00b      	beq.n	800182a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001812:	4b62      	ldr	r3, [pc, #392]	; (800199c <HAL_RCC_OscConfig+0x2ac>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800181a:	2b08      	cmp	r3, #8
 800181c:	d11c      	bne.n	8001858 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800181e:	4b5f      	ldr	r3, [pc, #380]	; (800199c <HAL_RCC_OscConfig+0x2ac>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d116      	bne.n	8001858 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800182a:	4b5c      	ldr	r3, [pc, #368]	; (800199c <HAL_RCC_OscConfig+0x2ac>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d005      	beq.n	8001842 <HAL_RCC_OscConfig+0x152>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d001      	beq.n	8001842 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e1c4      	b.n	8001bcc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001842:	4b56      	ldr	r3, [pc, #344]	; (800199c <HAL_RCC_OscConfig+0x2ac>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	691b      	ldr	r3, [r3, #16]
 800184e:	00db      	lsls	r3, r3, #3
 8001850:	4952      	ldr	r1, [pc, #328]	; (800199c <HAL_RCC_OscConfig+0x2ac>)
 8001852:	4313      	orrs	r3, r2
 8001854:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001856:	e03a      	b.n	80018ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d020      	beq.n	80018a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001860:	4b4f      	ldr	r3, [pc, #316]	; (80019a0 <HAL_RCC_OscConfig+0x2b0>)
 8001862:	2201      	movs	r2, #1
 8001864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001866:	f7ff fbc3 	bl	8000ff0 <HAL_GetTick>
 800186a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800186c:	e008      	b.n	8001880 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800186e:	f7ff fbbf 	bl	8000ff0 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e1a5      	b.n	8001bcc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001880:	4b46      	ldr	r3, [pc, #280]	; (800199c <HAL_RCC_OscConfig+0x2ac>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0302 	and.w	r3, r3, #2
 8001888:	2b00      	cmp	r3, #0
 800188a:	d0f0      	beq.n	800186e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800188c:	4b43      	ldr	r3, [pc, #268]	; (800199c <HAL_RCC_OscConfig+0x2ac>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	691b      	ldr	r3, [r3, #16]
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	4940      	ldr	r1, [pc, #256]	; (800199c <HAL_RCC_OscConfig+0x2ac>)
 800189c:	4313      	orrs	r3, r2
 800189e:	600b      	str	r3, [r1, #0]
 80018a0:	e015      	b.n	80018ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018a2:	4b3f      	ldr	r3, [pc, #252]	; (80019a0 <HAL_RCC_OscConfig+0x2b0>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a8:	f7ff fba2 	bl	8000ff0 <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018b0:	f7ff fb9e 	bl	8000ff0 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e184      	b.n	8001bcc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018c2:	4b36      	ldr	r3, [pc, #216]	; (800199c <HAL_RCC_OscConfig+0x2ac>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1f0      	bne.n	80018b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0308 	and.w	r3, r3, #8
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d030      	beq.n	800193c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d016      	beq.n	8001910 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018e2:	4b30      	ldr	r3, [pc, #192]	; (80019a4 <HAL_RCC_OscConfig+0x2b4>)
 80018e4:	2201      	movs	r2, #1
 80018e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e8:	f7ff fb82 	bl	8000ff0 <HAL_GetTick>
 80018ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ee:	e008      	b.n	8001902 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018f0:	f7ff fb7e 	bl	8000ff0 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e164      	b.n	8001bcc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001902:	4b26      	ldr	r3, [pc, #152]	; (800199c <HAL_RCC_OscConfig+0x2ac>)
 8001904:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d0f0      	beq.n	80018f0 <HAL_RCC_OscConfig+0x200>
 800190e:	e015      	b.n	800193c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001910:	4b24      	ldr	r3, [pc, #144]	; (80019a4 <HAL_RCC_OscConfig+0x2b4>)
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001916:	f7ff fb6b 	bl	8000ff0 <HAL_GetTick>
 800191a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800191c:	e008      	b.n	8001930 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800191e:	f7ff fb67 	bl	8000ff0 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e14d      	b.n	8001bcc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001930:	4b1a      	ldr	r3, [pc, #104]	; (800199c <HAL_RCC_OscConfig+0x2ac>)
 8001932:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d1f0      	bne.n	800191e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0304 	and.w	r3, r3, #4
 8001944:	2b00      	cmp	r3, #0
 8001946:	f000 80a0 	beq.w	8001a8a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800194a:	2300      	movs	r3, #0
 800194c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800194e:	4b13      	ldr	r3, [pc, #76]	; (800199c <HAL_RCC_OscConfig+0x2ac>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d10f      	bne.n	800197a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	60bb      	str	r3, [r7, #8]
 800195e:	4b0f      	ldr	r3, [pc, #60]	; (800199c <HAL_RCC_OscConfig+0x2ac>)
 8001960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001962:	4a0e      	ldr	r2, [pc, #56]	; (800199c <HAL_RCC_OscConfig+0x2ac>)
 8001964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001968:	6413      	str	r3, [r2, #64]	; 0x40
 800196a:	4b0c      	ldr	r3, [pc, #48]	; (800199c <HAL_RCC_OscConfig+0x2ac>)
 800196c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001972:	60bb      	str	r3, [r7, #8]
 8001974:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001976:	2301      	movs	r3, #1
 8001978:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800197a:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <HAL_RCC_OscConfig+0x2b8>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001982:	2b00      	cmp	r3, #0
 8001984:	d121      	bne.n	80019ca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001986:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <HAL_RCC_OscConfig+0x2b8>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a07      	ldr	r2, [pc, #28]	; (80019a8 <HAL_RCC_OscConfig+0x2b8>)
 800198c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001990:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001992:	f7ff fb2d 	bl	8000ff0 <HAL_GetTick>
 8001996:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001998:	e011      	b.n	80019be <HAL_RCC_OscConfig+0x2ce>
 800199a:	bf00      	nop
 800199c:	40023800 	.word	0x40023800
 80019a0:	42470000 	.word	0x42470000
 80019a4:	42470e80 	.word	0x42470e80
 80019a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ac:	f7ff fb20 	bl	8000ff0 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e106      	b.n	8001bcc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019be:	4b85      	ldr	r3, [pc, #532]	; (8001bd4 <HAL_RCC_OscConfig+0x4e4>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d0f0      	beq.n	80019ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d106      	bne.n	80019e0 <HAL_RCC_OscConfig+0x2f0>
 80019d2:	4b81      	ldr	r3, [pc, #516]	; (8001bd8 <HAL_RCC_OscConfig+0x4e8>)
 80019d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d6:	4a80      	ldr	r2, [pc, #512]	; (8001bd8 <HAL_RCC_OscConfig+0x4e8>)
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	6713      	str	r3, [r2, #112]	; 0x70
 80019de:	e01c      	b.n	8001a1a <HAL_RCC_OscConfig+0x32a>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	2b05      	cmp	r3, #5
 80019e6:	d10c      	bne.n	8001a02 <HAL_RCC_OscConfig+0x312>
 80019e8:	4b7b      	ldr	r3, [pc, #492]	; (8001bd8 <HAL_RCC_OscConfig+0x4e8>)
 80019ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ec:	4a7a      	ldr	r2, [pc, #488]	; (8001bd8 <HAL_RCC_OscConfig+0x4e8>)
 80019ee:	f043 0304 	orr.w	r3, r3, #4
 80019f2:	6713      	str	r3, [r2, #112]	; 0x70
 80019f4:	4b78      	ldr	r3, [pc, #480]	; (8001bd8 <HAL_RCC_OscConfig+0x4e8>)
 80019f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f8:	4a77      	ldr	r2, [pc, #476]	; (8001bd8 <HAL_RCC_OscConfig+0x4e8>)
 80019fa:	f043 0301 	orr.w	r3, r3, #1
 80019fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001a00:	e00b      	b.n	8001a1a <HAL_RCC_OscConfig+0x32a>
 8001a02:	4b75      	ldr	r3, [pc, #468]	; (8001bd8 <HAL_RCC_OscConfig+0x4e8>)
 8001a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a06:	4a74      	ldr	r2, [pc, #464]	; (8001bd8 <HAL_RCC_OscConfig+0x4e8>)
 8001a08:	f023 0301 	bic.w	r3, r3, #1
 8001a0c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a0e:	4b72      	ldr	r3, [pc, #456]	; (8001bd8 <HAL_RCC_OscConfig+0x4e8>)
 8001a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a12:	4a71      	ldr	r2, [pc, #452]	; (8001bd8 <HAL_RCC_OscConfig+0x4e8>)
 8001a14:	f023 0304 	bic.w	r3, r3, #4
 8001a18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d015      	beq.n	8001a4e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a22:	f7ff fae5 	bl	8000ff0 <HAL_GetTick>
 8001a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a28:	e00a      	b.n	8001a40 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a2a:	f7ff fae1 	bl	8000ff0 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e0c5      	b.n	8001bcc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a40:	4b65      	ldr	r3, [pc, #404]	; (8001bd8 <HAL_RCC_OscConfig+0x4e8>)
 8001a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d0ee      	beq.n	8001a2a <HAL_RCC_OscConfig+0x33a>
 8001a4c:	e014      	b.n	8001a78 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a4e:	f7ff facf 	bl	8000ff0 <HAL_GetTick>
 8001a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a54:	e00a      	b.n	8001a6c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a56:	f7ff facb 	bl	8000ff0 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e0af      	b.n	8001bcc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a6c:	4b5a      	ldr	r3, [pc, #360]	; (8001bd8 <HAL_RCC_OscConfig+0x4e8>)
 8001a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d1ee      	bne.n	8001a56 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a78:	7dfb      	ldrb	r3, [r7, #23]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d105      	bne.n	8001a8a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a7e:	4b56      	ldr	r3, [pc, #344]	; (8001bd8 <HAL_RCC_OscConfig+0x4e8>)
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	4a55      	ldr	r2, [pc, #340]	; (8001bd8 <HAL_RCC_OscConfig+0x4e8>)
 8001a84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a88:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f000 809b 	beq.w	8001bca <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a94:	4b50      	ldr	r3, [pc, #320]	; (8001bd8 <HAL_RCC_OscConfig+0x4e8>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 030c 	and.w	r3, r3, #12
 8001a9c:	2b08      	cmp	r3, #8
 8001a9e:	d05c      	beq.n	8001b5a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d141      	bne.n	8001b2c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aa8:	4b4c      	ldr	r3, [pc, #304]	; (8001bdc <HAL_RCC_OscConfig+0x4ec>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aae:	f7ff fa9f 	bl	8000ff0 <HAL_GetTick>
 8001ab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ab4:	e008      	b.n	8001ac8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ab6:	f7ff fa9b 	bl	8000ff0 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e081      	b.n	8001bcc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ac8:	4b43      	ldr	r3, [pc, #268]	; (8001bd8 <HAL_RCC_OscConfig+0x4e8>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1f0      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	69da      	ldr	r2, [r3, #28]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	431a      	orrs	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae2:	019b      	lsls	r3, r3, #6
 8001ae4:	431a      	orrs	r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aea:	085b      	lsrs	r3, r3, #1
 8001aec:	3b01      	subs	r3, #1
 8001aee:	041b      	lsls	r3, r3, #16
 8001af0:	431a      	orrs	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af6:	061b      	lsls	r3, r3, #24
 8001af8:	4937      	ldr	r1, [pc, #220]	; (8001bd8 <HAL_RCC_OscConfig+0x4e8>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001afe:	4b37      	ldr	r3, [pc, #220]	; (8001bdc <HAL_RCC_OscConfig+0x4ec>)
 8001b00:	2201      	movs	r2, #1
 8001b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b04:	f7ff fa74 	bl	8000ff0 <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b0c:	f7ff fa70 	bl	8000ff0 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e056      	b.n	8001bcc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b1e:	4b2e      	ldr	r3, [pc, #184]	; (8001bd8 <HAL_RCC_OscConfig+0x4e8>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d0f0      	beq.n	8001b0c <HAL_RCC_OscConfig+0x41c>
 8001b2a:	e04e      	b.n	8001bca <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b2c:	4b2b      	ldr	r3, [pc, #172]	; (8001bdc <HAL_RCC_OscConfig+0x4ec>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b32:	f7ff fa5d 	bl	8000ff0 <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b38:	e008      	b.n	8001b4c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b3a:	f7ff fa59 	bl	8000ff0 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e03f      	b.n	8001bcc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b4c:	4b22      	ldr	r3, [pc, #136]	; (8001bd8 <HAL_RCC_OscConfig+0x4e8>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1f0      	bne.n	8001b3a <HAL_RCC_OscConfig+0x44a>
 8001b58:	e037      	b.n	8001bca <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d101      	bne.n	8001b66 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e032      	b.n	8001bcc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b66:	4b1c      	ldr	r3, [pc, #112]	; (8001bd8 <HAL_RCC_OscConfig+0x4e8>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d028      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d121      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d11a      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b96:	4013      	ands	r3, r2
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b9c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d111      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bac:	085b      	lsrs	r3, r3, #1
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d107      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d001      	beq.n	8001bca <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e000      	b.n	8001bcc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3718      	adds	r7, #24
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40007000 	.word	0x40007000
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	42470060 	.word	0x42470060

08001be0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d101      	bne.n	8001bf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e0cc      	b.n	8001d8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bf4:	4b68      	ldr	r3, [pc, #416]	; (8001d98 <HAL_RCC_ClockConfig+0x1b8>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0307 	and.w	r3, r3, #7
 8001bfc:	683a      	ldr	r2, [r7, #0]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d90c      	bls.n	8001c1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c02:	4b65      	ldr	r3, [pc, #404]	; (8001d98 <HAL_RCC_ClockConfig+0x1b8>)
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	b2d2      	uxtb	r2, r2
 8001c08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c0a:	4b63      	ldr	r3, [pc, #396]	; (8001d98 <HAL_RCC_ClockConfig+0x1b8>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	683a      	ldr	r2, [r7, #0]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d001      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e0b8      	b.n	8001d8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d020      	beq.n	8001c6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d005      	beq.n	8001c40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c34:	4b59      	ldr	r3, [pc, #356]	; (8001d9c <HAL_RCC_ClockConfig+0x1bc>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	4a58      	ldr	r2, [pc, #352]	; (8001d9c <HAL_RCC_ClockConfig+0x1bc>)
 8001c3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0308 	and.w	r3, r3, #8
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d005      	beq.n	8001c58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c4c:	4b53      	ldr	r3, [pc, #332]	; (8001d9c <HAL_RCC_ClockConfig+0x1bc>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	4a52      	ldr	r2, [pc, #328]	; (8001d9c <HAL_RCC_ClockConfig+0x1bc>)
 8001c52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c58:	4b50      	ldr	r3, [pc, #320]	; (8001d9c <HAL_RCC_ClockConfig+0x1bc>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	494d      	ldr	r1, [pc, #308]	; (8001d9c <HAL_RCC_ClockConfig+0x1bc>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d044      	beq.n	8001d00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d107      	bne.n	8001c8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c7e:	4b47      	ldr	r3, [pc, #284]	; (8001d9c <HAL_RCC_ClockConfig+0x1bc>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d119      	bne.n	8001cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e07f      	b.n	8001d8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d003      	beq.n	8001c9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c9a:	2b03      	cmp	r3, #3
 8001c9c:	d107      	bne.n	8001cae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c9e:	4b3f      	ldr	r3, [pc, #252]	; (8001d9c <HAL_RCC_ClockConfig+0x1bc>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d109      	bne.n	8001cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e06f      	b.n	8001d8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cae:	4b3b      	ldr	r3, [pc, #236]	; (8001d9c <HAL_RCC_ClockConfig+0x1bc>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d101      	bne.n	8001cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e067      	b.n	8001d8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cbe:	4b37      	ldr	r3, [pc, #220]	; (8001d9c <HAL_RCC_ClockConfig+0x1bc>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f023 0203 	bic.w	r2, r3, #3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	4934      	ldr	r1, [pc, #208]	; (8001d9c <HAL_RCC_ClockConfig+0x1bc>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cd0:	f7ff f98e 	bl	8000ff0 <HAL_GetTick>
 8001cd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cd6:	e00a      	b.n	8001cee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cd8:	f7ff f98a 	bl	8000ff0 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e04f      	b.n	8001d8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cee:	4b2b      	ldr	r3, [pc, #172]	; (8001d9c <HAL_RCC_ClockConfig+0x1bc>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f003 020c 	and.w	r2, r3, #12
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d1eb      	bne.n	8001cd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d00:	4b25      	ldr	r3, [pc, #148]	; (8001d98 <HAL_RCC_ClockConfig+0x1b8>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0307 	and.w	r3, r3, #7
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d20c      	bcs.n	8001d28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d0e:	4b22      	ldr	r3, [pc, #136]	; (8001d98 <HAL_RCC_ClockConfig+0x1b8>)
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	b2d2      	uxtb	r2, r2
 8001d14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d16:	4b20      	ldr	r3, [pc, #128]	; (8001d98 <HAL_RCC_ClockConfig+0x1b8>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	683a      	ldr	r2, [r7, #0]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d001      	beq.n	8001d28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e032      	b.n	8001d8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0304 	and.w	r3, r3, #4
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d008      	beq.n	8001d46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d34:	4b19      	ldr	r3, [pc, #100]	; (8001d9c <HAL_RCC_ClockConfig+0x1bc>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	4916      	ldr	r1, [pc, #88]	; (8001d9c <HAL_RCC_ClockConfig+0x1bc>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0308 	and.w	r3, r3, #8
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d009      	beq.n	8001d66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d52:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <HAL_RCC_ClockConfig+0x1bc>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	490e      	ldr	r1, [pc, #56]	; (8001d9c <HAL_RCC_ClockConfig+0x1bc>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d66:	f000 f821 	bl	8001dac <HAL_RCC_GetSysClockFreq>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <HAL_RCC_ClockConfig+0x1bc>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	091b      	lsrs	r3, r3, #4
 8001d72:	f003 030f 	and.w	r3, r3, #15
 8001d76:	490a      	ldr	r1, [pc, #40]	; (8001da0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d78:	5ccb      	ldrb	r3, [r1, r3]
 8001d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d7e:	4a09      	ldr	r2, [pc, #36]	; (8001da4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d82:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <HAL_RCC_ClockConfig+0x1c8>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff f8ee 	bl	8000f68 <HAL_InitTick>

  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40023c00 	.word	0x40023c00
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	080046d8 	.word	0x080046d8
 8001da4:	20000000 	.word	0x20000000
 8001da8:	20000004 	.word	0x20000004

08001dac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001db0:	b084      	sub	sp, #16
 8001db2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001db4:	2300      	movs	r3, #0
 8001db6:	607b      	str	r3, [r7, #4]
 8001db8:	2300      	movs	r3, #0
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dc4:	4b67      	ldr	r3, [pc, #412]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f003 030c 	and.w	r3, r3, #12
 8001dcc:	2b08      	cmp	r3, #8
 8001dce:	d00d      	beq.n	8001dec <HAL_RCC_GetSysClockFreq+0x40>
 8001dd0:	2b08      	cmp	r3, #8
 8001dd2:	f200 80bd 	bhi.w	8001f50 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d002      	beq.n	8001de0 <HAL_RCC_GetSysClockFreq+0x34>
 8001dda:	2b04      	cmp	r3, #4
 8001ddc:	d003      	beq.n	8001de6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001dde:	e0b7      	b.n	8001f50 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001de0:	4b61      	ldr	r3, [pc, #388]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001de2:	60bb      	str	r3, [r7, #8]
       break;
 8001de4:	e0b7      	b.n	8001f56 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001de6:	4b61      	ldr	r3, [pc, #388]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001de8:	60bb      	str	r3, [r7, #8]
      break;
 8001dea:	e0b4      	b.n	8001f56 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dec:	4b5d      	ldr	r3, [pc, #372]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001df4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001df6:	4b5b      	ldr	r3, [pc, #364]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d04d      	beq.n	8001e9e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e02:	4b58      	ldr	r3, [pc, #352]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	099b      	lsrs	r3, r3, #6
 8001e08:	461a      	mov	r2, r3
 8001e0a:	f04f 0300 	mov.w	r3, #0
 8001e0e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e12:	f04f 0100 	mov.w	r1, #0
 8001e16:	ea02 0800 	and.w	r8, r2, r0
 8001e1a:	ea03 0901 	and.w	r9, r3, r1
 8001e1e:	4640      	mov	r0, r8
 8001e20:	4649      	mov	r1, r9
 8001e22:	f04f 0200 	mov.w	r2, #0
 8001e26:	f04f 0300 	mov.w	r3, #0
 8001e2a:	014b      	lsls	r3, r1, #5
 8001e2c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e30:	0142      	lsls	r2, r0, #5
 8001e32:	4610      	mov	r0, r2
 8001e34:	4619      	mov	r1, r3
 8001e36:	ebb0 0008 	subs.w	r0, r0, r8
 8001e3a:	eb61 0109 	sbc.w	r1, r1, r9
 8001e3e:	f04f 0200 	mov.w	r2, #0
 8001e42:	f04f 0300 	mov.w	r3, #0
 8001e46:	018b      	lsls	r3, r1, #6
 8001e48:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e4c:	0182      	lsls	r2, r0, #6
 8001e4e:	1a12      	subs	r2, r2, r0
 8001e50:	eb63 0301 	sbc.w	r3, r3, r1
 8001e54:	f04f 0000 	mov.w	r0, #0
 8001e58:	f04f 0100 	mov.w	r1, #0
 8001e5c:	00d9      	lsls	r1, r3, #3
 8001e5e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e62:	00d0      	lsls	r0, r2, #3
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	eb12 0208 	adds.w	r2, r2, r8
 8001e6c:	eb43 0309 	adc.w	r3, r3, r9
 8001e70:	f04f 0000 	mov.w	r0, #0
 8001e74:	f04f 0100 	mov.w	r1, #0
 8001e78:	0259      	lsls	r1, r3, #9
 8001e7a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001e7e:	0250      	lsls	r0, r2, #9
 8001e80:	4602      	mov	r2, r0
 8001e82:	460b      	mov	r3, r1
 8001e84:	4610      	mov	r0, r2
 8001e86:	4619      	mov	r1, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	f04f 0300 	mov.w	r3, #0
 8001e90:	f7fe f9f6 	bl	8000280 <__aeabi_uldivmod>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	4613      	mov	r3, r2
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	e04a      	b.n	8001f34 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e9e:	4b31      	ldr	r3, [pc, #196]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	099b      	lsrs	r3, r3, #6
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	f04f 0300 	mov.w	r3, #0
 8001eaa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001eae:	f04f 0100 	mov.w	r1, #0
 8001eb2:	ea02 0400 	and.w	r4, r2, r0
 8001eb6:	ea03 0501 	and.w	r5, r3, r1
 8001eba:	4620      	mov	r0, r4
 8001ebc:	4629      	mov	r1, r5
 8001ebe:	f04f 0200 	mov.w	r2, #0
 8001ec2:	f04f 0300 	mov.w	r3, #0
 8001ec6:	014b      	lsls	r3, r1, #5
 8001ec8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ecc:	0142      	lsls	r2, r0, #5
 8001ece:	4610      	mov	r0, r2
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	1b00      	subs	r0, r0, r4
 8001ed4:	eb61 0105 	sbc.w	r1, r1, r5
 8001ed8:	f04f 0200 	mov.w	r2, #0
 8001edc:	f04f 0300 	mov.w	r3, #0
 8001ee0:	018b      	lsls	r3, r1, #6
 8001ee2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ee6:	0182      	lsls	r2, r0, #6
 8001ee8:	1a12      	subs	r2, r2, r0
 8001eea:	eb63 0301 	sbc.w	r3, r3, r1
 8001eee:	f04f 0000 	mov.w	r0, #0
 8001ef2:	f04f 0100 	mov.w	r1, #0
 8001ef6:	00d9      	lsls	r1, r3, #3
 8001ef8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001efc:	00d0      	lsls	r0, r2, #3
 8001efe:	4602      	mov	r2, r0
 8001f00:	460b      	mov	r3, r1
 8001f02:	1912      	adds	r2, r2, r4
 8001f04:	eb45 0303 	adc.w	r3, r5, r3
 8001f08:	f04f 0000 	mov.w	r0, #0
 8001f0c:	f04f 0100 	mov.w	r1, #0
 8001f10:	0299      	lsls	r1, r3, #10
 8001f12:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001f16:	0290      	lsls	r0, r2, #10
 8001f18:	4602      	mov	r2, r0
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	4610      	mov	r0, r2
 8001f1e:	4619      	mov	r1, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	461a      	mov	r2, r3
 8001f24:	f04f 0300 	mov.w	r3, #0
 8001f28:	f7fe f9aa 	bl	8000280 <__aeabi_uldivmod>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	460b      	mov	r3, r1
 8001f30:	4613      	mov	r3, r2
 8001f32:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f34:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	0c1b      	lsrs	r3, r3, #16
 8001f3a:	f003 0303 	and.w	r3, r3, #3
 8001f3e:	3301      	adds	r3, #1
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f4c:	60bb      	str	r3, [r7, #8]
      break;
 8001f4e:	e002      	b.n	8001f56 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f50:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001f52:	60bb      	str	r3, [r7, #8]
      break;
 8001f54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f56:	68bb      	ldr	r3, [r7, #8]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3710      	adds	r7, #16
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001f62:	bf00      	nop
 8001f64:	40023800 	.word	0x40023800
 8001f68:	00f42400 	.word	0x00f42400
 8001f6c:	007a1200 	.word	0x007a1200

08001f70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f74:	4b03      	ldr	r3, [pc, #12]	; (8001f84 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f76:	681b      	ldr	r3, [r3, #0]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	20000000 	.word	0x20000000

08001f88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f8c:	f7ff fff0 	bl	8001f70 <HAL_RCC_GetHCLKFreq>
 8001f90:	4602      	mov	r2, r0
 8001f92:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	0a9b      	lsrs	r3, r3, #10
 8001f98:	f003 0307 	and.w	r3, r3, #7
 8001f9c:	4903      	ldr	r1, [pc, #12]	; (8001fac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f9e:	5ccb      	ldrb	r3, [r1, r3]
 8001fa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	080046e8 	.word	0x080046e8

08001fb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001fb4:	f7ff ffdc 	bl	8001f70 <HAL_RCC_GetHCLKFreq>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	0b5b      	lsrs	r3, r3, #13
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	4903      	ldr	r1, [pc, #12]	; (8001fd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fc6:	5ccb      	ldrb	r3, [r1, r3]
 8001fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	080046e8 	.word	0x080046e8

08001fd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e041      	b.n	800206e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d106      	bne.n	8002004 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7fe fe94 	bl	8000d2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2202      	movs	r2, #2
 8002008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3304      	adds	r3, #4
 8002014:	4619      	mov	r1, r3
 8002016:	4610      	mov	r0, r2
 8002018:	f000 fac0 	bl	800259c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e041      	b.n	800210c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2b00      	cmp	r3, #0
 8002092:	d106      	bne.n	80020a2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 f839 	bl	8002114 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2202      	movs	r2, #2
 80020a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	3304      	adds	r3, #4
 80020b2:	4619      	mov	r1, r3
 80020b4:	4610      	mov	r0, r2
 80020b6:	f000 fa71 	bl	800259c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2201      	movs	r2, #1
 80020be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2201      	movs	r2, #1
 80020c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2201      	movs	r2, #1
 80020d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2201      	movs	r2, #1
 80020f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2201      	movs	r2, #1
 80020fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d109      	bne.n	800214c <HAL_TIM_PWM_Start+0x24>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2b01      	cmp	r3, #1
 8002142:	bf14      	ite	ne
 8002144:	2301      	movne	r3, #1
 8002146:	2300      	moveq	r3, #0
 8002148:	b2db      	uxtb	r3, r3
 800214a:	e022      	b.n	8002192 <HAL_TIM_PWM_Start+0x6a>
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	2b04      	cmp	r3, #4
 8002150:	d109      	bne.n	8002166 <HAL_TIM_PWM_Start+0x3e>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b01      	cmp	r3, #1
 800215c:	bf14      	ite	ne
 800215e:	2301      	movne	r3, #1
 8002160:	2300      	moveq	r3, #0
 8002162:	b2db      	uxtb	r3, r3
 8002164:	e015      	b.n	8002192 <HAL_TIM_PWM_Start+0x6a>
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	2b08      	cmp	r3, #8
 800216a:	d109      	bne.n	8002180 <HAL_TIM_PWM_Start+0x58>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b01      	cmp	r3, #1
 8002176:	bf14      	ite	ne
 8002178:	2301      	movne	r3, #1
 800217a:	2300      	moveq	r3, #0
 800217c:	b2db      	uxtb	r3, r3
 800217e:	e008      	b.n	8002192 <HAL_TIM_PWM_Start+0x6a>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002186:	b2db      	uxtb	r3, r3
 8002188:	2b01      	cmp	r3, #1
 800218a:	bf14      	ite	ne
 800218c:	2301      	movne	r3, #1
 800218e:	2300      	moveq	r3, #0
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e068      	b.n	800226c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d104      	bne.n	80021aa <HAL_TIM_PWM_Start+0x82>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2202      	movs	r2, #2
 80021a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021a8:	e013      	b.n	80021d2 <HAL_TIM_PWM_Start+0xaa>
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	2b04      	cmp	r3, #4
 80021ae:	d104      	bne.n	80021ba <HAL_TIM_PWM_Start+0x92>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2202      	movs	r2, #2
 80021b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021b8:	e00b      	b.n	80021d2 <HAL_TIM_PWM_Start+0xaa>
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	2b08      	cmp	r3, #8
 80021be:	d104      	bne.n	80021ca <HAL_TIM_PWM_Start+0xa2>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2202      	movs	r2, #2
 80021c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021c8:	e003      	b.n	80021d2 <HAL_TIM_PWM_Start+0xaa>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2202      	movs	r2, #2
 80021ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2201      	movs	r2, #1
 80021d8:	6839      	ldr	r1, [r7, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f000 fc84 	bl	8002ae8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a23      	ldr	r2, [pc, #140]	; (8002274 <HAL_TIM_PWM_Start+0x14c>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d107      	bne.n	80021fa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a1d      	ldr	r2, [pc, #116]	; (8002274 <HAL_TIM_PWM_Start+0x14c>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d018      	beq.n	8002236 <HAL_TIM_PWM_Start+0x10e>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800220c:	d013      	beq.n	8002236 <HAL_TIM_PWM_Start+0x10e>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a19      	ldr	r2, [pc, #100]	; (8002278 <HAL_TIM_PWM_Start+0x150>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d00e      	beq.n	8002236 <HAL_TIM_PWM_Start+0x10e>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a17      	ldr	r2, [pc, #92]	; (800227c <HAL_TIM_PWM_Start+0x154>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d009      	beq.n	8002236 <HAL_TIM_PWM_Start+0x10e>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a16      	ldr	r2, [pc, #88]	; (8002280 <HAL_TIM_PWM_Start+0x158>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d004      	beq.n	8002236 <HAL_TIM_PWM_Start+0x10e>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a14      	ldr	r2, [pc, #80]	; (8002284 <HAL_TIM_PWM_Start+0x15c>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d111      	bne.n	800225a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f003 0307 	and.w	r3, r3, #7
 8002240:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2b06      	cmp	r3, #6
 8002246:	d010      	beq.n	800226a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f042 0201 	orr.w	r2, r2, #1
 8002256:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002258:	e007      	b.n	800226a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f042 0201 	orr.w	r2, r2, #1
 8002268:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	3710      	adds	r7, #16
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40010000 	.word	0x40010000
 8002278:	40000400 	.word	0x40000400
 800227c:	40000800 	.word	0x40000800
 8002280:	40000c00 	.word	0x40000c00
 8002284:	40014000 	.word	0x40014000

08002288 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002294:	2300      	movs	r3, #0
 8002296:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d101      	bne.n	80022a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80022a2:	2302      	movs	r3, #2
 80022a4:	e0ae      	b.n	8002404 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2201      	movs	r2, #1
 80022aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b0c      	cmp	r3, #12
 80022b2:	f200 809f 	bhi.w	80023f4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80022b6:	a201      	add	r2, pc, #4	; (adr r2, 80022bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80022b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022bc:	080022f1 	.word	0x080022f1
 80022c0:	080023f5 	.word	0x080023f5
 80022c4:	080023f5 	.word	0x080023f5
 80022c8:	080023f5 	.word	0x080023f5
 80022cc:	08002331 	.word	0x08002331
 80022d0:	080023f5 	.word	0x080023f5
 80022d4:	080023f5 	.word	0x080023f5
 80022d8:	080023f5 	.word	0x080023f5
 80022dc:	08002373 	.word	0x08002373
 80022e0:	080023f5 	.word	0x080023f5
 80022e4:	080023f5 	.word	0x080023f5
 80022e8:	080023f5 	.word	0x080023f5
 80022ec:	080023b3 	.word	0x080023b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68b9      	ldr	r1, [r7, #8]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 f9d0 	bl	800269c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	699a      	ldr	r2, [r3, #24]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 0208 	orr.w	r2, r2, #8
 800230a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	699a      	ldr	r2, [r3, #24]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f022 0204 	bic.w	r2, r2, #4
 800231a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6999      	ldr	r1, [r3, #24]
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	691a      	ldr	r2, [r3, #16]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	430a      	orrs	r2, r1
 800232c:	619a      	str	r2, [r3, #24]
      break;
 800232e:	e064      	b.n	80023fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68b9      	ldr	r1, [r7, #8]
 8002336:	4618      	mov	r0, r3
 8002338:	f000 fa16 	bl	8002768 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	699a      	ldr	r2, [r3, #24]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800234a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	699a      	ldr	r2, [r3, #24]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800235a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6999      	ldr	r1, [r3, #24]
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	021a      	lsls	r2, r3, #8
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	430a      	orrs	r2, r1
 800236e:	619a      	str	r2, [r3, #24]
      break;
 8002370:	e043      	b.n	80023fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68b9      	ldr	r1, [r7, #8]
 8002378:	4618      	mov	r0, r3
 800237a:	f000 fa61 	bl	8002840 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	69da      	ldr	r2, [r3, #28]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f042 0208 	orr.w	r2, r2, #8
 800238c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	69da      	ldr	r2, [r3, #28]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 0204 	bic.w	r2, r2, #4
 800239c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	69d9      	ldr	r1, [r3, #28]
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	691a      	ldr	r2, [r3, #16]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	430a      	orrs	r2, r1
 80023ae:	61da      	str	r2, [r3, #28]
      break;
 80023b0:	e023      	b.n	80023fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68b9      	ldr	r1, [r7, #8]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f000 faab 	bl	8002914 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	69da      	ldr	r2, [r3, #28]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	69da      	ldr	r2, [r3, #28]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	69d9      	ldr	r1, [r3, #28]
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	021a      	lsls	r2, r3, #8
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	430a      	orrs	r2, r1
 80023f0:	61da      	str	r2, [r3, #28]
      break;
 80023f2:	e002      	b.n	80023fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	75fb      	strb	r3, [r7, #23]
      break;
 80023f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002402:	7dfb      	ldrb	r3, [r7, #23]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002416:	2300      	movs	r3, #0
 8002418:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002420:	2b01      	cmp	r3, #1
 8002422:	d101      	bne.n	8002428 <HAL_TIM_ConfigClockSource+0x1c>
 8002424:	2302      	movs	r3, #2
 8002426:	e0b4      	b.n	8002592 <HAL_TIM_ConfigClockSource+0x186>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2202      	movs	r2, #2
 8002434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002446:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800244e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68ba      	ldr	r2, [r7, #8]
 8002456:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002460:	d03e      	beq.n	80024e0 <HAL_TIM_ConfigClockSource+0xd4>
 8002462:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002466:	f200 8087 	bhi.w	8002578 <HAL_TIM_ConfigClockSource+0x16c>
 800246a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800246e:	f000 8086 	beq.w	800257e <HAL_TIM_ConfigClockSource+0x172>
 8002472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002476:	d87f      	bhi.n	8002578 <HAL_TIM_ConfigClockSource+0x16c>
 8002478:	2b70      	cmp	r3, #112	; 0x70
 800247a:	d01a      	beq.n	80024b2 <HAL_TIM_ConfigClockSource+0xa6>
 800247c:	2b70      	cmp	r3, #112	; 0x70
 800247e:	d87b      	bhi.n	8002578 <HAL_TIM_ConfigClockSource+0x16c>
 8002480:	2b60      	cmp	r3, #96	; 0x60
 8002482:	d050      	beq.n	8002526 <HAL_TIM_ConfigClockSource+0x11a>
 8002484:	2b60      	cmp	r3, #96	; 0x60
 8002486:	d877      	bhi.n	8002578 <HAL_TIM_ConfigClockSource+0x16c>
 8002488:	2b50      	cmp	r3, #80	; 0x50
 800248a:	d03c      	beq.n	8002506 <HAL_TIM_ConfigClockSource+0xfa>
 800248c:	2b50      	cmp	r3, #80	; 0x50
 800248e:	d873      	bhi.n	8002578 <HAL_TIM_ConfigClockSource+0x16c>
 8002490:	2b40      	cmp	r3, #64	; 0x40
 8002492:	d058      	beq.n	8002546 <HAL_TIM_ConfigClockSource+0x13a>
 8002494:	2b40      	cmp	r3, #64	; 0x40
 8002496:	d86f      	bhi.n	8002578 <HAL_TIM_ConfigClockSource+0x16c>
 8002498:	2b30      	cmp	r3, #48	; 0x30
 800249a:	d064      	beq.n	8002566 <HAL_TIM_ConfigClockSource+0x15a>
 800249c:	2b30      	cmp	r3, #48	; 0x30
 800249e:	d86b      	bhi.n	8002578 <HAL_TIM_ConfigClockSource+0x16c>
 80024a0:	2b20      	cmp	r3, #32
 80024a2:	d060      	beq.n	8002566 <HAL_TIM_ConfigClockSource+0x15a>
 80024a4:	2b20      	cmp	r3, #32
 80024a6:	d867      	bhi.n	8002578 <HAL_TIM_ConfigClockSource+0x16c>
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d05c      	beq.n	8002566 <HAL_TIM_ConfigClockSource+0x15a>
 80024ac:	2b10      	cmp	r3, #16
 80024ae:	d05a      	beq.n	8002566 <HAL_TIM_ConfigClockSource+0x15a>
 80024b0:	e062      	b.n	8002578 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6818      	ldr	r0, [r3, #0]
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	6899      	ldr	r1, [r3, #8]
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685a      	ldr	r2, [r3, #4]
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	f000 faf1 	bl	8002aa8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80024d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68ba      	ldr	r2, [r7, #8]
 80024dc:	609a      	str	r2, [r3, #8]
      break;
 80024de:	e04f      	b.n	8002580 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6818      	ldr	r0, [r3, #0]
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	6899      	ldr	r1, [r3, #8]
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	f000 fada 	bl	8002aa8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	689a      	ldr	r2, [r3, #8]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002502:	609a      	str	r2, [r3, #8]
      break;
 8002504:	e03c      	b.n	8002580 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6818      	ldr	r0, [r3, #0]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	6859      	ldr	r1, [r3, #4]
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	461a      	mov	r2, r3
 8002514:	f000 fa4e 	bl	80029b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2150      	movs	r1, #80	; 0x50
 800251e:	4618      	mov	r0, r3
 8002520:	f000 faa7 	bl	8002a72 <TIM_ITRx_SetConfig>
      break;
 8002524:	e02c      	b.n	8002580 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6818      	ldr	r0, [r3, #0]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	6859      	ldr	r1, [r3, #4]
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	461a      	mov	r2, r3
 8002534:	f000 fa6d 	bl	8002a12 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2160      	movs	r1, #96	; 0x60
 800253e:	4618      	mov	r0, r3
 8002540:	f000 fa97 	bl	8002a72 <TIM_ITRx_SetConfig>
      break;
 8002544:	e01c      	b.n	8002580 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6818      	ldr	r0, [r3, #0]
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	6859      	ldr	r1, [r3, #4]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	461a      	mov	r2, r3
 8002554:	f000 fa2e 	bl	80029b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2140      	movs	r1, #64	; 0x40
 800255e:	4618      	mov	r0, r3
 8002560:	f000 fa87 	bl	8002a72 <TIM_ITRx_SetConfig>
      break;
 8002564:	e00c      	b.n	8002580 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4619      	mov	r1, r3
 8002570:	4610      	mov	r0, r2
 8002572:	f000 fa7e 	bl	8002a72 <TIM_ITRx_SetConfig>
      break;
 8002576:	e003      	b.n	8002580 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	73fb      	strb	r3, [r7, #15]
      break;
 800257c:	e000      	b.n	8002580 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800257e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002590:	7bfb      	ldrb	r3, [r7, #15]
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
	...

0800259c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a34      	ldr	r2, [pc, #208]	; (8002680 <TIM_Base_SetConfig+0xe4>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d00f      	beq.n	80025d4 <TIM_Base_SetConfig+0x38>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ba:	d00b      	beq.n	80025d4 <TIM_Base_SetConfig+0x38>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a31      	ldr	r2, [pc, #196]	; (8002684 <TIM_Base_SetConfig+0xe8>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d007      	beq.n	80025d4 <TIM_Base_SetConfig+0x38>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a30      	ldr	r2, [pc, #192]	; (8002688 <TIM_Base_SetConfig+0xec>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d003      	beq.n	80025d4 <TIM_Base_SetConfig+0x38>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a2f      	ldr	r2, [pc, #188]	; (800268c <TIM_Base_SetConfig+0xf0>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d108      	bne.n	80025e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a25      	ldr	r2, [pc, #148]	; (8002680 <TIM_Base_SetConfig+0xe4>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d01b      	beq.n	8002626 <TIM_Base_SetConfig+0x8a>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025f4:	d017      	beq.n	8002626 <TIM_Base_SetConfig+0x8a>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a22      	ldr	r2, [pc, #136]	; (8002684 <TIM_Base_SetConfig+0xe8>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d013      	beq.n	8002626 <TIM_Base_SetConfig+0x8a>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a21      	ldr	r2, [pc, #132]	; (8002688 <TIM_Base_SetConfig+0xec>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d00f      	beq.n	8002626 <TIM_Base_SetConfig+0x8a>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a20      	ldr	r2, [pc, #128]	; (800268c <TIM_Base_SetConfig+0xf0>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d00b      	beq.n	8002626 <TIM_Base_SetConfig+0x8a>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a1f      	ldr	r2, [pc, #124]	; (8002690 <TIM_Base_SetConfig+0xf4>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d007      	beq.n	8002626 <TIM_Base_SetConfig+0x8a>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a1e      	ldr	r2, [pc, #120]	; (8002694 <TIM_Base_SetConfig+0xf8>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d003      	beq.n	8002626 <TIM_Base_SetConfig+0x8a>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a1d      	ldr	r2, [pc, #116]	; (8002698 <TIM_Base_SetConfig+0xfc>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d108      	bne.n	8002638 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800262c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	4313      	orrs	r3, r2
 8002636:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	4313      	orrs	r3, r2
 8002644:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a08      	ldr	r2, [pc, #32]	; (8002680 <TIM_Base_SetConfig+0xe4>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d103      	bne.n	800266c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	691a      	ldr	r2, [r3, #16]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	615a      	str	r2, [r3, #20]
}
 8002672:	bf00      	nop
 8002674:	3714      	adds	r7, #20
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	40010000 	.word	0x40010000
 8002684:	40000400 	.word	0x40000400
 8002688:	40000800 	.word	0x40000800
 800268c:	40000c00 	.word	0x40000c00
 8002690:	40014000 	.word	0x40014000
 8002694:	40014400 	.word	0x40014400
 8002698:	40014800 	.word	0x40014800

0800269c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800269c:	b480      	push	{r7}
 800269e:	b087      	sub	sp, #28
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	f023 0201 	bic.w	r2, r3, #1
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a1b      	ldr	r3, [r3, #32]
 80026b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f023 0303 	bic.w	r3, r3, #3
 80026d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	4313      	orrs	r3, r2
 80026dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	f023 0302 	bic.w	r3, r3, #2
 80026e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a1c      	ldr	r2, [pc, #112]	; (8002764 <TIM_OC1_SetConfig+0xc8>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d10c      	bne.n	8002712 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	f023 0308 	bic.w	r3, r3, #8
 80026fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	697a      	ldr	r2, [r7, #20]
 8002706:	4313      	orrs	r3, r2
 8002708:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	f023 0304 	bic.w	r3, r3, #4
 8002710:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a13      	ldr	r2, [pc, #76]	; (8002764 <TIM_OC1_SetConfig+0xc8>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d111      	bne.n	800273e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002720:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002728:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	4313      	orrs	r3, r2
 8002732:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	4313      	orrs	r3, r2
 800273c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685a      	ldr	r2, [r3, #4]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	621a      	str	r2, [r3, #32]
}
 8002758:	bf00      	nop
 800275a:	371c      	adds	r7, #28
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	40010000 	.word	0x40010000

08002768 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002768:	b480      	push	{r7}
 800276a:	b087      	sub	sp, #28
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a1b      	ldr	r3, [r3, #32]
 8002776:	f023 0210 	bic.w	r2, r3, #16
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800279e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	021b      	lsls	r3, r3, #8
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	f023 0320 	bic.w	r3, r3, #32
 80027b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	011b      	lsls	r3, r3, #4
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	4313      	orrs	r3, r2
 80027be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4a1e      	ldr	r2, [pc, #120]	; (800283c <TIM_OC2_SetConfig+0xd4>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d10d      	bne.n	80027e4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	011b      	lsls	r3, r3, #4
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	4313      	orrs	r3, r2
 80027da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a15      	ldr	r2, [pc, #84]	; (800283c <TIM_OC2_SetConfig+0xd4>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d113      	bne.n	8002814 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80027fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	4313      	orrs	r3, r2
 8002806:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	4313      	orrs	r3, r2
 8002812:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	621a      	str	r2, [r3, #32]
}
 800282e:	bf00      	nop
 8002830:	371c      	adds	r7, #28
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	40010000 	.word	0x40010000

08002840 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002840:	b480      	push	{r7}
 8002842:	b087      	sub	sp, #28
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800286e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f023 0303 	bic.w	r3, r3, #3
 8002876:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	4313      	orrs	r3, r2
 8002880:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002888:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	021b      	lsls	r3, r3, #8
 8002890:	697a      	ldr	r2, [r7, #20]
 8002892:	4313      	orrs	r3, r2
 8002894:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a1d      	ldr	r2, [pc, #116]	; (8002910 <TIM_OC3_SetConfig+0xd0>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d10d      	bne.n	80028ba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	021b      	lsls	r3, r3, #8
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80028b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a14      	ldr	r2, [pc, #80]	; (8002910 <TIM_OC3_SetConfig+0xd0>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d113      	bne.n	80028ea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80028d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	011b      	lsls	r3, r3, #4
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	4313      	orrs	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	011b      	lsls	r3, r3, #4
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685a      	ldr	r2, [r3, #4]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	621a      	str	r2, [r3, #32]
}
 8002904:	bf00      	nop
 8002906:	371c      	adds	r7, #28
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	40010000 	.word	0x40010000

08002914 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002914:	b480      	push	{r7}
 8002916:	b087      	sub	sp, #28
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800294a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	021b      	lsls	r3, r3, #8
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	4313      	orrs	r3, r2
 8002956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800295e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	031b      	lsls	r3, r3, #12
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	4313      	orrs	r3, r2
 800296a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a10      	ldr	r2, [pc, #64]	; (80029b0 <TIM_OC4_SetConfig+0x9c>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d109      	bne.n	8002988 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800297a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	695b      	ldr	r3, [r3, #20]
 8002980:	019b      	lsls	r3, r3, #6
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	4313      	orrs	r3, r2
 8002986:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685a      	ldr	r2, [r3, #4]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	621a      	str	r2, [r3, #32]
}
 80029a2:	bf00      	nop
 80029a4:	371c      	adds	r7, #28
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	40010000 	.word	0x40010000

080029b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b087      	sub	sp, #28
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	f023 0201 	bic.w	r2, r3, #1
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	011b      	lsls	r3, r3, #4
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	f023 030a 	bic.w	r3, r3, #10
 80029f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	621a      	str	r2, [r3, #32]
}
 8002a06:	bf00      	nop
 8002a08:	371c      	adds	r7, #28
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b087      	sub	sp, #28
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	60f8      	str	r0, [r7, #12]
 8002a1a:	60b9      	str	r1, [r7, #8]
 8002a1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	f023 0210 	bic.w	r2, r3, #16
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	031b      	lsls	r3, r3, #12
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	011b      	lsls	r3, r3, #4
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	621a      	str	r2, [r3, #32]
}
 8002a66:	bf00      	nop
 8002a68:	371c      	adds	r7, #28
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b085      	sub	sp, #20
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
 8002a7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	f043 0307 	orr.w	r3, r3, #7
 8002a94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	609a      	str	r2, [r3, #8]
}
 8002a9c:	bf00      	nop
 8002a9e:	3714      	adds	r7, #20
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b087      	sub	sp, #28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
 8002ab4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ac2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	021a      	lsls	r2, r3, #8
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	431a      	orrs	r2, r3
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	609a      	str	r2, [r3, #8]
}
 8002adc:	bf00      	nop
 8002ade:	371c      	adds	r7, #28
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b087      	sub	sp, #28
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	f003 031f 	and.w	r3, r3, #31
 8002afa:	2201      	movs	r2, #1
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6a1a      	ldr	r2, [r3, #32]
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	401a      	ands	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6a1a      	ldr	r2, [r3, #32]
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	f003 031f 	and.w	r3, r3, #31
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b20:	431a      	orrs	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	621a      	str	r2, [r3, #32]
}
 8002b26:	bf00      	nop
 8002b28:	371c      	adds	r7, #28
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
	...

08002b34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d101      	bne.n	8002b4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b48:	2302      	movs	r3, #2
 8002b4a:	e050      	b.n	8002bee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2202      	movs	r2, #2
 8002b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a1c      	ldr	r2, [pc, #112]	; (8002bfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d018      	beq.n	8002bc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b98:	d013      	beq.n	8002bc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a18      	ldr	r2, [pc, #96]	; (8002c00 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d00e      	beq.n	8002bc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a16      	ldr	r2, [pc, #88]	; (8002c04 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d009      	beq.n	8002bc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a15      	ldr	r2, [pc, #84]	; (8002c08 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d004      	beq.n	8002bc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a13      	ldr	r2, [pc, #76]	; (8002c0c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d10c      	bne.n	8002bdc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	68ba      	ldr	r2, [r7, #8]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68ba      	ldr	r2, [r7, #8]
 8002bda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3714      	adds	r7, #20
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	40010000 	.word	0x40010000
 8002c00:	40000400 	.word	0x40000400
 8002c04:	40000800 	.word	0x40000800
 8002c08:	40000c00 	.word	0x40000c00
 8002c0c:	40014000 	.word	0x40014000

08002c10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e03f      	b.n	8002ca2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d106      	bne.n	8002c3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7fe f8fa 	bl	8000e30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2224      	movs	r2, #36	; 0x24
 8002c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68da      	ldr	r2, [r3, #12]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f000 fe9b 	bl	8003990 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	691a      	ldr	r2, [r3, #16]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	695a      	ldr	r2, [r3, #20]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68da      	ldr	r2, [r3, #12]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2220      	movs	r2, #32
 8002c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b08a      	sub	sp, #40	; 0x28
 8002cae:	af02      	add	r7, sp, #8
 8002cb0:	60f8      	str	r0, [r7, #12]
 8002cb2:	60b9      	str	r1, [r7, #8]
 8002cb4:	603b      	str	r3, [r7, #0]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b20      	cmp	r3, #32
 8002cc8:	d17c      	bne.n	8002dc4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d002      	beq.n	8002cd6 <HAL_UART_Transmit+0x2c>
 8002cd0:	88fb      	ldrh	r3, [r7, #6]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e075      	b.n	8002dc6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d101      	bne.n	8002ce8 <HAL_UART_Transmit+0x3e>
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	e06e      	b.n	8002dc6 <HAL_UART_Transmit+0x11c>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2221      	movs	r2, #33	; 0x21
 8002cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cfe:	f7fe f977 	bl	8000ff0 <HAL_GetTick>
 8002d02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	88fa      	ldrh	r2, [r7, #6]
 8002d08:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	88fa      	ldrh	r2, [r7, #6]
 8002d0e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d18:	d108      	bne.n	8002d2c <HAL_UART_Transmit+0x82>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d104      	bne.n	8002d2c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002d22:	2300      	movs	r3, #0
 8002d24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	61bb      	str	r3, [r7, #24]
 8002d2a:	e003      	b.n	8002d34 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d30:	2300      	movs	r3, #0
 8002d32:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002d3c:	e02a      	b.n	8002d94 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	9300      	str	r3, [sp, #0]
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	2200      	movs	r2, #0
 8002d46:	2180      	movs	r1, #128	; 0x80
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f000 fbdf 	bl	800350c <UART_WaitOnFlagUntilTimeout>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e036      	b.n	8002dc6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10b      	bne.n	8002d76 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	881b      	ldrh	r3, [r3, #0]
 8002d62:	461a      	mov	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d6c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	3302      	adds	r3, #2
 8002d72:	61bb      	str	r3, [r7, #24]
 8002d74:	e007      	b.n	8002d86 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	781a      	ldrb	r2, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	3301      	adds	r3, #1
 8002d84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1cf      	bne.n	8002d3e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	9300      	str	r3, [sp, #0]
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	2200      	movs	r2, #0
 8002da6:	2140      	movs	r1, #64	; 0x40
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f000 fbaf 	bl	800350c <UART_WaitOnFlagUntilTimeout>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e006      	b.n	8002dc6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2220      	movs	r2, #32
 8002dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	e000      	b.n	8002dc6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002dc4:	2302      	movs	r3, #2
  }
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3720      	adds	r7, #32
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b08a      	sub	sp, #40	; 0x28
 8002dd2:	af02      	add	r7, sp, #8
 8002dd4:	60f8      	str	r0, [r7, #12]
 8002dd6:	60b9      	str	r1, [r7, #8]
 8002dd8:	603b      	str	r3, [r7, #0]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002dde:	2300      	movs	r3, #0
 8002de0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b20      	cmp	r3, #32
 8002dec:	f040 808c 	bne.w	8002f08 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d002      	beq.n	8002dfc <HAL_UART_Receive+0x2e>
 8002df6:	88fb      	ldrh	r3, [r7, #6]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d101      	bne.n	8002e00 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e084      	b.n	8002f0a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d101      	bne.n	8002e0e <HAL_UART_Receive+0x40>
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	e07d      	b.n	8002f0a <HAL_UART_Receive+0x13c>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2222      	movs	r2, #34	; 0x22
 8002e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e2a:	f7fe f8e1 	bl	8000ff0 <HAL_GetTick>
 8002e2e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	88fa      	ldrh	r2, [r7, #6]
 8002e34:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	88fa      	ldrh	r2, [r7, #6]
 8002e3a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e44:	d108      	bne.n	8002e58 <HAL_UART_Receive+0x8a>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d104      	bne.n	8002e58 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	61bb      	str	r3, [r7, #24]
 8002e56:	e003      	b.n	8002e60 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002e68:	e043      	b.n	8002ef2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	2200      	movs	r2, #0
 8002e72:	2120      	movs	r1, #32
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f000 fb49 	bl	800350c <UART_WaitOnFlagUntilTimeout>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e042      	b.n	8002f0a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10c      	bne.n	8002ea4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	3302      	adds	r3, #2
 8002ea0:	61bb      	str	r3, [r7, #24]
 8002ea2:	e01f      	b.n	8002ee4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eac:	d007      	beq.n	8002ebe <HAL_UART_Receive+0xf0>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10a      	bne.n	8002ecc <HAL_UART_Receive+0xfe>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d106      	bne.n	8002ecc <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	701a      	strb	r2, [r3, #0]
 8002eca:	e008      	b.n	8002ede <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ed8:	b2da      	uxtb	r2, r3
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	3b01      	subs	r3, #1
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1b6      	bne.n	8002e6a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2220      	movs	r2, #32
 8002f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002f04:	2300      	movs	r3, #0
 8002f06:	e000      	b.n	8002f0a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002f08:	2302      	movs	r3, #2
  }
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3720      	adds	r7, #32
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b084      	sub	sp, #16
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	60f8      	str	r0, [r7, #12]
 8002f1a:	60b9      	str	r1, [r7, #8]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b20      	cmp	r3, #32
 8002f2a:	d11d      	bne.n	8002f68 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d002      	beq.n	8002f38 <HAL_UART_Receive_IT+0x26>
 8002f32:	88fb      	ldrh	r3, [r7, #6]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e016      	b.n	8002f6a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d101      	bne.n	8002f4a <HAL_UART_Receive_IT+0x38>
 8002f46:	2302      	movs	r3, #2
 8002f48:	e00f      	b.n	8002f6a <HAL_UART_Receive_IT+0x58>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002f58:	88fb      	ldrh	r3, [r7, #6]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	68b9      	ldr	r1, [r7, #8]
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f000 fb42 	bl	80035e8 <UART_Start_Receive_IT>
 8002f64:	4603      	mov	r3, r0
 8002f66:	e000      	b.n	8002f6a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002f68:	2302      	movs	r3, #2
  }
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
	...

08002f74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b0ba      	sub	sp, #232	; 0xe8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002faa:	f003 030f 	and.w	r3, r3, #15
 8002fae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002fb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10f      	bne.n	8002fda <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fbe:	f003 0320 	and.w	r3, r3, #32
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d009      	beq.n	8002fda <HAL_UART_IRQHandler+0x66>
 8002fc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fca:	f003 0320 	and.w	r3, r3, #32
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 fc21 	bl	800381a <UART_Receive_IT>
      return;
 8002fd8:	e256      	b.n	8003488 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002fda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f000 80de 	beq.w	80031a0 <HAL_UART_IRQHandler+0x22c>
 8002fe4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d106      	bne.n	8002ffe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ff4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f000 80d1 	beq.w	80031a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00b      	beq.n	8003022 <HAL_UART_IRQHandler+0xae>
 800300a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800300e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003012:	2b00      	cmp	r3, #0
 8003014:	d005      	beq.n	8003022 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	f043 0201 	orr.w	r2, r3, #1
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003026:	f003 0304 	and.w	r3, r3, #4
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00b      	beq.n	8003046 <HAL_UART_IRQHandler+0xd2>
 800302e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b00      	cmp	r3, #0
 8003038:	d005      	beq.n	8003046 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	f043 0202 	orr.w	r2, r3, #2
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00b      	beq.n	800306a <HAL_UART_IRQHandler+0xf6>
 8003052:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d005      	beq.n	800306a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	f043 0204 	orr.w	r2, r3, #4
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800306a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800306e:	f003 0308 	and.w	r3, r3, #8
 8003072:	2b00      	cmp	r3, #0
 8003074:	d011      	beq.n	800309a <HAL_UART_IRQHandler+0x126>
 8003076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800307a:	f003 0320 	and.w	r3, r3, #32
 800307e:	2b00      	cmp	r3, #0
 8003080:	d105      	bne.n	800308e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003082:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b00      	cmp	r3, #0
 800308c:	d005      	beq.n	800309a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	f043 0208 	orr.w	r2, r3, #8
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f000 81ed 	beq.w	800347e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030a8:	f003 0320 	and.w	r3, r3, #32
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d008      	beq.n	80030c2 <HAL_UART_IRQHandler+0x14e>
 80030b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030b4:	f003 0320 	and.w	r3, r3, #32
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d002      	beq.n	80030c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 fbac 	bl	800381a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030cc:	2b40      	cmp	r3, #64	; 0x40
 80030ce:	bf0c      	ite	eq
 80030d0:	2301      	moveq	r3, #1
 80030d2:	2300      	movne	r3, #0
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	f003 0308 	and.w	r3, r3, #8
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d103      	bne.n	80030ee <HAL_UART_IRQHandler+0x17a>
 80030e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d04f      	beq.n	800318e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 fab4 	bl	800365c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030fe:	2b40      	cmp	r3, #64	; 0x40
 8003100:	d141      	bne.n	8003186 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	3314      	adds	r3, #20
 8003108:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800310c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003110:	e853 3f00 	ldrex	r3, [r3]
 8003114:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003118:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800311c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003120:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	3314      	adds	r3, #20
 800312a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800312e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003132:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003136:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800313a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800313e:	e841 2300 	strex	r3, r2, [r1]
 8003142:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003146:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1d9      	bne.n	8003102 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003152:	2b00      	cmp	r3, #0
 8003154:	d013      	beq.n	800317e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315a:	4a7d      	ldr	r2, [pc, #500]	; (8003350 <HAL_UART_IRQHandler+0x3dc>)
 800315c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003162:	4618      	mov	r0, r3
 8003164:	f7fe f8d1 	bl	800130a <HAL_DMA_Abort_IT>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d016      	beq.n	800319c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003178:	4610      	mov	r0, r2
 800317a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800317c:	e00e      	b.n	800319c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 f990 	bl	80034a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003184:	e00a      	b.n	800319c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 f98c 	bl	80034a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800318c:	e006      	b.n	800319c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 f988 	bl	80034a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800319a:	e170      	b.n	800347e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800319c:	bf00      	nop
    return;
 800319e:	e16e      	b.n	800347e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	f040 814a 	bne.w	800343e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80031aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031ae:	f003 0310 	and.w	r3, r3, #16
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f000 8143 	beq.w	800343e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80031b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031bc:	f003 0310 	and.w	r3, r3, #16
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 813c 	beq.w	800343e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031c6:	2300      	movs	r3, #0
 80031c8:	60bb      	str	r3, [r7, #8]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	60bb      	str	r3, [r7, #8]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	60bb      	str	r3, [r7, #8]
 80031da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e6:	2b40      	cmp	r3, #64	; 0x40
 80031e8:	f040 80b4 	bne.w	8003354 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80031f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 8140 	beq.w	8003482 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003206:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800320a:	429a      	cmp	r2, r3
 800320c:	f080 8139 	bcs.w	8003482 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003216:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321c:	69db      	ldr	r3, [r3, #28]
 800321e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003222:	f000 8088 	beq.w	8003336 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	330c      	adds	r3, #12
 800322c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003230:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003234:	e853 3f00 	ldrex	r3, [r3]
 8003238:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800323c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003240:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003244:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	330c      	adds	r3, #12
 800324e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003252:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003256:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800325a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800325e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003262:	e841 2300 	strex	r3, r2, [r1]
 8003266:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800326a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1d9      	bne.n	8003226 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	3314      	adds	r3, #20
 8003278:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800327a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800327c:	e853 3f00 	ldrex	r3, [r3]
 8003280:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003282:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003284:	f023 0301 	bic.w	r3, r3, #1
 8003288:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	3314      	adds	r3, #20
 8003292:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003296:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800329a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800329c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800329e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80032a2:	e841 2300 	strex	r3, r2, [r1]
 80032a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80032a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1e1      	bne.n	8003272 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	3314      	adds	r3, #20
 80032b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032b8:	e853 3f00 	ldrex	r3, [r3]
 80032bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80032be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	3314      	adds	r3, #20
 80032ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80032d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80032d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80032d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80032da:	e841 2300 	strex	r3, r2, [r1]
 80032de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80032e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1e3      	bne.n	80032ae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2220      	movs	r2, #32
 80032ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	330c      	adds	r3, #12
 80032fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032fe:	e853 3f00 	ldrex	r3, [r3]
 8003302:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003304:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003306:	f023 0310 	bic.w	r3, r3, #16
 800330a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	330c      	adds	r3, #12
 8003314:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003318:	65ba      	str	r2, [r7, #88]	; 0x58
 800331a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800331c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800331e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003320:	e841 2300 	strex	r3, r2, [r1]
 8003324:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003326:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1e3      	bne.n	80032f4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003330:	4618      	mov	r0, r3
 8003332:	f7fd ff7a 	bl	800122a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800333e:	b29b      	uxth	r3, r3
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	b29b      	uxth	r3, r3
 8003344:	4619      	mov	r1, r3
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f8b6 	bl	80034b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800334c:	e099      	b.n	8003482 <HAL_UART_IRQHandler+0x50e>
 800334e:	bf00      	nop
 8003350:	08003723 	.word	0x08003723
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800335c:	b29b      	uxth	r3, r3
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003368:	b29b      	uxth	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	f000 808b 	beq.w	8003486 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003370:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003374:	2b00      	cmp	r3, #0
 8003376:	f000 8086 	beq.w	8003486 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	330c      	adds	r3, #12
 8003380:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003384:	e853 3f00 	ldrex	r3, [r3]
 8003388:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800338a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800338c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003390:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	330c      	adds	r3, #12
 800339a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800339e:	647a      	str	r2, [r7, #68]	; 0x44
 80033a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80033a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033a6:	e841 2300 	strex	r3, r2, [r1]
 80033aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80033ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1e3      	bne.n	800337a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	3314      	adds	r3, #20
 80033b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033bc:	e853 3f00 	ldrex	r3, [r3]
 80033c0:	623b      	str	r3, [r7, #32]
   return(result);
 80033c2:	6a3b      	ldr	r3, [r7, #32]
 80033c4:	f023 0301 	bic.w	r3, r3, #1
 80033c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	3314      	adds	r3, #20
 80033d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80033d6:	633a      	str	r2, [r7, #48]	; 0x30
 80033d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033de:	e841 2300 	strex	r3, r2, [r1]
 80033e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80033e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1e3      	bne.n	80033b2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2220      	movs	r2, #32
 80033ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	330c      	adds	r3, #12
 80033fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	e853 3f00 	ldrex	r3, [r3]
 8003406:	60fb      	str	r3, [r7, #12]
   return(result);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f023 0310 	bic.w	r3, r3, #16
 800340e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	330c      	adds	r3, #12
 8003418:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800341c:	61fa      	str	r2, [r7, #28]
 800341e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003420:	69b9      	ldr	r1, [r7, #24]
 8003422:	69fa      	ldr	r2, [r7, #28]
 8003424:	e841 2300 	strex	r3, r2, [r1]
 8003428:	617b      	str	r3, [r7, #20]
   return(result);
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1e3      	bne.n	80033f8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003430:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003434:	4619      	mov	r1, r3
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 f83e 	bl	80034b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800343c:	e023      	b.n	8003486 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800343e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003446:	2b00      	cmp	r3, #0
 8003448:	d009      	beq.n	800345e <HAL_UART_IRQHandler+0x4ea>
 800344a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800344e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f977 	bl	800374a <UART_Transmit_IT>
    return;
 800345c:	e014      	b.n	8003488 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800345e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00e      	beq.n	8003488 <HAL_UART_IRQHandler+0x514>
 800346a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800346e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003472:	2b00      	cmp	r3, #0
 8003474:	d008      	beq.n	8003488 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f9b7 	bl	80037ea <UART_EndTransmit_IT>
    return;
 800347c:	e004      	b.n	8003488 <HAL_UART_IRQHandler+0x514>
    return;
 800347e:	bf00      	nop
 8003480:	e002      	b.n	8003488 <HAL_UART_IRQHandler+0x514>
      return;
 8003482:	bf00      	nop
 8003484:	e000      	b.n	8003488 <HAL_UART_IRQHandler+0x514>
      return;
 8003486:	bf00      	nop
  }
}
 8003488:	37e8      	adds	r7, #232	; 0xe8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop

08003490 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	460b      	mov	r3, r1
 80034c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 80034d8:	2300      	movs	r3, #0
 80034da:	60fb      	str	r3, [r7, #12]
 80034dc:	2300      	movs	r3, #0
 80034de:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	b2da      	uxtb	r2, r3
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	4313      	orrs	r3, r2
 80034fe:	b2db      	uxtb	r3, r3
}
 8003500:	4618      	mov	r0, r3
 8003502:	3714      	adds	r7, #20
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b090      	sub	sp, #64	; 0x40
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	603b      	str	r3, [r7, #0]
 8003518:	4613      	mov	r3, r2
 800351a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800351c:	e050      	b.n	80035c0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800351e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003524:	d04c      	beq.n	80035c0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003526:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003528:	2b00      	cmp	r3, #0
 800352a:	d007      	beq.n	800353c <UART_WaitOnFlagUntilTimeout+0x30>
 800352c:	f7fd fd60 	bl	8000ff0 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003538:	429a      	cmp	r2, r3
 800353a:	d241      	bcs.n	80035c0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	330c      	adds	r3, #12
 8003542:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003546:	e853 3f00 	ldrex	r3, [r3]
 800354a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800354c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003552:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	330c      	adds	r3, #12
 800355a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800355c:	637a      	str	r2, [r7, #52]	; 0x34
 800355e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003560:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003562:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003564:	e841 2300 	strex	r3, r2, [r1]
 8003568:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800356a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800356c:	2b00      	cmp	r3, #0
 800356e:	d1e5      	bne.n	800353c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	3314      	adds	r3, #20
 8003576:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	e853 3f00 	ldrex	r3, [r3]
 800357e:	613b      	str	r3, [r7, #16]
   return(result);
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	f023 0301 	bic.w	r3, r3, #1
 8003586:	63bb      	str	r3, [r7, #56]	; 0x38
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	3314      	adds	r3, #20
 800358e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003590:	623a      	str	r2, [r7, #32]
 8003592:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003594:	69f9      	ldr	r1, [r7, #28]
 8003596:	6a3a      	ldr	r2, [r7, #32]
 8003598:	e841 2300 	strex	r3, r2, [r1]
 800359c:	61bb      	str	r3, [r7, #24]
   return(result);
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d1e5      	bne.n	8003570 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2220      	movs	r2, #32
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2220      	movs	r2, #32
 80035b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e00f      	b.n	80035e0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	4013      	ands	r3, r2
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	bf0c      	ite	eq
 80035d0:	2301      	moveq	r3, #1
 80035d2:	2300      	movne	r3, #0
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	461a      	mov	r2, r3
 80035d8:	79fb      	ldrb	r3, [r7, #7]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d09f      	beq.n	800351e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3740      	adds	r7, #64	; 0x40
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	4613      	mov	r3, r2
 80035f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	68ba      	ldr	r2, [r7, #8]
 80035fa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	88fa      	ldrh	r2, [r7, #6]
 8003600:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	88fa      	ldrh	r2, [r7, #6]
 8003606:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2222      	movs	r2, #34	; 0x22
 8003612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68da      	ldr	r2, [r3, #12]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800362c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	695a      	ldr	r2, [r3, #20]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f042 0201 	orr.w	r2, r2, #1
 800363c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68da      	ldr	r2, [r3, #12]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f042 0220 	orr.w	r2, r2, #32
 800364c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3714      	adds	r7, #20
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800365c:	b480      	push	{r7}
 800365e:	b095      	sub	sp, #84	; 0x54
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	330c      	adds	r3, #12
 800366a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800366c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800366e:	e853 3f00 	ldrex	r3, [r3]
 8003672:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003676:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800367a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	330c      	adds	r3, #12
 8003682:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003684:	643a      	str	r2, [r7, #64]	; 0x40
 8003686:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003688:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800368a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800368c:	e841 2300 	strex	r3, r2, [r1]
 8003690:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1e5      	bne.n	8003664 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	3314      	adds	r3, #20
 800369e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a0:	6a3b      	ldr	r3, [r7, #32]
 80036a2:	e853 3f00 	ldrex	r3, [r3]
 80036a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	f023 0301 	bic.w	r3, r3, #1
 80036ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	3314      	adds	r3, #20
 80036b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036c0:	e841 2300 	strex	r3, r2, [r1]
 80036c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1e5      	bne.n	8003698 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d119      	bne.n	8003708 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	330c      	adds	r3, #12
 80036da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	e853 3f00 	ldrex	r3, [r3]
 80036e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	f023 0310 	bic.w	r3, r3, #16
 80036ea:	647b      	str	r3, [r7, #68]	; 0x44
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	330c      	adds	r3, #12
 80036f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80036f4:	61ba      	str	r2, [r7, #24]
 80036f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f8:	6979      	ldr	r1, [r7, #20]
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	e841 2300 	strex	r3, r2, [r1]
 8003700:	613b      	str	r3, [r7, #16]
   return(result);
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1e5      	bne.n	80036d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2220      	movs	r2, #32
 800370c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003716:	bf00      	nop
 8003718:	3754      	adds	r7, #84	; 0x54
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr

08003722 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b084      	sub	sp, #16
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f7ff feb1 	bl	80034a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003742:	bf00      	nop
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800374a:	b480      	push	{r7}
 800374c:	b085      	sub	sp, #20
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b21      	cmp	r3, #33	; 0x21
 800375c:	d13e      	bne.n	80037dc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003766:	d114      	bne.n	8003792 <UART_Transmit_IT+0x48>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d110      	bne.n	8003792 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	881b      	ldrh	r3, [r3, #0]
 800377a:	461a      	mov	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003784:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a1b      	ldr	r3, [r3, #32]
 800378a:	1c9a      	adds	r2, r3, #2
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	621a      	str	r2, [r3, #32]
 8003790:	e008      	b.n	80037a4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a1b      	ldr	r3, [r3, #32]
 8003796:	1c59      	adds	r1, r3, #1
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	6211      	str	r1, [r2, #32]
 800379c:	781a      	ldrb	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	3b01      	subs	r3, #1
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	4619      	mov	r1, r3
 80037b2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d10f      	bne.n	80037d8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68da      	ldr	r2, [r3, #12]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68da      	ldr	r2, [r3, #12]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80037d8:	2300      	movs	r3, #0
 80037da:	e000      	b.n	80037de <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80037dc:	2302      	movs	r3, #2
  }
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3714      	adds	r7, #20
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr

080037ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b082      	sub	sp, #8
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68da      	ldr	r2, [r3, #12]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003800:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2220      	movs	r2, #32
 8003806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7ff fe40 	bl	8003490 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b08c      	sub	sp, #48	; 0x30
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b22      	cmp	r3, #34	; 0x22
 800382c:	f040 80ab 	bne.w	8003986 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003838:	d117      	bne.n	800386a <UART_Receive_IT+0x50>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d113      	bne.n	800386a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003842:	2300      	movs	r3, #0
 8003844:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	b29b      	uxth	r3, r3
 8003854:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003858:	b29a      	uxth	r2, r3
 800385a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003862:	1c9a      	adds	r2, r3, #2
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	629a      	str	r2, [r3, #40]	; 0x28
 8003868:	e026      	b.n	80038b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003870:	2300      	movs	r3, #0
 8003872:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800387c:	d007      	beq.n	800388e <UART_Receive_IT+0x74>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10a      	bne.n	800389c <UART_Receive_IT+0x82>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d106      	bne.n	800389c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	b2da      	uxtb	r2, r3
 8003896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003898:	701a      	strb	r2, [r3, #0]
 800389a:	e008      	b.n	80038ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038a8:	b2da      	uxtb	r2, r3
 80038aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b2:	1c5a      	adds	r2, r3, #1
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038bc:	b29b      	uxth	r3, r3
 80038be:	3b01      	subs	r3, #1
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	4619      	mov	r1, r3
 80038c6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d15a      	bne.n	8003982 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68da      	ldr	r2, [r3, #12]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0220 	bic.w	r2, r2, #32
 80038da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68da      	ldr	r2, [r3, #12]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	695a      	ldr	r2, [r3, #20]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f022 0201 	bic.w	r2, r2, #1
 80038fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2220      	movs	r2, #32
 8003900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003908:	2b01      	cmp	r3, #1
 800390a:	d135      	bne.n	8003978 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	330c      	adds	r3, #12
 8003918:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	e853 3f00 	ldrex	r3, [r3]
 8003920:	613b      	str	r3, [r7, #16]
   return(result);
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	f023 0310 	bic.w	r3, r3, #16
 8003928:	627b      	str	r3, [r7, #36]	; 0x24
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	330c      	adds	r3, #12
 8003930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003932:	623a      	str	r2, [r7, #32]
 8003934:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003936:	69f9      	ldr	r1, [r7, #28]
 8003938:	6a3a      	ldr	r2, [r7, #32]
 800393a:	e841 2300 	strex	r3, r2, [r1]
 800393e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1e5      	bne.n	8003912 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0310 	and.w	r3, r3, #16
 8003950:	2b10      	cmp	r3, #16
 8003952:	d10a      	bne.n	800396a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003954:	2300      	movs	r3, #0
 8003956:	60fb      	str	r3, [r7, #12]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	60fb      	str	r3, [r7, #12]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	60fb      	str	r3, [r7, #12]
 8003968:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800396e:	4619      	mov	r1, r3
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f7ff fda1 	bl	80034b8 <HAL_UARTEx_RxEventCallback>
 8003976:	e002      	b.n	800397e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f7fd f869 	bl	8000a50 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800397e:	2300      	movs	r3, #0
 8003980:	e002      	b.n	8003988 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003982:	2300      	movs	r3, #0
 8003984:	e000      	b.n	8003988 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003986:	2302      	movs	r3, #2
  }
}
 8003988:	4618      	mov	r0, r3
 800398a:	3730      	adds	r7, #48	; 0x30
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003994:	b09f      	sub	sp, #124	; 0x7c
 8003996:	af00      	add	r7, sp, #0
 8003998:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800399a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80039a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039a6:	68d9      	ldr	r1, [r3, #12]
 80039a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	ea40 0301 	orr.w	r3, r0, r1
 80039b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b4:	689a      	ldr	r2, [r3, #8]
 80039b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	431a      	orrs	r2, r3
 80039bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039be:	695b      	ldr	r3, [r3, #20]
 80039c0:	431a      	orrs	r2, r3
 80039c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039c4:	69db      	ldr	r3, [r3, #28]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80039ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80039d4:	f021 010c 	bic.w	r1, r1, #12
 80039d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039de:	430b      	orrs	r3, r1
 80039e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	695b      	ldr	r3, [r3, #20]
 80039e8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80039ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ee:	6999      	ldr	r1, [r3, #24]
 80039f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	ea40 0301 	orr.w	r3, r0, r1
 80039f8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	4bc5      	ldr	r3, [pc, #788]	; (8003d14 <UART_SetConfig+0x384>)
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d004      	beq.n	8003a0e <UART_SetConfig+0x7e>
 8003a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	4bc3      	ldr	r3, [pc, #780]	; (8003d18 <UART_SetConfig+0x388>)
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d103      	bne.n	8003a16 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a0e:	f7fe facf 	bl	8001fb0 <HAL_RCC_GetPCLK2Freq>
 8003a12:	6778      	str	r0, [r7, #116]	; 0x74
 8003a14:	e002      	b.n	8003a1c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a16:	f7fe fab7 	bl	8001f88 <HAL_RCC_GetPCLK1Freq>
 8003a1a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a1e:	69db      	ldr	r3, [r3, #28]
 8003a20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a24:	f040 80b6 	bne.w	8003b94 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a2a:	461c      	mov	r4, r3
 8003a2c:	f04f 0500 	mov.w	r5, #0
 8003a30:	4622      	mov	r2, r4
 8003a32:	462b      	mov	r3, r5
 8003a34:	1891      	adds	r1, r2, r2
 8003a36:	6439      	str	r1, [r7, #64]	; 0x40
 8003a38:	415b      	adcs	r3, r3
 8003a3a:	647b      	str	r3, [r7, #68]	; 0x44
 8003a3c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a40:	1912      	adds	r2, r2, r4
 8003a42:	eb45 0303 	adc.w	r3, r5, r3
 8003a46:	f04f 0000 	mov.w	r0, #0
 8003a4a:	f04f 0100 	mov.w	r1, #0
 8003a4e:	00d9      	lsls	r1, r3, #3
 8003a50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a54:	00d0      	lsls	r0, r2, #3
 8003a56:	4602      	mov	r2, r0
 8003a58:	460b      	mov	r3, r1
 8003a5a:	1911      	adds	r1, r2, r4
 8003a5c:	6639      	str	r1, [r7, #96]	; 0x60
 8003a5e:	416b      	adcs	r3, r5
 8003a60:	667b      	str	r3, [r7, #100]	; 0x64
 8003a62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	461a      	mov	r2, r3
 8003a68:	f04f 0300 	mov.w	r3, #0
 8003a6c:	1891      	adds	r1, r2, r2
 8003a6e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a70:	415b      	adcs	r3, r3
 8003a72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003a78:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003a7c:	f7fc fc00 	bl	8000280 <__aeabi_uldivmod>
 8003a80:	4602      	mov	r2, r0
 8003a82:	460b      	mov	r3, r1
 8003a84:	4ba5      	ldr	r3, [pc, #660]	; (8003d1c <UART_SetConfig+0x38c>)
 8003a86:	fba3 2302 	umull	r2, r3, r3, r2
 8003a8a:	095b      	lsrs	r3, r3, #5
 8003a8c:	011e      	lsls	r6, r3, #4
 8003a8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a90:	461c      	mov	r4, r3
 8003a92:	f04f 0500 	mov.w	r5, #0
 8003a96:	4622      	mov	r2, r4
 8003a98:	462b      	mov	r3, r5
 8003a9a:	1891      	adds	r1, r2, r2
 8003a9c:	6339      	str	r1, [r7, #48]	; 0x30
 8003a9e:	415b      	adcs	r3, r3
 8003aa0:	637b      	str	r3, [r7, #52]	; 0x34
 8003aa2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003aa6:	1912      	adds	r2, r2, r4
 8003aa8:	eb45 0303 	adc.w	r3, r5, r3
 8003aac:	f04f 0000 	mov.w	r0, #0
 8003ab0:	f04f 0100 	mov.w	r1, #0
 8003ab4:	00d9      	lsls	r1, r3, #3
 8003ab6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003aba:	00d0      	lsls	r0, r2, #3
 8003abc:	4602      	mov	r2, r0
 8003abe:	460b      	mov	r3, r1
 8003ac0:	1911      	adds	r1, r2, r4
 8003ac2:	65b9      	str	r1, [r7, #88]	; 0x58
 8003ac4:	416b      	adcs	r3, r5
 8003ac6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ac8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	461a      	mov	r2, r3
 8003ace:	f04f 0300 	mov.w	r3, #0
 8003ad2:	1891      	adds	r1, r2, r2
 8003ad4:	62b9      	str	r1, [r7, #40]	; 0x28
 8003ad6:	415b      	adcs	r3, r3
 8003ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ada:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ade:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003ae2:	f7fc fbcd 	bl	8000280 <__aeabi_uldivmod>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	460b      	mov	r3, r1
 8003aea:	4b8c      	ldr	r3, [pc, #560]	; (8003d1c <UART_SetConfig+0x38c>)
 8003aec:	fba3 1302 	umull	r1, r3, r3, r2
 8003af0:	095b      	lsrs	r3, r3, #5
 8003af2:	2164      	movs	r1, #100	; 0x64
 8003af4:	fb01 f303 	mul.w	r3, r1, r3
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	3332      	adds	r3, #50	; 0x32
 8003afe:	4a87      	ldr	r2, [pc, #540]	; (8003d1c <UART_SetConfig+0x38c>)
 8003b00:	fba2 2303 	umull	r2, r3, r2, r3
 8003b04:	095b      	lsrs	r3, r3, #5
 8003b06:	005b      	lsls	r3, r3, #1
 8003b08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b0c:	441e      	add	r6, r3
 8003b0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b10:	4618      	mov	r0, r3
 8003b12:	f04f 0100 	mov.w	r1, #0
 8003b16:	4602      	mov	r2, r0
 8003b18:	460b      	mov	r3, r1
 8003b1a:	1894      	adds	r4, r2, r2
 8003b1c:	623c      	str	r4, [r7, #32]
 8003b1e:	415b      	adcs	r3, r3
 8003b20:	627b      	str	r3, [r7, #36]	; 0x24
 8003b22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b26:	1812      	adds	r2, r2, r0
 8003b28:	eb41 0303 	adc.w	r3, r1, r3
 8003b2c:	f04f 0400 	mov.w	r4, #0
 8003b30:	f04f 0500 	mov.w	r5, #0
 8003b34:	00dd      	lsls	r5, r3, #3
 8003b36:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003b3a:	00d4      	lsls	r4, r2, #3
 8003b3c:	4622      	mov	r2, r4
 8003b3e:	462b      	mov	r3, r5
 8003b40:	1814      	adds	r4, r2, r0
 8003b42:	653c      	str	r4, [r7, #80]	; 0x50
 8003b44:	414b      	adcs	r3, r1
 8003b46:	657b      	str	r3, [r7, #84]	; 0x54
 8003b48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	f04f 0300 	mov.w	r3, #0
 8003b52:	1891      	adds	r1, r2, r2
 8003b54:	61b9      	str	r1, [r7, #24]
 8003b56:	415b      	adcs	r3, r3
 8003b58:	61fb      	str	r3, [r7, #28]
 8003b5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b5e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003b62:	f7fc fb8d 	bl	8000280 <__aeabi_uldivmod>
 8003b66:	4602      	mov	r2, r0
 8003b68:	460b      	mov	r3, r1
 8003b6a:	4b6c      	ldr	r3, [pc, #432]	; (8003d1c <UART_SetConfig+0x38c>)
 8003b6c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b70:	095b      	lsrs	r3, r3, #5
 8003b72:	2164      	movs	r1, #100	; 0x64
 8003b74:	fb01 f303 	mul.w	r3, r1, r3
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	3332      	adds	r3, #50	; 0x32
 8003b7e:	4a67      	ldr	r2, [pc, #412]	; (8003d1c <UART_SetConfig+0x38c>)
 8003b80:	fba2 2303 	umull	r2, r3, r2, r3
 8003b84:	095b      	lsrs	r3, r3, #5
 8003b86:	f003 0207 	and.w	r2, r3, #7
 8003b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4432      	add	r2, r6
 8003b90:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b92:	e0b9      	b.n	8003d08 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b96:	461c      	mov	r4, r3
 8003b98:	f04f 0500 	mov.w	r5, #0
 8003b9c:	4622      	mov	r2, r4
 8003b9e:	462b      	mov	r3, r5
 8003ba0:	1891      	adds	r1, r2, r2
 8003ba2:	6139      	str	r1, [r7, #16]
 8003ba4:	415b      	adcs	r3, r3
 8003ba6:	617b      	str	r3, [r7, #20]
 8003ba8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003bac:	1912      	adds	r2, r2, r4
 8003bae:	eb45 0303 	adc.w	r3, r5, r3
 8003bb2:	f04f 0000 	mov.w	r0, #0
 8003bb6:	f04f 0100 	mov.w	r1, #0
 8003bba:	00d9      	lsls	r1, r3, #3
 8003bbc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003bc0:	00d0      	lsls	r0, r2, #3
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	eb12 0804 	adds.w	r8, r2, r4
 8003bca:	eb43 0905 	adc.w	r9, r3, r5
 8003bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f04f 0100 	mov.w	r1, #0
 8003bd8:	f04f 0200 	mov.w	r2, #0
 8003bdc:	f04f 0300 	mov.w	r3, #0
 8003be0:	008b      	lsls	r3, r1, #2
 8003be2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003be6:	0082      	lsls	r2, r0, #2
 8003be8:	4640      	mov	r0, r8
 8003bea:	4649      	mov	r1, r9
 8003bec:	f7fc fb48 	bl	8000280 <__aeabi_uldivmod>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	4b49      	ldr	r3, [pc, #292]	; (8003d1c <UART_SetConfig+0x38c>)
 8003bf6:	fba3 2302 	umull	r2, r3, r3, r2
 8003bfa:	095b      	lsrs	r3, r3, #5
 8003bfc:	011e      	lsls	r6, r3, #4
 8003bfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c00:	4618      	mov	r0, r3
 8003c02:	f04f 0100 	mov.w	r1, #0
 8003c06:	4602      	mov	r2, r0
 8003c08:	460b      	mov	r3, r1
 8003c0a:	1894      	adds	r4, r2, r2
 8003c0c:	60bc      	str	r4, [r7, #8]
 8003c0e:	415b      	adcs	r3, r3
 8003c10:	60fb      	str	r3, [r7, #12]
 8003c12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c16:	1812      	adds	r2, r2, r0
 8003c18:	eb41 0303 	adc.w	r3, r1, r3
 8003c1c:	f04f 0400 	mov.w	r4, #0
 8003c20:	f04f 0500 	mov.w	r5, #0
 8003c24:	00dd      	lsls	r5, r3, #3
 8003c26:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003c2a:	00d4      	lsls	r4, r2, #3
 8003c2c:	4622      	mov	r2, r4
 8003c2e:	462b      	mov	r3, r5
 8003c30:	1814      	adds	r4, r2, r0
 8003c32:	64bc      	str	r4, [r7, #72]	; 0x48
 8003c34:	414b      	adcs	r3, r1
 8003c36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f04f 0100 	mov.w	r1, #0
 8003c42:	f04f 0200 	mov.w	r2, #0
 8003c46:	f04f 0300 	mov.w	r3, #0
 8003c4a:	008b      	lsls	r3, r1, #2
 8003c4c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003c50:	0082      	lsls	r2, r0, #2
 8003c52:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003c56:	f7fc fb13 	bl	8000280 <__aeabi_uldivmod>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	4b2f      	ldr	r3, [pc, #188]	; (8003d1c <UART_SetConfig+0x38c>)
 8003c60:	fba3 1302 	umull	r1, r3, r3, r2
 8003c64:	095b      	lsrs	r3, r3, #5
 8003c66:	2164      	movs	r1, #100	; 0x64
 8003c68:	fb01 f303 	mul.w	r3, r1, r3
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	011b      	lsls	r3, r3, #4
 8003c70:	3332      	adds	r3, #50	; 0x32
 8003c72:	4a2a      	ldr	r2, [pc, #168]	; (8003d1c <UART_SetConfig+0x38c>)
 8003c74:	fba2 2303 	umull	r2, r3, r2, r3
 8003c78:	095b      	lsrs	r3, r3, #5
 8003c7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c7e:	441e      	add	r6, r3
 8003c80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c82:	4618      	mov	r0, r3
 8003c84:	f04f 0100 	mov.w	r1, #0
 8003c88:	4602      	mov	r2, r0
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	1894      	adds	r4, r2, r2
 8003c8e:	603c      	str	r4, [r7, #0]
 8003c90:	415b      	adcs	r3, r3
 8003c92:	607b      	str	r3, [r7, #4]
 8003c94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c98:	1812      	adds	r2, r2, r0
 8003c9a:	eb41 0303 	adc.w	r3, r1, r3
 8003c9e:	f04f 0400 	mov.w	r4, #0
 8003ca2:	f04f 0500 	mov.w	r5, #0
 8003ca6:	00dd      	lsls	r5, r3, #3
 8003ca8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003cac:	00d4      	lsls	r4, r2, #3
 8003cae:	4622      	mov	r2, r4
 8003cb0:	462b      	mov	r3, r5
 8003cb2:	eb12 0a00 	adds.w	sl, r2, r0
 8003cb6:	eb43 0b01 	adc.w	fp, r3, r1
 8003cba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f04f 0100 	mov.w	r1, #0
 8003cc4:	f04f 0200 	mov.w	r2, #0
 8003cc8:	f04f 0300 	mov.w	r3, #0
 8003ccc:	008b      	lsls	r3, r1, #2
 8003cce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003cd2:	0082      	lsls	r2, r0, #2
 8003cd4:	4650      	mov	r0, sl
 8003cd6:	4659      	mov	r1, fp
 8003cd8:	f7fc fad2 	bl	8000280 <__aeabi_uldivmod>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	460b      	mov	r3, r1
 8003ce0:	4b0e      	ldr	r3, [pc, #56]	; (8003d1c <UART_SetConfig+0x38c>)
 8003ce2:	fba3 1302 	umull	r1, r3, r3, r2
 8003ce6:	095b      	lsrs	r3, r3, #5
 8003ce8:	2164      	movs	r1, #100	; 0x64
 8003cea:	fb01 f303 	mul.w	r3, r1, r3
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	011b      	lsls	r3, r3, #4
 8003cf2:	3332      	adds	r3, #50	; 0x32
 8003cf4:	4a09      	ldr	r2, [pc, #36]	; (8003d1c <UART_SetConfig+0x38c>)
 8003cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfa:	095b      	lsrs	r3, r3, #5
 8003cfc:	f003 020f 	and.w	r2, r3, #15
 8003d00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4432      	add	r2, r6
 8003d06:	609a      	str	r2, [r3, #8]
}
 8003d08:	bf00      	nop
 8003d0a:	377c      	adds	r7, #124	; 0x7c
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d12:	bf00      	nop
 8003d14:	40011000 	.word	0x40011000
 8003d18:	40011400 	.word	0x40011400
 8003d1c:	51eb851f 	.word	0x51eb851f

08003d20 <__errno>:
 8003d20:	4b01      	ldr	r3, [pc, #4]	; (8003d28 <__errno+0x8>)
 8003d22:	6818      	ldr	r0, [r3, #0]
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	2000000c 	.word	0x2000000c

08003d2c <__libc_init_array>:
 8003d2c:	b570      	push	{r4, r5, r6, lr}
 8003d2e:	4d0d      	ldr	r5, [pc, #52]	; (8003d64 <__libc_init_array+0x38>)
 8003d30:	4c0d      	ldr	r4, [pc, #52]	; (8003d68 <__libc_init_array+0x3c>)
 8003d32:	1b64      	subs	r4, r4, r5
 8003d34:	10a4      	asrs	r4, r4, #2
 8003d36:	2600      	movs	r6, #0
 8003d38:	42a6      	cmp	r6, r4
 8003d3a:	d109      	bne.n	8003d50 <__libc_init_array+0x24>
 8003d3c:	4d0b      	ldr	r5, [pc, #44]	; (8003d6c <__libc_init_array+0x40>)
 8003d3e:	4c0c      	ldr	r4, [pc, #48]	; (8003d70 <__libc_init_array+0x44>)
 8003d40:	f000 fc4e 	bl	80045e0 <_init>
 8003d44:	1b64      	subs	r4, r4, r5
 8003d46:	10a4      	asrs	r4, r4, #2
 8003d48:	2600      	movs	r6, #0
 8003d4a:	42a6      	cmp	r6, r4
 8003d4c:	d105      	bne.n	8003d5a <__libc_init_array+0x2e>
 8003d4e:	bd70      	pop	{r4, r5, r6, pc}
 8003d50:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d54:	4798      	blx	r3
 8003d56:	3601      	adds	r6, #1
 8003d58:	e7ee      	b.n	8003d38 <__libc_init_array+0xc>
 8003d5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d5e:	4798      	blx	r3
 8003d60:	3601      	adds	r6, #1
 8003d62:	e7f2      	b.n	8003d4a <__libc_init_array+0x1e>
 8003d64:	0800472c 	.word	0x0800472c
 8003d68:	0800472c 	.word	0x0800472c
 8003d6c:	0800472c 	.word	0x0800472c
 8003d70:	08004730 	.word	0x08004730

08003d74 <memset>:
 8003d74:	4402      	add	r2, r0
 8003d76:	4603      	mov	r3, r0
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d100      	bne.n	8003d7e <memset+0xa>
 8003d7c:	4770      	bx	lr
 8003d7e:	f803 1b01 	strb.w	r1, [r3], #1
 8003d82:	e7f9      	b.n	8003d78 <memset+0x4>

08003d84 <siprintf>:
 8003d84:	b40e      	push	{r1, r2, r3}
 8003d86:	b500      	push	{lr}
 8003d88:	b09c      	sub	sp, #112	; 0x70
 8003d8a:	ab1d      	add	r3, sp, #116	; 0x74
 8003d8c:	9002      	str	r0, [sp, #8]
 8003d8e:	9006      	str	r0, [sp, #24]
 8003d90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d94:	4809      	ldr	r0, [pc, #36]	; (8003dbc <siprintf+0x38>)
 8003d96:	9107      	str	r1, [sp, #28]
 8003d98:	9104      	str	r1, [sp, #16]
 8003d9a:	4909      	ldr	r1, [pc, #36]	; (8003dc0 <siprintf+0x3c>)
 8003d9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003da0:	9105      	str	r1, [sp, #20]
 8003da2:	6800      	ldr	r0, [r0, #0]
 8003da4:	9301      	str	r3, [sp, #4]
 8003da6:	a902      	add	r1, sp, #8
 8003da8:	f000 f868 	bl	8003e7c <_svfiprintf_r>
 8003dac:	9b02      	ldr	r3, [sp, #8]
 8003dae:	2200      	movs	r2, #0
 8003db0:	701a      	strb	r2, [r3, #0]
 8003db2:	b01c      	add	sp, #112	; 0x70
 8003db4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003db8:	b003      	add	sp, #12
 8003dba:	4770      	bx	lr
 8003dbc:	2000000c 	.word	0x2000000c
 8003dc0:	ffff0208 	.word	0xffff0208

08003dc4 <__ssputs_r>:
 8003dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dc8:	688e      	ldr	r6, [r1, #8]
 8003dca:	429e      	cmp	r6, r3
 8003dcc:	4682      	mov	sl, r0
 8003dce:	460c      	mov	r4, r1
 8003dd0:	4690      	mov	r8, r2
 8003dd2:	461f      	mov	r7, r3
 8003dd4:	d838      	bhi.n	8003e48 <__ssputs_r+0x84>
 8003dd6:	898a      	ldrh	r2, [r1, #12]
 8003dd8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003ddc:	d032      	beq.n	8003e44 <__ssputs_r+0x80>
 8003dde:	6825      	ldr	r5, [r4, #0]
 8003de0:	6909      	ldr	r1, [r1, #16]
 8003de2:	eba5 0901 	sub.w	r9, r5, r1
 8003de6:	6965      	ldr	r5, [r4, #20]
 8003de8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003dec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003df0:	3301      	adds	r3, #1
 8003df2:	444b      	add	r3, r9
 8003df4:	106d      	asrs	r5, r5, #1
 8003df6:	429d      	cmp	r5, r3
 8003df8:	bf38      	it	cc
 8003dfa:	461d      	movcc	r5, r3
 8003dfc:	0553      	lsls	r3, r2, #21
 8003dfe:	d531      	bpl.n	8003e64 <__ssputs_r+0xa0>
 8003e00:	4629      	mov	r1, r5
 8003e02:	f000 fb47 	bl	8004494 <_malloc_r>
 8003e06:	4606      	mov	r6, r0
 8003e08:	b950      	cbnz	r0, 8003e20 <__ssputs_r+0x5c>
 8003e0a:	230c      	movs	r3, #12
 8003e0c:	f8ca 3000 	str.w	r3, [sl]
 8003e10:	89a3      	ldrh	r3, [r4, #12]
 8003e12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e16:	81a3      	strh	r3, [r4, #12]
 8003e18:	f04f 30ff 	mov.w	r0, #4294967295
 8003e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e20:	6921      	ldr	r1, [r4, #16]
 8003e22:	464a      	mov	r2, r9
 8003e24:	f000 fabe 	bl	80043a4 <memcpy>
 8003e28:	89a3      	ldrh	r3, [r4, #12]
 8003e2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003e2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e32:	81a3      	strh	r3, [r4, #12]
 8003e34:	6126      	str	r6, [r4, #16]
 8003e36:	6165      	str	r5, [r4, #20]
 8003e38:	444e      	add	r6, r9
 8003e3a:	eba5 0509 	sub.w	r5, r5, r9
 8003e3e:	6026      	str	r6, [r4, #0]
 8003e40:	60a5      	str	r5, [r4, #8]
 8003e42:	463e      	mov	r6, r7
 8003e44:	42be      	cmp	r6, r7
 8003e46:	d900      	bls.n	8003e4a <__ssputs_r+0x86>
 8003e48:	463e      	mov	r6, r7
 8003e4a:	4632      	mov	r2, r6
 8003e4c:	6820      	ldr	r0, [r4, #0]
 8003e4e:	4641      	mov	r1, r8
 8003e50:	f000 fab6 	bl	80043c0 <memmove>
 8003e54:	68a3      	ldr	r3, [r4, #8]
 8003e56:	6822      	ldr	r2, [r4, #0]
 8003e58:	1b9b      	subs	r3, r3, r6
 8003e5a:	4432      	add	r2, r6
 8003e5c:	60a3      	str	r3, [r4, #8]
 8003e5e:	6022      	str	r2, [r4, #0]
 8003e60:	2000      	movs	r0, #0
 8003e62:	e7db      	b.n	8003e1c <__ssputs_r+0x58>
 8003e64:	462a      	mov	r2, r5
 8003e66:	f000 fb6f 	bl	8004548 <_realloc_r>
 8003e6a:	4606      	mov	r6, r0
 8003e6c:	2800      	cmp	r0, #0
 8003e6e:	d1e1      	bne.n	8003e34 <__ssputs_r+0x70>
 8003e70:	6921      	ldr	r1, [r4, #16]
 8003e72:	4650      	mov	r0, sl
 8003e74:	f000 fabe 	bl	80043f4 <_free_r>
 8003e78:	e7c7      	b.n	8003e0a <__ssputs_r+0x46>
	...

08003e7c <_svfiprintf_r>:
 8003e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e80:	4698      	mov	r8, r3
 8003e82:	898b      	ldrh	r3, [r1, #12]
 8003e84:	061b      	lsls	r3, r3, #24
 8003e86:	b09d      	sub	sp, #116	; 0x74
 8003e88:	4607      	mov	r7, r0
 8003e8a:	460d      	mov	r5, r1
 8003e8c:	4614      	mov	r4, r2
 8003e8e:	d50e      	bpl.n	8003eae <_svfiprintf_r+0x32>
 8003e90:	690b      	ldr	r3, [r1, #16]
 8003e92:	b963      	cbnz	r3, 8003eae <_svfiprintf_r+0x32>
 8003e94:	2140      	movs	r1, #64	; 0x40
 8003e96:	f000 fafd 	bl	8004494 <_malloc_r>
 8003e9a:	6028      	str	r0, [r5, #0]
 8003e9c:	6128      	str	r0, [r5, #16]
 8003e9e:	b920      	cbnz	r0, 8003eaa <_svfiprintf_r+0x2e>
 8003ea0:	230c      	movs	r3, #12
 8003ea2:	603b      	str	r3, [r7, #0]
 8003ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ea8:	e0d1      	b.n	800404e <_svfiprintf_r+0x1d2>
 8003eaa:	2340      	movs	r3, #64	; 0x40
 8003eac:	616b      	str	r3, [r5, #20]
 8003eae:	2300      	movs	r3, #0
 8003eb0:	9309      	str	r3, [sp, #36]	; 0x24
 8003eb2:	2320      	movs	r3, #32
 8003eb4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003eb8:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ebc:	2330      	movs	r3, #48	; 0x30
 8003ebe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004068 <_svfiprintf_r+0x1ec>
 8003ec2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ec6:	f04f 0901 	mov.w	r9, #1
 8003eca:	4623      	mov	r3, r4
 8003ecc:	469a      	mov	sl, r3
 8003ece:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ed2:	b10a      	cbz	r2, 8003ed8 <_svfiprintf_r+0x5c>
 8003ed4:	2a25      	cmp	r2, #37	; 0x25
 8003ed6:	d1f9      	bne.n	8003ecc <_svfiprintf_r+0x50>
 8003ed8:	ebba 0b04 	subs.w	fp, sl, r4
 8003edc:	d00b      	beq.n	8003ef6 <_svfiprintf_r+0x7a>
 8003ede:	465b      	mov	r3, fp
 8003ee0:	4622      	mov	r2, r4
 8003ee2:	4629      	mov	r1, r5
 8003ee4:	4638      	mov	r0, r7
 8003ee6:	f7ff ff6d 	bl	8003dc4 <__ssputs_r>
 8003eea:	3001      	adds	r0, #1
 8003eec:	f000 80aa 	beq.w	8004044 <_svfiprintf_r+0x1c8>
 8003ef0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ef2:	445a      	add	r2, fp
 8003ef4:	9209      	str	r2, [sp, #36]	; 0x24
 8003ef6:	f89a 3000 	ldrb.w	r3, [sl]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f000 80a2 	beq.w	8004044 <_svfiprintf_r+0x1c8>
 8003f00:	2300      	movs	r3, #0
 8003f02:	f04f 32ff 	mov.w	r2, #4294967295
 8003f06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f0a:	f10a 0a01 	add.w	sl, sl, #1
 8003f0e:	9304      	str	r3, [sp, #16]
 8003f10:	9307      	str	r3, [sp, #28]
 8003f12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f16:	931a      	str	r3, [sp, #104]	; 0x68
 8003f18:	4654      	mov	r4, sl
 8003f1a:	2205      	movs	r2, #5
 8003f1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f20:	4851      	ldr	r0, [pc, #324]	; (8004068 <_svfiprintf_r+0x1ec>)
 8003f22:	f7fc f95d 	bl	80001e0 <memchr>
 8003f26:	9a04      	ldr	r2, [sp, #16]
 8003f28:	b9d8      	cbnz	r0, 8003f62 <_svfiprintf_r+0xe6>
 8003f2a:	06d0      	lsls	r0, r2, #27
 8003f2c:	bf44      	itt	mi
 8003f2e:	2320      	movmi	r3, #32
 8003f30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f34:	0711      	lsls	r1, r2, #28
 8003f36:	bf44      	itt	mi
 8003f38:	232b      	movmi	r3, #43	; 0x2b
 8003f3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f3e:	f89a 3000 	ldrb.w	r3, [sl]
 8003f42:	2b2a      	cmp	r3, #42	; 0x2a
 8003f44:	d015      	beq.n	8003f72 <_svfiprintf_r+0xf6>
 8003f46:	9a07      	ldr	r2, [sp, #28]
 8003f48:	4654      	mov	r4, sl
 8003f4a:	2000      	movs	r0, #0
 8003f4c:	f04f 0c0a 	mov.w	ip, #10
 8003f50:	4621      	mov	r1, r4
 8003f52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f56:	3b30      	subs	r3, #48	; 0x30
 8003f58:	2b09      	cmp	r3, #9
 8003f5a:	d94e      	bls.n	8003ffa <_svfiprintf_r+0x17e>
 8003f5c:	b1b0      	cbz	r0, 8003f8c <_svfiprintf_r+0x110>
 8003f5e:	9207      	str	r2, [sp, #28]
 8003f60:	e014      	b.n	8003f8c <_svfiprintf_r+0x110>
 8003f62:	eba0 0308 	sub.w	r3, r0, r8
 8003f66:	fa09 f303 	lsl.w	r3, r9, r3
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	9304      	str	r3, [sp, #16]
 8003f6e:	46a2      	mov	sl, r4
 8003f70:	e7d2      	b.n	8003f18 <_svfiprintf_r+0x9c>
 8003f72:	9b03      	ldr	r3, [sp, #12]
 8003f74:	1d19      	adds	r1, r3, #4
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	9103      	str	r1, [sp, #12]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	bfbb      	ittet	lt
 8003f7e:	425b      	neglt	r3, r3
 8003f80:	f042 0202 	orrlt.w	r2, r2, #2
 8003f84:	9307      	strge	r3, [sp, #28]
 8003f86:	9307      	strlt	r3, [sp, #28]
 8003f88:	bfb8      	it	lt
 8003f8a:	9204      	strlt	r2, [sp, #16]
 8003f8c:	7823      	ldrb	r3, [r4, #0]
 8003f8e:	2b2e      	cmp	r3, #46	; 0x2e
 8003f90:	d10c      	bne.n	8003fac <_svfiprintf_r+0x130>
 8003f92:	7863      	ldrb	r3, [r4, #1]
 8003f94:	2b2a      	cmp	r3, #42	; 0x2a
 8003f96:	d135      	bne.n	8004004 <_svfiprintf_r+0x188>
 8003f98:	9b03      	ldr	r3, [sp, #12]
 8003f9a:	1d1a      	adds	r2, r3, #4
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	9203      	str	r2, [sp, #12]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	bfb8      	it	lt
 8003fa4:	f04f 33ff 	movlt.w	r3, #4294967295
 8003fa8:	3402      	adds	r4, #2
 8003faa:	9305      	str	r3, [sp, #20]
 8003fac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004078 <_svfiprintf_r+0x1fc>
 8003fb0:	7821      	ldrb	r1, [r4, #0]
 8003fb2:	2203      	movs	r2, #3
 8003fb4:	4650      	mov	r0, sl
 8003fb6:	f7fc f913 	bl	80001e0 <memchr>
 8003fba:	b140      	cbz	r0, 8003fce <_svfiprintf_r+0x152>
 8003fbc:	2340      	movs	r3, #64	; 0x40
 8003fbe:	eba0 000a 	sub.w	r0, r0, sl
 8003fc2:	fa03 f000 	lsl.w	r0, r3, r0
 8003fc6:	9b04      	ldr	r3, [sp, #16]
 8003fc8:	4303      	orrs	r3, r0
 8003fca:	3401      	adds	r4, #1
 8003fcc:	9304      	str	r3, [sp, #16]
 8003fce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fd2:	4826      	ldr	r0, [pc, #152]	; (800406c <_svfiprintf_r+0x1f0>)
 8003fd4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003fd8:	2206      	movs	r2, #6
 8003fda:	f7fc f901 	bl	80001e0 <memchr>
 8003fde:	2800      	cmp	r0, #0
 8003fe0:	d038      	beq.n	8004054 <_svfiprintf_r+0x1d8>
 8003fe2:	4b23      	ldr	r3, [pc, #140]	; (8004070 <_svfiprintf_r+0x1f4>)
 8003fe4:	bb1b      	cbnz	r3, 800402e <_svfiprintf_r+0x1b2>
 8003fe6:	9b03      	ldr	r3, [sp, #12]
 8003fe8:	3307      	adds	r3, #7
 8003fea:	f023 0307 	bic.w	r3, r3, #7
 8003fee:	3308      	adds	r3, #8
 8003ff0:	9303      	str	r3, [sp, #12]
 8003ff2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ff4:	4433      	add	r3, r6
 8003ff6:	9309      	str	r3, [sp, #36]	; 0x24
 8003ff8:	e767      	b.n	8003eca <_svfiprintf_r+0x4e>
 8003ffa:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ffe:	460c      	mov	r4, r1
 8004000:	2001      	movs	r0, #1
 8004002:	e7a5      	b.n	8003f50 <_svfiprintf_r+0xd4>
 8004004:	2300      	movs	r3, #0
 8004006:	3401      	adds	r4, #1
 8004008:	9305      	str	r3, [sp, #20]
 800400a:	4619      	mov	r1, r3
 800400c:	f04f 0c0a 	mov.w	ip, #10
 8004010:	4620      	mov	r0, r4
 8004012:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004016:	3a30      	subs	r2, #48	; 0x30
 8004018:	2a09      	cmp	r2, #9
 800401a:	d903      	bls.n	8004024 <_svfiprintf_r+0x1a8>
 800401c:	2b00      	cmp	r3, #0
 800401e:	d0c5      	beq.n	8003fac <_svfiprintf_r+0x130>
 8004020:	9105      	str	r1, [sp, #20]
 8004022:	e7c3      	b.n	8003fac <_svfiprintf_r+0x130>
 8004024:	fb0c 2101 	mla	r1, ip, r1, r2
 8004028:	4604      	mov	r4, r0
 800402a:	2301      	movs	r3, #1
 800402c:	e7f0      	b.n	8004010 <_svfiprintf_r+0x194>
 800402e:	ab03      	add	r3, sp, #12
 8004030:	9300      	str	r3, [sp, #0]
 8004032:	462a      	mov	r2, r5
 8004034:	4b0f      	ldr	r3, [pc, #60]	; (8004074 <_svfiprintf_r+0x1f8>)
 8004036:	a904      	add	r1, sp, #16
 8004038:	4638      	mov	r0, r7
 800403a:	f3af 8000 	nop.w
 800403e:	1c42      	adds	r2, r0, #1
 8004040:	4606      	mov	r6, r0
 8004042:	d1d6      	bne.n	8003ff2 <_svfiprintf_r+0x176>
 8004044:	89ab      	ldrh	r3, [r5, #12]
 8004046:	065b      	lsls	r3, r3, #25
 8004048:	f53f af2c 	bmi.w	8003ea4 <_svfiprintf_r+0x28>
 800404c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800404e:	b01d      	add	sp, #116	; 0x74
 8004050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004054:	ab03      	add	r3, sp, #12
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	462a      	mov	r2, r5
 800405a:	4b06      	ldr	r3, [pc, #24]	; (8004074 <_svfiprintf_r+0x1f8>)
 800405c:	a904      	add	r1, sp, #16
 800405e:	4638      	mov	r0, r7
 8004060:	f000 f87a 	bl	8004158 <_printf_i>
 8004064:	e7eb      	b.n	800403e <_svfiprintf_r+0x1c2>
 8004066:	bf00      	nop
 8004068:	080046f0 	.word	0x080046f0
 800406c:	080046fa 	.word	0x080046fa
 8004070:	00000000 	.word	0x00000000
 8004074:	08003dc5 	.word	0x08003dc5
 8004078:	080046f6 	.word	0x080046f6

0800407c <_printf_common>:
 800407c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004080:	4616      	mov	r6, r2
 8004082:	4699      	mov	r9, r3
 8004084:	688a      	ldr	r2, [r1, #8]
 8004086:	690b      	ldr	r3, [r1, #16]
 8004088:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800408c:	4293      	cmp	r3, r2
 800408e:	bfb8      	it	lt
 8004090:	4613      	movlt	r3, r2
 8004092:	6033      	str	r3, [r6, #0]
 8004094:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004098:	4607      	mov	r7, r0
 800409a:	460c      	mov	r4, r1
 800409c:	b10a      	cbz	r2, 80040a2 <_printf_common+0x26>
 800409e:	3301      	adds	r3, #1
 80040a0:	6033      	str	r3, [r6, #0]
 80040a2:	6823      	ldr	r3, [r4, #0]
 80040a4:	0699      	lsls	r1, r3, #26
 80040a6:	bf42      	ittt	mi
 80040a8:	6833      	ldrmi	r3, [r6, #0]
 80040aa:	3302      	addmi	r3, #2
 80040ac:	6033      	strmi	r3, [r6, #0]
 80040ae:	6825      	ldr	r5, [r4, #0]
 80040b0:	f015 0506 	ands.w	r5, r5, #6
 80040b4:	d106      	bne.n	80040c4 <_printf_common+0x48>
 80040b6:	f104 0a19 	add.w	sl, r4, #25
 80040ba:	68e3      	ldr	r3, [r4, #12]
 80040bc:	6832      	ldr	r2, [r6, #0]
 80040be:	1a9b      	subs	r3, r3, r2
 80040c0:	42ab      	cmp	r3, r5
 80040c2:	dc26      	bgt.n	8004112 <_printf_common+0x96>
 80040c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80040c8:	1e13      	subs	r3, r2, #0
 80040ca:	6822      	ldr	r2, [r4, #0]
 80040cc:	bf18      	it	ne
 80040ce:	2301      	movne	r3, #1
 80040d0:	0692      	lsls	r2, r2, #26
 80040d2:	d42b      	bmi.n	800412c <_printf_common+0xb0>
 80040d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040d8:	4649      	mov	r1, r9
 80040da:	4638      	mov	r0, r7
 80040dc:	47c0      	blx	r8
 80040de:	3001      	adds	r0, #1
 80040e0:	d01e      	beq.n	8004120 <_printf_common+0xa4>
 80040e2:	6823      	ldr	r3, [r4, #0]
 80040e4:	68e5      	ldr	r5, [r4, #12]
 80040e6:	6832      	ldr	r2, [r6, #0]
 80040e8:	f003 0306 	and.w	r3, r3, #6
 80040ec:	2b04      	cmp	r3, #4
 80040ee:	bf08      	it	eq
 80040f0:	1aad      	subeq	r5, r5, r2
 80040f2:	68a3      	ldr	r3, [r4, #8]
 80040f4:	6922      	ldr	r2, [r4, #16]
 80040f6:	bf0c      	ite	eq
 80040f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040fc:	2500      	movne	r5, #0
 80040fe:	4293      	cmp	r3, r2
 8004100:	bfc4      	itt	gt
 8004102:	1a9b      	subgt	r3, r3, r2
 8004104:	18ed      	addgt	r5, r5, r3
 8004106:	2600      	movs	r6, #0
 8004108:	341a      	adds	r4, #26
 800410a:	42b5      	cmp	r5, r6
 800410c:	d11a      	bne.n	8004144 <_printf_common+0xc8>
 800410e:	2000      	movs	r0, #0
 8004110:	e008      	b.n	8004124 <_printf_common+0xa8>
 8004112:	2301      	movs	r3, #1
 8004114:	4652      	mov	r2, sl
 8004116:	4649      	mov	r1, r9
 8004118:	4638      	mov	r0, r7
 800411a:	47c0      	blx	r8
 800411c:	3001      	adds	r0, #1
 800411e:	d103      	bne.n	8004128 <_printf_common+0xac>
 8004120:	f04f 30ff 	mov.w	r0, #4294967295
 8004124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004128:	3501      	adds	r5, #1
 800412a:	e7c6      	b.n	80040ba <_printf_common+0x3e>
 800412c:	18e1      	adds	r1, r4, r3
 800412e:	1c5a      	adds	r2, r3, #1
 8004130:	2030      	movs	r0, #48	; 0x30
 8004132:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004136:	4422      	add	r2, r4
 8004138:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800413c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004140:	3302      	adds	r3, #2
 8004142:	e7c7      	b.n	80040d4 <_printf_common+0x58>
 8004144:	2301      	movs	r3, #1
 8004146:	4622      	mov	r2, r4
 8004148:	4649      	mov	r1, r9
 800414a:	4638      	mov	r0, r7
 800414c:	47c0      	blx	r8
 800414e:	3001      	adds	r0, #1
 8004150:	d0e6      	beq.n	8004120 <_printf_common+0xa4>
 8004152:	3601      	adds	r6, #1
 8004154:	e7d9      	b.n	800410a <_printf_common+0x8e>
	...

08004158 <_printf_i>:
 8004158:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800415c:	460c      	mov	r4, r1
 800415e:	4691      	mov	r9, r2
 8004160:	7e27      	ldrb	r7, [r4, #24]
 8004162:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004164:	2f78      	cmp	r7, #120	; 0x78
 8004166:	4680      	mov	r8, r0
 8004168:	469a      	mov	sl, r3
 800416a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800416e:	d807      	bhi.n	8004180 <_printf_i+0x28>
 8004170:	2f62      	cmp	r7, #98	; 0x62
 8004172:	d80a      	bhi.n	800418a <_printf_i+0x32>
 8004174:	2f00      	cmp	r7, #0
 8004176:	f000 80d8 	beq.w	800432a <_printf_i+0x1d2>
 800417a:	2f58      	cmp	r7, #88	; 0x58
 800417c:	f000 80a3 	beq.w	80042c6 <_printf_i+0x16e>
 8004180:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004184:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004188:	e03a      	b.n	8004200 <_printf_i+0xa8>
 800418a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800418e:	2b15      	cmp	r3, #21
 8004190:	d8f6      	bhi.n	8004180 <_printf_i+0x28>
 8004192:	a001      	add	r0, pc, #4	; (adr r0, 8004198 <_printf_i+0x40>)
 8004194:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004198:	080041f1 	.word	0x080041f1
 800419c:	08004205 	.word	0x08004205
 80041a0:	08004181 	.word	0x08004181
 80041a4:	08004181 	.word	0x08004181
 80041a8:	08004181 	.word	0x08004181
 80041ac:	08004181 	.word	0x08004181
 80041b0:	08004205 	.word	0x08004205
 80041b4:	08004181 	.word	0x08004181
 80041b8:	08004181 	.word	0x08004181
 80041bc:	08004181 	.word	0x08004181
 80041c0:	08004181 	.word	0x08004181
 80041c4:	08004311 	.word	0x08004311
 80041c8:	08004235 	.word	0x08004235
 80041cc:	080042f3 	.word	0x080042f3
 80041d0:	08004181 	.word	0x08004181
 80041d4:	08004181 	.word	0x08004181
 80041d8:	08004333 	.word	0x08004333
 80041dc:	08004181 	.word	0x08004181
 80041e0:	08004235 	.word	0x08004235
 80041e4:	08004181 	.word	0x08004181
 80041e8:	08004181 	.word	0x08004181
 80041ec:	080042fb 	.word	0x080042fb
 80041f0:	680b      	ldr	r3, [r1, #0]
 80041f2:	1d1a      	adds	r2, r3, #4
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	600a      	str	r2, [r1, #0]
 80041f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80041fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004200:	2301      	movs	r3, #1
 8004202:	e0a3      	b.n	800434c <_printf_i+0x1f4>
 8004204:	6825      	ldr	r5, [r4, #0]
 8004206:	6808      	ldr	r0, [r1, #0]
 8004208:	062e      	lsls	r6, r5, #24
 800420a:	f100 0304 	add.w	r3, r0, #4
 800420e:	d50a      	bpl.n	8004226 <_printf_i+0xce>
 8004210:	6805      	ldr	r5, [r0, #0]
 8004212:	600b      	str	r3, [r1, #0]
 8004214:	2d00      	cmp	r5, #0
 8004216:	da03      	bge.n	8004220 <_printf_i+0xc8>
 8004218:	232d      	movs	r3, #45	; 0x2d
 800421a:	426d      	negs	r5, r5
 800421c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004220:	485e      	ldr	r0, [pc, #376]	; (800439c <_printf_i+0x244>)
 8004222:	230a      	movs	r3, #10
 8004224:	e019      	b.n	800425a <_printf_i+0x102>
 8004226:	f015 0f40 	tst.w	r5, #64	; 0x40
 800422a:	6805      	ldr	r5, [r0, #0]
 800422c:	600b      	str	r3, [r1, #0]
 800422e:	bf18      	it	ne
 8004230:	b22d      	sxthne	r5, r5
 8004232:	e7ef      	b.n	8004214 <_printf_i+0xbc>
 8004234:	680b      	ldr	r3, [r1, #0]
 8004236:	6825      	ldr	r5, [r4, #0]
 8004238:	1d18      	adds	r0, r3, #4
 800423a:	6008      	str	r0, [r1, #0]
 800423c:	0628      	lsls	r0, r5, #24
 800423e:	d501      	bpl.n	8004244 <_printf_i+0xec>
 8004240:	681d      	ldr	r5, [r3, #0]
 8004242:	e002      	b.n	800424a <_printf_i+0xf2>
 8004244:	0669      	lsls	r1, r5, #25
 8004246:	d5fb      	bpl.n	8004240 <_printf_i+0xe8>
 8004248:	881d      	ldrh	r5, [r3, #0]
 800424a:	4854      	ldr	r0, [pc, #336]	; (800439c <_printf_i+0x244>)
 800424c:	2f6f      	cmp	r7, #111	; 0x6f
 800424e:	bf0c      	ite	eq
 8004250:	2308      	moveq	r3, #8
 8004252:	230a      	movne	r3, #10
 8004254:	2100      	movs	r1, #0
 8004256:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800425a:	6866      	ldr	r6, [r4, #4]
 800425c:	60a6      	str	r6, [r4, #8]
 800425e:	2e00      	cmp	r6, #0
 8004260:	bfa2      	ittt	ge
 8004262:	6821      	ldrge	r1, [r4, #0]
 8004264:	f021 0104 	bicge.w	r1, r1, #4
 8004268:	6021      	strge	r1, [r4, #0]
 800426a:	b90d      	cbnz	r5, 8004270 <_printf_i+0x118>
 800426c:	2e00      	cmp	r6, #0
 800426e:	d04d      	beq.n	800430c <_printf_i+0x1b4>
 8004270:	4616      	mov	r6, r2
 8004272:	fbb5 f1f3 	udiv	r1, r5, r3
 8004276:	fb03 5711 	mls	r7, r3, r1, r5
 800427a:	5dc7      	ldrb	r7, [r0, r7]
 800427c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004280:	462f      	mov	r7, r5
 8004282:	42bb      	cmp	r3, r7
 8004284:	460d      	mov	r5, r1
 8004286:	d9f4      	bls.n	8004272 <_printf_i+0x11a>
 8004288:	2b08      	cmp	r3, #8
 800428a:	d10b      	bne.n	80042a4 <_printf_i+0x14c>
 800428c:	6823      	ldr	r3, [r4, #0]
 800428e:	07df      	lsls	r7, r3, #31
 8004290:	d508      	bpl.n	80042a4 <_printf_i+0x14c>
 8004292:	6923      	ldr	r3, [r4, #16]
 8004294:	6861      	ldr	r1, [r4, #4]
 8004296:	4299      	cmp	r1, r3
 8004298:	bfde      	ittt	le
 800429a:	2330      	movle	r3, #48	; 0x30
 800429c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80042a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80042a4:	1b92      	subs	r2, r2, r6
 80042a6:	6122      	str	r2, [r4, #16]
 80042a8:	f8cd a000 	str.w	sl, [sp]
 80042ac:	464b      	mov	r3, r9
 80042ae:	aa03      	add	r2, sp, #12
 80042b0:	4621      	mov	r1, r4
 80042b2:	4640      	mov	r0, r8
 80042b4:	f7ff fee2 	bl	800407c <_printf_common>
 80042b8:	3001      	adds	r0, #1
 80042ba:	d14c      	bne.n	8004356 <_printf_i+0x1fe>
 80042bc:	f04f 30ff 	mov.w	r0, #4294967295
 80042c0:	b004      	add	sp, #16
 80042c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042c6:	4835      	ldr	r0, [pc, #212]	; (800439c <_printf_i+0x244>)
 80042c8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80042cc:	6823      	ldr	r3, [r4, #0]
 80042ce:	680e      	ldr	r6, [r1, #0]
 80042d0:	061f      	lsls	r7, r3, #24
 80042d2:	f856 5b04 	ldr.w	r5, [r6], #4
 80042d6:	600e      	str	r6, [r1, #0]
 80042d8:	d514      	bpl.n	8004304 <_printf_i+0x1ac>
 80042da:	07d9      	lsls	r1, r3, #31
 80042dc:	bf44      	itt	mi
 80042de:	f043 0320 	orrmi.w	r3, r3, #32
 80042e2:	6023      	strmi	r3, [r4, #0]
 80042e4:	b91d      	cbnz	r5, 80042ee <_printf_i+0x196>
 80042e6:	6823      	ldr	r3, [r4, #0]
 80042e8:	f023 0320 	bic.w	r3, r3, #32
 80042ec:	6023      	str	r3, [r4, #0]
 80042ee:	2310      	movs	r3, #16
 80042f0:	e7b0      	b.n	8004254 <_printf_i+0xfc>
 80042f2:	6823      	ldr	r3, [r4, #0]
 80042f4:	f043 0320 	orr.w	r3, r3, #32
 80042f8:	6023      	str	r3, [r4, #0]
 80042fa:	2378      	movs	r3, #120	; 0x78
 80042fc:	4828      	ldr	r0, [pc, #160]	; (80043a0 <_printf_i+0x248>)
 80042fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004302:	e7e3      	b.n	80042cc <_printf_i+0x174>
 8004304:	065e      	lsls	r6, r3, #25
 8004306:	bf48      	it	mi
 8004308:	b2ad      	uxthmi	r5, r5
 800430a:	e7e6      	b.n	80042da <_printf_i+0x182>
 800430c:	4616      	mov	r6, r2
 800430e:	e7bb      	b.n	8004288 <_printf_i+0x130>
 8004310:	680b      	ldr	r3, [r1, #0]
 8004312:	6826      	ldr	r6, [r4, #0]
 8004314:	6960      	ldr	r0, [r4, #20]
 8004316:	1d1d      	adds	r5, r3, #4
 8004318:	600d      	str	r5, [r1, #0]
 800431a:	0635      	lsls	r5, r6, #24
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	d501      	bpl.n	8004324 <_printf_i+0x1cc>
 8004320:	6018      	str	r0, [r3, #0]
 8004322:	e002      	b.n	800432a <_printf_i+0x1d2>
 8004324:	0671      	lsls	r1, r6, #25
 8004326:	d5fb      	bpl.n	8004320 <_printf_i+0x1c8>
 8004328:	8018      	strh	r0, [r3, #0]
 800432a:	2300      	movs	r3, #0
 800432c:	6123      	str	r3, [r4, #16]
 800432e:	4616      	mov	r6, r2
 8004330:	e7ba      	b.n	80042a8 <_printf_i+0x150>
 8004332:	680b      	ldr	r3, [r1, #0]
 8004334:	1d1a      	adds	r2, r3, #4
 8004336:	600a      	str	r2, [r1, #0]
 8004338:	681e      	ldr	r6, [r3, #0]
 800433a:	6862      	ldr	r2, [r4, #4]
 800433c:	2100      	movs	r1, #0
 800433e:	4630      	mov	r0, r6
 8004340:	f7fb ff4e 	bl	80001e0 <memchr>
 8004344:	b108      	cbz	r0, 800434a <_printf_i+0x1f2>
 8004346:	1b80      	subs	r0, r0, r6
 8004348:	6060      	str	r0, [r4, #4]
 800434a:	6863      	ldr	r3, [r4, #4]
 800434c:	6123      	str	r3, [r4, #16]
 800434e:	2300      	movs	r3, #0
 8004350:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004354:	e7a8      	b.n	80042a8 <_printf_i+0x150>
 8004356:	6923      	ldr	r3, [r4, #16]
 8004358:	4632      	mov	r2, r6
 800435a:	4649      	mov	r1, r9
 800435c:	4640      	mov	r0, r8
 800435e:	47d0      	blx	sl
 8004360:	3001      	adds	r0, #1
 8004362:	d0ab      	beq.n	80042bc <_printf_i+0x164>
 8004364:	6823      	ldr	r3, [r4, #0]
 8004366:	079b      	lsls	r3, r3, #30
 8004368:	d413      	bmi.n	8004392 <_printf_i+0x23a>
 800436a:	68e0      	ldr	r0, [r4, #12]
 800436c:	9b03      	ldr	r3, [sp, #12]
 800436e:	4298      	cmp	r0, r3
 8004370:	bfb8      	it	lt
 8004372:	4618      	movlt	r0, r3
 8004374:	e7a4      	b.n	80042c0 <_printf_i+0x168>
 8004376:	2301      	movs	r3, #1
 8004378:	4632      	mov	r2, r6
 800437a:	4649      	mov	r1, r9
 800437c:	4640      	mov	r0, r8
 800437e:	47d0      	blx	sl
 8004380:	3001      	adds	r0, #1
 8004382:	d09b      	beq.n	80042bc <_printf_i+0x164>
 8004384:	3501      	adds	r5, #1
 8004386:	68e3      	ldr	r3, [r4, #12]
 8004388:	9903      	ldr	r1, [sp, #12]
 800438a:	1a5b      	subs	r3, r3, r1
 800438c:	42ab      	cmp	r3, r5
 800438e:	dcf2      	bgt.n	8004376 <_printf_i+0x21e>
 8004390:	e7eb      	b.n	800436a <_printf_i+0x212>
 8004392:	2500      	movs	r5, #0
 8004394:	f104 0619 	add.w	r6, r4, #25
 8004398:	e7f5      	b.n	8004386 <_printf_i+0x22e>
 800439a:	bf00      	nop
 800439c:	08004701 	.word	0x08004701
 80043a0:	08004712 	.word	0x08004712

080043a4 <memcpy>:
 80043a4:	440a      	add	r2, r1
 80043a6:	4291      	cmp	r1, r2
 80043a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80043ac:	d100      	bne.n	80043b0 <memcpy+0xc>
 80043ae:	4770      	bx	lr
 80043b0:	b510      	push	{r4, lr}
 80043b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043ba:	4291      	cmp	r1, r2
 80043bc:	d1f9      	bne.n	80043b2 <memcpy+0xe>
 80043be:	bd10      	pop	{r4, pc}

080043c0 <memmove>:
 80043c0:	4288      	cmp	r0, r1
 80043c2:	b510      	push	{r4, lr}
 80043c4:	eb01 0402 	add.w	r4, r1, r2
 80043c8:	d902      	bls.n	80043d0 <memmove+0x10>
 80043ca:	4284      	cmp	r4, r0
 80043cc:	4623      	mov	r3, r4
 80043ce:	d807      	bhi.n	80043e0 <memmove+0x20>
 80043d0:	1e43      	subs	r3, r0, #1
 80043d2:	42a1      	cmp	r1, r4
 80043d4:	d008      	beq.n	80043e8 <memmove+0x28>
 80043d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80043da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80043de:	e7f8      	b.n	80043d2 <memmove+0x12>
 80043e0:	4402      	add	r2, r0
 80043e2:	4601      	mov	r1, r0
 80043e4:	428a      	cmp	r2, r1
 80043e6:	d100      	bne.n	80043ea <memmove+0x2a>
 80043e8:	bd10      	pop	{r4, pc}
 80043ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80043ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80043f2:	e7f7      	b.n	80043e4 <memmove+0x24>

080043f4 <_free_r>:
 80043f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80043f6:	2900      	cmp	r1, #0
 80043f8:	d048      	beq.n	800448c <_free_r+0x98>
 80043fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043fe:	9001      	str	r0, [sp, #4]
 8004400:	2b00      	cmp	r3, #0
 8004402:	f1a1 0404 	sub.w	r4, r1, #4
 8004406:	bfb8      	it	lt
 8004408:	18e4      	addlt	r4, r4, r3
 800440a:	f000 f8d3 	bl	80045b4 <__malloc_lock>
 800440e:	4a20      	ldr	r2, [pc, #128]	; (8004490 <_free_r+0x9c>)
 8004410:	9801      	ldr	r0, [sp, #4]
 8004412:	6813      	ldr	r3, [r2, #0]
 8004414:	4615      	mov	r5, r2
 8004416:	b933      	cbnz	r3, 8004426 <_free_r+0x32>
 8004418:	6063      	str	r3, [r4, #4]
 800441a:	6014      	str	r4, [r2, #0]
 800441c:	b003      	add	sp, #12
 800441e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004422:	f000 b8cd 	b.w	80045c0 <__malloc_unlock>
 8004426:	42a3      	cmp	r3, r4
 8004428:	d90b      	bls.n	8004442 <_free_r+0x4e>
 800442a:	6821      	ldr	r1, [r4, #0]
 800442c:	1862      	adds	r2, r4, r1
 800442e:	4293      	cmp	r3, r2
 8004430:	bf04      	itt	eq
 8004432:	681a      	ldreq	r2, [r3, #0]
 8004434:	685b      	ldreq	r3, [r3, #4]
 8004436:	6063      	str	r3, [r4, #4]
 8004438:	bf04      	itt	eq
 800443a:	1852      	addeq	r2, r2, r1
 800443c:	6022      	streq	r2, [r4, #0]
 800443e:	602c      	str	r4, [r5, #0]
 8004440:	e7ec      	b.n	800441c <_free_r+0x28>
 8004442:	461a      	mov	r2, r3
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	b10b      	cbz	r3, 800444c <_free_r+0x58>
 8004448:	42a3      	cmp	r3, r4
 800444a:	d9fa      	bls.n	8004442 <_free_r+0x4e>
 800444c:	6811      	ldr	r1, [r2, #0]
 800444e:	1855      	adds	r5, r2, r1
 8004450:	42a5      	cmp	r5, r4
 8004452:	d10b      	bne.n	800446c <_free_r+0x78>
 8004454:	6824      	ldr	r4, [r4, #0]
 8004456:	4421      	add	r1, r4
 8004458:	1854      	adds	r4, r2, r1
 800445a:	42a3      	cmp	r3, r4
 800445c:	6011      	str	r1, [r2, #0]
 800445e:	d1dd      	bne.n	800441c <_free_r+0x28>
 8004460:	681c      	ldr	r4, [r3, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	6053      	str	r3, [r2, #4]
 8004466:	4421      	add	r1, r4
 8004468:	6011      	str	r1, [r2, #0]
 800446a:	e7d7      	b.n	800441c <_free_r+0x28>
 800446c:	d902      	bls.n	8004474 <_free_r+0x80>
 800446e:	230c      	movs	r3, #12
 8004470:	6003      	str	r3, [r0, #0]
 8004472:	e7d3      	b.n	800441c <_free_r+0x28>
 8004474:	6825      	ldr	r5, [r4, #0]
 8004476:	1961      	adds	r1, r4, r5
 8004478:	428b      	cmp	r3, r1
 800447a:	bf04      	itt	eq
 800447c:	6819      	ldreq	r1, [r3, #0]
 800447e:	685b      	ldreq	r3, [r3, #4]
 8004480:	6063      	str	r3, [r4, #4]
 8004482:	bf04      	itt	eq
 8004484:	1949      	addeq	r1, r1, r5
 8004486:	6021      	streq	r1, [r4, #0]
 8004488:	6054      	str	r4, [r2, #4]
 800448a:	e7c7      	b.n	800441c <_free_r+0x28>
 800448c:	b003      	add	sp, #12
 800448e:	bd30      	pop	{r4, r5, pc}
 8004490:	20000098 	.word	0x20000098

08004494 <_malloc_r>:
 8004494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004496:	1ccd      	adds	r5, r1, #3
 8004498:	f025 0503 	bic.w	r5, r5, #3
 800449c:	3508      	adds	r5, #8
 800449e:	2d0c      	cmp	r5, #12
 80044a0:	bf38      	it	cc
 80044a2:	250c      	movcc	r5, #12
 80044a4:	2d00      	cmp	r5, #0
 80044a6:	4606      	mov	r6, r0
 80044a8:	db01      	blt.n	80044ae <_malloc_r+0x1a>
 80044aa:	42a9      	cmp	r1, r5
 80044ac:	d903      	bls.n	80044b6 <_malloc_r+0x22>
 80044ae:	230c      	movs	r3, #12
 80044b0:	6033      	str	r3, [r6, #0]
 80044b2:	2000      	movs	r0, #0
 80044b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044b6:	f000 f87d 	bl	80045b4 <__malloc_lock>
 80044ba:	4921      	ldr	r1, [pc, #132]	; (8004540 <_malloc_r+0xac>)
 80044bc:	680a      	ldr	r2, [r1, #0]
 80044be:	4614      	mov	r4, r2
 80044c0:	b99c      	cbnz	r4, 80044ea <_malloc_r+0x56>
 80044c2:	4f20      	ldr	r7, [pc, #128]	; (8004544 <_malloc_r+0xb0>)
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	b923      	cbnz	r3, 80044d2 <_malloc_r+0x3e>
 80044c8:	4621      	mov	r1, r4
 80044ca:	4630      	mov	r0, r6
 80044cc:	f000 f862 	bl	8004594 <_sbrk_r>
 80044d0:	6038      	str	r0, [r7, #0]
 80044d2:	4629      	mov	r1, r5
 80044d4:	4630      	mov	r0, r6
 80044d6:	f000 f85d 	bl	8004594 <_sbrk_r>
 80044da:	1c43      	adds	r3, r0, #1
 80044dc:	d123      	bne.n	8004526 <_malloc_r+0x92>
 80044de:	230c      	movs	r3, #12
 80044e0:	6033      	str	r3, [r6, #0]
 80044e2:	4630      	mov	r0, r6
 80044e4:	f000 f86c 	bl	80045c0 <__malloc_unlock>
 80044e8:	e7e3      	b.n	80044b2 <_malloc_r+0x1e>
 80044ea:	6823      	ldr	r3, [r4, #0]
 80044ec:	1b5b      	subs	r3, r3, r5
 80044ee:	d417      	bmi.n	8004520 <_malloc_r+0x8c>
 80044f0:	2b0b      	cmp	r3, #11
 80044f2:	d903      	bls.n	80044fc <_malloc_r+0x68>
 80044f4:	6023      	str	r3, [r4, #0]
 80044f6:	441c      	add	r4, r3
 80044f8:	6025      	str	r5, [r4, #0]
 80044fa:	e004      	b.n	8004506 <_malloc_r+0x72>
 80044fc:	6863      	ldr	r3, [r4, #4]
 80044fe:	42a2      	cmp	r2, r4
 8004500:	bf0c      	ite	eq
 8004502:	600b      	streq	r3, [r1, #0]
 8004504:	6053      	strne	r3, [r2, #4]
 8004506:	4630      	mov	r0, r6
 8004508:	f000 f85a 	bl	80045c0 <__malloc_unlock>
 800450c:	f104 000b 	add.w	r0, r4, #11
 8004510:	1d23      	adds	r3, r4, #4
 8004512:	f020 0007 	bic.w	r0, r0, #7
 8004516:	1ac2      	subs	r2, r0, r3
 8004518:	d0cc      	beq.n	80044b4 <_malloc_r+0x20>
 800451a:	1a1b      	subs	r3, r3, r0
 800451c:	50a3      	str	r3, [r4, r2]
 800451e:	e7c9      	b.n	80044b4 <_malloc_r+0x20>
 8004520:	4622      	mov	r2, r4
 8004522:	6864      	ldr	r4, [r4, #4]
 8004524:	e7cc      	b.n	80044c0 <_malloc_r+0x2c>
 8004526:	1cc4      	adds	r4, r0, #3
 8004528:	f024 0403 	bic.w	r4, r4, #3
 800452c:	42a0      	cmp	r0, r4
 800452e:	d0e3      	beq.n	80044f8 <_malloc_r+0x64>
 8004530:	1a21      	subs	r1, r4, r0
 8004532:	4630      	mov	r0, r6
 8004534:	f000 f82e 	bl	8004594 <_sbrk_r>
 8004538:	3001      	adds	r0, #1
 800453a:	d1dd      	bne.n	80044f8 <_malloc_r+0x64>
 800453c:	e7cf      	b.n	80044de <_malloc_r+0x4a>
 800453e:	bf00      	nop
 8004540:	20000098 	.word	0x20000098
 8004544:	2000009c 	.word	0x2000009c

08004548 <_realloc_r>:
 8004548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800454a:	4607      	mov	r7, r0
 800454c:	4614      	mov	r4, r2
 800454e:	460e      	mov	r6, r1
 8004550:	b921      	cbnz	r1, 800455c <_realloc_r+0x14>
 8004552:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004556:	4611      	mov	r1, r2
 8004558:	f7ff bf9c 	b.w	8004494 <_malloc_r>
 800455c:	b922      	cbnz	r2, 8004568 <_realloc_r+0x20>
 800455e:	f7ff ff49 	bl	80043f4 <_free_r>
 8004562:	4625      	mov	r5, r4
 8004564:	4628      	mov	r0, r5
 8004566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004568:	f000 f830 	bl	80045cc <_malloc_usable_size_r>
 800456c:	42a0      	cmp	r0, r4
 800456e:	d20f      	bcs.n	8004590 <_realloc_r+0x48>
 8004570:	4621      	mov	r1, r4
 8004572:	4638      	mov	r0, r7
 8004574:	f7ff ff8e 	bl	8004494 <_malloc_r>
 8004578:	4605      	mov	r5, r0
 800457a:	2800      	cmp	r0, #0
 800457c:	d0f2      	beq.n	8004564 <_realloc_r+0x1c>
 800457e:	4631      	mov	r1, r6
 8004580:	4622      	mov	r2, r4
 8004582:	f7ff ff0f 	bl	80043a4 <memcpy>
 8004586:	4631      	mov	r1, r6
 8004588:	4638      	mov	r0, r7
 800458a:	f7ff ff33 	bl	80043f4 <_free_r>
 800458e:	e7e9      	b.n	8004564 <_realloc_r+0x1c>
 8004590:	4635      	mov	r5, r6
 8004592:	e7e7      	b.n	8004564 <_realloc_r+0x1c>

08004594 <_sbrk_r>:
 8004594:	b538      	push	{r3, r4, r5, lr}
 8004596:	4d06      	ldr	r5, [pc, #24]	; (80045b0 <_sbrk_r+0x1c>)
 8004598:	2300      	movs	r3, #0
 800459a:	4604      	mov	r4, r0
 800459c:	4608      	mov	r0, r1
 800459e:	602b      	str	r3, [r5, #0]
 80045a0:	f7fc faf8 	bl	8000b94 <_sbrk>
 80045a4:	1c43      	adds	r3, r0, #1
 80045a6:	d102      	bne.n	80045ae <_sbrk_r+0x1a>
 80045a8:	682b      	ldr	r3, [r5, #0]
 80045aa:	b103      	cbz	r3, 80045ae <_sbrk_r+0x1a>
 80045ac:	6023      	str	r3, [r4, #0]
 80045ae:	bd38      	pop	{r3, r4, r5, pc}
 80045b0:	200001a0 	.word	0x200001a0

080045b4 <__malloc_lock>:
 80045b4:	4801      	ldr	r0, [pc, #4]	; (80045bc <__malloc_lock+0x8>)
 80045b6:	f000 b811 	b.w	80045dc <__retarget_lock_acquire_recursive>
 80045ba:	bf00      	nop
 80045bc:	200001a8 	.word	0x200001a8

080045c0 <__malloc_unlock>:
 80045c0:	4801      	ldr	r0, [pc, #4]	; (80045c8 <__malloc_unlock+0x8>)
 80045c2:	f000 b80c 	b.w	80045de <__retarget_lock_release_recursive>
 80045c6:	bf00      	nop
 80045c8:	200001a8 	.word	0x200001a8

080045cc <_malloc_usable_size_r>:
 80045cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045d0:	1f18      	subs	r0, r3, #4
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	bfbc      	itt	lt
 80045d6:	580b      	ldrlt	r3, [r1, r0]
 80045d8:	18c0      	addlt	r0, r0, r3
 80045da:	4770      	bx	lr

080045dc <__retarget_lock_acquire_recursive>:
 80045dc:	4770      	bx	lr

080045de <__retarget_lock_release_recursive>:
 80045de:	4770      	bx	lr

080045e0 <_init>:
 80045e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045e2:	bf00      	nop
 80045e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045e6:	bc08      	pop	{r3}
 80045e8:	469e      	mov	lr, r3
 80045ea:	4770      	bx	lr

080045ec <_fini>:
 80045ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ee:	bf00      	nop
 80045f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045f2:	bc08      	pop	{r3}
 80045f4:	469e      	mov	lr, r3
 80045f6:	4770      	bx	lr
