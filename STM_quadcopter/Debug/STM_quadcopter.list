
STM_quadcopter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000441c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  080045bc  080045bc  000145bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046b8  080046b8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080046b8  080046b8  000146b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046c0  080046c0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046c0  080046c0  000146c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046c4  080046c4  000146c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080046c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  20000070  08004738  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001f4  08004738  000201f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011bc8  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002690  00000000  00000000  00031c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  000342f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c88  00000000  00000000  00035088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017304  00000000  00000000  00035d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012025  00000000  00000000  0004d014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dec8  00000000  00000000  0005f039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ecf01  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b14  00000000  00000000  000ecf54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080045a4 	.word	0x080045a4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080045a4 	.word	0x080045a4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <PRINTF>:
#include "debug.h"
#include <stdio.h>
#include <string.h>

void PRINTF(char str[100]){
 8000578:	b580      	push	{r7, lr}
 800057a:	b09c      	sub	sp, #112	; 0x70
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  char msg[100];
  int msg_len;
  msg_len = sprintf(msg, str);
 8000580:	f107 0308 	add.w	r3, r7, #8
 8000584:	6879      	ldr	r1, [r7, #4]
 8000586:	4618      	mov	r0, r3
 8000588:	f003 fbde 	bl	8003d48 <siprintf>
 800058c:	66f8      	str	r0, [r7, #108]	; 0x6c
  HAL_UART_Transmit(&huart2, (uint8_t *)msg, msg_len, 5000);
 800058e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000590:	b29a      	uxth	r2, r3
 8000592:	f107 0108 	add.w	r1, r7, #8
 8000596:	f241 3388 	movw	r3, #5000	; 0x1388
 800059a:	4803      	ldr	r0, [pc, #12]	; (80005a8 <PRINTF+0x30>)
 800059c:	f002 fb67 	bl	8002c6e <HAL_UART_Transmit>
}
 80005a0:	bf00      	nop
 80005a2:	3770      	adds	r7, #112	; 0x70
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	2000019c 	.word	0x2000019c

080005ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	; 0x28
 80005b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b2:	f107 0314 	add.w	r3, r7, #20
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
 80005c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	613b      	str	r3, [r7, #16]
 80005c6:	4b3b      	ldr	r3, [pc, #236]	; (80006b4 <MX_GPIO_Init+0x108>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	4a3a      	ldr	r2, [pc, #232]	; (80006b4 <MX_GPIO_Init+0x108>)
 80005cc:	f043 0304 	orr.w	r3, r3, #4
 80005d0:	6313      	str	r3, [r2, #48]	; 0x30
 80005d2:	4b38      	ldr	r3, [pc, #224]	; (80006b4 <MX_GPIO_Init+0x108>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	f003 0304 	and.w	r3, r3, #4
 80005da:	613b      	str	r3, [r7, #16]
 80005dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	60fb      	str	r3, [r7, #12]
 80005e2:	4b34      	ldr	r3, [pc, #208]	; (80006b4 <MX_GPIO_Init+0x108>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	4a33      	ldr	r2, [pc, #204]	; (80006b4 <MX_GPIO_Init+0x108>)
 80005e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005ec:	6313      	str	r3, [r2, #48]	; 0x30
 80005ee:	4b31      	ldr	r3, [pc, #196]	; (80006b4 <MX_GPIO_Init+0x108>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	4b2d      	ldr	r3, [pc, #180]	; (80006b4 <MX_GPIO_Init+0x108>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a2c      	ldr	r2, [pc, #176]	; (80006b4 <MX_GPIO_Init+0x108>)
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b2a      	ldr	r3, [pc, #168]	; (80006b4 <MX_GPIO_Init+0x108>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	4b26      	ldr	r3, [pc, #152]	; (80006b4 <MX_GPIO_Init+0x108>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a25      	ldr	r2, [pc, #148]	; (80006b4 <MX_GPIO_Init+0x108>)
 8000620:	f043 0302 	orr.w	r3, r3, #2
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b23      	ldr	r3, [pc, #140]	; (80006b4 <MX_GPIO_Init+0x108>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f003 0302 	and.w	r3, r3, #2
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	2120      	movs	r1, #32
 8000636:	4820      	ldr	r0, [pc, #128]	; (80006b8 <MX_GPIO_Init+0x10c>)
 8000638:	f000 fff0 	bl	800161c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800063c:	2200      	movs	r2, #0
 800063e:	2101      	movs	r1, #1
 8000640:	481e      	ldr	r0, [pc, #120]	; (80006bc <MX_GPIO_Init+0x110>)
 8000642:	f000 ffeb 	bl	800161c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000646:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800064a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800064c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000650:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000652:	2300      	movs	r3, #0
 8000654:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000656:	f107 0314 	add.w	r3, r7, #20
 800065a:	4619      	mov	r1, r3
 800065c:	4818      	ldr	r0, [pc, #96]	; (80006c0 <MX_GPIO_Init+0x114>)
 800065e:	f000 fe59 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000662:	2320      	movs	r3, #32
 8000664:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000666:	2301      	movs	r3, #1
 8000668:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066e:	2300      	movs	r3, #0
 8000670:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000672:	f107 0314 	add.w	r3, r7, #20
 8000676:	4619      	mov	r1, r3
 8000678:	480f      	ldr	r0, [pc, #60]	; (80006b8 <MX_GPIO_Init+0x10c>)
 800067a:	f000 fe4b 	bl	8001314 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800067e:	2301      	movs	r3, #1
 8000680:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000682:	2301      	movs	r3, #1
 8000684:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068a:	2300      	movs	r3, #0
 800068c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	4619      	mov	r1, r3
 8000694:	4809      	ldr	r0, [pc, #36]	; (80006bc <MX_GPIO_Init+0x110>)
 8000696:	f000 fe3d 	bl	8001314 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800069a:	2200      	movs	r2, #0
 800069c:	2100      	movs	r1, #0
 800069e:	2028      	movs	r0, #40	; 0x28
 80006a0:	f000 fd6f 	bl	8001182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006a4:	2028      	movs	r0, #40	; 0x28
 80006a6:	f000 fd88 	bl	80011ba <HAL_NVIC_EnableIRQ>

}
 80006aa:	bf00      	nop
 80006ac:	3728      	adds	r7, #40	; 0x28
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40020000 	.word	0x40020000
 80006bc:	40020400 	.word	0x40020400
 80006c0:	40020800 	.word	0x40020800

080006c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b09c      	sub	sp, #112	; 0x70
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ca:	f000 fc0d 	bl	8000ee8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ce:	f000 f841 	bl	8000754 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d2:	f7ff ff6b 	bl	80005ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006d6:	f000 fb03 	bl	8000ce0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80006da:	f000 fa29 	bl	8000b30 <MX_TIM2_Init>
  MX_USART6_UART_Init();
 80006de:	f000 fb29 	bl	8000d34 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */



  PRINTF("\n\r BEGINNING OF THE CODE \n\n\r");
 80006e2:	4816      	ldr	r0, [pc, #88]	; (800073c <main+0x78>)
 80006e4:	f7ff ff48 	bl	8000578 <PRINTF>

  // Start the counter for the PWM signal
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80006e8:	2100      	movs	r1, #0
 80006ea:	4815      	ldr	r0, [pc, #84]	; (8000740 <main+0x7c>)
 80006ec:	f001 fcfe 	bl	80020ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80006f0:	2104      	movs	r1, #4
 80006f2:	4813      	ldr	r0, [pc, #76]	; (8000740 <main+0x7c>)
 80006f4:	f001 fcfa 	bl	80020ec <HAL_TIM_PWM_Start>

  HAL_UART_Receive_IT(&huart6, (uint8_t*)cmd_rx, 1);
 80006f8:	2201      	movs	r2, #1
 80006fa:	4912      	ldr	r1, [pc, #72]	; (8000744 <main+0x80>)
 80006fc:	4812      	ldr	r0, [pc, #72]	; (8000748 <main+0x84>)
 80006fe:	f002 fbea 	bl	8002ed6 <HAL_UART_Receive_IT>


  ESC_STATUS ESC_speed;

  ESC_speed.FR = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
  ESC_speed.FL = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
  ESC_speed.RR = 0;
 800070e:	2300      	movs	r3, #0
 8000710:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
  ESC_speed.RL = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a


  int iter = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(BLUE_BUTTON == 1){
 800071e:	4b0b      	ldr	r3, [pc, #44]	; (800074c <main+0x88>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	2b01      	cmp	r3, #1
 8000724:	d1fb      	bne.n	800071e <main+0x5a>

		  HAL_UART_Transmit(&huart2, (uint8_t*)cmd_rx, 1, 1000);
 8000726:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800072a:	2201      	movs	r2, #1
 800072c:	4905      	ldr	r1, [pc, #20]	; (8000744 <main+0x80>)
 800072e:	4808      	ldr	r0, [pc, #32]	; (8000750 <main+0x8c>)
 8000730:	f002 fa9d 	bl	8002c6e <HAL_UART_Transmit>

		  // the pulse must go from 0 to 1000, the CCR value can go from 1000 to 2000
		  ESC_setSpeed(dutyCycle, &ESC_speed);
		  */

		  BLUE_BUTTON = 0;
 8000734:	4b05      	ldr	r3, [pc, #20]	; (800074c <main+0x88>)
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
	  if(BLUE_BUTTON == 1){
 800073a:	e7f0      	b.n	800071e <main+0x5a>
 800073c:	080045bc 	.word	0x080045bc
 8000740:	20000110 	.word	0x20000110
 8000744:	200000a0 	.word	0x200000a0
 8000748:	20000158 	.word	0x20000158
 800074c:	2000008c 	.word	0x2000008c
 8000750:	2000019c 	.word	0x2000019c

08000754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b094      	sub	sp, #80	; 0x50
 8000758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075a:	f107 0320 	add.w	r3, r7, #32
 800075e:	2230      	movs	r2, #48	; 0x30
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f003 fae8 	bl	8003d38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000768:	f107 030c 	add.w	r3, r7, #12
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000778:	2300      	movs	r3, #0
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	4b29      	ldr	r3, [pc, #164]	; (8000824 <SystemClock_Config+0xd0>)
 800077e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000780:	4a28      	ldr	r2, [pc, #160]	; (8000824 <SystemClock_Config+0xd0>)
 8000782:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000786:	6413      	str	r3, [r2, #64]	; 0x40
 8000788:	4b26      	ldr	r3, [pc, #152]	; (8000824 <SystemClock_Config+0xd0>)
 800078a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000790:	60bb      	str	r3, [r7, #8]
 8000792:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000794:	2300      	movs	r3, #0
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	4b23      	ldr	r3, [pc, #140]	; (8000828 <SystemClock_Config+0xd4>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007a0:	4a21      	ldr	r2, [pc, #132]	; (8000828 <SystemClock_Config+0xd4>)
 80007a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007a6:	6013      	str	r3, [r2, #0]
 80007a8:	4b1f      	ldr	r3, [pc, #124]	; (8000828 <SystemClock_Config+0xd4>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007b4:	2302      	movs	r3, #2
 80007b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007b8:	2301      	movs	r3, #1
 80007ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007bc:	2310      	movs	r3, #16
 80007be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c0:	2302      	movs	r3, #2
 80007c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007c4:	2300      	movs	r3, #0
 80007c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007c8:	2310      	movs	r3, #16
 80007ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007cc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007d2:	2304      	movs	r3, #4
 80007d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007d6:	2307      	movs	r3, #7
 80007d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007da:	f107 0320 	add.w	r3, r7, #32
 80007de:	4618      	mov	r0, r3
 80007e0:	f000 ff68 	bl	80016b4 <HAL_RCC_OscConfig>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007ea:	f000 f8cd 	bl	8000988 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ee:	230f      	movs	r3, #15
 80007f0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f2:	2302      	movs	r3, #2
 80007f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000800:	2300      	movs	r3, #0
 8000802:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000804:	f107 030c 	add.w	r3, r7, #12
 8000808:	2102      	movs	r1, #2
 800080a:	4618      	mov	r0, r3
 800080c:	f001 f9ca 	bl	8001ba4 <HAL_RCC_ClockConfig>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000816:	f000 f8b7 	bl	8000988 <Error_Handler>
  }
}
 800081a:	bf00      	nop
 800081c:	3750      	adds	r7, #80	; 0x50
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40023800 	.word	0x40023800
 8000828:	40007000 	.word	0x40007000

0800082c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin==B1_Pin){
 8000836:	88fb      	ldrh	r3, [r7, #6]
 8000838:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800083c:	d173      	bne.n	8000926 <HAL_GPIO_EXTI_Callback+0xfa>


		msgLen = sprintf(msgDebug, "BLUE BUTTON PRESSED \n\r");
 800083e:	493c      	ldr	r1, [pc, #240]	; (8000930 <HAL_GPIO_EXTI_Callback+0x104>)
 8000840:	483c      	ldr	r0, [pc, #240]	; (8000934 <HAL_GPIO_EXTI_Callback+0x108>)
 8000842:	f003 fa81 	bl	8003d48 <siprintf>
 8000846:	4603      	mov	r3, r0
 8000848:	4a3b      	ldr	r2, [pc, #236]	; (8000938 <HAL_GPIO_EXTI_Callback+0x10c>)
 800084a:	6013      	str	r3, [r2, #0]
		if( HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 1000) != HAL_OK ){Error_Handler();}
 800084c:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <HAL_GPIO_EXTI_Callback+0x10c>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	b29a      	uxth	r2, r3
 8000852:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000856:	4937      	ldr	r1, [pc, #220]	; (8000934 <HAL_GPIO_EXTI_Callback+0x108>)
 8000858:	4838      	ldr	r0, [pc, #224]	; (800093c <HAL_GPIO_EXTI_Callback+0x110>)
 800085a:	f002 fa08 	bl	8002c6e <HAL_UART_Transmit>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <HAL_GPIO_EXTI_Callback+0x3c>
 8000864:	f000 f890 	bl	8000988 <Error_Handler>
		msgLen = sprintf(msgDebug, "  Specify the value of the duty cycle in between 0 and 100 (3 digits required _ _ _) -> \n\r");
 8000868:	4935      	ldr	r1, [pc, #212]	; (8000940 <HAL_GPIO_EXTI_Callback+0x114>)
 800086a:	4832      	ldr	r0, [pc, #200]	; (8000934 <HAL_GPIO_EXTI_Callback+0x108>)
 800086c:	f003 fa6c 	bl	8003d48 <siprintf>
 8000870:	4603      	mov	r3, r0
 8000872:	4a31      	ldr	r2, [pc, #196]	; (8000938 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000874:	6013      	str	r3, [r2, #0]
		if( HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 1000) != HAL_OK ){Error_Handler();}
 8000876:	4b30      	ldr	r3, [pc, #192]	; (8000938 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	b29a      	uxth	r2, r3
 800087c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000880:	492c      	ldr	r1, [pc, #176]	; (8000934 <HAL_GPIO_EXTI_Callback+0x108>)
 8000882:	482e      	ldr	r0, [pc, #184]	; (800093c <HAL_GPIO_EXTI_Callback+0x110>)
 8000884:	f002 f9f3 	bl	8002c6e <HAL_UART_Transmit>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <HAL_GPIO_EXTI_Callback+0x66>
 800088e:	f000 f87b 	bl	8000988 <Error_Handler>
		// Receive letter
		if( HAL_UART_Receive(&huart2, (uint8_t*)msgRx, 3, 1000) != HAL_OK ){Error_Handler();}
 8000892:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000896:	2203      	movs	r2, #3
 8000898:	492a      	ldr	r1, [pc, #168]	; (8000944 <HAL_GPIO_EXTI_Callback+0x118>)
 800089a:	4828      	ldr	r0, [pc, #160]	; (800093c <HAL_GPIO_EXTI_Callback+0x110>)
 800089c:	f002 fa79 	bl	8002d92 <HAL_UART_Receive>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <HAL_GPIO_EXTI_Callback+0x7e>
 80008a6:	f000 f86f 	bl	8000988 <Error_Handler>
		while(HAL_UART_GetState(&huart2) != HAL_UART_STATE_READY){}
 80008aa:	bf00      	nop
 80008ac:	4823      	ldr	r0, [pc, #140]	; (800093c <HAL_GPIO_EXTI_Callback+0x110>)
 80008ae:	f002 fdf1 	bl	8003494 <HAL_UART_GetState>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b20      	cmp	r3, #32
 80008b6:	d1f9      	bne.n	80008ac <HAL_GPIO_EXTI_Callback+0x80>


		// Transform Rx message in number
		dutyCycle = (int)(msgRx[0]-48)*100 + (int)(msgRx[1]-48)*10 +  (int)(msgRx[2]-48);
 80008b8:	4b22      	ldr	r3, [pc, #136]	; (8000944 <HAL_GPIO_EXTI_Callback+0x118>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	3b30      	subs	r3, #48	; 0x30
 80008be:	2264      	movs	r2, #100	; 0x64
 80008c0:	fb02 f103 	mul.w	r1, r2, r3
 80008c4:	4b1f      	ldr	r3, [pc, #124]	; (8000944 <HAL_GPIO_EXTI_Callback+0x118>)
 80008c6:	785b      	ldrb	r3, [r3, #1]
 80008c8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80008cc:	4613      	mov	r3, r2
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	4413      	add	r3, r2
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	18ca      	adds	r2, r1, r3
 80008d6:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <HAL_GPIO_EXTI_Callback+0x118>)
 80008d8:	789b      	ldrb	r3, [r3, #2]
 80008da:	3b30      	subs	r3, #48	; 0x30
 80008dc:	4413      	add	r3, r2
 80008de:	4a1a      	ldr	r2, [pc, #104]	; (8000948 <HAL_GPIO_EXTI_Callback+0x11c>)
 80008e0:	6013      	str	r3, [r2, #0]
		if(dutyCycle > 100){
 80008e2:	4b19      	ldr	r3, [pc, #100]	; (8000948 <HAL_GPIO_EXTI_Callback+0x11c>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2b64      	cmp	r3, #100	; 0x64
 80008e8:	dd02      	ble.n	80008f0 <HAL_GPIO_EXTI_Callback+0xc4>
			dutyCycle = 100;
 80008ea:	4b17      	ldr	r3, [pc, #92]	; (8000948 <HAL_GPIO_EXTI_Callback+0x11c>)
 80008ec:	2264      	movs	r2, #100	; 0x64
 80008ee:	601a      	str	r2, [r3, #0]
		}

		msgLen = sprintf(msgDebug, "  Pulse value is now %d \n\r", dutyCycle);
 80008f0:	4b15      	ldr	r3, [pc, #84]	; (8000948 <HAL_GPIO_EXTI_Callback+0x11c>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	461a      	mov	r2, r3
 80008f6:	4915      	ldr	r1, [pc, #84]	; (800094c <HAL_GPIO_EXTI_Callback+0x120>)
 80008f8:	480e      	ldr	r0, [pc, #56]	; (8000934 <HAL_GPIO_EXTI_Callback+0x108>)
 80008fa:	f003 fa25 	bl	8003d48 <siprintf>
 80008fe:	4603      	mov	r3, r0
 8000900:	4a0d      	ldr	r2, [pc, #52]	; (8000938 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000902:	6013      	str	r3, [r2, #0]
		if( HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 1000) != HAL_OK ){Error_Handler();}
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	b29a      	uxth	r2, r3
 800090a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800090e:	4909      	ldr	r1, [pc, #36]	; (8000934 <HAL_GPIO_EXTI_Callback+0x108>)
 8000910:	480a      	ldr	r0, [pc, #40]	; (800093c <HAL_GPIO_EXTI_Callback+0x110>)
 8000912:	f002 f9ac 	bl	8002c6e <HAL_UART_Transmit>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <HAL_GPIO_EXTI_Callback+0xf4>
 800091c:	f000 f834 	bl	8000988 <Error_Handler>

		BLUE_BUTTON = 1;
 8000920:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <HAL_GPIO_EXTI_Callback+0x124>)
 8000922:	2201      	movs	r2, #1
 8000924:	601a      	str	r2, [r3, #0]
	}


}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	080045dc 	.word	0x080045dc
 8000934:	200000a8 	.word	0x200000a8
 8000938:	2000010c 	.word	0x2000010c
 800093c:	2000019c 	.word	0x2000019c
 8000940:	080045f4 	.word	0x080045f4
 8000944:	200000a4 	.word	0x200000a4
 8000948:	20000090 	.word	0x20000090
 800094c:	08004650 	.word	0x08004650
 8000950:	2000008c 	.word	0x2000008c

08000954 <HAL_UART_RxCpltCallback>:




void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]


	if(BLUE_BUTTON==0){
 800095c:	4b07      	ldr	r3, [pc, #28]	; (800097c <HAL_UART_RxCpltCallback+0x28>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d102      	bne.n	800096a <HAL_UART_RxCpltCallback+0x16>
		BLUE_BUTTON = 1;
 8000964:	4b05      	ldr	r3, [pc, #20]	; (800097c <HAL_UART_RxCpltCallback+0x28>)
 8000966:	2201      	movs	r2, #1
 8000968:	601a      	str	r2, [r3, #0]
	}

	HAL_UART_Receive_IT(&huart6, (uint8_t*)cmd_rx, 1);
 800096a:	2201      	movs	r2, #1
 800096c:	4904      	ldr	r1, [pc, #16]	; (8000980 <HAL_UART_RxCpltCallback+0x2c>)
 800096e:	4805      	ldr	r0, [pc, #20]	; (8000984 <HAL_UART_RxCpltCallback+0x30>)
 8000970:	f002 fab1 	bl	8002ed6 <HAL_UART_Receive_IT>
}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	2000008c 	.word	0x2000008c
 8000980:	200000a0 	.word	0x200000a0
 8000984:	20000158 	.word	0x20000158

08000988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800098c:	b672      	cpsid	i
}
 800098e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000990:	e7fe      	b.n	8000990 <Error_Handler+0x8>
	...

08000994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	4b18      	ldr	r3, [pc, #96]	; (8000a00 <HAL_MspInit+0x6c>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	4a17      	ldr	r2, [pc, #92]	; (8000a00 <HAL_MspInit+0x6c>)
 80009a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a8:	6453      	str	r3, [r2, #68]	; 0x44
 80009aa:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <HAL_MspInit+0x6c>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	603b      	str	r3, [r7, #0]
 80009ba:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <HAL_MspInit+0x6c>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009be:	4a10      	ldr	r2, [pc, #64]	; (8000a00 <HAL_MspInit+0x6c>)
 80009c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c4:	6413      	str	r3, [r2, #64]	; 0x40
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <HAL_MspInit+0x6c>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ce:	603b      	str	r3, [r7, #0]
 80009d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009d2:	2007      	movs	r0, #7
 80009d4:	f000 fbca 	bl	800116c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 80009d8:	2200      	movs	r2, #0
 80009da:	2100      	movs	r1, #0
 80009dc:	2001      	movs	r0, #1
 80009de:	f000 fbd0 	bl	8001182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 80009e2:	2001      	movs	r0, #1
 80009e4:	f000 fbe9 	bl	80011ba <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2100      	movs	r1, #0
 80009ec:	2051      	movs	r0, #81	; 0x51
 80009ee:	f000 fbc8 	bl	8001182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80009f2:	2051      	movs	r0, #81	; 0x51
 80009f4:	f000 fbe1 	bl	80011ba <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f8:	bf00      	nop
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40023800 	.word	0x40023800

08000a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <NMI_Handler+0x4>

08000a0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a0e:	e7fe      	b.n	8000a0e <HardFault_Handler+0x4>

08000a10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <MemManage_Handler+0x4>

08000a16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a1a:	e7fe      	b.n	8000a1a <BusFault_Handler+0x4>

08000a1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <UsageFault_Handler+0x4>

08000a22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a50:	f000 fa9c 	bl	8000f8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8000a5c:	f000 fe10 	bl	8001680 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000a68:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a6c:	f000 fdf0 	bl	8001650 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000a78:	4802      	ldr	r0, [pc, #8]	; (8000a84 <USART6_IRQHandler+0x10>)
 8000a7a:	f002 fa5d 	bl	8002f38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000158 	.word	0x20000158

08000a88 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
	...

08000a98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aa0:	4a14      	ldr	r2, [pc, #80]	; (8000af4 <_sbrk+0x5c>)
 8000aa2:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <_sbrk+0x60>)
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aac:	4b13      	ldr	r3, [pc, #76]	; (8000afc <_sbrk+0x64>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d102      	bne.n	8000aba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ab4:	4b11      	ldr	r3, [pc, #68]	; (8000afc <_sbrk+0x64>)
 8000ab6:	4a12      	ldr	r2, [pc, #72]	; (8000b00 <_sbrk+0x68>)
 8000ab8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aba:	4b10      	ldr	r3, [pc, #64]	; (8000afc <_sbrk+0x64>)
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d207      	bcs.n	8000ad8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ac8:	f003 f90c 	bl	8003ce4 <__errno>
 8000acc:	4603      	mov	r3, r0
 8000ace:	220c      	movs	r2, #12
 8000ad0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad6:	e009      	b.n	8000aec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ad8:	4b08      	ldr	r3, [pc, #32]	; (8000afc <_sbrk+0x64>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ade:	4b07      	ldr	r3, [pc, #28]	; (8000afc <_sbrk+0x64>)
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	4a05      	ldr	r2, [pc, #20]	; (8000afc <_sbrk+0x64>)
 8000ae8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aea:	68fb      	ldr	r3, [r7, #12]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3718      	adds	r7, #24
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20018000 	.word	0x20018000
 8000af8:	00000400 	.word	0x00000400
 8000afc:	20000094 	.word	0x20000094
 8000b00:	200001f8 	.word	0x200001f8

08000b04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b08:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <SystemInit+0x28>)
 8000b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b0e:	4a07      	ldr	r2, [pc, #28]	; (8000b2c <SystemInit+0x28>)
 8000b10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b18:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <SystemInit+0x28>)
 8000b1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b1e:	609a      	str	r2, [r3, #8]
#endif
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08e      	sub	sp, #56	; 0x38
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b44:	f107 0320 	add.w	r3, r7, #32
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
 8000b5a:	611a      	str	r2, [r3, #16]
 8000b5c:	615a      	str	r2, [r3, #20]
 8000b5e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b60:	4b32      	ldr	r3, [pc, #200]	; (8000c2c <MX_TIM2_Init+0xfc>)
 8000b62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b66:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8000b68:	4b30      	ldr	r3, [pc, #192]	; (8000c2c <MX_TIM2_Init+0xfc>)
 8000b6a:	2253      	movs	r2, #83	; 0x53
 8000b6c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b6e:	4b2f      	ldr	r3, [pc, #188]	; (8000c2c <MX_TIM2_Init+0xfc>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 8000b74:	4b2d      	ldr	r3, [pc, #180]	; (8000c2c <MX_TIM2_Init+0xfc>)
 8000b76:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000b7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b7c:	4b2b      	ldr	r3, [pc, #172]	; (8000c2c <MX_TIM2_Init+0xfc>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b82:	4b2a      	ldr	r3, [pc, #168]	; (8000c2c <MX_TIM2_Init+0xfc>)
 8000b84:	2280      	movs	r2, #128	; 0x80
 8000b86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b88:	4828      	ldr	r0, [pc, #160]	; (8000c2c <MX_TIM2_Init+0xfc>)
 8000b8a:	f001 fa07 	bl	8001f9c <HAL_TIM_Base_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000b94:	f7ff fef8 	bl	8000988 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b9c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4821      	ldr	r0, [pc, #132]	; (8000c2c <MX_TIM2_Init+0xfc>)
 8000ba6:	f001 fc13 	bl	80023d0 <HAL_TIM_ConfigClockSource>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000bb0:	f7ff feea 	bl	8000988 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000bb4:	481d      	ldr	r0, [pc, #116]	; (8000c2c <MX_TIM2_Init+0xfc>)
 8000bb6:	f001 fa40 	bl	800203a <HAL_TIM_PWM_Init>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000bc0:	f7ff fee2 	bl	8000988 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bcc:	f107 0320 	add.w	r3, r7, #32
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4816      	ldr	r0, [pc, #88]	; (8000c2c <MX_TIM2_Init+0xfc>)
 8000bd4:	f001 ff90 	bl	8002af8 <HAL_TIMEx_MasterConfigSynchronization>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000bde:	f7ff fed3 	bl	8000988 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000be2:	2360      	movs	r3, #96	; 0x60
 8000be4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	480c      	ldr	r0, [pc, #48]	; (8000c2c <MX_TIM2_Init+0xfc>)
 8000bfa:	f001 fb27 	bl	800224c <HAL_TIM_PWM_ConfigChannel>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000c04:	f7ff fec0 	bl	8000988 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	2204      	movs	r2, #4
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4807      	ldr	r0, [pc, #28]	; (8000c2c <MX_TIM2_Init+0xfc>)
 8000c10:	f001 fb1c 	bl	800224c <HAL_TIM_PWM_ConfigChannel>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000c1a:	f7ff feb5 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c1e:	4803      	ldr	r0, [pc, #12]	; (8000c2c <MX_TIM2_Init+0xfc>)
 8000c20:	f000 f826 	bl	8000c70 <HAL_TIM_MspPostInit>

}
 8000c24:	bf00      	nop
 8000c26:	3738      	adds	r7, #56	; 0x38
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20000110 	.word	0x20000110

08000c30 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c40:	d10d      	bne.n	8000c5e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <HAL_TIM_Base_MspInit+0x3c>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	4a08      	ldr	r2, [pc, #32]	; (8000c6c <HAL_TIM_Base_MspInit+0x3c>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	6413      	str	r3, [r2, #64]	; 0x40
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <HAL_TIM_Base_MspInit+0x3c>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000c5e:	bf00      	nop
 8000c60:	3714      	adds	r7, #20
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	40023800 	.word	0x40023800

08000c70 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b088      	sub	sp, #32
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 030c 	add.w	r3, r7, #12
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c90:	d11d      	bne.n	8000cce <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	60bb      	str	r3, [r7, #8]
 8000c96:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <HAL_TIM_MspPostInit+0x68>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a0f      	ldr	r2, [pc, #60]	; (8000cd8 <HAL_TIM_MspPostInit+0x68>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b0d      	ldr	r3, [pc, #52]	; (8000cd8 <HAL_TIM_MspPostInit+0x68>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	60bb      	str	r3, [r7, #8]
 8000cac:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc2:	f107 030c 	add.w	r3, r7, #12
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4804      	ldr	r0, [pc, #16]	; (8000cdc <HAL_TIM_MspPostInit+0x6c>)
 8000cca:	f000 fb23 	bl	8001314 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000cce:	bf00      	nop
 8000cd0:	3720      	adds	r7, #32
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40020000 	.word	0x40020000

08000ce0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart6;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ce4:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <MX_USART2_UART_Init+0x4c>)
 8000ce6:	4a12      	ldr	r2, [pc, #72]	; (8000d30 <MX_USART2_UART_Init+0x50>)
 8000ce8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cea:	4b10      	ldr	r3, [pc, #64]	; (8000d2c <MX_USART2_UART_Init+0x4c>)
 8000cec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cf0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <MX_USART2_UART_Init+0x4c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <MX_USART2_UART_Init+0x4c>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cfe:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <MX_USART2_UART_Init+0x4c>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d04:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <MX_USART2_UART_Init+0x4c>)
 8000d06:	220c      	movs	r2, #12
 8000d08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d0a:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <MX_USART2_UART_Init+0x4c>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <MX_USART2_UART_Init+0x4c>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d16:	4805      	ldr	r0, [pc, #20]	; (8000d2c <MX_USART2_UART_Init+0x4c>)
 8000d18:	f001 ff5c 	bl	8002bd4 <HAL_UART_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d22:	f7ff fe31 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	2000019c 	.word	0x2000019c
 8000d30:	40004400 	.word	0x40004400

08000d34 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000d38:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <MX_USART6_UART_Init+0x4c>)
 8000d3a:	4a12      	ldr	r2, [pc, #72]	; (8000d84 <MX_USART6_UART_Init+0x50>)
 8000d3c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000d3e:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <MX_USART6_UART_Init+0x4c>)
 8000d40:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d44:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000d46:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <MX_USART6_UART_Init+0x4c>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <MX_USART6_UART_Init+0x4c>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000d52:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <MX_USART6_UART_Init+0x4c>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000d58:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <MX_USART6_UART_Init+0x4c>)
 8000d5a:	220c      	movs	r2, #12
 8000d5c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d5e:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <MX_USART6_UART_Init+0x4c>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <MX_USART6_UART_Init+0x4c>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000d6a:	4805      	ldr	r0, [pc, #20]	; (8000d80 <MX_USART6_UART_Init+0x4c>)
 8000d6c:	f001 ff32 	bl	8002bd4 <HAL_UART_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000d76:	f7ff fe07 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000158 	.word	0x20000158
 8000d84:	40011400 	.word	0x40011400

08000d88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08c      	sub	sp, #48	; 0x30
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 031c 	add.w	r3, r7, #28
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a36      	ldr	r2, [pc, #216]	; (8000e80 <HAL_UART_MspInit+0xf8>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d12c      	bne.n	8000e04 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	61bb      	str	r3, [r7, #24]
 8000dae:	4b35      	ldr	r3, [pc, #212]	; (8000e84 <HAL_UART_MspInit+0xfc>)
 8000db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db2:	4a34      	ldr	r2, [pc, #208]	; (8000e84 <HAL_UART_MspInit+0xfc>)
 8000db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dba:	4b32      	ldr	r3, [pc, #200]	; (8000e84 <HAL_UART_MspInit+0xfc>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc2:	61bb      	str	r3, [r7, #24]
 8000dc4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	617b      	str	r3, [r7, #20]
 8000dca:	4b2e      	ldr	r3, [pc, #184]	; (8000e84 <HAL_UART_MspInit+0xfc>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	4a2d      	ldr	r2, [pc, #180]	; (8000e84 <HAL_UART_MspInit+0xfc>)
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd6:	4b2b      	ldr	r3, [pc, #172]	; (8000e84 <HAL_UART_MspInit+0xfc>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000de2:	230c      	movs	r3, #12
 8000de4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de6:	2302      	movs	r3, #2
 8000de8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000dee:	2301      	movs	r3, #1
 8000df0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000df2:	2307      	movs	r3, #7
 8000df4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df6:	f107 031c 	add.w	r3, r7, #28
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4822      	ldr	r0, [pc, #136]	; (8000e88 <HAL_UART_MspInit+0x100>)
 8000dfe:	f000 fa89 	bl	8001314 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8000e02:	e038      	b.n	8000e76 <HAL_UART_MspInit+0xee>
  else if(uartHandle->Instance==USART6)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a20      	ldr	r2, [pc, #128]	; (8000e8c <HAL_UART_MspInit+0x104>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d133      	bne.n	8000e76 <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	4b1c      	ldr	r3, [pc, #112]	; (8000e84 <HAL_UART_MspInit+0xfc>)
 8000e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e16:	4a1b      	ldr	r2, [pc, #108]	; (8000e84 <HAL_UART_MspInit+0xfc>)
 8000e18:	f043 0320 	orr.w	r3, r3, #32
 8000e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e1e:	4b19      	ldr	r3, [pc, #100]	; (8000e84 <HAL_UART_MspInit+0xfc>)
 8000e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e22:	f003 0320 	and.w	r3, r3, #32
 8000e26:	613b      	str	r3, [r7, #16]
 8000e28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <HAL_UART_MspInit+0xfc>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a14      	ldr	r2, [pc, #80]	; (8000e84 <HAL_UART_MspInit+0xfc>)
 8000e34:	f043 0304 	orr.w	r3, r3, #4
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <HAL_UART_MspInit+0xfc>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0304 	and.w	r3, r3, #4
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e46:	23c0      	movs	r3, #192	; 0xc0
 8000e48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e52:	2303      	movs	r3, #3
 8000e54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000e56:	2308      	movs	r3, #8
 8000e58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e5a:	f107 031c 	add.w	r3, r7, #28
 8000e5e:	4619      	mov	r1, r3
 8000e60:	480b      	ldr	r0, [pc, #44]	; (8000e90 <HAL_UART_MspInit+0x108>)
 8000e62:	f000 fa57 	bl	8001314 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2100      	movs	r1, #0
 8000e6a:	2047      	movs	r0, #71	; 0x47
 8000e6c:	f000 f989 	bl	8001182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000e70:	2047      	movs	r0, #71	; 0x47
 8000e72:	f000 f9a2 	bl	80011ba <HAL_NVIC_EnableIRQ>
}
 8000e76:	bf00      	nop
 8000e78:	3730      	adds	r7, #48	; 0x30
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40004400 	.word	0x40004400
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40020000 	.word	0x40020000
 8000e8c:	40011400 	.word	0x40011400
 8000e90:	40020800 	.word	0x40020800

08000e94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ecc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e98:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e9a:	e003      	b.n	8000ea4 <LoopCopyDataInit>

08000e9c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e9e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ea0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ea2:	3104      	adds	r1, #4

08000ea4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ea4:	480b      	ldr	r0, [pc, #44]	; (8000ed4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ea8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000eaa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000eac:	d3f6      	bcc.n	8000e9c <CopyDataInit>
  ldr  r2, =_sbss
 8000eae:	4a0b      	ldr	r2, [pc, #44]	; (8000edc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000eb0:	e002      	b.n	8000eb8 <LoopFillZerobss>

08000eb2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000eb2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000eb4:	f842 3b04 	str.w	r3, [r2], #4

08000eb8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000eb8:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000eba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ebc:	d3f9      	bcc.n	8000eb2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ebe:	f7ff fe21 	bl	8000b04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ec2:	f002 ff15 	bl	8003cf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ec6:	f7ff fbfd 	bl	80006c4 <main>
  bx  lr    
 8000eca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ecc:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000ed0:	080046c8 	.word	0x080046c8
  ldr  r0, =_sdata
 8000ed4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ed8:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000edc:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000ee0:	200001f4 	.word	0x200001f4

08000ee4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ee4:	e7fe      	b.n	8000ee4 <ADC_IRQHandler>
	...

08000ee8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eec:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <HAL_Init+0x40>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a0d      	ldr	r2, [pc, #52]	; (8000f28 <HAL_Init+0x40>)
 8000ef2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ef6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ef8:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <HAL_Init+0x40>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <HAL_Init+0x40>)
 8000efe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f04:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <HAL_Init+0x40>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a07      	ldr	r2, [pc, #28]	; (8000f28 <HAL_Init+0x40>)
 8000f0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f10:	2003      	movs	r0, #3
 8000f12:	f000 f92b 	bl	800116c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f16:	2000      	movs	r0, #0
 8000f18:	f000 f808 	bl	8000f2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f1c:	f7ff fd3a 	bl	8000994 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f20:	2300      	movs	r3, #0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40023c00 	.word	0x40023c00

08000f2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f34:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <HAL_InitTick+0x54>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <HAL_InitTick+0x58>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f000 f943 	bl	80011d6 <HAL_SYSTICK_Config>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e00e      	b.n	8000f78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2b0f      	cmp	r3, #15
 8000f5e:	d80a      	bhi.n	8000f76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f60:	2200      	movs	r2, #0
 8000f62:	6879      	ldr	r1, [r7, #4]
 8000f64:	f04f 30ff 	mov.w	r0, #4294967295
 8000f68:	f000 f90b 	bl	8001182 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f6c:	4a06      	ldr	r2, [pc, #24]	; (8000f88 <HAL_InitTick+0x5c>)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f72:	2300      	movs	r3, #0
 8000f74:	e000      	b.n	8000f78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000000 	.word	0x20000000
 8000f84:	20000008 	.word	0x20000008
 8000f88:	20000004 	.word	0x20000004

08000f8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_IncTick+0x20>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	461a      	mov	r2, r3
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_IncTick+0x24>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <HAL_IncTick+0x24>)
 8000f9e:	6013      	str	r3, [r2, #0]
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	20000008 	.word	0x20000008
 8000fb0:	200001e0 	.word	0x200001e0

08000fb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb8:	4b03      	ldr	r3, [pc, #12]	; (8000fc8 <HAL_GetTick+0x14>)
 8000fba:	681b      	ldr	r3, [r3, #0]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	200001e0 	.word	0x200001e0

08000fcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <__NVIC_SetPriorityGrouping+0x44>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fe2:	68ba      	ldr	r2, [r7, #8]
 8000fe4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fe8:	4013      	ands	r3, r2
 8000fea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ffe:	4a04      	ldr	r2, [pc, #16]	; (8001010 <__NVIC_SetPriorityGrouping+0x44>)
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	60d3      	str	r3, [r2, #12]
}
 8001004:	bf00      	nop
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001018:	4b04      	ldr	r3, [pc, #16]	; (800102c <__NVIC_GetPriorityGrouping+0x18>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	0a1b      	lsrs	r3, r3, #8
 800101e:	f003 0307 	and.w	r3, r3, #7
}
 8001022:	4618      	mov	r0, r3
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	2b00      	cmp	r3, #0
 8001040:	db0b      	blt.n	800105a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	f003 021f 	and.w	r2, r3, #31
 8001048:	4907      	ldr	r1, [pc, #28]	; (8001068 <__NVIC_EnableIRQ+0x38>)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	095b      	lsrs	r3, r3, #5
 8001050:	2001      	movs	r0, #1
 8001052:	fa00 f202 	lsl.w	r2, r0, r2
 8001056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	e000e100 	.word	0xe000e100

0800106c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	6039      	str	r1, [r7, #0]
 8001076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107c:	2b00      	cmp	r3, #0
 800107e:	db0a      	blt.n	8001096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	b2da      	uxtb	r2, r3
 8001084:	490c      	ldr	r1, [pc, #48]	; (80010b8 <__NVIC_SetPriority+0x4c>)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	0112      	lsls	r2, r2, #4
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	440b      	add	r3, r1
 8001090:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001094:	e00a      	b.n	80010ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	b2da      	uxtb	r2, r3
 800109a:	4908      	ldr	r1, [pc, #32]	; (80010bc <__NVIC_SetPriority+0x50>)
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	f003 030f 	and.w	r3, r3, #15
 80010a2:	3b04      	subs	r3, #4
 80010a4:	0112      	lsls	r2, r2, #4
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	440b      	add	r3, r1
 80010aa:	761a      	strb	r2, [r3, #24]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	e000e100 	.word	0xe000e100
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b089      	sub	sp, #36	; 0x24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	f1c3 0307 	rsb	r3, r3, #7
 80010da:	2b04      	cmp	r3, #4
 80010dc:	bf28      	it	cs
 80010de:	2304      	movcs	r3, #4
 80010e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	3304      	adds	r3, #4
 80010e6:	2b06      	cmp	r3, #6
 80010e8:	d902      	bls.n	80010f0 <NVIC_EncodePriority+0x30>
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3b03      	subs	r3, #3
 80010ee:	e000      	b.n	80010f2 <NVIC_EncodePriority+0x32>
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f4:	f04f 32ff 	mov.w	r2, #4294967295
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43da      	mvns	r2, r3
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	401a      	ands	r2, r3
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001108:	f04f 31ff 	mov.w	r1, #4294967295
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	fa01 f303 	lsl.w	r3, r1, r3
 8001112:	43d9      	mvns	r1, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001118:	4313      	orrs	r3, r2
         );
}
 800111a:	4618      	mov	r0, r3
 800111c:	3724      	adds	r7, #36	; 0x24
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
	...

08001128 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3b01      	subs	r3, #1
 8001134:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001138:	d301      	bcc.n	800113e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800113a:	2301      	movs	r3, #1
 800113c:	e00f      	b.n	800115e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800113e:	4a0a      	ldr	r2, [pc, #40]	; (8001168 <SysTick_Config+0x40>)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3b01      	subs	r3, #1
 8001144:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001146:	210f      	movs	r1, #15
 8001148:	f04f 30ff 	mov.w	r0, #4294967295
 800114c:	f7ff ff8e 	bl	800106c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001150:	4b05      	ldr	r3, [pc, #20]	; (8001168 <SysTick_Config+0x40>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001156:	4b04      	ldr	r3, [pc, #16]	; (8001168 <SysTick_Config+0x40>)
 8001158:	2207      	movs	r2, #7
 800115a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	e000e010 	.word	0xe000e010

0800116c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f7ff ff29 	bl	8000fcc <__NVIC_SetPriorityGrouping>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001182:	b580      	push	{r7, lr}
 8001184:	b086      	sub	sp, #24
 8001186:	af00      	add	r7, sp, #0
 8001188:	4603      	mov	r3, r0
 800118a:	60b9      	str	r1, [r7, #8]
 800118c:	607a      	str	r2, [r7, #4]
 800118e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001194:	f7ff ff3e 	bl	8001014 <__NVIC_GetPriorityGrouping>
 8001198:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	68b9      	ldr	r1, [r7, #8]
 800119e:	6978      	ldr	r0, [r7, #20]
 80011a0:	f7ff ff8e 	bl	80010c0 <NVIC_EncodePriority>
 80011a4:	4602      	mov	r2, r0
 80011a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011aa:	4611      	mov	r1, r2
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff5d 	bl	800106c <__NVIC_SetPriority>
}
 80011b2:	bf00      	nop
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	4603      	mov	r3, r0
 80011c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ff31 	bl	8001030 <__NVIC_EnableIRQ>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff ffa2 	bl	8001128 <SysTick_Config>
 80011e4:	4603      	mov	r3, r0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b084      	sub	sp, #16
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011fa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80011fc:	f7ff feda 	bl	8000fb4 <HAL_GetTick>
 8001200:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001208:	b2db      	uxtb	r3, r3
 800120a:	2b02      	cmp	r3, #2
 800120c:	d008      	beq.n	8001220 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2280      	movs	r2, #128	; 0x80
 8001212:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	e052      	b.n	80012c6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f022 0216 	bic.w	r2, r2, #22
 800122e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	695a      	ldr	r2, [r3, #20]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800123e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001244:	2b00      	cmp	r3, #0
 8001246:	d103      	bne.n	8001250 <HAL_DMA_Abort+0x62>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800124c:	2b00      	cmp	r3, #0
 800124e:	d007      	beq.n	8001260 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f022 0208 	bic.w	r2, r2, #8
 800125e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f022 0201 	bic.w	r2, r2, #1
 800126e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001270:	e013      	b.n	800129a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001272:	f7ff fe9f 	bl	8000fb4 <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	2b05      	cmp	r3, #5
 800127e:	d90c      	bls.n	800129a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2220      	movs	r2, #32
 8001284:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2203      	movs	r2, #3
 800128a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e015      	b.n	80012c6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0301 	and.w	r3, r3, #1
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d1e4      	bne.n	8001272 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ac:	223f      	movs	r2, #63	; 0x3f
 80012ae:	409a      	lsls	r2, r3
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2201      	movs	r2, #1
 80012b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b083      	sub	sp, #12
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d004      	beq.n	80012ec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2280      	movs	r2, #128	; 0x80
 80012e6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e00c      	b.n	8001306 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2205      	movs	r2, #5
 80012f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f022 0201 	bic.w	r2, r2, #1
 8001302:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
	...

08001314 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001314:	b480      	push	{r7}
 8001316:	b089      	sub	sp, #36	; 0x24
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800131e:	2300      	movs	r3, #0
 8001320:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001322:	2300      	movs	r3, #0
 8001324:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001326:	2300      	movs	r3, #0
 8001328:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800132a:	2300      	movs	r3, #0
 800132c:	61fb      	str	r3, [r7, #28]
 800132e:	e159      	b.n	80015e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001330:	2201      	movs	r2, #1
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	697a      	ldr	r2, [r7, #20]
 8001340:	4013      	ands	r3, r2
 8001342:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	429a      	cmp	r2, r3
 800134a:	f040 8148 	bne.w	80015de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f003 0303 	and.w	r3, r3, #3
 8001356:	2b01      	cmp	r3, #1
 8001358:	d005      	beq.n	8001366 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001362:	2b02      	cmp	r3, #2
 8001364:	d130      	bne.n	80013c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	2203      	movs	r2, #3
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43db      	mvns	r3, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4013      	ands	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	68da      	ldr	r2, [r3, #12]
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4313      	orrs	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800139c:	2201      	movs	r2, #1
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	43db      	mvns	r3, r3
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4013      	ands	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	091b      	lsrs	r3, r3, #4
 80013b2:	f003 0201 	and.w	r2, r3, #1
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4313      	orrs	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f003 0303 	and.w	r3, r3, #3
 80013d0:	2b03      	cmp	r3, #3
 80013d2:	d017      	beq.n	8001404 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	2203      	movs	r2, #3
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f003 0303 	and.w	r3, r3, #3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d123      	bne.n	8001458 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	08da      	lsrs	r2, r3, #3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3208      	adds	r2, #8
 8001418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800141c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	f003 0307 	and.w	r3, r3, #7
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	220f      	movs	r2, #15
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	43db      	mvns	r3, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4013      	ands	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	691a      	ldr	r2, [r3, #16]
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4313      	orrs	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	08da      	lsrs	r2, r3, #3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	3208      	adds	r2, #8
 8001452:	69b9      	ldr	r1, [r7, #24]
 8001454:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	2203      	movs	r2, #3
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	43db      	mvns	r3, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4013      	ands	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f003 0203 	and.w	r2, r3, #3
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4313      	orrs	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001494:	2b00      	cmp	r3, #0
 8001496:	f000 80a2 	beq.w	80015de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	4b57      	ldr	r3, [pc, #348]	; (80015fc <HAL_GPIO_Init+0x2e8>)
 80014a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a2:	4a56      	ldr	r2, [pc, #344]	; (80015fc <HAL_GPIO_Init+0x2e8>)
 80014a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014a8:	6453      	str	r3, [r2, #68]	; 0x44
 80014aa:	4b54      	ldr	r3, [pc, #336]	; (80015fc <HAL_GPIO_Init+0x2e8>)
 80014ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014b6:	4a52      	ldr	r2, [pc, #328]	; (8001600 <HAL_GPIO_Init+0x2ec>)
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	089b      	lsrs	r3, r3, #2
 80014bc:	3302      	adds	r3, #2
 80014be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	f003 0303 	and.w	r3, r3, #3
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	220f      	movs	r2, #15
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43db      	mvns	r3, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4013      	ands	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a49      	ldr	r2, [pc, #292]	; (8001604 <HAL_GPIO_Init+0x2f0>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d019      	beq.n	8001516 <HAL_GPIO_Init+0x202>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a48      	ldr	r2, [pc, #288]	; (8001608 <HAL_GPIO_Init+0x2f4>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d013      	beq.n	8001512 <HAL_GPIO_Init+0x1fe>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a47      	ldr	r2, [pc, #284]	; (800160c <HAL_GPIO_Init+0x2f8>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d00d      	beq.n	800150e <HAL_GPIO_Init+0x1fa>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a46      	ldr	r2, [pc, #280]	; (8001610 <HAL_GPIO_Init+0x2fc>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d007      	beq.n	800150a <HAL_GPIO_Init+0x1f6>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a45      	ldr	r2, [pc, #276]	; (8001614 <HAL_GPIO_Init+0x300>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d101      	bne.n	8001506 <HAL_GPIO_Init+0x1f2>
 8001502:	2304      	movs	r3, #4
 8001504:	e008      	b.n	8001518 <HAL_GPIO_Init+0x204>
 8001506:	2307      	movs	r3, #7
 8001508:	e006      	b.n	8001518 <HAL_GPIO_Init+0x204>
 800150a:	2303      	movs	r3, #3
 800150c:	e004      	b.n	8001518 <HAL_GPIO_Init+0x204>
 800150e:	2302      	movs	r3, #2
 8001510:	e002      	b.n	8001518 <HAL_GPIO_Init+0x204>
 8001512:	2301      	movs	r3, #1
 8001514:	e000      	b.n	8001518 <HAL_GPIO_Init+0x204>
 8001516:	2300      	movs	r3, #0
 8001518:	69fa      	ldr	r2, [r7, #28]
 800151a:	f002 0203 	and.w	r2, r2, #3
 800151e:	0092      	lsls	r2, r2, #2
 8001520:	4093      	lsls	r3, r2
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4313      	orrs	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001528:	4935      	ldr	r1, [pc, #212]	; (8001600 <HAL_GPIO_Init+0x2ec>)
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	089b      	lsrs	r3, r3, #2
 800152e:	3302      	adds	r3, #2
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001536:	4b38      	ldr	r3, [pc, #224]	; (8001618 <HAL_GPIO_Init+0x304>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	43db      	mvns	r3, r3
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4013      	ands	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d003      	beq.n	800155a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	4313      	orrs	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800155a:	4a2f      	ldr	r2, [pc, #188]	; (8001618 <HAL_GPIO_Init+0x304>)
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001560:	4b2d      	ldr	r3, [pc, #180]	; (8001618 <HAL_GPIO_Init+0x304>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	43db      	mvns	r3, r3
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4013      	ands	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d003      	beq.n	8001584 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	4313      	orrs	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001584:	4a24      	ldr	r2, [pc, #144]	; (8001618 <HAL_GPIO_Init+0x304>)
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800158a:	4b23      	ldr	r3, [pc, #140]	; (8001618 <HAL_GPIO_Init+0x304>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	43db      	mvns	r3, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4013      	ands	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015ae:	4a1a      	ldr	r2, [pc, #104]	; (8001618 <HAL_GPIO_Init+0x304>)
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015b4:	4b18      	ldr	r3, [pc, #96]	; (8001618 <HAL_GPIO_Init+0x304>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	43db      	mvns	r3, r3
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4013      	ands	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d003      	beq.n	80015d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015d8:	4a0f      	ldr	r2, [pc, #60]	; (8001618 <HAL_GPIO_Init+0x304>)
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	3301      	adds	r3, #1
 80015e2:	61fb      	str	r3, [r7, #28]
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	2b0f      	cmp	r3, #15
 80015e8:	f67f aea2 	bls.w	8001330 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015ec:	bf00      	nop
 80015ee:	bf00      	nop
 80015f0:	3724      	adds	r7, #36	; 0x24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	40023800 	.word	0x40023800
 8001600:	40013800 	.word	0x40013800
 8001604:	40020000 	.word	0x40020000
 8001608:	40020400 	.word	0x40020400
 800160c:	40020800 	.word	0x40020800
 8001610:	40020c00 	.word	0x40020c00
 8001614:	40021000 	.word	0x40021000
 8001618:	40013c00 	.word	0x40013c00

0800161c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	460b      	mov	r3, r1
 8001626:	807b      	strh	r3, [r7, #2]
 8001628:	4613      	mov	r3, r2
 800162a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800162c:	787b      	ldrb	r3, [r7, #1]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001632:	887a      	ldrh	r2, [r7, #2]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001638:	e003      	b.n	8001642 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800163a:	887b      	ldrh	r3, [r7, #2]
 800163c:	041a      	lsls	r2, r3, #16
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	619a      	str	r2, [r3, #24]
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
	...

08001650 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800165a:	4b08      	ldr	r3, [pc, #32]	; (800167c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800165c:	695a      	ldr	r2, [r3, #20]
 800165e:	88fb      	ldrh	r3, [r7, #6]
 8001660:	4013      	ands	r3, r2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d006      	beq.n	8001674 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001666:	4a05      	ldr	r2, [pc, #20]	; (800167c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001668:	88fb      	ldrh	r3, [r7, #6]
 800166a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800166c:	88fb      	ldrh	r3, [r7, #6]
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff f8dc 	bl	800082c <HAL_GPIO_EXTI_Callback>
  }
}
 8001674:	bf00      	nop
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40013c00 	.word	0x40013c00

08001680 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8001684:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <HAL_PWR_PVD_IRQHandler+0x20>)
 8001686:	695b      	ldr	r3, [r3, #20]
 8001688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d005      	beq.n	800169c <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8001690:	f000 f808 	bl	80016a4 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8001694:	4b02      	ldr	r3, [pc, #8]	; (80016a0 <HAL_PWR_PVD_IRQHandler+0x20>)
 8001696:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800169a:	615a      	str	r2, [r3, #20]
  }
}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40013c00 	.word	0x40013c00

080016a4 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
	...

080016b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d101      	bne.n	80016c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e264      	b.n	8001b90 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d075      	beq.n	80017be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016d2:	4ba3      	ldr	r3, [pc, #652]	; (8001960 <HAL_RCC_OscConfig+0x2ac>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f003 030c 	and.w	r3, r3, #12
 80016da:	2b04      	cmp	r3, #4
 80016dc:	d00c      	beq.n	80016f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016de:	4ba0      	ldr	r3, [pc, #640]	; (8001960 <HAL_RCC_OscConfig+0x2ac>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016e6:	2b08      	cmp	r3, #8
 80016e8:	d112      	bne.n	8001710 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016ea:	4b9d      	ldr	r3, [pc, #628]	; (8001960 <HAL_RCC_OscConfig+0x2ac>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016f6:	d10b      	bne.n	8001710 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f8:	4b99      	ldr	r3, [pc, #612]	; (8001960 <HAL_RCC_OscConfig+0x2ac>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d05b      	beq.n	80017bc <HAL_RCC_OscConfig+0x108>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d157      	bne.n	80017bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e23f      	b.n	8001b90 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001718:	d106      	bne.n	8001728 <HAL_RCC_OscConfig+0x74>
 800171a:	4b91      	ldr	r3, [pc, #580]	; (8001960 <HAL_RCC_OscConfig+0x2ac>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a90      	ldr	r2, [pc, #576]	; (8001960 <HAL_RCC_OscConfig+0x2ac>)
 8001720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001724:	6013      	str	r3, [r2, #0]
 8001726:	e01d      	b.n	8001764 <HAL_RCC_OscConfig+0xb0>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001730:	d10c      	bne.n	800174c <HAL_RCC_OscConfig+0x98>
 8001732:	4b8b      	ldr	r3, [pc, #556]	; (8001960 <HAL_RCC_OscConfig+0x2ac>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a8a      	ldr	r2, [pc, #552]	; (8001960 <HAL_RCC_OscConfig+0x2ac>)
 8001738:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800173c:	6013      	str	r3, [r2, #0]
 800173e:	4b88      	ldr	r3, [pc, #544]	; (8001960 <HAL_RCC_OscConfig+0x2ac>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a87      	ldr	r2, [pc, #540]	; (8001960 <HAL_RCC_OscConfig+0x2ac>)
 8001744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001748:	6013      	str	r3, [r2, #0]
 800174a:	e00b      	b.n	8001764 <HAL_RCC_OscConfig+0xb0>
 800174c:	4b84      	ldr	r3, [pc, #528]	; (8001960 <HAL_RCC_OscConfig+0x2ac>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a83      	ldr	r2, [pc, #524]	; (8001960 <HAL_RCC_OscConfig+0x2ac>)
 8001752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001756:	6013      	str	r3, [r2, #0]
 8001758:	4b81      	ldr	r3, [pc, #516]	; (8001960 <HAL_RCC_OscConfig+0x2ac>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a80      	ldr	r2, [pc, #512]	; (8001960 <HAL_RCC_OscConfig+0x2ac>)
 800175e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001762:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d013      	beq.n	8001794 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176c:	f7ff fc22 	bl	8000fb4 <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001774:	f7ff fc1e 	bl	8000fb4 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b64      	cmp	r3, #100	; 0x64
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e204      	b.n	8001b90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001786:	4b76      	ldr	r3, [pc, #472]	; (8001960 <HAL_RCC_OscConfig+0x2ac>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d0f0      	beq.n	8001774 <HAL_RCC_OscConfig+0xc0>
 8001792:	e014      	b.n	80017be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001794:	f7ff fc0e 	bl	8000fb4 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800179c:	f7ff fc0a 	bl	8000fb4 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b64      	cmp	r3, #100	; 0x64
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e1f0      	b.n	8001b90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ae:	4b6c      	ldr	r3, [pc, #432]	; (8001960 <HAL_RCC_OscConfig+0x2ac>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1f0      	bne.n	800179c <HAL_RCC_OscConfig+0xe8>
 80017ba:	e000      	b.n	80017be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d063      	beq.n	8001892 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017ca:	4b65      	ldr	r3, [pc, #404]	; (8001960 <HAL_RCC_OscConfig+0x2ac>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f003 030c 	and.w	r3, r3, #12
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d00b      	beq.n	80017ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017d6:	4b62      	ldr	r3, [pc, #392]	; (8001960 <HAL_RCC_OscConfig+0x2ac>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017de:	2b08      	cmp	r3, #8
 80017e0:	d11c      	bne.n	800181c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017e2:	4b5f      	ldr	r3, [pc, #380]	; (8001960 <HAL_RCC_OscConfig+0x2ac>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d116      	bne.n	800181c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ee:	4b5c      	ldr	r3, [pc, #368]	; (8001960 <HAL_RCC_OscConfig+0x2ac>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d005      	beq.n	8001806 <HAL_RCC_OscConfig+0x152>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d001      	beq.n	8001806 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e1c4      	b.n	8001b90 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001806:	4b56      	ldr	r3, [pc, #344]	; (8001960 <HAL_RCC_OscConfig+0x2ac>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	4952      	ldr	r1, [pc, #328]	; (8001960 <HAL_RCC_OscConfig+0x2ac>)
 8001816:	4313      	orrs	r3, r2
 8001818:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800181a:	e03a      	b.n	8001892 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d020      	beq.n	8001866 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001824:	4b4f      	ldr	r3, [pc, #316]	; (8001964 <HAL_RCC_OscConfig+0x2b0>)
 8001826:	2201      	movs	r2, #1
 8001828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800182a:	f7ff fbc3 	bl	8000fb4 <HAL_GetTick>
 800182e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001832:	f7ff fbbf 	bl	8000fb4 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e1a5      	b.n	8001b90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001844:	4b46      	ldr	r3, [pc, #280]	; (8001960 <HAL_RCC_OscConfig+0x2ac>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0f0      	beq.n	8001832 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001850:	4b43      	ldr	r3, [pc, #268]	; (8001960 <HAL_RCC_OscConfig+0x2ac>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	4940      	ldr	r1, [pc, #256]	; (8001960 <HAL_RCC_OscConfig+0x2ac>)
 8001860:	4313      	orrs	r3, r2
 8001862:	600b      	str	r3, [r1, #0]
 8001864:	e015      	b.n	8001892 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001866:	4b3f      	ldr	r3, [pc, #252]	; (8001964 <HAL_RCC_OscConfig+0x2b0>)
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800186c:	f7ff fba2 	bl	8000fb4 <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001874:	f7ff fb9e 	bl	8000fb4 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e184      	b.n	8001b90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001886:	4b36      	ldr	r3, [pc, #216]	; (8001960 <HAL_RCC_OscConfig+0x2ac>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f0      	bne.n	8001874 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0308 	and.w	r3, r3, #8
 800189a:	2b00      	cmp	r3, #0
 800189c:	d030      	beq.n	8001900 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	695b      	ldr	r3, [r3, #20]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d016      	beq.n	80018d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018a6:	4b30      	ldr	r3, [pc, #192]	; (8001968 <HAL_RCC_OscConfig+0x2b4>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ac:	f7ff fb82 	bl	8000fb4 <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018b4:	f7ff fb7e 	bl	8000fb4 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e164      	b.n	8001b90 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018c6:	4b26      	ldr	r3, [pc, #152]	; (8001960 <HAL_RCC_OscConfig+0x2ac>)
 80018c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d0f0      	beq.n	80018b4 <HAL_RCC_OscConfig+0x200>
 80018d2:	e015      	b.n	8001900 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018d4:	4b24      	ldr	r3, [pc, #144]	; (8001968 <HAL_RCC_OscConfig+0x2b4>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018da:	f7ff fb6b 	bl	8000fb4 <HAL_GetTick>
 80018de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018e0:	e008      	b.n	80018f4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018e2:	f7ff fb67 	bl	8000fb4 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e14d      	b.n	8001b90 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018f4:	4b1a      	ldr	r3, [pc, #104]	; (8001960 <HAL_RCC_OscConfig+0x2ac>)
 80018f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d1f0      	bne.n	80018e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0304 	and.w	r3, r3, #4
 8001908:	2b00      	cmp	r3, #0
 800190a:	f000 80a0 	beq.w	8001a4e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800190e:	2300      	movs	r3, #0
 8001910:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001912:	4b13      	ldr	r3, [pc, #76]	; (8001960 <HAL_RCC_OscConfig+0x2ac>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d10f      	bne.n	800193e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <HAL_RCC_OscConfig+0x2ac>)
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	4a0e      	ldr	r2, [pc, #56]	; (8001960 <HAL_RCC_OscConfig+0x2ac>)
 8001928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800192c:	6413      	str	r3, [r2, #64]	; 0x40
 800192e:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <HAL_RCC_OscConfig+0x2ac>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001936:	60bb      	str	r3, [r7, #8]
 8001938:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800193a:	2301      	movs	r3, #1
 800193c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800193e:	4b0b      	ldr	r3, [pc, #44]	; (800196c <HAL_RCC_OscConfig+0x2b8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001946:	2b00      	cmp	r3, #0
 8001948:	d121      	bne.n	800198e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800194a:	4b08      	ldr	r3, [pc, #32]	; (800196c <HAL_RCC_OscConfig+0x2b8>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a07      	ldr	r2, [pc, #28]	; (800196c <HAL_RCC_OscConfig+0x2b8>)
 8001950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001954:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001956:	f7ff fb2d 	bl	8000fb4 <HAL_GetTick>
 800195a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800195c:	e011      	b.n	8001982 <HAL_RCC_OscConfig+0x2ce>
 800195e:	bf00      	nop
 8001960:	40023800 	.word	0x40023800
 8001964:	42470000 	.word	0x42470000
 8001968:	42470e80 	.word	0x42470e80
 800196c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001970:	f7ff fb20 	bl	8000fb4 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e106      	b.n	8001b90 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001982:	4b85      	ldr	r3, [pc, #532]	; (8001b98 <HAL_RCC_OscConfig+0x4e4>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800198a:	2b00      	cmp	r3, #0
 800198c:	d0f0      	beq.n	8001970 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d106      	bne.n	80019a4 <HAL_RCC_OscConfig+0x2f0>
 8001996:	4b81      	ldr	r3, [pc, #516]	; (8001b9c <HAL_RCC_OscConfig+0x4e8>)
 8001998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800199a:	4a80      	ldr	r2, [pc, #512]	; (8001b9c <HAL_RCC_OscConfig+0x4e8>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	6713      	str	r3, [r2, #112]	; 0x70
 80019a2:	e01c      	b.n	80019de <HAL_RCC_OscConfig+0x32a>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	2b05      	cmp	r3, #5
 80019aa:	d10c      	bne.n	80019c6 <HAL_RCC_OscConfig+0x312>
 80019ac:	4b7b      	ldr	r3, [pc, #492]	; (8001b9c <HAL_RCC_OscConfig+0x4e8>)
 80019ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b0:	4a7a      	ldr	r2, [pc, #488]	; (8001b9c <HAL_RCC_OscConfig+0x4e8>)
 80019b2:	f043 0304 	orr.w	r3, r3, #4
 80019b6:	6713      	str	r3, [r2, #112]	; 0x70
 80019b8:	4b78      	ldr	r3, [pc, #480]	; (8001b9c <HAL_RCC_OscConfig+0x4e8>)
 80019ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019bc:	4a77      	ldr	r2, [pc, #476]	; (8001b9c <HAL_RCC_OscConfig+0x4e8>)
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	6713      	str	r3, [r2, #112]	; 0x70
 80019c4:	e00b      	b.n	80019de <HAL_RCC_OscConfig+0x32a>
 80019c6:	4b75      	ldr	r3, [pc, #468]	; (8001b9c <HAL_RCC_OscConfig+0x4e8>)
 80019c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ca:	4a74      	ldr	r2, [pc, #464]	; (8001b9c <HAL_RCC_OscConfig+0x4e8>)
 80019cc:	f023 0301 	bic.w	r3, r3, #1
 80019d0:	6713      	str	r3, [r2, #112]	; 0x70
 80019d2:	4b72      	ldr	r3, [pc, #456]	; (8001b9c <HAL_RCC_OscConfig+0x4e8>)
 80019d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d6:	4a71      	ldr	r2, [pc, #452]	; (8001b9c <HAL_RCC_OscConfig+0x4e8>)
 80019d8:	f023 0304 	bic.w	r3, r3, #4
 80019dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d015      	beq.n	8001a12 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e6:	f7ff fae5 	bl	8000fb4 <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ec:	e00a      	b.n	8001a04 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019ee:	f7ff fae1 	bl	8000fb4 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e0c5      	b.n	8001b90 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a04:	4b65      	ldr	r3, [pc, #404]	; (8001b9c <HAL_RCC_OscConfig+0x4e8>)
 8001a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d0ee      	beq.n	80019ee <HAL_RCC_OscConfig+0x33a>
 8001a10:	e014      	b.n	8001a3c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a12:	f7ff facf 	bl	8000fb4 <HAL_GetTick>
 8001a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a18:	e00a      	b.n	8001a30 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a1a:	f7ff facb 	bl	8000fb4 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e0af      	b.n	8001b90 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a30:	4b5a      	ldr	r3, [pc, #360]	; (8001b9c <HAL_RCC_OscConfig+0x4e8>)
 8001a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1ee      	bne.n	8001a1a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a3c:	7dfb      	ldrb	r3, [r7, #23]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d105      	bne.n	8001a4e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a42:	4b56      	ldr	r3, [pc, #344]	; (8001b9c <HAL_RCC_OscConfig+0x4e8>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	4a55      	ldr	r2, [pc, #340]	; (8001b9c <HAL_RCC_OscConfig+0x4e8>)
 8001a48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a4c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f000 809b 	beq.w	8001b8e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a58:	4b50      	ldr	r3, [pc, #320]	; (8001b9c <HAL_RCC_OscConfig+0x4e8>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f003 030c 	and.w	r3, r3, #12
 8001a60:	2b08      	cmp	r3, #8
 8001a62:	d05c      	beq.n	8001b1e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d141      	bne.n	8001af0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a6c:	4b4c      	ldr	r3, [pc, #304]	; (8001ba0 <HAL_RCC_OscConfig+0x4ec>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a72:	f7ff fa9f 	bl	8000fb4 <HAL_GetTick>
 8001a76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a78:	e008      	b.n	8001a8c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a7a:	f7ff fa9b 	bl	8000fb4 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e081      	b.n	8001b90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a8c:	4b43      	ldr	r3, [pc, #268]	; (8001b9c <HAL_RCC_OscConfig+0x4e8>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d1f0      	bne.n	8001a7a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	69da      	ldr	r2, [r3, #28]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a1b      	ldr	r3, [r3, #32]
 8001aa0:	431a      	orrs	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa6:	019b      	lsls	r3, r3, #6
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aae:	085b      	lsrs	r3, r3, #1
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	041b      	lsls	r3, r3, #16
 8001ab4:	431a      	orrs	r2, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aba:	061b      	lsls	r3, r3, #24
 8001abc:	4937      	ldr	r1, [pc, #220]	; (8001b9c <HAL_RCC_OscConfig+0x4e8>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ac2:	4b37      	ldr	r3, [pc, #220]	; (8001ba0 <HAL_RCC_OscConfig+0x4ec>)
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac8:	f7ff fa74 	bl	8000fb4 <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ad0:	f7ff fa70 	bl	8000fb4 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e056      	b.n	8001b90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ae2:	4b2e      	ldr	r3, [pc, #184]	; (8001b9c <HAL_RCC_OscConfig+0x4e8>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d0f0      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x41c>
 8001aee:	e04e      	b.n	8001b8e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001af0:	4b2b      	ldr	r3, [pc, #172]	; (8001ba0 <HAL_RCC_OscConfig+0x4ec>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af6:	f7ff fa5d 	bl	8000fb4 <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001afc:	e008      	b.n	8001b10 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001afe:	f7ff fa59 	bl	8000fb4 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e03f      	b.n	8001b90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b10:	4b22      	ldr	r3, [pc, #136]	; (8001b9c <HAL_RCC_OscConfig+0x4e8>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1f0      	bne.n	8001afe <HAL_RCC_OscConfig+0x44a>
 8001b1c:	e037      	b.n	8001b8e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d101      	bne.n	8001b2a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e032      	b.n	8001b90 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b2a:	4b1c      	ldr	r3, [pc, #112]	; (8001b9c <HAL_RCC_OscConfig+0x4e8>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d028      	beq.n	8001b8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d121      	bne.n	8001b8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d11a      	bne.n	8001b8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b60:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d111      	bne.n	8001b8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b70:	085b      	lsrs	r3, r3, #1
 8001b72:	3b01      	subs	r3, #1
 8001b74:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d107      	bne.n	8001b8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b84:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d001      	beq.n	8001b8e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e000      	b.n	8001b90 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3718      	adds	r7, #24
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40007000 	.word	0x40007000
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	42470060 	.word	0x42470060

08001ba4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e0cc      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bb8:	4b68      	ldr	r3, [pc, #416]	; (8001d5c <HAL_RCC_ClockConfig+0x1b8>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0307 	and.w	r3, r3, #7
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d90c      	bls.n	8001be0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc6:	4b65      	ldr	r3, [pc, #404]	; (8001d5c <HAL_RCC_ClockConfig+0x1b8>)
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bce:	4b63      	ldr	r3, [pc, #396]	; (8001d5c <HAL_RCC_ClockConfig+0x1b8>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d001      	beq.n	8001be0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e0b8      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d020      	beq.n	8001c2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d005      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bf8:	4b59      	ldr	r3, [pc, #356]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	4a58      	ldr	r2, [pc, #352]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0308 	and.w	r3, r3, #8
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d005      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c10:	4b53      	ldr	r3, [pc, #332]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	4a52      	ldr	r2, [pc, #328]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c1c:	4b50      	ldr	r3, [pc, #320]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	494d      	ldr	r1, [pc, #308]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d044      	beq.n	8001cc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d107      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c42:	4b47      	ldr	r3, [pc, #284]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d119      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e07f      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d003      	beq.n	8001c62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c5e:	2b03      	cmp	r3, #3
 8001c60:	d107      	bne.n	8001c72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c62:	4b3f      	ldr	r3, [pc, #252]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d109      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e06f      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c72:	4b3b      	ldr	r3, [pc, #236]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e067      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c82:	4b37      	ldr	r3, [pc, #220]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f023 0203 	bic.w	r2, r3, #3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	4934      	ldr	r1, [pc, #208]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c94:	f7ff f98e 	bl	8000fb4 <HAL_GetTick>
 8001c98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c9a:	e00a      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c9c:	f7ff f98a 	bl	8000fb4 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e04f      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cb2:	4b2b      	ldr	r3, [pc, #172]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f003 020c 	and.w	r2, r3, #12
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d1eb      	bne.n	8001c9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cc4:	4b25      	ldr	r3, [pc, #148]	; (8001d5c <HAL_RCC_ClockConfig+0x1b8>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d20c      	bcs.n	8001cec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd2:	4b22      	ldr	r3, [pc, #136]	; (8001d5c <HAL_RCC_ClockConfig+0x1b8>)
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cda:	4b20      	ldr	r3, [pc, #128]	; (8001d5c <HAL_RCC_ClockConfig+0x1b8>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d001      	beq.n	8001cec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e032      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0304 	and.w	r3, r3, #4
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d008      	beq.n	8001d0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cf8:	4b19      	ldr	r3, [pc, #100]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	4916      	ldr	r1, [pc, #88]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001d06:	4313      	orrs	r3, r2
 8001d08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0308 	and.w	r3, r3, #8
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d009      	beq.n	8001d2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d16:	4b12      	ldr	r3, [pc, #72]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	490e      	ldr	r1, [pc, #56]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d2a:	f000 f821 	bl	8001d70 <HAL_RCC_GetSysClockFreq>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <HAL_RCC_ClockConfig+0x1bc>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	091b      	lsrs	r3, r3, #4
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	490a      	ldr	r1, [pc, #40]	; (8001d64 <HAL_RCC_ClockConfig+0x1c0>)
 8001d3c:	5ccb      	ldrb	r3, [r1, r3]
 8001d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d42:	4a09      	ldr	r2, [pc, #36]	; (8001d68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d46:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <HAL_RCC_ClockConfig+0x1c8>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff f8ee 	bl	8000f2c <HAL_InitTick>

  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40023c00 	.word	0x40023c00
 8001d60:	40023800 	.word	0x40023800
 8001d64:	0800466c 	.word	0x0800466c
 8001d68:	20000000 	.word	0x20000000
 8001d6c:	20000004 	.word	0x20000004

08001d70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d74:	b084      	sub	sp, #16
 8001d76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	607b      	str	r3, [r7, #4]
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	2300      	movs	r3, #0
 8001d82:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001d84:	2300      	movs	r3, #0
 8001d86:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d88:	4b67      	ldr	r3, [pc, #412]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f003 030c 	and.w	r3, r3, #12
 8001d90:	2b08      	cmp	r3, #8
 8001d92:	d00d      	beq.n	8001db0 <HAL_RCC_GetSysClockFreq+0x40>
 8001d94:	2b08      	cmp	r3, #8
 8001d96:	f200 80bd 	bhi.w	8001f14 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d002      	beq.n	8001da4 <HAL_RCC_GetSysClockFreq+0x34>
 8001d9e:	2b04      	cmp	r3, #4
 8001da0:	d003      	beq.n	8001daa <HAL_RCC_GetSysClockFreq+0x3a>
 8001da2:	e0b7      	b.n	8001f14 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001da4:	4b61      	ldr	r3, [pc, #388]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001da6:	60bb      	str	r3, [r7, #8]
       break;
 8001da8:	e0b7      	b.n	8001f1a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001daa:	4b61      	ldr	r3, [pc, #388]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001dac:	60bb      	str	r3, [r7, #8]
      break;
 8001dae:	e0b4      	b.n	8001f1a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001db0:	4b5d      	ldr	r3, [pc, #372]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001db8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dba:	4b5b      	ldr	r3, [pc, #364]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d04d      	beq.n	8001e62 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dc6:	4b58      	ldr	r3, [pc, #352]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	099b      	lsrs	r3, r3, #6
 8001dcc:	461a      	mov	r2, r3
 8001dce:	f04f 0300 	mov.w	r3, #0
 8001dd2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001dd6:	f04f 0100 	mov.w	r1, #0
 8001dda:	ea02 0800 	and.w	r8, r2, r0
 8001dde:	ea03 0901 	and.w	r9, r3, r1
 8001de2:	4640      	mov	r0, r8
 8001de4:	4649      	mov	r1, r9
 8001de6:	f04f 0200 	mov.w	r2, #0
 8001dea:	f04f 0300 	mov.w	r3, #0
 8001dee:	014b      	lsls	r3, r1, #5
 8001df0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001df4:	0142      	lsls	r2, r0, #5
 8001df6:	4610      	mov	r0, r2
 8001df8:	4619      	mov	r1, r3
 8001dfa:	ebb0 0008 	subs.w	r0, r0, r8
 8001dfe:	eb61 0109 	sbc.w	r1, r1, r9
 8001e02:	f04f 0200 	mov.w	r2, #0
 8001e06:	f04f 0300 	mov.w	r3, #0
 8001e0a:	018b      	lsls	r3, r1, #6
 8001e0c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e10:	0182      	lsls	r2, r0, #6
 8001e12:	1a12      	subs	r2, r2, r0
 8001e14:	eb63 0301 	sbc.w	r3, r3, r1
 8001e18:	f04f 0000 	mov.w	r0, #0
 8001e1c:	f04f 0100 	mov.w	r1, #0
 8001e20:	00d9      	lsls	r1, r3, #3
 8001e22:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e26:	00d0      	lsls	r0, r2, #3
 8001e28:	4602      	mov	r2, r0
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	eb12 0208 	adds.w	r2, r2, r8
 8001e30:	eb43 0309 	adc.w	r3, r3, r9
 8001e34:	f04f 0000 	mov.w	r0, #0
 8001e38:	f04f 0100 	mov.w	r1, #0
 8001e3c:	0259      	lsls	r1, r3, #9
 8001e3e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001e42:	0250      	lsls	r0, r2, #9
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	4610      	mov	r0, r2
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	f04f 0300 	mov.w	r3, #0
 8001e54:	f7fe fa14 	bl	8000280 <__aeabi_uldivmod>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	e04a      	b.n	8001ef8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e62:	4b31      	ldr	r3, [pc, #196]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	099b      	lsrs	r3, r3, #6
 8001e68:	461a      	mov	r2, r3
 8001e6a:	f04f 0300 	mov.w	r3, #0
 8001e6e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e72:	f04f 0100 	mov.w	r1, #0
 8001e76:	ea02 0400 	and.w	r4, r2, r0
 8001e7a:	ea03 0501 	and.w	r5, r3, r1
 8001e7e:	4620      	mov	r0, r4
 8001e80:	4629      	mov	r1, r5
 8001e82:	f04f 0200 	mov.w	r2, #0
 8001e86:	f04f 0300 	mov.w	r3, #0
 8001e8a:	014b      	lsls	r3, r1, #5
 8001e8c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e90:	0142      	lsls	r2, r0, #5
 8001e92:	4610      	mov	r0, r2
 8001e94:	4619      	mov	r1, r3
 8001e96:	1b00      	subs	r0, r0, r4
 8001e98:	eb61 0105 	sbc.w	r1, r1, r5
 8001e9c:	f04f 0200 	mov.w	r2, #0
 8001ea0:	f04f 0300 	mov.w	r3, #0
 8001ea4:	018b      	lsls	r3, r1, #6
 8001ea6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001eaa:	0182      	lsls	r2, r0, #6
 8001eac:	1a12      	subs	r2, r2, r0
 8001eae:	eb63 0301 	sbc.w	r3, r3, r1
 8001eb2:	f04f 0000 	mov.w	r0, #0
 8001eb6:	f04f 0100 	mov.w	r1, #0
 8001eba:	00d9      	lsls	r1, r3, #3
 8001ebc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ec0:	00d0      	lsls	r0, r2, #3
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	1912      	adds	r2, r2, r4
 8001ec8:	eb45 0303 	adc.w	r3, r5, r3
 8001ecc:	f04f 0000 	mov.w	r0, #0
 8001ed0:	f04f 0100 	mov.w	r1, #0
 8001ed4:	0299      	lsls	r1, r3, #10
 8001ed6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001eda:	0290      	lsls	r0, r2, #10
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	4610      	mov	r0, r2
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	f04f 0300 	mov.w	r3, #0
 8001eec:	f7fe f9c8 	bl	8000280 <__aeabi_uldivmod>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ef8:	4b0b      	ldr	r3, [pc, #44]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	0c1b      	lsrs	r3, r3, #16
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	3301      	adds	r3, #1
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f10:	60bb      	str	r3, [r7, #8]
      break;
 8001f12:	e002      	b.n	8001f1a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f14:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001f16:	60bb      	str	r3, [r7, #8]
      break;
 8001f18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f1a:	68bb      	ldr	r3, [r7, #8]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001f26:	bf00      	nop
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	00f42400 	.word	0x00f42400
 8001f30:	007a1200 	.word	0x007a1200

08001f34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f38:	4b03      	ldr	r3, [pc, #12]	; (8001f48 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	20000000 	.word	0x20000000

08001f4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f50:	f7ff fff0 	bl	8001f34 <HAL_RCC_GetHCLKFreq>
 8001f54:	4602      	mov	r2, r0
 8001f56:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	0a9b      	lsrs	r3, r3, #10
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	4903      	ldr	r1, [pc, #12]	; (8001f70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f62:	5ccb      	ldrb	r3, [r1, r3]
 8001f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	0800467c 	.word	0x0800467c

08001f74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f78:	f7ff ffdc 	bl	8001f34 <HAL_RCC_GetHCLKFreq>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	0b5b      	lsrs	r3, r3, #13
 8001f84:	f003 0307 	and.w	r3, r3, #7
 8001f88:	4903      	ldr	r1, [pc, #12]	; (8001f98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f8a:	5ccb      	ldrb	r3, [r1, r3]
 8001f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40023800 	.word	0x40023800
 8001f98:	0800467c 	.word	0x0800467c

08001f9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e041      	b.n	8002032 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d106      	bne.n	8001fc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f7fe fe34 	bl	8000c30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2202      	movs	r2, #2
 8001fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3304      	adds	r3, #4
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4610      	mov	r0, r2
 8001fdc:	f000 fac0 	bl	8002560 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b082      	sub	sp, #8
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d101      	bne.n	800204c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e041      	b.n	80020d0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2b00      	cmp	r3, #0
 8002056:	d106      	bne.n	8002066 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f000 f839 	bl	80020d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2202      	movs	r2, #2
 800206a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	3304      	adds	r3, #4
 8002076:	4619      	mov	r1, r3
 8002078:	4610      	mov	r0, r2
 800207a:	f000 fa71 	bl	8002560 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2201      	movs	r2, #1
 8002082:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2201      	movs	r2, #1
 800208a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2201      	movs	r2, #1
 8002092:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2201      	movs	r2, #1
 800209a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2201      	movs	r2, #1
 80020a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2201      	movs	r2, #1
 80020ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d109      	bne.n	8002110 <HAL_TIM_PWM_Start+0x24>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002102:	b2db      	uxtb	r3, r3
 8002104:	2b01      	cmp	r3, #1
 8002106:	bf14      	ite	ne
 8002108:	2301      	movne	r3, #1
 800210a:	2300      	moveq	r3, #0
 800210c:	b2db      	uxtb	r3, r3
 800210e:	e022      	b.n	8002156 <HAL_TIM_PWM_Start+0x6a>
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	2b04      	cmp	r3, #4
 8002114:	d109      	bne.n	800212a <HAL_TIM_PWM_Start+0x3e>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b01      	cmp	r3, #1
 8002120:	bf14      	ite	ne
 8002122:	2301      	movne	r3, #1
 8002124:	2300      	moveq	r3, #0
 8002126:	b2db      	uxtb	r3, r3
 8002128:	e015      	b.n	8002156 <HAL_TIM_PWM_Start+0x6a>
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	2b08      	cmp	r3, #8
 800212e:	d109      	bne.n	8002144 <HAL_TIM_PWM_Start+0x58>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b01      	cmp	r3, #1
 800213a:	bf14      	ite	ne
 800213c:	2301      	movne	r3, #1
 800213e:	2300      	moveq	r3, #0
 8002140:	b2db      	uxtb	r3, r3
 8002142:	e008      	b.n	8002156 <HAL_TIM_PWM_Start+0x6a>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800214a:	b2db      	uxtb	r3, r3
 800214c:	2b01      	cmp	r3, #1
 800214e:	bf14      	ite	ne
 8002150:	2301      	movne	r3, #1
 8002152:	2300      	moveq	r3, #0
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e068      	b.n	8002230 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d104      	bne.n	800216e <HAL_TIM_PWM_Start+0x82>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2202      	movs	r2, #2
 8002168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800216c:	e013      	b.n	8002196 <HAL_TIM_PWM_Start+0xaa>
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	2b04      	cmp	r3, #4
 8002172:	d104      	bne.n	800217e <HAL_TIM_PWM_Start+0x92>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2202      	movs	r2, #2
 8002178:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800217c:	e00b      	b.n	8002196 <HAL_TIM_PWM_Start+0xaa>
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	2b08      	cmp	r3, #8
 8002182:	d104      	bne.n	800218e <HAL_TIM_PWM_Start+0xa2>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2202      	movs	r2, #2
 8002188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800218c:	e003      	b.n	8002196 <HAL_TIM_PWM_Start+0xaa>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2202      	movs	r2, #2
 8002192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2201      	movs	r2, #1
 800219c:	6839      	ldr	r1, [r7, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f000 fc84 	bl	8002aac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a23      	ldr	r2, [pc, #140]	; (8002238 <HAL_TIM_PWM_Start+0x14c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d107      	bne.n	80021be <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a1d      	ldr	r2, [pc, #116]	; (8002238 <HAL_TIM_PWM_Start+0x14c>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d018      	beq.n	80021fa <HAL_TIM_PWM_Start+0x10e>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021d0:	d013      	beq.n	80021fa <HAL_TIM_PWM_Start+0x10e>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a19      	ldr	r2, [pc, #100]	; (800223c <HAL_TIM_PWM_Start+0x150>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d00e      	beq.n	80021fa <HAL_TIM_PWM_Start+0x10e>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a17      	ldr	r2, [pc, #92]	; (8002240 <HAL_TIM_PWM_Start+0x154>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d009      	beq.n	80021fa <HAL_TIM_PWM_Start+0x10e>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a16      	ldr	r2, [pc, #88]	; (8002244 <HAL_TIM_PWM_Start+0x158>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d004      	beq.n	80021fa <HAL_TIM_PWM_Start+0x10e>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a14      	ldr	r2, [pc, #80]	; (8002248 <HAL_TIM_PWM_Start+0x15c>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d111      	bne.n	800221e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f003 0307 	and.w	r3, r3, #7
 8002204:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2b06      	cmp	r3, #6
 800220a:	d010      	beq.n	800222e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f042 0201 	orr.w	r2, r2, #1
 800221a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800221c:	e007      	b.n	800222e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f042 0201 	orr.w	r2, r2, #1
 800222c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	3710      	adds	r7, #16
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40010000 	.word	0x40010000
 800223c:	40000400 	.word	0x40000400
 8002240:	40000800 	.word	0x40000800
 8002244:	40000c00 	.word	0x40000c00
 8002248:	40014000 	.word	0x40014000

0800224c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002258:	2300      	movs	r3, #0
 800225a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002262:	2b01      	cmp	r3, #1
 8002264:	d101      	bne.n	800226a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002266:	2302      	movs	r3, #2
 8002268:	e0ae      	b.n	80023c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b0c      	cmp	r3, #12
 8002276:	f200 809f 	bhi.w	80023b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800227a:	a201      	add	r2, pc, #4	; (adr r2, 8002280 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800227c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002280:	080022b5 	.word	0x080022b5
 8002284:	080023b9 	.word	0x080023b9
 8002288:	080023b9 	.word	0x080023b9
 800228c:	080023b9 	.word	0x080023b9
 8002290:	080022f5 	.word	0x080022f5
 8002294:	080023b9 	.word	0x080023b9
 8002298:	080023b9 	.word	0x080023b9
 800229c:	080023b9 	.word	0x080023b9
 80022a0:	08002337 	.word	0x08002337
 80022a4:	080023b9 	.word	0x080023b9
 80022a8:	080023b9 	.word	0x080023b9
 80022ac:	080023b9 	.word	0x080023b9
 80022b0:	08002377 	.word	0x08002377
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68b9      	ldr	r1, [r7, #8]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 f9d0 	bl	8002660 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	699a      	ldr	r2, [r3, #24]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f042 0208 	orr.w	r2, r2, #8
 80022ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	699a      	ldr	r2, [r3, #24]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 0204 	bic.w	r2, r2, #4
 80022de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6999      	ldr	r1, [r3, #24]
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	691a      	ldr	r2, [r3, #16]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	619a      	str	r2, [r3, #24]
      break;
 80022f2:	e064      	b.n	80023be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68b9      	ldr	r1, [r7, #8]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f000 fa16 	bl	800272c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	699a      	ldr	r2, [r3, #24]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800230e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	699a      	ldr	r2, [r3, #24]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800231e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6999      	ldr	r1, [r3, #24]
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	021a      	lsls	r2, r3, #8
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	430a      	orrs	r2, r1
 8002332:	619a      	str	r2, [r3, #24]
      break;
 8002334:	e043      	b.n	80023be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68b9      	ldr	r1, [r7, #8]
 800233c:	4618      	mov	r0, r3
 800233e:	f000 fa61 	bl	8002804 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	69da      	ldr	r2, [r3, #28]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f042 0208 	orr.w	r2, r2, #8
 8002350:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	69da      	ldr	r2, [r3, #28]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f022 0204 	bic.w	r2, r2, #4
 8002360:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	69d9      	ldr	r1, [r3, #28]
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	691a      	ldr	r2, [r3, #16]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	430a      	orrs	r2, r1
 8002372:	61da      	str	r2, [r3, #28]
      break;
 8002374:	e023      	b.n	80023be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68b9      	ldr	r1, [r7, #8]
 800237c:	4618      	mov	r0, r3
 800237e:	f000 faab 	bl	80028d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	69da      	ldr	r2, [r3, #28]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002390:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	69da      	ldr	r2, [r3, #28]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	69d9      	ldr	r1, [r3, #28]
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	021a      	lsls	r2, r3, #8
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	430a      	orrs	r2, r1
 80023b4:	61da      	str	r2, [r3, #28]
      break;
 80023b6:	e002      	b.n	80023be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	75fb      	strb	r3, [r7, #23]
      break;
 80023bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80023c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3718      	adds	r7, #24
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023da:	2300      	movs	r3, #0
 80023dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d101      	bne.n	80023ec <HAL_TIM_ConfigClockSource+0x1c>
 80023e8:	2302      	movs	r3, #2
 80023ea:	e0b4      	b.n	8002556 <HAL_TIM_ConfigClockSource+0x186>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2202      	movs	r2, #2
 80023f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800240a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002412:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68ba      	ldr	r2, [r7, #8]
 800241a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002424:	d03e      	beq.n	80024a4 <HAL_TIM_ConfigClockSource+0xd4>
 8002426:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800242a:	f200 8087 	bhi.w	800253c <HAL_TIM_ConfigClockSource+0x16c>
 800242e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002432:	f000 8086 	beq.w	8002542 <HAL_TIM_ConfigClockSource+0x172>
 8002436:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800243a:	d87f      	bhi.n	800253c <HAL_TIM_ConfigClockSource+0x16c>
 800243c:	2b70      	cmp	r3, #112	; 0x70
 800243e:	d01a      	beq.n	8002476 <HAL_TIM_ConfigClockSource+0xa6>
 8002440:	2b70      	cmp	r3, #112	; 0x70
 8002442:	d87b      	bhi.n	800253c <HAL_TIM_ConfigClockSource+0x16c>
 8002444:	2b60      	cmp	r3, #96	; 0x60
 8002446:	d050      	beq.n	80024ea <HAL_TIM_ConfigClockSource+0x11a>
 8002448:	2b60      	cmp	r3, #96	; 0x60
 800244a:	d877      	bhi.n	800253c <HAL_TIM_ConfigClockSource+0x16c>
 800244c:	2b50      	cmp	r3, #80	; 0x50
 800244e:	d03c      	beq.n	80024ca <HAL_TIM_ConfigClockSource+0xfa>
 8002450:	2b50      	cmp	r3, #80	; 0x50
 8002452:	d873      	bhi.n	800253c <HAL_TIM_ConfigClockSource+0x16c>
 8002454:	2b40      	cmp	r3, #64	; 0x40
 8002456:	d058      	beq.n	800250a <HAL_TIM_ConfigClockSource+0x13a>
 8002458:	2b40      	cmp	r3, #64	; 0x40
 800245a:	d86f      	bhi.n	800253c <HAL_TIM_ConfigClockSource+0x16c>
 800245c:	2b30      	cmp	r3, #48	; 0x30
 800245e:	d064      	beq.n	800252a <HAL_TIM_ConfigClockSource+0x15a>
 8002460:	2b30      	cmp	r3, #48	; 0x30
 8002462:	d86b      	bhi.n	800253c <HAL_TIM_ConfigClockSource+0x16c>
 8002464:	2b20      	cmp	r3, #32
 8002466:	d060      	beq.n	800252a <HAL_TIM_ConfigClockSource+0x15a>
 8002468:	2b20      	cmp	r3, #32
 800246a:	d867      	bhi.n	800253c <HAL_TIM_ConfigClockSource+0x16c>
 800246c:	2b00      	cmp	r3, #0
 800246e:	d05c      	beq.n	800252a <HAL_TIM_ConfigClockSource+0x15a>
 8002470:	2b10      	cmp	r3, #16
 8002472:	d05a      	beq.n	800252a <HAL_TIM_ConfigClockSource+0x15a>
 8002474:	e062      	b.n	800253c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6818      	ldr	r0, [r3, #0]
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	6899      	ldr	r1, [r3, #8]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	f000 faf1 	bl	8002a6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002498:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68ba      	ldr	r2, [r7, #8]
 80024a0:	609a      	str	r2, [r3, #8]
      break;
 80024a2:	e04f      	b.n	8002544 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6818      	ldr	r0, [r3, #0]
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	6899      	ldr	r1, [r3, #8]
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685a      	ldr	r2, [r3, #4]
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	f000 fada 	bl	8002a6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689a      	ldr	r2, [r3, #8]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024c6:	609a      	str	r2, [r3, #8]
      break;
 80024c8:	e03c      	b.n	8002544 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6818      	ldr	r0, [r3, #0]
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	6859      	ldr	r1, [r3, #4]
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	461a      	mov	r2, r3
 80024d8:	f000 fa4e 	bl	8002978 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2150      	movs	r1, #80	; 0x50
 80024e2:	4618      	mov	r0, r3
 80024e4:	f000 faa7 	bl	8002a36 <TIM_ITRx_SetConfig>
      break;
 80024e8:	e02c      	b.n	8002544 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6818      	ldr	r0, [r3, #0]
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	6859      	ldr	r1, [r3, #4]
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	461a      	mov	r2, r3
 80024f8:	f000 fa6d 	bl	80029d6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2160      	movs	r1, #96	; 0x60
 8002502:	4618      	mov	r0, r3
 8002504:	f000 fa97 	bl	8002a36 <TIM_ITRx_SetConfig>
      break;
 8002508:	e01c      	b.n	8002544 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6818      	ldr	r0, [r3, #0]
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	6859      	ldr	r1, [r3, #4]
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	461a      	mov	r2, r3
 8002518:	f000 fa2e 	bl	8002978 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2140      	movs	r1, #64	; 0x40
 8002522:	4618      	mov	r0, r3
 8002524:	f000 fa87 	bl	8002a36 <TIM_ITRx_SetConfig>
      break;
 8002528:	e00c      	b.n	8002544 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4619      	mov	r1, r3
 8002534:	4610      	mov	r0, r2
 8002536:	f000 fa7e 	bl	8002a36 <TIM_ITRx_SetConfig>
      break;
 800253a:	e003      	b.n	8002544 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	73fb      	strb	r3, [r7, #15]
      break;
 8002540:	e000      	b.n	8002544 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002542:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002554:	7bfb      	ldrb	r3, [r7, #15]
}
 8002556:	4618      	mov	r0, r3
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
	...

08002560 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a34      	ldr	r2, [pc, #208]	; (8002644 <TIM_Base_SetConfig+0xe4>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d00f      	beq.n	8002598 <TIM_Base_SetConfig+0x38>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800257e:	d00b      	beq.n	8002598 <TIM_Base_SetConfig+0x38>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a31      	ldr	r2, [pc, #196]	; (8002648 <TIM_Base_SetConfig+0xe8>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d007      	beq.n	8002598 <TIM_Base_SetConfig+0x38>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a30      	ldr	r2, [pc, #192]	; (800264c <TIM_Base_SetConfig+0xec>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d003      	beq.n	8002598 <TIM_Base_SetConfig+0x38>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a2f      	ldr	r2, [pc, #188]	; (8002650 <TIM_Base_SetConfig+0xf0>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d108      	bne.n	80025aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800259e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a25      	ldr	r2, [pc, #148]	; (8002644 <TIM_Base_SetConfig+0xe4>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d01b      	beq.n	80025ea <TIM_Base_SetConfig+0x8a>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025b8:	d017      	beq.n	80025ea <TIM_Base_SetConfig+0x8a>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a22      	ldr	r2, [pc, #136]	; (8002648 <TIM_Base_SetConfig+0xe8>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d013      	beq.n	80025ea <TIM_Base_SetConfig+0x8a>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a21      	ldr	r2, [pc, #132]	; (800264c <TIM_Base_SetConfig+0xec>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d00f      	beq.n	80025ea <TIM_Base_SetConfig+0x8a>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a20      	ldr	r2, [pc, #128]	; (8002650 <TIM_Base_SetConfig+0xf0>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d00b      	beq.n	80025ea <TIM_Base_SetConfig+0x8a>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a1f      	ldr	r2, [pc, #124]	; (8002654 <TIM_Base_SetConfig+0xf4>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d007      	beq.n	80025ea <TIM_Base_SetConfig+0x8a>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a1e      	ldr	r2, [pc, #120]	; (8002658 <TIM_Base_SetConfig+0xf8>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d003      	beq.n	80025ea <TIM_Base_SetConfig+0x8a>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a1d      	ldr	r2, [pc, #116]	; (800265c <TIM_Base_SetConfig+0xfc>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d108      	bne.n	80025fc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	4313      	orrs	r3, r2
 8002608:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68fa      	ldr	r2, [r7, #12]
 800260e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a08      	ldr	r2, [pc, #32]	; (8002644 <TIM_Base_SetConfig+0xe4>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d103      	bne.n	8002630 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	691a      	ldr	r2, [r3, #16]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	615a      	str	r2, [r3, #20]
}
 8002636:	bf00      	nop
 8002638:	3714      	adds	r7, #20
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	40010000 	.word	0x40010000
 8002648:	40000400 	.word	0x40000400
 800264c:	40000800 	.word	0x40000800
 8002650:	40000c00 	.word	0x40000c00
 8002654:	40014000 	.word	0x40014000
 8002658:	40014400 	.word	0x40014400
 800265c:	40014800 	.word	0x40014800

08002660 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002660:	b480      	push	{r7}
 8002662:	b087      	sub	sp, #28
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	f023 0201 	bic.w	r2, r3, #1
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800268e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f023 0303 	bic.w	r3, r3, #3
 8002696:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	4313      	orrs	r3, r2
 80026a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	f023 0302 	bic.w	r3, r3, #2
 80026a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a1c      	ldr	r2, [pc, #112]	; (8002728 <TIM_OC1_SetConfig+0xc8>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d10c      	bne.n	80026d6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	f023 0308 	bic.w	r3, r3, #8
 80026c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	697a      	ldr	r2, [r7, #20]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f023 0304 	bic.w	r3, r3, #4
 80026d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a13      	ldr	r2, [pc, #76]	; (8002728 <TIM_OC1_SetConfig+0xc8>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d111      	bne.n	8002702 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80026ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	4313      	orrs	r3, r2
 8002700:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	621a      	str	r2, [r3, #32]
}
 800271c:	bf00      	nop
 800271e:	371c      	adds	r7, #28
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	40010000 	.word	0x40010000

0800272c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800272c:	b480      	push	{r7}
 800272e:	b087      	sub	sp, #28
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	f023 0210 	bic.w	r2, r3, #16
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800275a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002762:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	021b      	lsls	r3, r3, #8
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	4313      	orrs	r3, r2
 800276e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	f023 0320 	bic.w	r3, r3, #32
 8002776:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	011b      	lsls	r3, r3, #4
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	4313      	orrs	r3, r2
 8002782:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a1e      	ldr	r2, [pc, #120]	; (8002800 <TIM_OC2_SetConfig+0xd4>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d10d      	bne.n	80027a8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002792:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	011b      	lsls	r3, r3, #4
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	4313      	orrs	r3, r2
 800279e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a15      	ldr	r2, [pc, #84]	; (8002800 <TIM_OC2_SetConfig+0xd4>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d113      	bne.n	80027d8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80027be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	695b      	ldr	r3, [r3, #20]
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	621a      	str	r2, [r3, #32]
}
 80027f2:	bf00      	nop
 80027f4:	371c      	adds	r7, #28
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	40010000 	.word	0x40010000

08002804 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002804:	b480      	push	{r7}
 8002806:	b087      	sub	sp, #28
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f023 0303 	bic.w	r3, r3, #3
 800283a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	4313      	orrs	r3, r2
 8002844:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800284c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	021b      	lsls	r3, r3, #8
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	4313      	orrs	r3, r2
 8002858:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a1d      	ldr	r2, [pc, #116]	; (80028d4 <TIM_OC3_SetConfig+0xd0>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d10d      	bne.n	800287e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002868:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	021b      	lsls	r3, r3, #8
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	4313      	orrs	r3, r2
 8002874:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800287c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a14      	ldr	r2, [pc, #80]	; (80028d4 <TIM_OC3_SetConfig+0xd0>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d113      	bne.n	80028ae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800288c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002894:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	011b      	lsls	r3, r3, #4
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	4313      	orrs	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	011b      	lsls	r3, r3, #4
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685a      	ldr	r2, [r3, #4]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	621a      	str	r2, [r3, #32]
}
 80028c8:	bf00      	nop
 80028ca:	371c      	adds	r7, #28
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	40010000 	.word	0x40010000

080028d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028d8:	b480      	push	{r7}
 80028da:	b087      	sub	sp, #28
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800290e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	021b      	lsls	r3, r3, #8
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	4313      	orrs	r3, r2
 800291a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002922:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	031b      	lsls	r3, r3, #12
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	4313      	orrs	r3, r2
 800292e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a10      	ldr	r2, [pc, #64]	; (8002974 <TIM_OC4_SetConfig+0x9c>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d109      	bne.n	800294c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800293e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	019b      	lsls	r3, r3, #6
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	4313      	orrs	r3, r2
 800294a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685a      	ldr	r2, [r3, #4]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	621a      	str	r2, [r3, #32]
}
 8002966:	bf00      	nop
 8002968:	371c      	adds	r7, #28
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	40010000 	.word	0x40010000

08002978 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002978:	b480      	push	{r7}
 800297a:	b087      	sub	sp, #28
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	f023 0201 	bic.w	r2, r3, #1
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	011b      	lsls	r3, r3, #4
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	f023 030a 	bic.w	r3, r3, #10
 80029b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	621a      	str	r2, [r3, #32]
}
 80029ca:	bf00      	nop
 80029cc:	371c      	adds	r7, #28
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b087      	sub	sp, #28
 80029da:	af00      	add	r7, sp, #0
 80029dc:	60f8      	str	r0, [r7, #12]
 80029de:	60b9      	str	r1, [r7, #8]
 80029e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6a1b      	ldr	r3, [r3, #32]
 80029e6:	f023 0210 	bic.w	r2, r3, #16
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	031b      	lsls	r3, r3, #12
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	011b      	lsls	r3, r3, #4
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	697a      	ldr	r2, [r7, #20]
 8002a22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	621a      	str	r2, [r3, #32]
}
 8002a2a:	bf00      	nop
 8002a2c:	371c      	adds	r7, #28
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b085      	sub	sp, #20
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
 8002a3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	f043 0307 	orr.w	r3, r3, #7
 8002a58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	609a      	str	r2, [r3, #8]
}
 8002a60:	bf00      	nop
 8002a62:	3714      	adds	r7, #20
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b087      	sub	sp, #28
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
 8002a78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	021a      	lsls	r2, r3, #8
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	609a      	str	r2, [r3, #8]
}
 8002aa0:	bf00      	nop
 8002aa2:	371c      	adds	r7, #28
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b087      	sub	sp, #28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	f003 031f 	and.w	r3, r3, #31
 8002abe:	2201      	movs	r2, #1
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6a1a      	ldr	r2, [r3, #32]
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	43db      	mvns	r3, r3
 8002ace:	401a      	ands	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6a1a      	ldr	r2, [r3, #32]
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	f003 031f 	and.w	r3, r3, #31
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	621a      	str	r2, [r3, #32]
}
 8002aea:	bf00      	nop
 8002aec:	371c      	adds	r7, #28
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
	...

08002af8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d101      	bne.n	8002b10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	e050      	b.n	8002bb2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a1c      	ldr	r2, [pc, #112]	; (8002bc0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d018      	beq.n	8002b86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b5c:	d013      	beq.n	8002b86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a18      	ldr	r2, [pc, #96]	; (8002bc4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d00e      	beq.n	8002b86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a16      	ldr	r2, [pc, #88]	; (8002bc8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d009      	beq.n	8002b86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a15      	ldr	r2, [pc, #84]	; (8002bcc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d004      	beq.n	8002b86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a13      	ldr	r2, [pc, #76]	; (8002bd0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d10c      	bne.n	8002ba0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68ba      	ldr	r2, [r7, #8]
 8002b9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3714      	adds	r7, #20
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	40010000 	.word	0x40010000
 8002bc4:	40000400 	.word	0x40000400
 8002bc8:	40000800 	.word	0x40000800
 8002bcc:	40000c00 	.word	0x40000c00
 8002bd0:	40014000 	.word	0x40014000

08002bd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e03f      	b.n	8002c66 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d106      	bne.n	8002c00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7fe f8c4 	bl	8000d88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2224      	movs	r2, #36	; 0x24
 8002c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 fe9b 	bl	8003954 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	691a      	ldr	r2, [r3, #16]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	695a      	ldr	r2, [r3, #20]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68da      	ldr	r2, [r3, #12]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2220      	movs	r2, #32
 8002c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2220      	movs	r2, #32
 8002c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b08a      	sub	sp, #40	; 0x28
 8002c72:	af02      	add	r7, sp, #8
 8002c74:	60f8      	str	r0, [r7, #12]
 8002c76:	60b9      	str	r1, [r7, #8]
 8002c78:	603b      	str	r3, [r7, #0]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b20      	cmp	r3, #32
 8002c8c:	d17c      	bne.n	8002d88 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d002      	beq.n	8002c9a <HAL_UART_Transmit+0x2c>
 8002c94:	88fb      	ldrh	r3, [r7, #6]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e075      	b.n	8002d8a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d101      	bne.n	8002cac <HAL_UART_Transmit+0x3e>
 8002ca8:	2302      	movs	r3, #2
 8002caa:	e06e      	b.n	8002d8a <HAL_UART_Transmit+0x11c>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2221      	movs	r2, #33	; 0x21
 8002cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cc2:	f7fe f977 	bl	8000fb4 <HAL_GetTick>
 8002cc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	88fa      	ldrh	r2, [r7, #6]
 8002ccc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	88fa      	ldrh	r2, [r7, #6]
 8002cd2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cdc:	d108      	bne.n	8002cf0 <HAL_UART_Transmit+0x82>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d104      	bne.n	8002cf0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	61bb      	str	r3, [r7, #24]
 8002cee:	e003      	b.n	8002cf8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002d00:	e02a      	b.n	8002d58 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	2180      	movs	r1, #128	; 0x80
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f000 fbdf 	bl	80034d0 <UART_WaitOnFlagUntilTimeout>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e036      	b.n	8002d8a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10b      	bne.n	8002d3a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	881b      	ldrh	r3, [r3, #0]
 8002d26:	461a      	mov	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	3302      	adds	r3, #2
 8002d36:	61bb      	str	r3, [r7, #24]
 8002d38:	e007      	b.n	8002d4a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	781a      	ldrb	r2, [r3, #0]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	3301      	adds	r3, #1
 8002d48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	3b01      	subs	r3, #1
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1cf      	bne.n	8002d02 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	9300      	str	r3, [sp, #0]
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	2140      	movs	r1, #64	; 0x40
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f000 fbaf 	bl	80034d0 <UART_WaitOnFlagUntilTimeout>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e006      	b.n	8002d8a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002d84:	2300      	movs	r3, #0
 8002d86:	e000      	b.n	8002d8a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002d88:	2302      	movs	r3, #2
  }
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3720      	adds	r7, #32
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b08a      	sub	sp, #40	; 0x28
 8002d96:	af02      	add	r7, sp, #8
 8002d98:	60f8      	str	r0, [r7, #12]
 8002d9a:	60b9      	str	r1, [r7, #8]
 8002d9c:	603b      	str	r3, [r7, #0]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002da2:	2300      	movs	r3, #0
 8002da4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b20      	cmp	r3, #32
 8002db0:	f040 808c 	bne.w	8002ecc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d002      	beq.n	8002dc0 <HAL_UART_Receive+0x2e>
 8002dba:	88fb      	ldrh	r3, [r7, #6]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e084      	b.n	8002ece <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d101      	bne.n	8002dd2 <HAL_UART_Receive+0x40>
 8002dce:	2302      	movs	r3, #2
 8002dd0:	e07d      	b.n	8002ece <HAL_UART_Receive+0x13c>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2222      	movs	r2, #34	; 0x22
 8002de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dee:	f7fe f8e1 	bl	8000fb4 <HAL_GetTick>
 8002df2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	88fa      	ldrh	r2, [r7, #6]
 8002df8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	88fa      	ldrh	r2, [r7, #6]
 8002dfe:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e08:	d108      	bne.n	8002e1c <HAL_UART_Receive+0x8a>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d104      	bne.n	8002e1c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002e12:	2300      	movs	r3, #0
 8002e14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	61bb      	str	r3, [r7, #24]
 8002e1a:	e003      	b.n	8002e24 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e20:	2300      	movs	r3, #0
 8002e22:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002e2c:	e043      	b.n	8002eb6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	2200      	movs	r2, #0
 8002e36:	2120      	movs	r1, #32
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f000 fb49 	bl	80034d0 <UART_WaitOnFlagUntilTimeout>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e042      	b.n	8002ece <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10c      	bne.n	8002e68 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	3302      	adds	r3, #2
 8002e64:	61bb      	str	r3, [r7, #24]
 8002e66:	e01f      	b.n	8002ea8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e70:	d007      	beq.n	8002e82 <HAL_UART_Receive+0xf0>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d10a      	bne.n	8002e90 <HAL_UART_Receive+0xfe>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d106      	bne.n	8002e90 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	b2da      	uxtb	r2, r3
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	701a      	strb	r2, [r3, #0]
 8002e8e:	e008      	b.n	8002ea2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e9c:	b2da      	uxtb	r2, r3
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1b6      	bne.n	8002e2e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	e000      	b.n	8002ece <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002ecc:	2302      	movs	r3, #2
  }
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3720      	adds	r7, #32
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b084      	sub	sp, #16
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	60f8      	str	r0, [r7, #12]
 8002ede:	60b9      	str	r1, [r7, #8]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b20      	cmp	r3, #32
 8002eee:	d11d      	bne.n	8002f2c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d002      	beq.n	8002efc <HAL_UART_Receive_IT+0x26>
 8002ef6:	88fb      	ldrh	r3, [r7, #6]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d101      	bne.n	8002f00 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e016      	b.n	8002f2e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d101      	bne.n	8002f0e <HAL_UART_Receive_IT+0x38>
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	e00f      	b.n	8002f2e <HAL_UART_Receive_IT+0x58>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002f1c:	88fb      	ldrh	r3, [r7, #6]
 8002f1e:	461a      	mov	r2, r3
 8002f20:	68b9      	ldr	r1, [r7, #8]
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f000 fb42 	bl	80035ac <UART_Start_Receive_IT>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	e000      	b.n	8002f2e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002f2c:	2302      	movs	r3, #2
  }
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
	...

08002f38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b0ba      	sub	sp, #232	; 0xe8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002f64:	2300      	movs	r3, #0
 8002f66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f6e:	f003 030f 	and.w	r3, r3, #15
 8002f72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002f76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10f      	bne.n	8002f9e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f82:	f003 0320 	and.w	r3, r3, #32
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d009      	beq.n	8002f9e <HAL_UART_IRQHandler+0x66>
 8002f8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f8e:	f003 0320 	and.w	r3, r3, #32
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 fc21 	bl	80037de <UART_Receive_IT>
      return;
 8002f9c:	e256      	b.n	800344c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002f9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	f000 80de 	beq.w	8003164 <HAL_UART_IRQHandler+0x22c>
 8002fa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d106      	bne.n	8002fc2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fb8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f000 80d1 	beq.w	8003164 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00b      	beq.n	8002fe6 <HAL_UART_IRQHandler+0xae>
 8002fce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d005      	beq.n	8002fe6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	f043 0201 	orr.w	r2, r3, #1
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fea:	f003 0304 	and.w	r3, r3, #4
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00b      	beq.n	800300a <HAL_UART_IRQHandler+0xd2>
 8002ff2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d005      	beq.n	800300a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	f043 0202 	orr.w	r2, r3, #2
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800300a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00b      	beq.n	800302e <HAL_UART_IRQHandler+0xf6>
 8003016:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b00      	cmp	r3, #0
 8003020:	d005      	beq.n	800302e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003026:	f043 0204 	orr.w	r2, r3, #4
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800302e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003032:	f003 0308 	and.w	r3, r3, #8
 8003036:	2b00      	cmp	r3, #0
 8003038:	d011      	beq.n	800305e <HAL_UART_IRQHandler+0x126>
 800303a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800303e:	f003 0320 	and.w	r3, r3, #32
 8003042:	2b00      	cmp	r3, #0
 8003044:	d105      	bne.n	8003052 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003046:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b00      	cmp	r3, #0
 8003050:	d005      	beq.n	800305e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	f043 0208 	orr.w	r2, r3, #8
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	2b00      	cmp	r3, #0
 8003064:	f000 81ed 	beq.w	8003442 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800306c:	f003 0320 	and.w	r3, r3, #32
 8003070:	2b00      	cmp	r3, #0
 8003072:	d008      	beq.n	8003086 <HAL_UART_IRQHandler+0x14e>
 8003074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003078:	f003 0320 	and.w	r3, r3, #32
 800307c:	2b00      	cmp	r3, #0
 800307e:	d002      	beq.n	8003086 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 fbac 	bl	80037de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003090:	2b40      	cmp	r3, #64	; 0x40
 8003092:	bf0c      	ite	eq
 8003094:	2301      	moveq	r3, #1
 8003096:	2300      	movne	r3, #0
 8003098:	b2db      	uxtb	r3, r3
 800309a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	f003 0308 	and.w	r3, r3, #8
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d103      	bne.n	80030b2 <HAL_UART_IRQHandler+0x17a>
 80030aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d04f      	beq.n	8003152 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 fab4 	bl	8003620 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c2:	2b40      	cmp	r3, #64	; 0x40
 80030c4:	d141      	bne.n	800314a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	3314      	adds	r3, #20
 80030cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030d4:	e853 3f00 	ldrex	r3, [r3]
 80030d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80030dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	3314      	adds	r3, #20
 80030ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80030f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80030f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80030fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003102:	e841 2300 	strex	r3, r2, [r1]
 8003106:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800310a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1d9      	bne.n	80030c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003116:	2b00      	cmp	r3, #0
 8003118:	d013      	beq.n	8003142 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311e:	4a7d      	ldr	r2, [pc, #500]	; (8003314 <HAL_UART_IRQHandler+0x3dc>)
 8003120:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003126:	4618      	mov	r0, r3
 8003128:	f7fe f8d1 	bl	80012ce <HAL_DMA_Abort_IT>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d016      	beq.n	8003160 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800313c:	4610      	mov	r0, r2
 800313e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003140:	e00e      	b.n	8003160 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f990 	bl	8003468 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003148:	e00a      	b.n	8003160 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f98c 	bl	8003468 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003150:	e006      	b.n	8003160 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f988 	bl	8003468 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800315e:	e170      	b.n	8003442 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003160:	bf00      	nop
    return;
 8003162:	e16e      	b.n	8003442 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003168:	2b01      	cmp	r3, #1
 800316a:	f040 814a 	bne.w	8003402 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800316e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003172:	f003 0310 	and.w	r3, r3, #16
 8003176:	2b00      	cmp	r3, #0
 8003178:	f000 8143 	beq.w	8003402 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800317c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003180:	f003 0310 	and.w	r3, r3, #16
 8003184:	2b00      	cmp	r3, #0
 8003186:	f000 813c 	beq.w	8003402 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800318a:	2300      	movs	r3, #0
 800318c:	60bb      	str	r3, [r7, #8]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	60bb      	str	r3, [r7, #8]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	60bb      	str	r3, [r7, #8]
 800319e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031aa:	2b40      	cmp	r3, #64	; 0x40
 80031ac:	f040 80b4 	bne.w	8003318 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80031bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 8140 	beq.w	8003446 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80031ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031ce:	429a      	cmp	r2, r3
 80031d0:	f080 8139 	bcs.w	8003446 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031da:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031e6:	f000 8088 	beq.w	80032fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	330c      	adds	r3, #12
 80031f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031f8:	e853 3f00 	ldrex	r3, [r3]
 80031fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003200:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003204:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003208:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	330c      	adds	r3, #12
 8003212:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003216:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800321a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800321e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003222:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003226:	e841 2300 	strex	r3, r2, [r1]
 800322a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800322e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1d9      	bne.n	80031ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	3314      	adds	r3, #20
 800323c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800323e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003240:	e853 3f00 	ldrex	r3, [r3]
 8003244:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003246:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003248:	f023 0301 	bic.w	r3, r3, #1
 800324c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	3314      	adds	r3, #20
 8003256:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800325a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800325e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003260:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003262:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003266:	e841 2300 	strex	r3, r2, [r1]
 800326a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800326c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1e1      	bne.n	8003236 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	3314      	adds	r3, #20
 8003278:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800327a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800327c:	e853 3f00 	ldrex	r3, [r3]
 8003280:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003282:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003284:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003288:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	3314      	adds	r3, #20
 8003292:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003296:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003298:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800329a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800329c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800329e:	e841 2300 	strex	r3, r2, [r1]
 80032a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80032a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1e3      	bne.n	8003272 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2220      	movs	r2, #32
 80032ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	330c      	adds	r3, #12
 80032be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032c2:	e853 3f00 	ldrex	r3, [r3]
 80032c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80032c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032ca:	f023 0310 	bic.w	r3, r3, #16
 80032ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	330c      	adds	r3, #12
 80032d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80032dc:	65ba      	str	r2, [r7, #88]	; 0x58
 80032de:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80032e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032e4:	e841 2300 	strex	r3, r2, [r1]
 80032e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80032ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1e3      	bne.n	80032b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7fd ff7a 	bl	80011ee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003302:	b29b      	uxth	r3, r3
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	b29b      	uxth	r3, r3
 8003308:	4619      	mov	r1, r3
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 f8b6 	bl	800347c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003310:	e099      	b.n	8003446 <HAL_UART_IRQHandler+0x50e>
 8003312:	bf00      	nop
 8003314:	080036e7 	.word	0x080036e7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003320:	b29b      	uxth	r3, r3
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800332c:	b29b      	uxth	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	f000 808b 	beq.w	800344a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003334:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003338:	2b00      	cmp	r3, #0
 800333a:	f000 8086 	beq.w	800344a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	330c      	adds	r3, #12
 8003344:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003348:	e853 3f00 	ldrex	r3, [r3]
 800334c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800334e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003350:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003354:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	330c      	adds	r3, #12
 800335e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003362:	647a      	str	r2, [r7, #68]	; 0x44
 8003364:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003366:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003368:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800336a:	e841 2300 	strex	r3, r2, [r1]
 800336e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1e3      	bne.n	800333e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	3314      	adds	r3, #20
 800337c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	e853 3f00 	ldrex	r3, [r3]
 8003384:	623b      	str	r3, [r7, #32]
   return(result);
 8003386:	6a3b      	ldr	r3, [r7, #32]
 8003388:	f023 0301 	bic.w	r3, r3, #1
 800338c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	3314      	adds	r3, #20
 8003396:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800339a:	633a      	str	r2, [r7, #48]	; 0x30
 800339c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800339e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033a2:	e841 2300 	strex	r3, r2, [r1]
 80033a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80033a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1e3      	bne.n	8003376 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2220      	movs	r2, #32
 80033b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	330c      	adds	r3, #12
 80033c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	e853 3f00 	ldrex	r3, [r3]
 80033ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f023 0310 	bic.w	r3, r3, #16
 80033d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	330c      	adds	r3, #12
 80033dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80033e0:	61fa      	str	r2, [r7, #28]
 80033e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e4:	69b9      	ldr	r1, [r7, #24]
 80033e6:	69fa      	ldr	r2, [r7, #28]
 80033e8:	e841 2300 	strex	r3, r2, [r1]
 80033ec:	617b      	str	r3, [r7, #20]
   return(result);
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1e3      	bne.n	80033bc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80033f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80033f8:	4619      	mov	r1, r3
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f83e 	bl	800347c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003400:	e023      	b.n	800344a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800340a:	2b00      	cmp	r3, #0
 800340c:	d009      	beq.n	8003422 <HAL_UART_IRQHandler+0x4ea>
 800340e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003416:	2b00      	cmp	r3, #0
 8003418:	d003      	beq.n	8003422 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f977 	bl	800370e <UART_Transmit_IT>
    return;
 8003420:	e014      	b.n	800344c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00e      	beq.n	800344c <HAL_UART_IRQHandler+0x514>
 800342e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003436:	2b00      	cmp	r3, #0
 8003438:	d008      	beq.n	800344c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f9b7 	bl	80037ae <UART_EndTransmit_IT>
    return;
 8003440:	e004      	b.n	800344c <HAL_UART_IRQHandler+0x514>
    return;
 8003442:	bf00      	nop
 8003444:	e002      	b.n	800344c <HAL_UART_IRQHandler+0x514>
      return;
 8003446:	bf00      	nop
 8003448:	e000      	b.n	800344c <HAL_UART_IRQHandler+0x514>
      return;
 800344a:	bf00      	nop
  }
}
 800344c:	37e8      	adds	r7, #232	; 0xe8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop

08003454 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800345c:	bf00      	nop
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	460b      	mov	r3, r1
 8003486:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 800349c:	2300      	movs	r3, #0
 800349e:	60fb      	str	r3, [r7, #12]
 80034a0:	2300      	movs	r3, #0
 80034a2:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	b2da      	uxtb	r2, r3
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	4313      	orrs	r3, r2
 80034c2:	b2db      	uxtb	r3, r3
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3714      	adds	r7, #20
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b090      	sub	sp, #64	; 0x40
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	603b      	str	r3, [r7, #0]
 80034dc:	4613      	mov	r3, r2
 80034de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034e0:	e050      	b.n	8003584 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e8:	d04c      	beq.n	8003584 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80034ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d007      	beq.n	8003500 <UART_WaitOnFlagUntilTimeout+0x30>
 80034f0:	f7fd fd60 	bl	8000fb4 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d241      	bcs.n	8003584 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	330c      	adds	r3, #12
 8003506:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800350a:	e853 3f00 	ldrex	r3, [r3]
 800350e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003512:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003516:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	330c      	adds	r3, #12
 800351e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003520:	637a      	str	r2, [r7, #52]	; 0x34
 8003522:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003524:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003526:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003528:	e841 2300 	strex	r3, r2, [r1]
 800352c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800352e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1e5      	bne.n	8003500 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	3314      	adds	r3, #20
 800353a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	e853 3f00 	ldrex	r3, [r3]
 8003542:	613b      	str	r3, [r7, #16]
   return(result);
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	f023 0301 	bic.w	r3, r3, #1
 800354a:	63bb      	str	r3, [r7, #56]	; 0x38
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	3314      	adds	r3, #20
 8003552:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003554:	623a      	str	r2, [r7, #32]
 8003556:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003558:	69f9      	ldr	r1, [r7, #28]
 800355a:	6a3a      	ldr	r2, [r7, #32]
 800355c:	e841 2300 	strex	r3, r2, [r1]
 8003560:	61bb      	str	r3, [r7, #24]
   return(result);
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1e5      	bne.n	8003534 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2220      	movs	r2, #32
 800356c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2220      	movs	r2, #32
 8003574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e00f      	b.n	80035a4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	4013      	ands	r3, r2
 800358e:	68ba      	ldr	r2, [r7, #8]
 8003590:	429a      	cmp	r2, r3
 8003592:	bf0c      	ite	eq
 8003594:	2301      	moveq	r3, #1
 8003596:	2300      	movne	r3, #0
 8003598:	b2db      	uxtb	r3, r3
 800359a:	461a      	mov	r2, r3
 800359c:	79fb      	ldrb	r3, [r7, #7]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d09f      	beq.n	80034e2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3740      	adds	r7, #64	; 0x40
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	4613      	mov	r3, r2
 80035b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	68ba      	ldr	r2, [r7, #8]
 80035be:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	88fa      	ldrh	r2, [r7, #6]
 80035c4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	88fa      	ldrh	r2, [r7, #6]
 80035ca:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2222      	movs	r2, #34	; 0x22
 80035d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68da      	ldr	r2, [r3, #12]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035f0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	695a      	ldr	r2, [r3, #20]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f042 0201 	orr.w	r2, r2, #1
 8003600:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68da      	ldr	r2, [r3, #12]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f042 0220 	orr.w	r2, r2, #32
 8003610:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3714      	adds	r7, #20
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003620:	b480      	push	{r7}
 8003622:	b095      	sub	sp, #84	; 0x54
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	330c      	adds	r3, #12
 800362e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003632:	e853 3f00 	ldrex	r3, [r3]
 8003636:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800363a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800363e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	330c      	adds	r3, #12
 8003646:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003648:	643a      	str	r2, [r7, #64]	; 0x40
 800364a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800364e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003650:	e841 2300 	strex	r3, r2, [r1]
 8003654:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1e5      	bne.n	8003628 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	3314      	adds	r3, #20
 8003662:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003664:	6a3b      	ldr	r3, [r7, #32]
 8003666:	e853 3f00 	ldrex	r3, [r3]
 800366a:	61fb      	str	r3, [r7, #28]
   return(result);
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	f023 0301 	bic.w	r3, r3, #1
 8003672:	64bb      	str	r3, [r7, #72]	; 0x48
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	3314      	adds	r3, #20
 800367a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800367c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800367e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003680:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003682:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003684:	e841 2300 	strex	r3, r2, [r1]
 8003688:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800368a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1e5      	bne.n	800365c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003694:	2b01      	cmp	r3, #1
 8003696:	d119      	bne.n	80036cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	330c      	adds	r3, #12
 800369e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	e853 3f00 	ldrex	r3, [r3]
 80036a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	f023 0310 	bic.w	r3, r3, #16
 80036ae:	647b      	str	r3, [r7, #68]	; 0x44
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	330c      	adds	r3, #12
 80036b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80036b8:	61ba      	str	r2, [r7, #24]
 80036ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036bc:	6979      	ldr	r1, [r7, #20]
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	e841 2300 	strex	r3, r2, [r1]
 80036c4:	613b      	str	r3, [r7, #16]
   return(result);
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1e5      	bne.n	8003698 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2220      	movs	r2, #32
 80036d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80036da:	bf00      	nop
 80036dc:	3754      	adds	r7, #84	; 0x54
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr

080036e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b084      	sub	sp, #16
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003700:	68f8      	ldr	r0, [r7, #12]
 8003702:	f7ff feb1 	bl	8003468 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003706:	bf00      	nop
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800370e:	b480      	push	{r7}
 8003710:	b085      	sub	sp, #20
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b21      	cmp	r3, #33	; 0x21
 8003720:	d13e      	bne.n	80037a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800372a:	d114      	bne.n	8003756 <UART_Transmit_IT+0x48>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d110      	bne.n	8003756 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	881b      	ldrh	r3, [r3, #0]
 800373e:	461a      	mov	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003748:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	1c9a      	adds	r2, r3, #2
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	621a      	str	r2, [r3, #32]
 8003754:	e008      	b.n	8003768 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	1c59      	adds	r1, r3, #1
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	6211      	str	r1, [r2, #32]
 8003760:	781a      	ldrb	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800376c:	b29b      	uxth	r3, r3
 800376e:	3b01      	subs	r3, #1
 8003770:	b29b      	uxth	r3, r3
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	4619      	mov	r1, r3
 8003776:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003778:	2b00      	cmp	r3, #0
 800377a:	d10f      	bne.n	800379c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68da      	ldr	r2, [r3, #12]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800378a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68da      	ldr	r2, [r3, #12]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800379a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800379c:	2300      	movs	r3, #0
 800379e:	e000      	b.n	80037a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80037a0:	2302      	movs	r3, #2
  }
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3714      	adds	r7, #20
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b082      	sub	sp, #8
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68da      	ldr	r2, [r3, #12]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2220      	movs	r2, #32
 80037ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f7ff fe40 	bl	8003454 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b08c      	sub	sp, #48	; 0x30
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b22      	cmp	r3, #34	; 0x22
 80037f0:	f040 80ab 	bne.w	800394a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037fc:	d117      	bne.n	800382e <UART_Receive_IT+0x50>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d113      	bne.n	800382e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003806:	2300      	movs	r3, #0
 8003808:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	b29b      	uxth	r3, r3
 8003818:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800381c:	b29a      	uxth	r2, r3
 800381e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003820:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003826:	1c9a      	adds	r2, r3, #2
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	629a      	str	r2, [r3, #40]	; 0x28
 800382c:	e026      	b.n	800387c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003832:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003834:	2300      	movs	r3, #0
 8003836:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003840:	d007      	beq.n	8003852 <UART_Receive_IT+0x74>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10a      	bne.n	8003860 <UART_Receive_IT+0x82>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d106      	bne.n	8003860 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	b2da      	uxtb	r2, r3
 800385a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800385c:	701a      	strb	r2, [r3, #0]
 800385e:	e008      	b.n	8003872 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	b2db      	uxtb	r3, r3
 8003868:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800386c:	b2da      	uxtb	r2, r3
 800386e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003870:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003876:	1c5a      	adds	r2, r3, #1
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003880:	b29b      	uxth	r3, r3
 8003882:	3b01      	subs	r3, #1
 8003884:	b29b      	uxth	r3, r3
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	4619      	mov	r1, r3
 800388a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800388c:	2b00      	cmp	r3, #0
 800388e:	d15a      	bne.n	8003946 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68da      	ldr	r2, [r3, #12]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f022 0220 	bic.w	r2, r2, #32
 800389e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68da      	ldr	r2, [r3, #12]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	695a      	ldr	r2, [r3, #20]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 0201 	bic.w	r2, r2, #1
 80038be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2220      	movs	r2, #32
 80038c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d135      	bne.n	800393c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	330c      	adds	r3, #12
 80038dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	e853 3f00 	ldrex	r3, [r3]
 80038e4:	613b      	str	r3, [r7, #16]
   return(result);
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	f023 0310 	bic.w	r3, r3, #16
 80038ec:	627b      	str	r3, [r7, #36]	; 0x24
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	330c      	adds	r3, #12
 80038f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038f6:	623a      	str	r2, [r7, #32]
 80038f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fa:	69f9      	ldr	r1, [r7, #28]
 80038fc:	6a3a      	ldr	r2, [r7, #32]
 80038fe:	e841 2300 	strex	r3, r2, [r1]
 8003902:	61bb      	str	r3, [r7, #24]
   return(result);
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1e5      	bne.n	80038d6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0310 	and.w	r3, r3, #16
 8003914:	2b10      	cmp	r3, #16
 8003916:	d10a      	bne.n	800392e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003918:	2300      	movs	r3, #0
 800391a:	60fb      	str	r3, [r7, #12]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	60fb      	str	r3, [r7, #12]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	60fb      	str	r3, [r7, #12]
 800392c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003932:	4619      	mov	r1, r3
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f7ff fda1 	bl	800347c <HAL_UARTEx_RxEventCallback>
 800393a:	e002      	b.n	8003942 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f7fd f809 	bl	8000954 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003942:	2300      	movs	r3, #0
 8003944:	e002      	b.n	800394c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003946:	2300      	movs	r3, #0
 8003948:	e000      	b.n	800394c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800394a:	2302      	movs	r3, #2
  }
}
 800394c:	4618      	mov	r0, r3
 800394e:	3730      	adds	r7, #48	; 0x30
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003958:	b09f      	sub	sp, #124	; 0x7c
 800395a:	af00      	add	r7, sp, #0
 800395c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800395e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800396a:	68d9      	ldr	r1, [r3, #12]
 800396c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	ea40 0301 	orr.w	r3, r0, r1
 8003974:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003978:	689a      	ldr	r2, [r3, #8]
 800397a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	431a      	orrs	r2, r3
 8003980:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003982:	695b      	ldr	r3, [r3, #20]
 8003984:	431a      	orrs	r2, r3
 8003986:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003988:	69db      	ldr	r3, [r3, #28]
 800398a:	4313      	orrs	r3, r2
 800398c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800398e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003998:	f021 010c 	bic.w	r1, r1, #12
 800399c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039a2:	430b      	orrs	r3, r1
 80039a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	695b      	ldr	r3, [r3, #20]
 80039ac:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80039b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b2:	6999      	ldr	r1, [r3, #24]
 80039b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	ea40 0301 	orr.w	r3, r0, r1
 80039bc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	4bc5      	ldr	r3, [pc, #788]	; (8003cd8 <UART_SetConfig+0x384>)
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d004      	beq.n	80039d2 <UART_SetConfig+0x7e>
 80039c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	4bc3      	ldr	r3, [pc, #780]	; (8003cdc <UART_SetConfig+0x388>)
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d103      	bne.n	80039da <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039d2:	f7fe facf 	bl	8001f74 <HAL_RCC_GetPCLK2Freq>
 80039d6:	6778      	str	r0, [r7, #116]	; 0x74
 80039d8:	e002      	b.n	80039e0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039da:	f7fe fab7 	bl	8001f4c <HAL_RCC_GetPCLK1Freq>
 80039de:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039e2:	69db      	ldr	r3, [r3, #28]
 80039e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039e8:	f040 80b6 	bne.w	8003b58 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039ee:	461c      	mov	r4, r3
 80039f0:	f04f 0500 	mov.w	r5, #0
 80039f4:	4622      	mov	r2, r4
 80039f6:	462b      	mov	r3, r5
 80039f8:	1891      	adds	r1, r2, r2
 80039fa:	6439      	str	r1, [r7, #64]	; 0x40
 80039fc:	415b      	adcs	r3, r3
 80039fe:	647b      	str	r3, [r7, #68]	; 0x44
 8003a00:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a04:	1912      	adds	r2, r2, r4
 8003a06:	eb45 0303 	adc.w	r3, r5, r3
 8003a0a:	f04f 0000 	mov.w	r0, #0
 8003a0e:	f04f 0100 	mov.w	r1, #0
 8003a12:	00d9      	lsls	r1, r3, #3
 8003a14:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a18:	00d0      	lsls	r0, r2, #3
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	1911      	adds	r1, r2, r4
 8003a20:	6639      	str	r1, [r7, #96]	; 0x60
 8003a22:	416b      	adcs	r3, r5
 8003a24:	667b      	str	r3, [r7, #100]	; 0x64
 8003a26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	f04f 0300 	mov.w	r3, #0
 8003a30:	1891      	adds	r1, r2, r2
 8003a32:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a34:	415b      	adcs	r3, r3
 8003a36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003a3c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003a40:	f7fc fc1e 	bl	8000280 <__aeabi_uldivmod>
 8003a44:	4602      	mov	r2, r0
 8003a46:	460b      	mov	r3, r1
 8003a48:	4ba5      	ldr	r3, [pc, #660]	; (8003ce0 <UART_SetConfig+0x38c>)
 8003a4a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a4e:	095b      	lsrs	r3, r3, #5
 8003a50:	011e      	lsls	r6, r3, #4
 8003a52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a54:	461c      	mov	r4, r3
 8003a56:	f04f 0500 	mov.w	r5, #0
 8003a5a:	4622      	mov	r2, r4
 8003a5c:	462b      	mov	r3, r5
 8003a5e:	1891      	adds	r1, r2, r2
 8003a60:	6339      	str	r1, [r7, #48]	; 0x30
 8003a62:	415b      	adcs	r3, r3
 8003a64:	637b      	str	r3, [r7, #52]	; 0x34
 8003a66:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003a6a:	1912      	adds	r2, r2, r4
 8003a6c:	eb45 0303 	adc.w	r3, r5, r3
 8003a70:	f04f 0000 	mov.w	r0, #0
 8003a74:	f04f 0100 	mov.w	r1, #0
 8003a78:	00d9      	lsls	r1, r3, #3
 8003a7a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a7e:	00d0      	lsls	r0, r2, #3
 8003a80:	4602      	mov	r2, r0
 8003a82:	460b      	mov	r3, r1
 8003a84:	1911      	adds	r1, r2, r4
 8003a86:	65b9      	str	r1, [r7, #88]	; 0x58
 8003a88:	416b      	adcs	r3, r5
 8003a8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	461a      	mov	r2, r3
 8003a92:	f04f 0300 	mov.w	r3, #0
 8003a96:	1891      	adds	r1, r2, r2
 8003a98:	62b9      	str	r1, [r7, #40]	; 0x28
 8003a9a:	415b      	adcs	r3, r3
 8003a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003aa2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003aa6:	f7fc fbeb 	bl	8000280 <__aeabi_uldivmod>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	460b      	mov	r3, r1
 8003aae:	4b8c      	ldr	r3, [pc, #560]	; (8003ce0 <UART_SetConfig+0x38c>)
 8003ab0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ab4:	095b      	lsrs	r3, r3, #5
 8003ab6:	2164      	movs	r1, #100	; 0x64
 8003ab8:	fb01 f303 	mul.w	r3, r1, r3
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	3332      	adds	r3, #50	; 0x32
 8003ac2:	4a87      	ldr	r2, [pc, #540]	; (8003ce0 <UART_SetConfig+0x38c>)
 8003ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac8:	095b      	lsrs	r3, r3, #5
 8003aca:	005b      	lsls	r3, r3, #1
 8003acc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ad0:	441e      	add	r6, r3
 8003ad2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f04f 0100 	mov.w	r1, #0
 8003ada:	4602      	mov	r2, r0
 8003adc:	460b      	mov	r3, r1
 8003ade:	1894      	adds	r4, r2, r2
 8003ae0:	623c      	str	r4, [r7, #32]
 8003ae2:	415b      	adcs	r3, r3
 8003ae4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ae6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003aea:	1812      	adds	r2, r2, r0
 8003aec:	eb41 0303 	adc.w	r3, r1, r3
 8003af0:	f04f 0400 	mov.w	r4, #0
 8003af4:	f04f 0500 	mov.w	r5, #0
 8003af8:	00dd      	lsls	r5, r3, #3
 8003afa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003afe:	00d4      	lsls	r4, r2, #3
 8003b00:	4622      	mov	r2, r4
 8003b02:	462b      	mov	r3, r5
 8003b04:	1814      	adds	r4, r2, r0
 8003b06:	653c      	str	r4, [r7, #80]	; 0x50
 8003b08:	414b      	adcs	r3, r1
 8003b0a:	657b      	str	r3, [r7, #84]	; 0x54
 8003b0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	461a      	mov	r2, r3
 8003b12:	f04f 0300 	mov.w	r3, #0
 8003b16:	1891      	adds	r1, r2, r2
 8003b18:	61b9      	str	r1, [r7, #24]
 8003b1a:	415b      	adcs	r3, r3
 8003b1c:	61fb      	str	r3, [r7, #28]
 8003b1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b22:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003b26:	f7fc fbab 	bl	8000280 <__aeabi_uldivmod>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	4b6c      	ldr	r3, [pc, #432]	; (8003ce0 <UART_SetConfig+0x38c>)
 8003b30:	fba3 1302 	umull	r1, r3, r3, r2
 8003b34:	095b      	lsrs	r3, r3, #5
 8003b36:	2164      	movs	r1, #100	; 0x64
 8003b38:	fb01 f303 	mul.w	r3, r1, r3
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	00db      	lsls	r3, r3, #3
 8003b40:	3332      	adds	r3, #50	; 0x32
 8003b42:	4a67      	ldr	r2, [pc, #412]	; (8003ce0 <UART_SetConfig+0x38c>)
 8003b44:	fba2 2303 	umull	r2, r3, r2, r3
 8003b48:	095b      	lsrs	r3, r3, #5
 8003b4a:	f003 0207 	and.w	r2, r3, #7
 8003b4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4432      	add	r2, r6
 8003b54:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b56:	e0b9      	b.n	8003ccc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b5a:	461c      	mov	r4, r3
 8003b5c:	f04f 0500 	mov.w	r5, #0
 8003b60:	4622      	mov	r2, r4
 8003b62:	462b      	mov	r3, r5
 8003b64:	1891      	adds	r1, r2, r2
 8003b66:	6139      	str	r1, [r7, #16]
 8003b68:	415b      	adcs	r3, r3
 8003b6a:	617b      	str	r3, [r7, #20]
 8003b6c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003b70:	1912      	adds	r2, r2, r4
 8003b72:	eb45 0303 	adc.w	r3, r5, r3
 8003b76:	f04f 0000 	mov.w	r0, #0
 8003b7a:	f04f 0100 	mov.w	r1, #0
 8003b7e:	00d9      	lsls	r1, r3, #3
 8003b80:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b84:	00d0      	lsls	r0, r2, #3
 8003b86:	4602      	mov	r2, r0
 8003b88:	460b      	mov	r3, r1
 8003b8a:	eb12 0804 	adds.w	r8, r2, r4
 8003b8e:	eb43 0905 	adc.w	r9, r3, r5
 8003b92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f04f 0100 	mov.w	r1, #0
 8003b9c:	f04f 0200 	mov.w	r2, #0
 8003ba0:	f04f 0300 	mov.w	r3, #0
 8003ba4:	008b      	lsls	r3, r1, #2
 8003ba6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003baa:	0082      	lsls	r2, r0, #2
 8003bac:	4640      	mov	r0, r8
 8003bae:	4649      	mov	r1, r9
 8003bb0:	f7fc fb66 	bl	8000280 <__aeabi_uldivmod>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	4b49      	ldr	r3, [pc, #292]	; (8003ce0 <UART_SetConfig+0x38c>)
 8003bba:	fba3 2302 	umull	r2, r3, r3, r2
 8003bbe:	095b      	lsrs	r3, r3, #5
 8003bc0:	011e      	lsls	r6, r3, #4
 8003bc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f04f 0100 	mov.w	r1, #0
 8003bca:	4602      	mov	r2, r0
 8003bcc:	460b      	mov	r3, r1
 8003bce:	1894      	adds	r4, r2, r2
 8003bd0:	60bc      	str	r4, [r7, #8]
 8003bd2:	415b      	adcs	r3, r3
 8003bd4:	60fb      	str	r3, [r7, #12]
 8003bd6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bda:	1812      	adds	r2, r2, r0
 8003bdc:	eb41 0303 	adc.w	r3, r1, r3
 8003be0:	f04f 0400 	mov.w	r4, #0
 8003be4:	f04f 0500 	mov.w	r5, #0
 8003be8:	00dd      	lsls	r5, r3, #3
 8003bea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003bee:	00d4      	lsls	r4, r2, #3
 8003bf0:	4622      	mov	r2, r4
 8003bf2:	462b      	mov	r3, r5
 8003bf4:	1814      	adds	r4, r2, r0
 8003bf6:	64bc      	str	r4, [r7, #72]	; 0x48
 8003bf8:	414b      	adcs	r3, r1
 8003bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	4618      	mov	r0, r3
 8003c02:	f04f 0100 	mov.w	r1, #0
 8003c06:	f04f 0200 	mov.w	r2, #0
 8003c0a:	f04f 0300 	mov.w	r3, #0
 8003c0e:	008b      	lsls	r3, r1, #2
 8003c10:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003c14:	0082      	lsls	r2, r0, #2
 8003c16:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003c1a:	f7fc fb31 	bl	8000280 <__aeabi_uldivmod>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	460b      	mov	r3, r1
 8003c22:	4b2f      	ldr	r3, [pc, #188]	; (8003ce0 <UART_SetConfig+0x38c>)
 8003c24:	fba3 1302 	umull	r1, r3, r3, r2
 8003c28:	095b      	lsrs	r3, r3, #5
 8003c2a:	2164      	movs	r1, #100	; 0x64
 8003c2c:	fb01 f303 	mul.w	r3, r1, r3
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	011b      	lsls	r3, r3, #4
 8003c34:	3332      	adds	r3, #50	; 0x32
 8003c36:	4a2a      	ldr	r2, [pc, #168]	; (8003ce0 <UART_SetConfig+0x38c>)
 8003c38:	fba2 2303 	umull	r2, r3, r2, r3
 8003c3c:	095b      	lsrs	r3, r3, #5
 8003c3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c42:	441e      	add	r6, r3
 8003c44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c46:	4618      	mov	r0, r3
 8003c48:	f04f 0100 	mov.w	r1, #0
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	460b      	mov	r3, r1
 8003c50:	1894      	adds	r4, r2, r2
 8003c52:	603c      	str	r4, [r7, #0]
 8003c54:	415b      	adcs	r3, r3
 8003c56:	607b      	str	r3, [r7, #4]
 8003c58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c5c:	1812      	adds	r2, r2, r0
 8003c5e:	eb41 0303 	adc.w	r3, r1, r3
 8003c62:	f04f 0400 	mov.w	r4, #0
 8003c66:	f04f 0500 	mov.w	r5, #0
 8003c6a:	00dd      	lsls	r5, r3, #3
 8003c6c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003c70:	00d4      	lsls	r4, r2, #3
 8003c72:	4622      	mov	r2, r4
 8003c74:	462b      	mov	r3, r5
 8003c76:	eb12 0a00 	adds.w	sl, r2, r0
 8003c7a:	eb43 0b01 	adc.w	fp, r3, r1
 8003c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f04f 0100 	mov.w	r1, #0
 8003c88:	f04f 0200 	mov.w	r2, #0
 8003c8c:	f04f 0300 	mov.w	r3, #0
 8003c90:	008b      	lsls	r3, r1, #2
 8003c92:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003c96:	0082      	lsls	r2, r0, #2
 8003c98:	4650      	mov	r0, sl
 8003c9a:	4659      	mov	r1, fp
 8003c9c:	f7fc faf0 	bl	8000280 <__aeabi_uldivmod>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	4b0e      	ldr	r3, [pc, #56]	; (8003ce0 <UART_SetConfig+0x38c>)
 8003ca6:	fba3 1302 	umull	r1, r3, r3, r2
 8003caa:	095b      	lsrs	r3, r3, #5
 8003cac:	2164      	movs	r1, #100	; 0x64
 8003cae:	fb01 f303 	mul.w	r3, r1, r3
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	011b      	lsls	r3, r3, #4
 8003cb6:	3332      	adds	r3, #50	; 0x32
 8003cb8:	4a09      	ldr	r2, [pc, #36]	; (8003ce0 <UART_SetConfig+0x38c>)
 8003cba:	fba2 2303 	umull	r2, r3, r2, r3
 8003cbe:	095b      	lsrs	r3, r3, #5
 8003cc0:	f003 020f 	and.w	r2, r3, #15
 8003cc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4432      	add	r2, r6
 8003cca:	609a      	str	r2, [r3, #8]
}
 8003ccc:	bf00      	nop
 8003cce:	377c      	adds	r7, #124	; 0x7c
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cd6:	bf00      	nop
 8003cd8:	40011000 	.word	0x40011000
 8003cdc:	40011400 	.word	0x40011400
 8003ce0:	51eb851f 	.word	0x51eb851f

08003ce4 <__errno>:
 8003ce4:	4b01      	ldr	r3, [pc, #4]	; (8003cec <__errno+0x8>)
 8003ce6:	6818      	ldr	r0, [r3, #0]
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	2000000c 	.word	0x2000000c

08003cf0 <__libc_init_array>:
 8003cf0:	b570      	push	{r4, r5, r6, lr}
 8003cf2:	4d0d      	ldr	r5, [pc, #52]	; (8003d28 <__libc_init_array+0x38>)
 8003cf4:	4c0d      	ldr	r4, [pc, #52]	; (8003d2c <__libc_init_array+0x3c>)
 8003cf6:	1b64      	subs	r4, r4, r5
 8003cf8:	10a4      	asrs	r4, r4, #2
 8003cfa:	2600      	movs	r6, #0
 8003cfc:	42a6      	cmp	r6, r4
 8003cfe:	d109      	bne.n	8003d14 <__libc_init_array+0x24>
 8003d00:	4d0b      	ldr	r5, [pc, #44]	; (8003d30 <__libc_init_array+0x40>)
 8003d02:	4c0c      	ldr	r4, [pc, #48]	; (8003d34 <__libc_init_array+0x44>)
 8003d04:	f000 fc4e 	bl	80045a4 <_init>
 8003d08:	1b64      	subs	r4, r4, r5
 8003d0a:	10a4      	asrs	r4, r4, #2
 8003d0c:	2600      	movs	r6, #0
 8003d0e:	42a6      	cmp	r6, r4
 8003d10:	d105      	bne.n	8003d1e <__libc_init_array+0x2e>
 8003d12:	bd70      	pop	{r4, r5, r6, pc}
 8003d14:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d18:	4798      	blx	r3
 8003d1a:	3601      	adds	r6, #1
 8003d1c:	e7ee      	b.n	8003cfc <__libc_init_array+0xc>
 8003d1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d22:	4798      	blx	r3
 8003d24:	3601      	adds	r6, #1
 8003d26:	e7f2      	b.n	8003d0e <__libc_init_array+0x1e>
 8003d28:	080046c0 	.word	0x080046c0
 8003d2c:	080046c0 	.word	0x080046c0
 8003d30:	080046c0 	.word	0x080046c0
 8003d34:	080046c4 	.word	0x080046c4

08003d38 <memset>:
 8003d38:	4402      	add	r2, r0
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d100      	bne.n	8003d42 <memset+0xa>
 8003d40:	4770      	bx	lr
 8003d42:	f803 1b01 	strb.w	r1, [r3], #1
 8003d46:	e7f9      	b.n	8003d3c <memset+0x4>

08003d48 <siprintf>:
 8003d48:	b40e      	push	{r1, r2, r3}
 8003d4a:	b500      	push	{lr}
 8003d4c:	b09c      	sub	sp, #112	; 0x70
 8003d4e:	ab1d      	add	r3, sp, #116	; 0x74
 8003d50:	9002      	str	r0, [sp, #8]
 8003d52:	9006      	str	r0, [sp, #24]
 8003d54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d58:	4809      	ldr	r0, [pc, #36]	; (8003d80 <siprintf+0x38>)
 8003d5a:	9107      	str	r1, [sp, #28]
 8003d5c:	9104      	str	r1, [sp, #16]
 8003d5e:	4909      	ldr	r1, [pc, #36]	; (8003d84 <siprintf+0x3c>)
 8003d60:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d64:	9105      	str	r1, [sp, #20]
 8003d66:	6800      	ldr	r0, [r0, #0]
 8003d68:	9301      	str	r3, [sp, #4]
 8003d6a:	a902      	add	r1, sp, #8
 8003d6c:	f000 f868 	bl	8003e40 <_svfiprintf_r>
 8003d70:	9b02      	ldr	r3, [sp, #8]
 8003d72:	2200      	movs	r2, #0
 8003d74:	701a      	strb	r2, [r3, #0]
 8003d76:	b01c      	add	sp, #112	; 0x70
 8003d78:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d7c:	b003      	add	sp, #12
 8003d7e:	4770      	bx	lr
 8003d80:	2000000c 	.word	0x2000000c
 8003d84:	ffff0208 	.word	0xffff0208

08003d88 <__ssputs_r>:
 8003d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d8c:	688e      	ldr	r6, [r1, #8]
 8003d8e:	429e      	cmp	r6, r3
 8003d90:	4682      	mov	sl, r0
 8003d92:	460c      	mov	r4, r1
 8003d94:	4690      	mov	r8, r2
 8003d96:	461f      	mov	r7, r3
 8003d98:	d838      	bhi.n	8003e0c <__ssputs_r+0x84>
 8003d9a:	898a      	ldrh	r2, [r1, #12]
 8003d9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003da0:	d032      	beq.n	8003e08 <__ssputs_r+0x80>
 8003da2:	6825      	ldr	r5, [r4, #0]
 8003da4:	6909      	ldr	r1, [r1, #16]
 8003da6:	eba5 0901 	sub.w	r9, r5, r1
 8003daa:	6965      	ldr	r5, [r4, #20]
 8003dac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003db0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003db4:	3301      	adds	r3, #1
 8003db6:	444b      	add	r3, r9
 8003db8:	106d      	asrs	r5, r5, #1
 8003dba:	429d      	cmp	r5, r3
 8003dbc:	bf38      	it	cc
 8003dbe:	461d      	movcc	r5, r3
 8003dc0:	0553      	lsls	r3, r2, #21
 8003dc2:	d531      	bpl.n	8003e28 <__ssputs_r+0xa0>
 8003dc4:	4629      	mov	r1, r5
 8003dc6:	f000 fb47 	bl	8004458 <_malloc_r>
 8003dca:	4606      	mov	r6, r0
 8003dcc:	b950      	cbnz	r0, 8003de4 <__ssputs_r+0x5c>
 8003dce:	230c      	movs	r3, #12
 8003dd0:	f8ca 3000 	str.w	r3, [sl]
 8003dd4:	89a3      	ldrh	r3, [r4, #12]
 8003dd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dda:	81a3      	strh	r3, [r4, #12]
 8003ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8003de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003de4:	6921      	ldr	r1, [r4, #16]
 8003de6:	464a      	mov	r2, r9
 8003de8:	f000 fabe 	bl	8004368 <memcpy>
 8003dec:	89a3      	ldrh	r3, [r4, #12]
 8003dee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003df2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003df6:	81a3      	strh	r3, [r4, #12]
 8003df8:	6126      	str	r6, [r4, #16]
 8003dfa:	6165      	str	r5, [r4, #20]
 8003dfc:	444e      	add	r6, r9
 8003dfe:	eba5 0509 	sub.w	r5, r5, r9
 8003e02:	6026      	str	r6, [r4, #0]
 8003e04:	60a5      	str	r5, [r4, #8]
 8003e06:	463e      	mov	r6, r7
 8003e08:	42be      	cmp	r6, r7
 8003e0a:	d900      	bls.n	8003e0e <__ssputs_r+0x86>
 8003e0c:	463e      	mov	r6, r7
 8003e0e:	4632      	mov	r2, r6
 8003e10:	6820      	ldr	r0, [r4, #0]
 8003e12:	4641      	mov	r1, r8
 8003e14:	f000 fab6 	bl	8004384 <memmove>
 8003e18:	68a3      	ldr	r3, [r4, #8]
 8003e1a:	6822      	ldr	r2, [r4, #0]
 8003e1c:	1b9b      	subs	r3, r3, r6
 8003e1e:	4432      	add	r2, r6
 8003e20:	60a3      	str	r3, [r4, #8]
 8003e22:	6022      	str	r2, [r4, #0]
 8003e24:	2000      	movs	r0, #0
 8003e26:	e7db      	b.n	8003de0 <__ssputs_r+0x58>
 8003e28:	462a      	mov	r2, r5
 8003e2a:	f000 fb6f 	bl	800450c <_realloc_r>
 8003e2e:	4606      	mov	r6, r0
 8003e30:	2800      	cmp	r0, #0
 8003e32:	d1e1      	bne.n	8003df8 <__ssputs_r+0x70>
 8003e34:	6921      	ldr	r1, [r4, #16]
 8003e36:	4650      	mov	r0, sl
 8003e38:	f000 fabe 	bl	80043b8 <_free_r>
 8003e3c:	e7c7      	b.n	8003dce <__ssputs_r+0x46>
	...

08003e40 <_svfiprintf_r>:
 8003e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e44:	4698      	mov	r8, r3
 8003e46:	898b      	ldrh	r3, [r1, #12]
 8003e48:	061b      	lsls	r3, r3, #24
 8003e4a:	b09d      	sub	sp, #116	; 0x74
 8003e4c:	4607      	mov	r7, r0
 8003e4e:	460d      	mov	r5, r1
 8003e50:	4614      	mov	r4, r2
 8003e52:	d50e      	bpl.n	8003e72 <_svfiprintf_r+0x32>
 8003e54:	690b      	ldr	r3, [r1, #16]
 8003e56:	b963      	cbnz	r3, 8003e72 <_svfiprintf_r+0x32>
 8003e58:	2140      	movs	r1, #64	; 0x40
 8003e5a:	f000 fafd 	bl	8004458 <_malloc_r>
 8003e5e:	6028      	str	r0, [r5, #0]
 8003e60:	6128      	str	r0, [r5, #16]
 8003e62:	b920      	cbnz	r0, 8003e6e <_svfiprintf_r+0x2e>
 8003e64:	230c      	movs	r3, #12
 8003e66:	603b      	str	r3, [r7, #0]
 8003e68:	f04f 30ff 	mov.w	r0, #4294967295
 8003e6c:	e0d1      	b.n	8004012 <_svfiprintf_r+0x1d2>
 8003e6e:	2340      	movs	r3, #64	; 0x40
 8003e70:	616b      	str	r3, [r5, #20]
 8003e72:	2300      	movs	r3, #0
 8003e74:	9309      	str	r3, [sp, #36]	; 0x24
 8003e76:	2320      	movs	r3, #32
 8003e78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e80:	2330      	movs	r3, #48	; 0x30
 8003e82:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800402c <_svfiprintf_r+0x1ec>
 8003e86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e8a:	f04f 0901 	mov.w	r9, #1
 8003e8e:	4623      	mov	r3, r4
 8003e90:	469a      	mov	sl, r3
 8003e92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e96:	b10a      	cbz	r2, 8003e9c <_svfiprintf_r+0x5c>
 8003e98:	2a25      	cmp	r2, #37	; 0x25
 8003e9a:	d1f9      	bne.n	8003e90 <_svfiprintf_r+0x50>
 8003e9c:	ebba 0b04 	subs.w	fp, sl, r4
 8003ea0:	d00b      	beq.n	8003eba <_svfiprintf_r+0x7a>
 8003ea2:	465b      	mov	r3, fp
 8003ea4:	4622      	mov	r2, r4
 8003ea6:	4629      	mov	r1, r5
 8003ea8:	4638      	mov	r0, r7
 8003eaa:	f7ff ff6d 	bl	8003d88 <__ssputs_r>
 8003eae:	3001      	adds	r0, #1
 8003eb0:	f000 80aa 	beq.w	8004008 <_svfiprintf_r+0x1c8>
 8003eb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003eb6:	445a      	add	r2, fp
 8003eb8:	9209      	str	r2, [sp, #36]	; 0x24
 8003eba:	f89a 3000 	ldrb.w	r3, [sl]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	f000 80a2 	beq.w	8004008 <_svfiprintf_r+0x1c8>
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8003eca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ece:	f10a 0a01 	add.w	sl, sl, #1
 8003ed2:	9304      	str	r3, [sp, #16]
 8003ed4:	9307      	str	r3, [sp, #28]
 8003ed6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003eda:	931a      	str	r3, [sp, #104]	; 0x68
 8003edc:	4654      	mov	r4, sl
 8003ede:	2205      	movs	r2, #5
 8003ee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ee4:	4851      	ldr	r0, [pc, #324]	; (800402c <_svfiprintf_r+0x1ec>)
 8003ee6:	f7fc f97b 	bl	80001e0 <memchr>
 8003eea:	9a04      	ldr	r2, [sp, #16]
 8003eec:	b9d8      	cbnz	r0, 8003f26 <_svfiprintf_r+0xe6>
 8003eee:	06d0      	lsls	r0, r2, #27
 8003ef0:	bf44      	itt	mi
 8003ef2:	2320      	movmi	r3, #32
 8003ef4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ef8:	0711      	lsls	r1, r2, #28
 8003efa:	bf44      	itt	mi
 8003efc:	232b      	movmi	r3, #43	; 0x2b
 8003efe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f02:	f89a 3000 	ldrb.w	r3, [sl]
 8003f06:	2b2a      	cmp	r3, #42	; 0x2a
 8003f08:	d015      	beq.n	8003f36 <_svfiprintf_r+0xf6>
 8003f0a:	9a07      	ldr	r2, [sp, #28]
 8003f0c:	4654      	mov	r4, sl
 8003f0e:	2000      	movs	r0, #0
 8003f10:	f04f 0c0a 	mov.w	ip, #10
 8003f14:	4621      	mov	r1, r4
 8003f16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f1a:	3b30      	subs	r3, #48	; 0x30
 8003f1c:	2b09      	cmp	r3, #9
 8003f1e:	d94e      	bls.n	8003fbe <_svfiprintf_r+0x17e>
 8003f20:	b1b0      	cbz	r0, 8003f50 <_svfiprintf_r+0x110>
 8003f22:	9207      	str	r2, [sp, #28]
 8003f24:	e014      	b.n	8003f50 <_svfiprintf_r+0x110>
 8003f26:	eba0 0308 	sub.w	r3, r0, r8
 8003f2a:	fa09 f303 	lsl.w	r3, r9, r3
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	9304      	str	r3, [sp, #16]
 8003f32:	46a2      	mov	sl, r4
 8003f34:	e7d2      	b.n	8003edc <_svfiprintf_r+0x9c>
 8003f36:	9b03      	ldr	r3, [sp, #12]
 8003f38:	1d19      	adds	r1, r3, #4
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	9103      	str	r1, [sp, #12]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	bfbb      	ittet	lt
 8003f42:	425b      	neglt	r3, r3
 8003f44:	f042 0202 	orrlt.w	r2, r2, #2
 8003f48:	9307      	strge	r3, [sp, #28]
 8003f4a:	9307      	strlt	r3, [sp, #28]
 8003f4c:	bfb8      	it	lt
 8003f4e:	9204      	strlt	r2, [sp, #16]
 8003f50:	7823      	ldrb	r3, [r4, #0]
 8003f52:	2b2e      	cmp	r3, #46	; 0x2e
 8003f54:	d10c      	bne.n	8003f70 <_svfiprintf_r+0x130>
 8003f56:	7863      	ldrb	r3, [r4, #1]
 8003f58:	2b2a      	cmp	r3, #42	; 0x2a
 8003f5a:	d135      	bne.n	8003fc8 <_svfiprintf_r+0x188>
 8003f5c:	9b03      	ldr	r3, [sp, #12]
 8003f5e:	1d1a      	adds	r2, r3, #4
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	9203      	str	r2, [sp, #12]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	bfb8      	it	lt
 8003f68:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f6c:	3402      	adds	r4, #2
 8003f6e:	9305      	str	r3, [sp, #20]
 8003f70:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800403c <_svfiprintf_r+0x1fc>
 8003f74:	7821      	ldrb	r1, [r4, #0]
 8003f76:	2203      	movs	r2, #3
 8003f78:	4650      	mov	r0, sl
 8003f7a:	f7fc f931 	bl	80001e0 <memchr>
 8003f7e:	b140      	cbz	r0, 8003f92 <_svfiprintf_r+0x152>
 8003f80:	2340      	movs	r3, #64	; 0x40
 8003f82:	eba0 000a 	sub.w	r0, r0, sl
 8003f86:	fa03 f000 	lsl.w	r0, r3, r0
 8003f8a:	9b04      	ldr	r3, [sp, #16]
 8003f8c:	4303      	orrs	r3, r0
 8003f8e:	3401      	adds	r4, #1
 8003f90:	9304      	str	r3, [sp, #16]
 8003f92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f96:	4826      	ldr	r0, [pc, #152]	; (8004030 <_svfiprintf_r+0x1f0>)
 8003f98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f9c:	2206      	movs	r2, #6
 8003f9e:	f7fc f91f 	bl	80001e0 <memchr>
 8003fa2:	2800      	cmp	r0, #0
 8003fa4:	d038      	beq.n	8004018 <_svfiprintf_r+0x1d8>
 8003fa6:	4b23      	ldr	r3, [pc, #140]	; (8004034 <_svfiprintf_r+0x1f4>)
 8003fa8:	bb1b      	cbnz	r3, 8003ff2 <_svfiprintf_r+0x1b2>
 8003faa:	9b03      	ldr	r3, [sp, #12]
 8003fac:	3307      	adds	r3, #7
 8003fae:	f023 0307 	bic.w	r3, r3, #7
 8003fb2:	3308      	adds	r3, #8
 8003fb4:	9303      	str	r3, [sp, #12]
 8003fb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fb8:	4433      	add	r3, r6
 8003fba:	9309      	str	r3, [sp, #36]	; 0x24
 8003fbc:	e767      	b.n	8003e8e <_svfiprintf_r+0x4e>
 8003fbe:	fb0c 3202 	mla	r2, ip, r2, r3
 8003fc2:	460c      	mov	r4, r1
 8003fc4:	2001      	movs	r0, #1
 8003fc6:	e7a5      	b.n	8003f14 <_svfiprintf_r+0xd4>
 8003fc8:	2300      	movs	r3, #0
 8003fca:	3401      	adds	r4, #1
 8003fcc:	9305      	str	r3, [sp, #20]
 8003fce:	4619      	mov	r1, r3
 8003fd0:	f04f 0c0a 	mov.w	ip, #10
 8003fd4:	4620      	mov	r0, r4
 8003fd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fda:	3a30      	subs	r2, #48	; 0x30
 8003fdc:	2a09      	cmp	r2, #9
 8003fde:	d903      	bls.n	8003fe8 <_svfiprintf_r+0x1a8>
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d0c5      	beq.n	8003f70 <_svfiprintf_r+0x130>
 8003fe4:	9105      	str	r1, [sp, #20]
 8003fe6:	e7c3      	b.n	8003f70 <_svfiprintf_r+0x130>
 8003fe8:	fb0c 2101 	mla	r1, ip, r1, r2
 8003fec:	4604      	mov	r4, r0
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e7f0      	b.n	8003fd4 <_svfiprintf_r+0x194>
 8003ff2:	ab03      	add	r3, sp, #12
 8003ff4:	9300      	str	r3, [sp, #0]
 8003ff6:	462a      	mov	r2, r5
 8003ff8:	4b0f      	ldr	r3, [pc, #60]	; (8004038 <_svfiprintf_r+0x1f8>)
 8003ffa:	a904      	add	r1, sp, #16
 8003ffc:	4638      	mov	r0, r7
 8003ffe:	f3af 8000 	nop.w
 8004002:	1c42      	adds	r2, r0, #1
 8004004:	4606      	mov	r6, r0
 8004006:	d1d6      	bne.n	8003fb6 <_svfiprintf_r+0x176>
 8004008:	89ab      	ldrh	r3, [r5, #12]
 800400a:	065b      	lsls	r3, r3, #25
 800400c:	f53f af2c 	bmi.w	8003e68 <_svfiprintf_r+0x28>
 8004010:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004012:	b01d      	add	sp, #116	; 0x74
 8004014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004018:	ab03      	add	r3, sp, #12
 800401a:	9300      	str	r3, [sp, #0]
 800401c:	462a      	mov	r2, r5
 800401e:	4b06      	ldr	r3, [pc, #24]	; (8004038 <_svfiprintf_r+0x1f8>)
 8004020:	a904      	add	r1, sp, #16
 8004022:	4638      	mov	r0, r7
 8004024:	f000 f87a 	bl	800411c <_printf_i>
 8004028:	e7eb      	b.n	8004002 <_svfiprintf_r+0x1c2>
 800402a:	bf00      	nop
 800402c:	08004684 	.word	0x08004684
 8004030:	0800468e 	.word	0x0800468e
 8004034:	00000000 	.word	0x00000000
 8004038:	08003d89 	.word	0x08003d89
 800403c:	0800468a 	.word	0x0800468a

08004040 <_printf_common>:
 8004040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004044:	4616      	mov	r6, r2
 8004046:	4699      	mov	r9, r3
 8004048:	688a      	ldr	r2, [r1, #8]
 800404a:	690b      	ldr	r3, [r1, #16]
 800404c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004050:	4293      	cmp	r3, r2
 8004052:	bfb8      	it	lt
 8004054:	4613      	movlt	r3, r2
 8004056:	6033      	str	r3, [r6, #0]
 8004058:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800405c:	4607      	mov	r7, r0
 800405e:	460c      	mov	r4, r1
 8004060:	b10a      	cbz	r2, 8004066 <_printf_common+0x26>
 8004062:	3301      	adds	r3, #1
 8004064:	6033      	str	r3, [r6, #0]
 8004066:	6823      	ldr	r3, [r4, #0]
 8004068:	0699      	lsls	r1, r3, #26
 800406a:	bf42      	ittt	mi
 800406c:	6833      	ldrmi	r3, [r6, #0]
 800406e:	3302      	addmi	r3, #2
 8004070:	6033      	strmi	r3, [r6, #0]
 8004072:	6825      	ldr	r5, [r4, #0]
 8004074:	f015 0506 	ands.w	r5, r5, #6
 8004078:	d106      	bne.n	8004088 <_printf_common+0x48>
 800407a:	f104 0a19 	add.w	sl, r4, #25
 800407e:	68e3      	ldr	r3, [r4, #12]
 8004080:	6832      	ldr	r2, [r6, #0]
 8004082:	1a9b      	subs	r3, r3, r2
 8004084:	42ab      	cmp	r3, r5
 8004086:	dc26      	bgt.n	80040d6 <_printf_common+0x96>
 8004088:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800408c:	1e13      	subs	r3, r2, #0
 800408e:	6822      	ldr	r2, [r4, #0]
 8004090:	bf18      	it	ne
 8004092:	2301      	movne	r3, #1
 8004094:	0692      	lsls	r2, r2, #26
 8004096:	d42b      	bmi.n	80040f0 <_printf_common+0xb0>
 8004098:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800409c:	4649      	mov	r1, r9
 800409e:	4638      	mov	r0, r7
 80040a0:	47c0      	blx	r8
 80040a2:	3001      	adds	r0, #1
 80040a4:	d01e      	beq.n	80040e4 <_printf_common+0xa4>
 80040a6:	6823      	ldr	r3, [r4, #0]
 80040a8:	68e5      	ldr	r5, [r4, #12]
 80040aa:	6832      	ldr	r2, [r6, #0]
 80040ac:	f003 0306 	and.w	r3, r3, #6
 80040b0:	2b04      	cmp	r3, #4
 80040b2:	bf08      	it	eq
 80040b4:	1aad      	subeq	r5, r5, r2
 80040b6:	68a3      	ldr	r3, [r4, #8]
 80040b8:	6922      	ldr	r2, [r4, #16]
 80040ba:	bf0c      	ite	eq
 80040bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040c0:	2500      	movne	r5, #0
 80040c2:	4293      	cmp	r3, r2
 80040c4:	bfc4      	itt	gt
 80040c6:	1a9b      	subgt	r3, r3, r2
 80040c8:	18ed      	addgt	r5, r5, r3
 80040ca:	2600      	movs	r6, #0
 80040cc:	341a      	adds	r4, #26
 80040ce:	42b5      	cmp	r5, r6
 80040d0:	d11a      	bne.n	8004108 <_printf_common+0xc8>
 80040d2:	2000      	movs	r0, #0
 80040d4:	e008      	b.n	80040e8 <_printf_common+0xa8>
 80040d6:	2301      	movs	r3, #1
 80040d8:	4652      	mov	r2, sl
 80040da:	4649      	mov	r1, r9
 80040dc:	4638      	mov	r0, r7
 80040de:	47c0      	blx	r8
 80040e0:	3001      	adds	r0, #1
 80040e2:	d103      	bne.n	80040ec <_printf_common+0xac>
 80040e4:	f04f 30ff 	mov.w	r0, #4294967295
 80040e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040ec:	3501      	adds	r5, #1
 80040ee:	e7c6      	b.n	800407e <_printf_common+0x3e>
 80040f0:	18e1      	adds	r1, r4, r3
 80040f2:	1c5a      	adds	r2, r3, #1
 80040f4:	2030      	movs	r0, #48	; 0x30
 80040f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040fa:	4422      	add	r2, r4
 80040fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004100:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004104:	3302      	adds	r3, #2
 8004106:	e7c7      	b.n	8004098 <_printf_common+0x58>
 8004108:	2301      	movs	r3, #1
 800410a:	4622      	mov	r2, r4
 800410c:	4649      	mov	r1, r9
 800410e:	4638      	mov	r0, r7
 8004110:	47c0      	blx	r8
 8004112:	3001      	adds	r0, #1
 8004114:	d0e6      	beq.n	80040e4 <_printf_common+0xa4>
 8004116:	3601      	adds	r6, #1
 8004118:	e7d9      	b.n	80040ce <_printf_common+0x8e>
	...

0800411c <_printf_i>:
 800411c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004120:	460c      	mov	r4, r1
 8004122:	4691      	mov	r9, r2
 8004124:	7e27      	ldrb	r7, [r4, #24]
 8004126:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004128:	2f78      	cmp	r7, #120	; 0x78
 800412a:	4680      	mov	r8, r0
 800412c:	469a      	mov	sl, r3
 800412e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004132:	d807      	bhi.n	8004144 <_printf_i+0x28>
 8004134:	2f62      	cmp	r7, #98	; 0x62
 8004136:	d80a      	bhi.n	800414e <_printf_i+0x32>
 8004138:	2f00      	cmp	r7, #0
 800413a:	f000 80d8 	beq.w	80042ee <_printf_i+0x1d2>
 800413e:	2f58      	cmp	r7, #88	; 0x58
 8004140:	f000 80a3 	beq.w	800428a <_printf_i+0x16e>
 8004144:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004148:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800414c:	e03a      	b.n	80041c4 <_printf_i+0xa8>
 800414e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004152:	2b15      	cmp	r3, #21
 8004154:	d8f6      	bhi.n	8004144 <_printf_i+0x28>
 8004156:	a001      	add	r0, pc, #4	; (adr r0, 800415c <_printf_i+0x40>)
 8004158:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800415c:	080041b5 	.word	0x080041b5
 8004160:	080041c9 	.word	0x080041c9
 8004164:	08004145 	.word	0x08004145
 8004168:	08004145 	.word	0x08004145
 800416c:	08004145 	.word	0x08004145
 8004170:	08004145 	.word	0x08004145
 8004174:	080041c9 	.word	0x080041c9
 8004178:	08004145 	.word	0x08004145
 800417c:	08004145 	.word	0x08004145
 8004180:	08004145 	.word	0x08004145
 8004184:	08004145 	.word	0x08004145
 8004188:	080042d5 	.word	0x080042d5
 800418c:	080041f9 	.word	0x080041f9
 8004190:	080042b7 	.word	0x080042b7
 8004194:	08004145 	.word	0x08004145
 8004198:	08004145 	.word	0x08004145
 800419c:	080042f7 	.word	0x080042f7
 80041a0:	08004145 	.word	0x08004145
 80041a4:	080041f9 	.word	0x080041f9
 80041a8:	08004145 	.word	0x08004145
 80041ac:	08004145 	.word	0x08004145
 80041b0:	080042bf 	.word	0x080042bf
 80041b4:	680b      	ldr	r3, [r1, #0]
 80041b6:	1d1a      	adds	r2, r3, #4
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	600a      	str	r2, [r1, #0]
 80041bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80041c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041c4:	2301      	movs	r3, #1
 80041c6:	e0a3      	b.n	8004310 <_printf_i+0x1f4>
 80041c8:	6825      	ldr	r5, [r4, #0]
 80041ca:	6808      	ldr	r0, [r1, #0]
 80041cc:	062e      	lsls	r6, r5, #24
 80041ce:	f100 0304 	add.w	r3, r0, #4
 80041d2:	d50a      	bpl.n	80041ea <_printf_i+0xce>
 80041d4:	6805      	ldr	r5, [r0, #0]
 80041d6:	600b      	str	r3, [r1, #0]
 80041d8:	2d00      	cmp	r5, #0
 80041da:	da03      	bge.n	80041e4 <_printf_i+0xc8>
 80041dc:	232d      	movs	r3, #45	; 0x2d
 80041de:	426d      	negs	r5, r5
 80041e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041e4:	485e      	ldr	r0, [pc, #376]	; (8004360 <_printf_i+0x244>)
 80041e6:	230a      	movs	r3, #10
 80041e8:	e019      	b.n	800421e <_printf_i+0x102>
 80041ea:	f015 0f40 	tst.w	r5, #64	; 0x40
 80041ee:	6805      	ldr	r5, [r0, #0]
 80041f0:	600b      	str	r3, [r1, #0]
 80041f2:	bf18      	it	ne
 80041f4:	b22d      	sxthne	r5, r5
 80041f6:	e7ef      	b.n	80041d8 <_printf_i+0xbc>
 80041f8:	680b      	ldr	r3, [r1, #0]
 80041fa:	6825      	ldr	r5, [r4, #0]
 80041fc:	1d18      	adds	r0, r3, #4
 80041fe:	6008      	str	r0, [r1, #0]
 8004200:	0628      	lsls	r0, r5, #24
 8004202:	d501      	bpl.n	8004208 <_printf_i+0xec>
 8004204:	681d      	ldr	r5, [r3, #0]
 8004206:	e002      	b.n	800420e <_printf_i+0xf2>
 8004208:	0669      	lsls	r1, r5, #25
 800420a:	d5fb      	bpl.n	8004204 <_printf_i+0xe8>
 800420c:	881d      	ldrh	r5, [r3, #0]
 800420e:	4854      	ldr	r0, [pc, #336]	; (8004360 <_printf_i+0x244>)
 8004210:	2f6f      	cmp	r7, #111	; 0x6f
 8004212:	bf0c      	ite	eq
 8004214:	2308      	moveq	r3, #8
 8004216:	230a      	movne	r3, #10
 8004218:	2100      	movs	r1, #0
 800421a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800421e:	6866      	ldr	r6, [r4, #4]
 8004220:	60a6      	str	r6, [r4, #8]
 8004222:	2e00      	cmp	r6, #0
 8004224:	bfa2      	ittt	ge
 8004226:	6821      	ldrge	r1, [r4, #0]
 8004228:	f021 0104 	bicge.w	r1, r1, #4
 800422c:	6021      	strge	r1, [r4, #0]
 800422e:	b90d      	cbnz	r5, 8004234 <_printf_i+0x118>
 8004230:	2e00      	cmp	r6, #0
 8004232:	d04d      	beq.n	80042d0 <_printf_i+0x1b4>
 8004234:	4616      	mov	r6, r2
 8004236:	fbb5 f1f3 	udiv	r1, r5, r3
 800423a:	fb03 5711 	mls	r7, r3, r1, r5
 800423e:	5dc7      	ldrb	r7, [r0, r7]
 8004240:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004244:	462f      	mov	r7, r5
 8004246:	42bb      	cmp	r3, r7
 8004248:	460d      	mov	r5, r1
 800424a:	d9f4      	bls.n	8004236 <_printf_i+0x11a>
 800424c:	2b08      	cmp	r3, #8
 800424e:	d10b      	bne.n	8004268 <_printf_i+0x14c>
 8004250:	6823      	ldr	r3, [r4, #0]
 8004252:	07df      	lsls	r7, r3, #31
 8004254:	d508      	bpl.n	8004268 <_printf_i+0x14c>
 8004256:	6923      	ldr	r3, [r4, #16]
 8004258:	6861      	ldr	r1, [r4, #4]
 800425a:	4299      	cmp	r1, r3
 800425c:	bfde      	ittt	le
 800425e:	2330      	movle	r3, #48	; 0x30
 8004260:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004264:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004268:	1b92      	subs	r2, r2, r6
 800426a:	6122      	str	r2, [r4, #16]
 800426c:	f8cd a000 	str.w	sl, [sp]
 8004270:	464b      	mov	r3, r9
 8004272:	aa03      	add	r2, sp, #12
 8004274:	4621      	mov	r1, r4
 8004276:	4640      	mov	r0, r8
 8004278:	f7ff fee2 	bl	8004040 <_printf_common>
 800427c:	3001      	adds	r0, #1
 800427e:	d14c      	bne.n	800431a <_printf_i+0x1fe>
 8004280:	f04f 30ff 	mov.w	r0, #4294967295
 8004284:	b004      	add	sp, #16
 8004286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800428a:	4835      	ldr	r0, [pc, #212]	; (8004360 <_printf_i+0x244>)
 800428c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004290:	6823      	ldr	r3, [r4, #0]
 8004292:	680e      	ldr	r6, [r1, #0]
 8004294:	061f      	lsls	r7, r3, #24
 8004296:	f856 5b04 	ldr.w	r5, [r6], #4
 800429a:	600e      	str	r6, [r1, #0]
 800429c:	d514      	bpl.n	80042c8 <_printf_i+0x1ac>
 800429e:	07d9      	lsls	r1, r3, #31
 80042a0:	bf44      	itt	mi
 80042a2:	f043 0320 	orrmi.w	r3, r3, #32
 80042a6:	6023      	strmi	r3, [r4, #0]
 80042a8:	b91d      	cbnz	r5, 80042b2 <_printf_i+0x196>
 80042aa:	6823      	ldr	r3, [r4, #0]
 80042ac:	f023 0320 	bic.w	r3, r3, #32
 80042b0:	6023      	str	r3, [r4, #0]
 80042b2:	2310      	movs	r3, #16
 80042b4:	e7b0      	b.n	8004218 <_printf_i+0xfc>
 80042b6:	6823      	ldr	r3, [r4, #0]
 80042b8:	f043 0320 	orr.w	r3, r3, #32
 80042bc:	6023      	str	r3, [r4, #0]
 80042be:	2378      	movs	r3, #120	; 0x78
 80042c0:	4828      	ldr	r0, [pc, #160]	; (8004364 <_printf_i+0x248>)
 80042c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80042c6:	e7e3      	b.n	8004290 <_printf_i+0x174>
 80042c8:	065e      	lsls	r6, r3, #25
 80042ca:	bf48      	it	mi
 80042cc:	b2ad      	uxthmi	r5, r5
 80042ce:	e7e6      	b.n	800429e <_printf_i+0x182>
 80042d0:	4616      	mov	r6, r2
 80042d2:	e7bb      	b.n	800424c <_printf_i+0x130>
 80042d4:	680b      	ldr	r3, [r1, #0]
 80042d6:	6826      	ldr	r6, [r4, #0]
 80042d8:	6960      	ldr	r0, [r4, #20]
 80042da:	1d1d      	adds	r5, r3, #4
 80042dc:	600d      	str	r5, [r1, #0]
 80042de:	0635      	lsls	r5, r6, #24
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	d501      	bpl.n	80042e8 <_printf_i+0x1cc>
 80042e4:	6018      	str	r0, [r3, #0]
 80042e6:	e002      	b.n	80042ee <_printf_i+0x1d2>
 80042e8:	0671      	lsls	r1, r6, #25
 80042ea:	d5fb      	bpl.n	80042e4 <_printf_i+0x1c8>
 80042ec:	8018      	strh	r0, [r3, #0]
 80042ee:	2300      	movs	r3, #0
 80042f0:	6123      	str	r3, [r4, #16]
 80042f2:	4616      	mov	r6, r2
 80042f4:	e7ba      	b.n	800426c <_printf_i+0x150>
 80042f6:	680b      	ldr	r3, [r1, #0]
 80042f8:	1d1a      	adds	r2, r3, #4
 80042fa:	600a      	str	r2, [r1, #0]
 80042fc:	681e      	ldr	r6, [r3, #0]
 80042fe:	6862      	ldr	r2, [r4, #4]
 8004300:	2100      	movs	r1, #0
 8004302:	4630      	mov	r0, r6
 8004304:	f7fb ff6c 	bl	80001e0 <memchr>
 8004308:	b108      	cbz	r0, 800430e <_printf_i+0x1f2>
 800430a:	1b80      	subs	r0, r0, r6
 800430c:	6060      	str	r0, [r4, #4]
 800430e:	6863      	ldr	r3, [r4, #4]
 8004310:	6123      	str	r3, [r4, #16]
 8004312:	2300      	movs	r3, #0
 8004314:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004318:	e7a8      	b.n	800426c <_printf_i+0x150>
 800431a:	6923      	ldr	r3, [r4, #16]
 800431c:	4632      	mov	r2, r6
 800431e:	4649      	mov	r1, r9
 8004320:	4640      	mov	r0, r8
 8004322:	47d0      	blx	sl
 8004324:	3001      	adds	r0, #1
 8004326:	d0ab      	beq.n	8004280 <_printf_i+0x164>
 8004328:	6823      	ldr	r3, [r4, #0]
 800432a:	079b      	lsls	r3, r3, #30
 800432c:	d413      	bmi.n	8004356 <_printf_i+0x23a>
 800432e:	68e0      	ldr	r0, [r4, #12]
 8004330:	9b03      	ldr	r3, [sp, #12]
 8004332:	4298      	cmp	r0, r3
 8004334:	bfb8      	it	lt
 8004336:	4618      	movlt	r0, r3
 8004338:	e7a4      	b.n	8004284 <_printf_i+0x168>
 800433a:	2301      	movs	r3, #1
 800433c:	4632      	mov	r2, r6
 800433e:	4649      	mov	r1, r9
 8004340:	4640      	mov	r0, r8
 8004342:	47d0      	blx	sl
 8004344:	3001      	adds	r0, #1
 8004346:	d09b      	beq.n	8004280 <_printf_i+0x164>
 8004348:	3501      	adds	r5, #1
 800434a:	68e3      	ldr	r3, [r4, #12]
 800434c:	9903      	ldr	r1, [sp, #12]
 800434e:	1a5b      	subs	r3, r3, r1
 8004350:	42ab      	cmp	r3, r5
 8004352:	dcf2      	bgt.n	800433a <_printf_i+0x21e>
 8004354:	e7eb      	b.n	800432e <_printf_i+0x212>
 8004356:	2500      	movs	r5, #0
 8004358:	f104 0619 	add.w	r6, r4, #25
 800435c:	e7f5      	b.n	800434a <_printf_i+0x22e>
 800435e:	bf00      	nop
 8004360:	08004695 	.word	0x08004695
 8004364:	080046a6 	.word	0x080046a6

08004368 <memcpy>:
 8004368:	440a      	add	r2, r1
 800436a:	4291      	cmp	r1, r2
 800436c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004370:	d100      	bne.n	8004374 <memcpy+0xc>
 8004372:	4770      	bx	lr
 8004374:	b510      	push	{r4, lr}
 8004376:	f811 4b01 	ldrb.w	r4, [r1], #1
 800437a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800437e:	4291      	cmp	r1, r2
 8004380:	d1f9      	bne.n	8004376 <memcpy+0xe>
 8004382:	bd10      	pop	{r4, pc}

08004384 <memmove>:
 8004384:	4288      	cmp	r0, r1
 8004386:	b510      	push	{r4, lr}
 8004388:	eb01 0402 	add.w	r4, r1, r2
 800438c:	d902      	bls.n	8004394 <memmove+0x10>
 800438e:	4284      	cmp	r4, r0
 8004390:	4623      	mov	r3, r4
 8004392:	d807      	bhi.n	80043a4 <memmove+0x20>
 8004394:	1e43      	subs	r3, r0, #1
 8004396:	42a1      	cmp	r1, r4
 8004398:	d008      	beq.n	80043ac <memmove+0x28>
 800439a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800439e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80043a2:	e7f8      	b.n	8004396 <memmove+0x12>
 80043a4:	4402      	add	r2, r0
 80043a6:	4601      	mov	r1, r0
 80043a8:	428a      	cmp	r2, r1
 80043aa:	d100      	bne.n	80043ae <memmove+0x2a>
 80043ac:	bd10      	pop	{r4, pc}
 80043ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80043b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80043b6:	e7f7      	b.n	80043a8 <memmove+0x24>

080043b8 <_free_r>:
 80043b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80043ba:	2900      	cmp	r1, #0
 80043bc:	d048      	beq.n	8004450 <_free_r+0x98>
 80043be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043c2:	9001      	str	r0, [sp, #4]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f1a1 0404 	sub.w	r4, r1, #4
 80043ca:	bfb8      	it	lt
 80043cc:	18e4      	addlt	r4, r4, r3
 80043ce:	f000 f8d3 	bl	8004578 <__malloc_lock>
 80043d2:	4a20      	ldr	r2, [pc, #128]	; (8004454 <_free_r+0x9c>)
 80043d4:	9801      	ldr	r0, [sp, #4]
 80043d6:	6813      	ldr	r3, [r2, #0]
 80043d8:	4615      	mov	r5, r2
 80043da:	b933      	cbnz	r3, 80043ea <_free_r+0x32>
 80043dc:	6063      	str	r3, [r4, #4]
 80043de:	6014      	str	r4, [r2, #0]
 80043e0:	b003      	add	sp, #12
 80043e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80043e6:	f000 b8cd 	b.w	8004584 <__malloc_unlock>
 80043ea:	42a3      	cmp	r3, r4
 80043ec:	d90b      	bls.n	8004406 <_free_r+0x4e>
 80043ee:	6821      	ldr	r1, [r4, #0]
 80043f0:	1862      	adds	r2, r4, r1
 80043f2:	4293      	cmp	r3, r2
 80043f4:	bf04      	itt	eq
 80043f6:	681a      	ldreq	r2, [r3, #0]
 80043f8:	685b      	ldreq	r3, [r3, #4]
 80043fa:	6063      	str	r3, [r4, #4]
 80043fc:	bf04      	itt	eq
 80043fe:	1852      	addeq	r2, r2, r1
 8004400:	6022      	streq	r2, [r4, #0]
 8004402:	602c      	str	r4, [r5, #0]
 8004404:	e7ec      	b.n	80043e0 <_free_r+0x28>
 8004406:	461a      	mov	r2, r3
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	b10b      	cbz	r3, 8004410 <_free_r+0x58>
 800440c:	42a3      	cmp	r3, r4
 800440e:	d9fa      	bls.n	8004406 <_free_r+0x4e>
 8004410:	6811      	ldr	r1, [r2, #0]
 8004412:	1855      	adds	r5, r2, r1
 8004414:	42a5      	cmp	r5, r4
 8004416:	d10b      	bne.n	8004430 <_free_r+0x78>
 8004418:	6824      	ldr	r4, [r4, #0]
 800441a:	4421      	add	r1, r4
 800441c:	1854      	adds	r4, r2, r1
 800441e:	42a3      	cmp	r3, r4
 8004420:	6011      	str	r1, [r2, #0]
 8004422:	d1dd      	bne.n	80043e0 <_free_r+0x28>
 8004424:	681c      	ldr	r4, [r3, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	6053      	str	r3, [r2, #4]
 800442a:	4421      	add	r1, r4
 800442c:	6011      	str	r1, [r2, #0]
 800442e:	e7d7      	b.n	80043e0 <_free_r+0x28>
 8004430:	d902      	bls.n	8004438 <_free_r+0x80>
 8004432:	230c      	movs	r3, #12
 8004434:	6003      	str	r3, [r0, #0]
 8004436:	e7d3      	b.n	80043e0 <_free_r+0x28>
 8004438:	6825      	ldr	r5, [r4, #0]
 800443a:	1961      	adds	r1, r4, r5
 800443c:	428b      	cmp	r3, r1
 800443e:	bf04      	itt	eq
 8004440:	6819      	ldreq	r1, [r3, #0]
 8004442:	685b      	ldreq	r3, [r3, #4]
 8004444:	6063      	str	r3, [r4, #4]
 8004446:	bf04      	itt	eq
 8004448:	1949      	addeq	r1, r1, r5
 800444a:	6021      	streq	r1, [r4, #0]
 800444c:	6054      	str	r4, [r2, #4]
 800444e:	e7c7      	b.n	80043e0 <_free_r+0x28>
 8004450:	b003      	add	sp, #12
 8004452:	bd30      	pop	{r4, r5, pc}
 8004454:	20000098 	.word	0x20000098

08004458 <_malloc_r>:
 8004458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800445a:	1ccd      	adds	r5, r1, #3
 800445c:	f025 0503 	bic.w	r5, r5, #3
 8004460:	3508      	adds	r5, #8
 8004462:	2d0c      	cmp	r5, #12
 8004464:	bf38      	it	cc
 8004466:	250c      	movcc	r5, #12
 8004468:	2d00      	cmp	r5, #0
 800446a:	4606      	mov	r6, r0
 800446c:	db01      	blt.n	8004472 <_malloc_r+0x1a>
 800446e:	42a9      	cmp	r1, r5
 8004470:	d903      	bls.n	800447a <_malloc_r+0x22>
 8004472:	230c      	movs	r3, #12
 8004474:	6033      	str	r3, [r6, #0]
 8004476:	2000      	movs	r0, #0
 8004478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800447a:	f000 f87d 	bl	8004578 <__malloc_lock>
 800447e:	4921      	ldr	r1, [pc, #132]	; (8004504 <_malloc_r+0xac>)
 8004480:	680a      	ldr	r2, [r1, #0]
 8004482:	4614      	mov	r4, r2
 8004484:	b99c      	cbnz	r4, 80044ae <_malloc_r+0x56>
 8004486:	4f20      	ldr	r7, [pc, #128]	; (8004508 <_malloc_r+0xb0>)
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	b923      	cbnz	r3, 8004496 <_malloc_r+0x3e>
 800448c:	4621      	mov	r1, r4
 800448e:	4630      	mov	r0, r6
 8004490:	f000 f862 	bl	8004558 <_sbrk_r>
 8004494:	6038      	str	r0, [r7, #0]
 8004496:	4629      	mov	r1, r5
 8004498:	4630      	mov	r0, r6
 800449a:	f000 f85d 	bl	8004558 <_sbrk_r>
 800449e:	1c43      	adds	r3, r0, #1
 80044a0:	d123      	bne.n	80044ea <_malloc_r+0x92>
 80044a2:	230c      	movs	r3, #12
 80044a4:	6033      	str	r3, [r6, #0]
 80044a6:	4630      	mov	r0, r6
 80044a8:	f000 f86c 	bl	8004584 <__malloc_unlock>
 80044ac:	e7e3      	b.n	8004476 <_malloc_r+0x1e>
 80044ae:	6823      	ldr	r3, [r4, #0]
 80044b0:	1b5b      	subs	r3, r3, r5
 80044b2:	d417      	bmi.n	80044e4 <_malloc_r+0x8c>
 80044b4:	2b0b      	cmp	r3, #11
 80044b6:	d903      	bls.n	80044c0 <_malloc_r+0x68>
 80044b8:	6023      	str	r3, [r4, #0]
 80044ba:	441c      	add	r4, r3
 80044bc:	6025      	str	r5, [r4, #0]
 80044be:	e004      	b.n	80044ca <_malloc_r+0x72>
 80044c0:	6863      	ldr	r3, [r4, #4]
 80044c2:	42a2      	cmp	r2, r4
 80044c4:	bf0c      	ite	eq
 80044c6:	600b      	streq	r3, [r1, #0]
 80044c8:	6053      	strne	r3, [r2, #4]
 80044ca:	4630      	mov	r0, r6
 80044cc:	f000 f85a 	bl	8004584 <__malloc_unlock>
 80044d0:	f104 000b 	add.w	r0, r4, #11
 80044d4:	1d23      	adds	r3, r4, #4
 80044d6:	f020 0007 	bic.w	r0, r0, #7
 80044da:	1ac2      	subs	r2, r0, r3
 80044dc:	d0cc      	beq.n	8004478 <_malloc_r+0x20>
 80044de:	1a1b      	subs	r3, r3, r0
 80044e0:	50a3      	str	r3, [r4, r2]
 80044e2:	e7c9      	b.n	8004478 <_malloc_r+0x20>
 80044e4:	4622      	mov	r2, r4
 80044e6:	6864      	ldr	r4, [r4, #4]
 80044e8:	e7cc      	b.n	8004484 <_malloc_r+0x2c>
 80044ea:	1cc4      	adds	r4, r0, #3
 80044ec:	f024 0403 	bic.w	r4, r4, #3
 80044f0:	42a0      	cmp	r0, r4
 80044f2:	d0e3      	beq.n	80044bc <_malloc_r+0x64>
 80044f4:	1a21      	subs	r1, r4, r0
 80044f6:	4630      	mov	r0, r6
 80044f8:	f000 f82e 	bl	8004558 <_sbrk_r>
 80044fc:	3001      	adds	r0, #1
 80044fe:	d1dd      	bne.n	80044bc <_malloc_r+0x64>
 8004500:	e7cf      	b.n	80044a2 <_malloc_r+0x4a>
 8004502:	bf00      	nop
 8004504:	20000098 	.word	0x20000098
 8004508:	2000009c 	.word	0x2000009c

0800450c <_realloc_r>:
 800450c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800450e:	4607      	mov	r7, r0
 8004510:	4614      	mov	r4, r2
 8004512:	460e      	mov	r6, r1
 8004514:	b921      	cbnz	r1, 8004520 <_realloc_r+0x14>
 8004516:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800451a:	4611      	mov	r1, r2
 800451c:	f7ff bf9c 	b.w	8004458 <_malloc_r>
 8004520:	b922      	cbnz	r2, 800452c <_realloc_r+0x20>
 8004522:	f7ff ff49 	bl	80043b8 <_free_r>
 8004526:	4625      	mov	r5, r4
 8004528:	4628      	mov	r0, r5
 800452a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800452c:	f000 f830 	bl	8004590 <_malloc_usable_size_r>
 8004530:	42a0      	cmp	r0, r4
 8004532:	d20f      	bcs.n	8004554 <_realloc_r+0x48>
 8004534:	4621      	mov	r1, r4
 8004536:	4638      	mov	r0, r7
 8004538:	f7ff ff8e 	bl	8004458 <_malloc_r>
 800453c:	4605      	mov	r5, r0
 800453e:	2800      	cmp	r0, #0
 8004540:	d0f2      	beq.n	8004528 <_realloc_r+0x1c>
 8004542:	4631      	mov	r1, r6
 8004544:	4622      	mov	r2, r4
 8004546:	f7ff ff0f 	bl	8004368 <memcpy>
 800454a:	4631      	mov	r1, r6
 800454c:	4638      	mov	r0, r7
 800454e:	f7ff ff33 	bl	80043b8 <_free_r>
 8004552:	e7e9      	b.n	8004528 <_realloc_r+0x1c>
 8004554:	4635      	mov	r5, r6
 8004556:	e7e7      	b.n	8004528 <_realloc_r+0x1c>

08004558 <_sbrk_r>:
 8004558:	b538      	push	{r3, r4, r5, lr}
 800455a:	4d06      	ldr	r5, [pc, #24]	; (8004574 <_sbrk_r+0x1c>)
 800455c:	2300      	movs	r3, #0
 800455e:	4604      	mov	r4, r0
 8004560:	4608      	mov	r0, r1
 8004562:	602b      	str	r3, [r5, #0]
 8004564:	f7fc fa98 	bl	8000a98 <_sbrk>
 8004568:	1c43      	adds	r3, r0, #1
 800456a:	d102      	bne.n	8004572 <_sbrk_r+0x1a>
 800456c:	682b      	ldr	r3, [r5, #0]
 800456e:	b103      	cbz	r3, 8004572 <_sbrk_r+0x1a>
 8004570:	6023      	str	r3, [r4, #0]
 8004572:	bd38      	pop	{r3, r4, r5, pc}
 8004574:	200001e4 	.word	0x200001e4

08004578 <__malloc_lock>:
 8004578:	4801      	ldr	r0, [pc, #4]	; (8004580 <__malloc_lock+0x8>)
 800457a:	f000 b811 	b.w	80045a0 <__retarget_lock_acquire_recursive>
 800457e:	bf00      	nop
 8004580:	200001ec 	.word	0x200001ec

08004584 <__malloc_unlock>:
 8004584:	4801      	ldr	r0, [pc, #4]	; (800458c <__malloc_unlock+0x8>)
 8004586:	f000 b80c 	b.w	80045a2 <__retarget_lock_release_recursive>
 800458a:	bf00      	nop
 800458c:	200001ec 	.word	0x200001ec

08004590 <_malloc_usable_size_r>:
 8004590:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004594:	1f18      	subs	r0, r3, #4
 8004596:	2b00      	cmp	r3, #0
 8004598:	bfbc      	itt	lt
 800459a:	580b      	ldrlt	r3, [r1, r0]
 800459c:	18c0      	addlt	r0, r0, r3
 800459e:	4770      	bx	lr

080045a0 <__retarget_lock_acquire_recursive>:
 80045a0:	4770      	bx	lr

080045a2 <__retarget_lock_release_recursive>:
 80045a2:	4770      	bx	lr

080045a4 <_init>:
 80045a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045a6:	bf00      	nop
 80045a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045aa:	bc08      	pop	{r3}
 80045ac:	469e      	mov	lr, r3
 80045ae:	4770      	bx	lr

080045b0 <_fini>:
 80045b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045b2:	bf00      	nop
 80045b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045b6:	bc08      	pop	{r3}
 80045b8:	469e      	mov	lr, r3
 80045ba:	4770      	bx	lr
