
STM_quadcopter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036f8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08003898  08003898  00013898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003938  08003938  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003938  08003938  00013938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003940  08003940  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003940  08003940  00013940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003944  08003944  00013944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003948  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000070  080039b8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  080039b8  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b5a7  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c9d  00000000  00000000  0002b647  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c18  00000000  00000000  0002d2e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b10  00000000  00000000  0002df00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001fbf  00000000  00000000  0002ea10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009968  00000000  00000000  000309cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00089f0b  00000000  00000000  0003a337  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c4242  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000347c  00000000  00000000  000c42c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003880 	.word	0x08003880

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003880 	.word	0x08003880

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08a      	sub	sp, #40	; 0x28
 8000584:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000586:	f107 0314 	add.w	r3, r7, #20
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]
 8000594:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000596:	2300      	movs	r3, #0
 8000598:	613b      	str	r3, [r7, #16]
 800059a:	4b31      	ldr	r3, [pc, #196]	; (8000660 <MX_GPIO_Init+0xe0>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	4a30      	ldr	r2, [pc, #192]	; (8000660 <MX_GPIO_Init+0xe0>)
 80005a0:	f043 0304 	orr.w	r3, r3, #4
 80005a4:	6313      	str	r3, [r2, #48]	; 0x30
 80005a6:	4b2e      	ldr	r3, [pc, #184]	; (8000660 <MX_GPIO_Init+0xe0>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	f003 0304 	and.w	r3, r3, #4
 80005ae:	613b      	str	r3, [r7, #16]
 80005b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005b2:	2300      	movs	r3, #0
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	4b2a      	ldr	r3, [pc, #168]	; (8000660 <MX_GPIO_Init+0xe0>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	4a29      	ldr	r2, [pc, #164]	; (8000660 <MX_GPIO_Init+0xe0>)
 80005bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005c0:	6313      	str	r3, [r2, #48]	; 0x30
 80005c2:	4b27      	ldr	r3, [pc, #156]	; (8000660 <MX_GPIO_Init+0xe0>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ce:	2300      	movs	r3, #0
 80005d0:	60bb      	str	r3, [r7, #8]
 80005d2:	4b23      	ldr	r3, [pc, #140]	; (8000660 <MX_GPIO_Init+0xe0>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	4a22      	ldr	r2, [pc, #136]	; (8000660 <MX_GPIO_Init+0xe0>)
 80005d8:	f043 0301 	orr.w	r3, r3, #1
 80005dc:	6313      	str	r3, [r2, #48]	; 0x30
 80005de:	4b20      	ldr	r3, [pc, #128]	; (8000660 <MX_GPIO_Init+0xe0>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ea:	2300      	movs	r3, #0
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	4b1c      	ldr	r3, [pc, #112]	; (8000660 <MX_GPIO_Init+0xe0>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	4a1b      	ldr	r2, [pc, #108]	; (8000660 <MX_GPIO_Init+0xe0>)
 80005f4:	f043 0302 	orr.w	r3, r3, #2
 80005f8:	6313      	str	r3, [r2, #48]	; 0x30
 80005fa:	4b19      	ldr	r3, [pc, #100]	; (8000660 <MX_GPIO_Init+0xe0>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	f003 0302 	and.w	r3, r3, #2
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	2120      	movs	r1, #32
 800060a:	4816      	ldr	r0, [pc, #88]	; (8000664 <MX_GPIO_Init+0xe4>)
 800060c:	f000 fe5c 	bl	80012c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000610:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000616:	4b14      	ldr	r3, [pc, #80]	; (8000668 <MX_GPIO_Init+0xe8>)
 8000618:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	2300      	movs	r3, #0
 800061c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800061e:	f107 0314 	add.w	r3, r7, #20
 8000622:	4619      	mov	r1, r3
 8000624:	4811      	ldr	r0, [pc, #68]	; (800066c <MX_GPIO_Init+0xec>)
 8000626:	f000 fccd 	bl	8000fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800062a:	2320      	movs	r3, #32
 800062c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062e:	2301      	movs	r3, #1
 8000630:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000632:	2300      	movs	r3, #0
 8000634:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000636:	2300      	movs	r3, #0
 8000638:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800063a:	f107 0314 	add.w	r3, r7, #20
 800063e:	4619      	mov	r1, r3
 8000640:	4808      	ldr	r0, [pc, #32]	; (8000664 <MX_GPIO_Init+0xe4>)
 8000642:	f000 fcbf 	bl	8000fc4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000646:	2200      	movs	r2, #0
 8000648:	2100      	movs	r1, #0
 800064a:	2028      	movs	r0, #40	; 0x28
 800064c:	f000 fc83 	bl	8000f56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000650:	2028      	movs	r0, #40	; 0x28
 8000652:	f000 fc9c 	bl	8000f8e <HAL_NVIC_EnableIRQ>

}
 8000656:	bf00      	nop
 8000658:	3728      	adds	r7, #40	; 0x28
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40023800 	.word	0x40023800
 8000664:	40020000 	.word	0x40020000
 8000668:	10210000 	.word	0x10210000
 800066c:	40020800 	.word	0x40020800

08000670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000670:	b5b0      	push	{r4, r5, r7, lr}
 8000672:	b09a      	sub	sp, #104	; 0x68
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000676:	f000 fb21 	bl	8000cbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067a:	f000 f86d 	bl	8000758 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067e:	f7ff ff7f 	bl	8000580 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000682:	f000 fa7f 	bl	8000b84 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000686:	f000 f9af 	bl	80009e8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //int dutyCycle = 0;
  int pulse =50;
 800068a:	2332      	movs	r3, #50	; 0x32
 800068c:	667b      	str	r3, [r7, #100]	; 0x64
  char msgDebug[100];


  msgLen = sprintf(msgDebug, "\n\r BEGINNING OF THE CODE \n\n\r");
 800068e:	463b      	mov	r3, r7
 8000690:	4a2a      	ldr	r2, [pc, #168]	; (800073c <main+0xcc>)
 8000692:	461c      	mov	r4, r3
 8000694:	4615      	mov	r5, r2
 8000696:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000698:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800069a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800069e:	c407      	stmia	r4!, {r0, r1, r2}
 80006a0:	7023      	strb	r3, [r4, #0]
 80006a2:	221c      	movs	r2, #28
 80006a4:	4b26      	ldr	r3, [pc, #152]	; (8000740 <main+0xd0>)
 80006a6:	601a      	str	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100),
 80006a8:	4b25      	ldr	r3, [pc, #148]	; (8000740 <main+0xd0>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	b29a      	uxth	r2, r3
 80006ae:	4639      	mov	r1, r7
 80006b0:	2364      	movs	r3, #100	; 0x64
 80006b2:	4824      	ldr	r0, [pc, #144]	; (8000744 <main+0xd4>)
 80006b4:	f002 f84d 	bl	8002752 <HAL_UART_Transmit>

  // Start the coutner for the PWM signal
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80006b8:	2100      	movs	r1, #0
 80006ba:	4823      	ldr	r0, [pc, #140]	; (8000748 <main+0xd8>)
 80006bc:	f001 fb12 	bl	8001ce4 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(BLUE_BUTTON == 1){
 80006c0:	4b22      	ldr	r3, [pc, #136]	; (800074c <main+0xdc>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d1fb      	bne.n	80006c0 <main+0x50>

		  msgLen = sprintf(msgDebug, "\n\r BLUE BUTTON PRESSED \n\r");
 80006c8:	463b      	mov	r3, r7
 80006ca:	4a21      	ldr	r2, [pc, #132]	; (8000750 <main+0xe0>)
 80006cc:	461c      	mov	r4, r3
 80006ce:	4615      	mov	r5, r2
 80006d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006d8:	c403      	stmia	r4!, {r0, r1}
 80006da:	8022      	strh	r2, [r4, #0]
 80006dc:	2219      	movs	r2, #25
 80006de:	4b18      	ldr	r3, [pc, #96]	; (8000740 <main+0xd0>)
 80006e0:	601a      	str	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
 80006e2:	4b17      	ldr	r3, [pc, #92]	; (8000740 <main+0xd0>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	b29a      	uxth	r2, r3
 80006e8:	4639      	mov	r1, r7
 80006ea:	2364      	movs	r3, #100	; 0x64
 80006ec:	4815      	ldr	r0, [pc, #84]	; (8000744 <main+0xd4>)
 80006ee:	f002 f830 	bl	8002752 <HAL_UART_Transmit>

		  // Transform Rx message in number
		  //dutyCycle = msgRx[0]*100 +  msgRx[1]*10 + msgRx[2];


		  if(pulse==50){
 80006f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80006f4:	2b32      	cmp	r3, #50	; 0x32
 80006f6:	d102      	bne.n	80006fe <main+0x8e>
			  pulse = 100;
 80006f8:	2364      	movs	r3, #100	; 0x64
 80006fa:	667b      	str	r3, [r7, #100]	; 0x64
 80006fc:	e004      	b.n	8000708 <main+0x98>
		  }else if(pulse==100){
 80006fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000700:	2b64      	cmp	r3, #100	; 0x64
 8000702:	d101      	bne.n	8000708 <main+0x98>
			  pulse=50;
 8000704:	2332      	movs	r3, #50	; 0x32
 8000706:	667b      	str	r3, [r7, #100]	; 0x64
		  }
		  msgLen = sprintf(msgDebug, "Pulse value is now %i", pulse);
 8000708:	463b      	mov	r3, r7
 800070a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800070c:	4911      	ldr	r1, [pc, #68]	; (8000754 <main+0xe4>)
 800070e:	4618      	mov	r0, r3
 8000710:	f002 fcb0 	bl	8003074 <siprintf>
 8000714:	4602      	mov	r2, r0
 8000716:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <main+0xd0>)
 8000718:	601a      	str	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100),
 800071a:	4b09      	ldr	r3, [pc, #36]	; (8000740 <main+0xd0>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	b29a      	uxth	r2, r3
 8000720:	4639      	mov	r1, r7
 8000722:	2364      	movs	r3, #100	; 0x64
 8000724:	4807      	ldr	r0, [pc, #28]	; (8000744 <main+0xd4>)
 8000726:	f002 f814 	bl	8002752 <HAL_UART_Transmit>

		  TIM2->CCR1 = pulse;
 800072a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800072e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000730:	6353      	str	r3, [r2, #52]	; 0x34
		  //__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse);

		  BLUE_BUTTON = 0;
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <main+0xdc>)
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
	  if(BLUE_BUTTON == 1){
 8000738:	e7c2      	b.n	80006c0 <main+0x50>
 800073a:	bf00      	nop
 800073c:	08003898 	.word	0x08003898
 8000740:	200000a0 	.word	0x200000a0
 8000744:	200000e4 	.word	0x200000e4
 8000748:	200000a4 	.word	0x200000a4
 800074c:	2000008c 	.word	0x2000008c
 8000750:	080038b8 	.word	0x080038b8
 8000754:	080038d4 	.word	0x080038d4

08000758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b094      	sub	sp, #80	; 0x50
 800075c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075e:	f107 0320 	add.w	r3, r7, #32
 8000762:	2230      	movs	r2, #48	; 0x30
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f002 fc7c 	bl	8003064 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800076c:	f107 030c 	add.w	r3, r7, #12
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800077c:	2300      	movs	r3, #0
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	4b29      	ldr	r3, [pc, #164]	; (8000828 <SystemClock_Config+0xd0>)
 8000782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000784:	4a28      	ldr	r2, [pc, #160]	; (8000828 <SystemClock_Config+0xd0>)
 8000786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800078a:	6413      	str	r3, [r2, #64]	; 0x40
 800078c:	4b26      	ldr	r3, [pc, #152]	; (8000828 <SystemClock_Config+0xd0>)
 800078e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000798:	2300      	movs	r3, #0
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	4b23      	ldr	r3, [pc, #140]	; (800082c <SystemClock_Config+0xd4>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007a4:	4a21      	ldr	r2, [pc, #132]	; (800082c <SystemClock_Config+0xd4>)
 80007a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007aa:	6013      	str	r3, [r2, #0]
 80007ac:	4b1f      	ldr	r3, [pc, #124]	; (800082c <SystemClock_Config+0xd4>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007b8:	2302      	movs	r3, #2
 80007ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007bc:	2301      	movs	r3, #1
 80007be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007c0:	2310      	movs	r3, #16
 80007c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c4:	2302      	movs	r3, #2
 80007c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007c8:	2300      	movs	r3, #0
 80007ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007cc:	2310      	movs	r3, #16
 80007ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007d0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007d6:	2304      	movs	r3, #4
 80007d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007da:	2307      	movs	r3, #7
 80007dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007de:	f107 0320 	add.w	r3, r7, #32
 80007e2:	4618      	mov	r0, r3
 80007e4:	f000 fdbc 	bl	8001360 <HAL_RCC_OscConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007ee:	f000 f833 	bl	8000858 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f2:	230f      	movs	r3, #15
 80007f4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f6:	2302      	movs	r3, #2
 80007f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000802:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000808:	f107 030c 	add.w	r3, r7, #12
 800080c:	2102      	movs	r1, #2
 800080e:	4618      	mov	r0, r3
 8000810:	f001 f816 	bl	8001840 <HAL_RCC_ClockConfig>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800081a:	f000 f81d 	bl	8000858 <Error_Handler>
  }
}
 800081e:	bf00      	nop
 8000820:	3750      	adds	r7, #80	; 0x50
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40023800 	.word	0x40023800
 800082c:	40007000 	.word	0x40007000

08000830 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin==B1_Pin){
 800083a:	88fb      	ldrh	r3, [r7, #6]
 800083c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000840:	d102      	bne.n	8000848 <HAL_GPIO_EXTI_Callback+0x18>
		BLUE_BUTTON = 1;
 8000842:	4b04      	ldr	r3, [pc, #16]	; (8000854 <HAL_GPIO_EXTI_Callback+0x24>)
 8000844:	2201      	movs	r2, #1
 8000846:	601a      	str	r2, [r3, #0]
	}


}
 8000848:	bf00      	nop
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	2000008c 	.word	0x2000008c

08000858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800085c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800085e:	e7fe      	b.n	800085e <Error_Handler+0x6>

08000860 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	4b18      	ldr	r3, [pc, #96]	; (80008cc <HAL_MspInit+0x6c>)
 800086c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086e:	4a17      	ldr	r2, [pc, #92]	; (80008cc <HAL_MspInit+0x6c>)
 8000870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000874:	6453      	str	r3, [r2, #68]	; 0x44
 8000876:	4b15      	ldr	r3, [pc, #84]	; (80008cc <HAL_MspInit+0x6c>)
 8000878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	603b      	str	r3, [r7, #0]
 8000886:	4b11      	ldr	r3, [pc, #68]	; (80008cc <HAL_MspInit+0x6c>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088a:	4a10      	ldr	r2, [pc, #64]	; (80008cc <HAL_MspInit+0x6c>)
 800088c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000890:	6413      	str	r3, [r2, #64]	; 0x40
 8000892:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <HAL_MspInit+0x6c>)
 8000894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800089e:	2007      	movs	r0, #7
 80008a0:	f000 fb4e 	bl	8000f40 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 80008a4:	2200      	movs	r2, #0
 80008a6:	2100      	movs	r1, #0
 80008a8:	2001      	movs	r0, #1
 80008aa:	f000 fb54 	bl	8000f56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 80008ae:	2001      	movs	r0, #1
 80008b0:	f000 fb6d 	bl	8000f8e <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2100      	movs	r1, #0
 80008b8:	2051      	movs	r0, #81	; 0x51
 80008ba:	f000 fb4c 	bl	8000f56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80008be:	2051      	movs	r0, #81	; 0x51
 80008c0:	f000 fb65 	bl	8000f8e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c4:	bf00      	nop
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40023800 	.word	0x40023800

080008d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <NMI_Handler+0x4>

080008d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008da:	e7fe      	b.n	80008da <HardFault_Handler+0x4>

080008dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <MemManage_Handler+0x4>

080008e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e6:	e7fe      	b.n	80008e6 <BusFault_Handler+0x4>

080008e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008ec:	e7fe      	b.n	80008ec <UsageFault_Handler+0x4>

080008ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr

0800090a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800091c:	f000 fa20 	bl	8000d60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}

08000924 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8000928:	f000 fd00 	bl	800132c <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}

08000930 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000934:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000938:	f000 fce0 	bl	80012fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}

08000940 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
	...

08000950 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000958:	4a14      	ldr	r2, [pc, #80]	; (80009ac <_sbrk+0x5c>)
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <_sbrk+0x60>)
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000964:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <_sbrk+0x64>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d102      	bne.n	8000972 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800096c:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <_sbrk+0x64>)
 800096e:	4a12      	ldr	r2, [pc, #72]	; (80009b8 <_sbrk+0x68>)
 8000970:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000972:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <_sbrk+0x64>)
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4413      	add	r3, r2
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	429a      	cmp	r2, r3
 800097e:	d207      	bcs.n	8000990 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000980:	f002 fb46 	bl	8003010 <__errno>
 8000984:	4602      	mov	r2, r0
 8000986:	230c      	movs	r3, #12
 8000988:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800098a:	f04f 33ff 	mov.w	r3, #4294967295
 800098e:	e009      	b.n	80009a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000990:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <_sbrk+0x64>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000996:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <_sbrk+0x64>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4413      	add	r3, r2
 800099e:	4a05      	ldr	r2, [pc, #20]	; (80009b4 <_sbrk+0x64>)
 80009a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009a2:	68fb      	ldr	r3, [r7, #12]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3718      	adds	r7, #24
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20018000 	.word	0x20018000
 80009b0:	00000400 	.word	0x00000400
 80009b4:	20000090 	.word	0x20000090
 80009b8:	20000130 	.word	0x20000130

080009bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009c0:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <SystemInit+0x28>)
 80009c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009c6:	4a07      	ldr	r2, [pc, #28]	; (80009e4 <SystemInit+0x28>)
 80009c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009d0:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <SystemInit+0x28>)
 80009d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009d6:	609a      	str	r2, [r3, #8]
#endif
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08e      	sub	sp, #56	; 0x38
 80009ec:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009fc:	f107 0320 	add.w	r3, r7, #32
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
 8000a14:	615a      	str	r2, [r3, #20]
 8000a16:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000a18:	4b2d      	ldr	r3, [pc, #180]	; (8000ad0 <MX_TIM2_Init+0xe8>)
 8000a1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a1e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 8000a20:	4b2b      	ldr	r3, [pc, #172]	; (8000ad0 <MX_TIM2_Init+0xe8>)
 8000a22:	f240 628f 	movw	r2, #1679	; 0x68f
 8000a26:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a28:	4b29      	ldr	r3, [pc, #164]	; (8000ad0 <MX_TIM2_Init+0xe8>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000a2e:	4b28      	ldr	r3, [pc, #160]	; (8000ad0 <MX_TIM2_Init+0xe8>)
 8000a30:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a34:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a36:	4b26      	ldr	r3, [pc, #152]	; (8000ad0 <MX_TIM2_Init+0xe8>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a3c:	4b24      	ldr	r3, [pc, #144]	; (8000ad0 <MX_TIM2_Init+0xe8>)
 8000a3e:	2280      	movs	r2, #128	; 0x80
 8000a40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a42:	4823      	ldr	r0, [pc, #140]	; (8000ad0 <MX_TIM2_Init+0xe8>)
 8000a44:	f001 f8ee 	bl	8001c24 <HAL_TIM_Base_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000a4e:	f7ff ff03 	bl	8000858 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a56:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	481c      	ldr	r0, [pc, #112]	; (8000ad0 <MX_TIM2_Init+0xe8>)
 8000a60:	f001 fa38 	bl	8001ed4 <HAL_TIM_ConfigClockSource>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000a6a:	f7ff fef5 	bl	8000858 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a6e:	4818      	ldr	r0, [pc, #96]	; (8000ad0 <MX_TIM2_Init+0xe8>)
 8000a70:	f001 f903 	bl	8001c7a <HAL_TIM_PWM_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000a7a:	f7ff feed 	bl	8000858 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a82:	2300      	movs	r3, #0
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a86:	f107 0320 	add.w	r3, r7, #32
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4810      	ldr	r0, [pc, #64]	; (8000ad0 <MX_TIM2_Init+0xe8>)
 8000a8e:	f001 fda5 	bl	80025dc <HAL_TIMEx_MasterConfigSynchronization>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000a98:	f7ff fede 	bl	8000858 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a9c:	2360      	movs	r3, #96	; 0x60
 8000a9e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8000aa0:	2332      	movs	r3, #50	; 0x32
 8000aa2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aac:	1d3b      	adds	r3, r7, #4
 8000aae:	2200      	movs	r2, #0
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4807      	ldr	r0, [pc, #28]	; (8000ad0 <MX_TIM2_Init+0xe8>)
 8000ab4:	f001 f948 	bl	8001d48 <HAL_TIM_PWM_ConfigChannel>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000abe:	f7ff fecb 	bl	8000858 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000ac2:	4803      	ldr	r0, [pc, #12]	; (8000ad0 <MX_TIM2_Init+0xe8>)
 8000ac4:	f000 f826 	bl	8000b14 <HAL_TIM_MspPostInit>

}
 8000ac8:	bf00      	nop
 8000aca:	3738      	adds	r7, #56	; 0x38
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	200000a4 	.word	0x200000a4

08000ad4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ae4:	d10d      	bne.n	8000b02 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <HAL_TIM_Base_MspInit+0x3c>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aee:	4a08      	ldr	r2, [pc, #32]	; (8000b10 <HAL_TIM_Base_MspInit+0x3c>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	6413      	str	r3, [r2, #64]	; 0x40
 8000af6:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <HAL_TIM_Base_MspInit+0x3c>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000b02:	bf00      	nop
 8000b04:	3714      	adds	r7, #20
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	40023800 	.word	0x40023800

08000b14 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b088      	sub	sp, #32
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1c:	f107 030c 	add.w	r3, r7, #12
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b34:	d11d      	bne.n	8000b72 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	60bb      	str	r3, [r7, #8]
 8000b3a:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <HAL_TIM_MspPostInit+0x68>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a0f      	ldr	r2, [pc, #60]	; (8000b7c <HAL_TIM_MspPostInit+0x68>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b0d      	ldr	r3, [pc, #52]	; (8000b7c <HAL_TIM_MspPostInit+0x68>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	60bb      	str	r3, [r7, #8]
 8000b50:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b52:	2301      	movs	r3, #1
 8000b54:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b56:	2302      	movs	r3, #2
 8000b58:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b62:	2301      	movs	r3, #1
 8000b64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b66:	f107 030c 	add.w	r3, r7, #12
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4804      	ldr	r0, [pc, #16]	; (8000b80 <HAL_TIM_MspPostInit+0x6c>)
 8000b6e:	f000 fa29 	bl	8000fc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000b72:	bf00      	nop
 8000b74:	3720      	adds	r7, #32
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40020000 	.word	0x40020000

08000b84 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000b88:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000b8a:	4a12      	ldr	r2, [pc, #72]	; (8000bd4 <MX_USART2_UART_Init+0x50>)
 8000b8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b8e:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000b90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b96:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ba8:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000baa:	220c      	movs	r2, #12
 8000bac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bba:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000bbc:	f001 fd7c 	bl	80026b8 <HAL_UART_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bc6:	f7ff fe47 	bl	8000858 <Error_Handler>
  }

}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	200000e4 	.word	0x200000e4
 8000bd4:	40004400 	.word	0x40004400

08000bd8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	; 0x28
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a19      	ldr	r2, [pc, #100]	; (8000c5c <HAL_UART_MspInit+0x84>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d12b      	bne.n	8000c52 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	613b      	str	r3, [r7, #16]
 8000bfe:	4b18      	ldr	r3, [pc, #96]	; (8000c60 <HAL_UART_MspInit+0x88>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c02:	4a17      	ldr	r2, [pc, #92]	; (8000c60 <HAL_UART_MspInit+0x88>)
 8000c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c08:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <HAL_UART_MspInit+0x88>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	4b11      	ldr	r3, [pc, #68]	; (8000c60 <HAL_UART_MspInit+0x88>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a10      	ldr	r2, [pc, #64]	; (8000c60 <HAL_UART_MspInit+0x88>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <HAL_UART_MspInit+0x88>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c32:	230c      	movs	r3, #12
 8000c34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	2302      	movs	r3, #2
 8000c38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c42:	2307      	movs	r3, #7
 8000c44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4805      	ldr	r0, [pc, #20]	; (8000c64 <HAL_UART_MspInit+0x8c>)
 8000c4e:	f000 f9b9 	bl	8000fc4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c52:	bf00      	nop
 8000c54:	3728      	adds	r7, #40	; 0x28
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40004400 	.word	0x40004400
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40020000 	.word	0x40020000

08000c68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ca0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c6c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c6e:	e003      	b.n	8000c78 <LoopCopyDataInit>

08000c70 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c72:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c74:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c76:	3104      	adds	r1, #4

08000c78 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c78:	480b      	ldr	r0, [pc, #44]	; (8000ca8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c7c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c7e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c80:	d3f6      	bcc.n	8000c70 <CopyDataInit>
  ldr  r2, =_sbss
 8000c82:	4a0b      	ldr	r2, [pc, #44]	; (8000cb0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c84:	e002      	b.n	8000c8c <LoopFillZerobss>

08000c86 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c86:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c88:	f842 3b04 	str.w	r3, [r2], #4

08000c8c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c8c:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c8e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c90:	d3f9      	bcc.n	8000c86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c92:	f7ff fe93 	bl	80009bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c96:	f002 f9c1 	bl	800301c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c9a:	f7ff fce9 	bl	8000670 <main>
  bx  lr    
 8000c9e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ca0:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000ca4:	08003948 	.word	0x08003948
  ldr  r0, =_sdata
 8000ca8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000cac:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000cb0:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000cb4:	2000012c 	.word	0x2000012c

08000cb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cb8:	e7fe      	b.n	8000cb8 <ADC_IRQHandler>
	...

08000cbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cc0:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <HAL_Init+0x40>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a0d      	ldr	r2, [pc, #52]	; (8000cfc <HAL_Init+0x40>)
 8000cc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ccc:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <HAL_Init+0x40>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a0a      	ldr	r2, [pc, #40]	; (8000cfc <HAL_Init+0x40>)
 8000cd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd8:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <HAL_Init+0x40>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a07      	ldr	r2, [pc, #28]	; (8000cfc <HAL_Init+0x40>)
 8000cde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ce2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce4:	2003      	movs	r0, #3
 8000ce6:	f000 f92b 	bl	8000f40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cea:	2000      	movs	r0, #0
 8000cec:	f000 f808 	bl	8000d00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf0:	f7ff fdb6 	bl	8000860 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40023c00 	.word	0x40023c00

08000d00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d08:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <HAL_InitTick+0x54>)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <HAL_InitTick+0x58>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	4619      	mov	r1, r3
 8000d12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f000 f943 	bl	8000faa <HAL_SYSTICK_Config>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e00e      	b.n	8000d4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2b0f      	cmp	r3, #15
 8000d32:	d80a      	bhi.n	8000d4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d34:	2200      	movs	r2, #0
 8000d36:	6879      	ldr	r1, [r7, #4]
 8000d38:	f04f 30ff 	mov.w	r0, #4294967295
 8000d3c:	f000 f90b 	bl	8000f56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d40:	4a06      	ldr	r2, [pc, #24]	; (8000d5c <HAL_InitTick+0x5c>)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d46:	2300      	movs	r3, #0
 8000d48:	e000      	b.n	8000d4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20000000 	.word	0x20000000
 8000d58:	20000008 	.word	0x20000008
 8000d5c:	20000004 	.word	0x20000004

08000d60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <HAL_IncTick+0x20>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	461a      	mov	r2, r3
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <HAL_IncTick+0x24>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4413      	add	r3, r2
 8000d70:	4a04      	ldr	r2, [pc, #16]	; (8000d84 <HAL_IncTick+0x24>)
 8000d72:	6013      	str	r3, [r2, #0]
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	20000008 	.word	0x20000008
 8000d84:	20000124 	.word	0x20000124

08000d88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d8c:	4b03      	ldr	r3, [pc, #12]	; (8000d9c <HAL_GetTick+0x14>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	20000124 	.word	0x20000124

08000da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db6:	68ba      	ldr	r2, [r7, #8]
 8000db8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dd2:	4a04      	ldr	r2, [pc, #16]	; (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	60d3      	str	r3, [r2, #12]
}
 8000dd8:	bf00      	nop
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dec:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <__NVIC_GetPriorityGrouping+0x18>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	0a1b      	lsrs	r3, r3, #8
 8000df2:	f003 0307 	and.w	r3, r3, #7
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	db0b      	blt.n	8000e2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	f003 021f 	and.w	r2, r3, #31
 8000e1c:	4907      	ldr	r1, [pc, #28]	; (8000e3c <__NVIC_EnableIRQ+0x38>)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	095b      	lsrs	r3, r3, #5
 8000e24:	2001      	movs	r0, #1
 8000e26:	fa00 f202 	lsl.w	r2, r0, r2
 8000e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000e100 	.word	0xe000e100

08000e40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	6039      	str	r1, [r7, #0]
 8000e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	db0a      	blt.n	8000e6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	490c      	ldr	r1, [pc, #48]	; (8000e8c <__NVIC_SetPriority+0x4c>)
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	0112      	lsls	r2, r2, #4
 8000e60:	b2d2      	uxtb	r2, r2
 8000e62:	440b      	add	r3, r1
 8000e64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e68:	e00a      	b.n	8000e80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	b2da      	uxtb	r2, r3
 8000e6e:	4908      	ldr	r1, [pc, #32]	; (8000e90 <__NVIC_SetPriority+0x50>)
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	f003 030f 	and.w	r3, r3, #15
 8000e76:	3b04      	subs	r3, #4
 8000e78:	0112      	lsls	r2, r2, #4
 8000e7a:	b2d2      	uxtb	r2, r2
 8000e7c:	440b      	add	r3, r1
 8000e7e:	761a      	strb	r2, [r3, #24]
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000e100 	.word	0xe000e100
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b089      	sub	sp, #36	; 0x24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	f1c3 0307 	rsb	r3, r3, #7
 8000eae:	2b04      	cmp	r3, #4
 8000eb0:	bf28      	it	cs
 8000eb2:	2304      	movcs	r3, #4
 8000eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	3304      	adds	r3, #4
 8000eba:	2b06      	cmp	r3, #6
 8000ebc:	d902      	bls.n	8000ec4 <NVIC_EncodePriority+0x30>
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	3b03      	subs	r3, #3
 8000ec2:	e000      	b.n	8000ec6 <NVIC_EncodePriority+0x32>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43da      	mvns	r2, r3
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	401a      	ands	r2, r3
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000edc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee6:	43d9      	mvns	r1, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eec:	4313      	orrs	r3, r2
         );
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3724      	adds	r7, #36	; 0x24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
	...

08000efc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	3b01      	subs	r3, #1
 8000f08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f0c:	d301      	bcc.n	8000f12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e00f      	b.n	8000f32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f12:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <SysTick_Config+0x40>)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f1a:	210f      	movs	r1, #15
 8000f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f20:	f7ff ff8e 	bl	8000e40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f24:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <SysTick_Config+0x40>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f2a:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <SysTick_Config+0x40>)
 8000f2c:	2207      	movs	r2, #7
 8000f2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	e000e010 	.word	0xe000e010

08000f40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f7ff ff29 	bl	8000da0 <__NVIC_SetPriorityGrouping>
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b086      	sub	sp, #24
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	60b9      	str	r1, [r7, #8]
 8000f60:	607a      	str	r2, [r7, #4]
 8000f62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f68:	f7ff ff3e 	bl	8000de8 <__NVIC_GetPriorityGrouping>
 8000f6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	68b9      	ldr	r1, [r7, #8]
 8000f72:	6978      	ldr	r0, [r7, #20]
 8000f74:	f7ff ff8e 	bl	8000e94 <NVIC_EncodePriority>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f7e:	4611      	mov	r1, r2
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff ff5d 	bl	8000e40 <__NVIC_SetPriority>
}
 8000f86:	bf00      	nop
 8000f88:	3718      	adds	r7, #24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b082      	sub	sp, #8
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	4603      	mov	r3, r0
 8000f96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ff31 	bl	8000e04 <__NVIC_EnableIRQ>
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f7ff ffa2 	bl	8000efc <SysTick_Config>
 8000fb8:	4603      	mov	r3, r0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
	...

08000fc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b089      	sub	sp, #36	; 0x24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
 8000fde:	e159      	b.n	8001294 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	697a      	ldr	r2, [r7, #20]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	f040 8148 	bne.w	800128e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	2b01      	cmp	r3, #1
 8001004:	d00b      	beq.n	800101e <HAL_GPIO_Init+0x5a>
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	2b02      	cmp	r3, #2
 800100c:	d007      	beq.n	800101e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001012:	2b11      	cmp	r3, #17
 8001014:	d003      	beq.n	800101e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	2b12      	cmp	r3, #18
 800101c:	d130      	bne.n	8001080 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	2203      	movs	r2, #3
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4013      	ands	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	68da      	ldr	r2, [r3, #12]
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4313      	orrs	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001054:	2201      	movs	r2, #1
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	091b      	lsrs	r3, r3, #4
 800106a:	f003 0201 	and.w	r2, r3, #1
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4313      	orrs	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	2203      	movs	r2, #3
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4013      	ands	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	689a      	ldr	r2, [r3, #8]
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d003      	beq.n	80010c0 <HAL_GPIO_Init+0xfc>
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	2b12      	cmp	r3, #18
 80010be:	d123      	bne.n	8001108 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	08da      	lsrs	r2, r3, #3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3208      	adds	r2, #8
 80010c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	f003 0307 	and.w	r3, r3, #7
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	220f      	movs	r2, #15
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	691a      	ldr	r2, [r3, #16]
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	08da      	lsrs	r2, r3, #3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3208      	adds	r2, #8
 8001102:	69b9      	ldr	r1, [r7, #24]
 8001104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	2203      	movs	r2, #3
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0203 	and.w	r2, r3, #3
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4313      	orrs	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001144:	2b00      	cmp	r3, #0
 8001146:	f000 80a2 	beq.w	800128e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	4b56      	ldr	r3, [pc, #344]	; (80012a8 <HAL_GPIO_Init+0x2e4>)
 8001150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001152:	4a55      	ldr	r2, [pc, #340]	; (80012a8 <HAL_GPIO_Init+0x2e4>)
 8001154:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001158:	6453      	str	r3, [r2, #68]	; 0x44
 800115a:	4b53      	ldr	r3, [pc, #332]	; (80012a8 <HAL_GPIO_Init+0x2e4>)
 800115c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001166:	4a51      	ldr	r2, [pc, #324]	; (80012ac <HAL_GPIO_Init+0x2e8>)
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	089b      	lsrs	r3, r3, #2
 800116c:	3302      	adds	r3, #2
 800116e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001172:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	f003 0303 	and.w	r3, r3, #3
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	220f      	movs	r2, #15
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43db      	mvns	r3, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4013      	ands	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a48      	ldr	r2, [pc, #288]	; (80012b0 <HAL_GPIO_Init+0x2ec>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d019      	beq.n	80011c6 <HAL_GPIO_Init+0x202>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a47      	ldr	r2, [pc, #284]	; (80012b4 <HAL_GPIO_Init+0x2f0>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d013      	beq.n	80011c2 <HAL_GPIO_Init+0x1fe>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a46      	ldr	r2, [pc, #280]	; (80012b8 <HAL_GPIO_Init+0x2f4>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d00d      	beq.n	80011be <HAL_GPIO_Init+0x1fa>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a45      	ldr	r2, [pc, #276]	; (80012bc <HAL_GPIO_Init+0x2f8>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d007      	beq.n	80011ba <HAL_GPIO_Init+0x1f6>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a44      	ldr	r2, [pc, #272]	; (80012c0 <HAL_GPIO_Init+0x2fc>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d101      	bne.n	80011b6 <HAL_GPIO_Init+0x1f2>
 80011b2:	2304      	movs	r3, #4
 80011b4:	e008      	b.n	80011c8 <HAL_GPIO_Init+0x204>
 80011b6:	2307      	movs	r3, #7
 80011b8:	e006      	b.n	80011c8 <HAL_GPIO_Init+0x204>
 80011ba:	2303      	movs	r3, #3
 80011bc:	e004      	b.n	80011c8 <HAL_GPIO_Init+0x204>
 80011be:	2302      	movs	r3, #2
 80011c0:	e002      	b.n	80011c8 <HAL_GPIO_Init+0x204>
 80011c2:	2301      	movs	r3, #1
 80011c4:	e000      	b.n	80011c8 <HAL_GPIO_Init+0x204>
 80011c6:	2300      	movs	r3, #0
 80011c8:	69fa      	ldr	r2, [r7, #28]
 80011ca:	f002 0203 	and.w	r2, r2, #3
 80011ce:	0092      	lsls	r2, r2, #2
 80011d0:	4093      	lsls	r3, r2
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011d8:	4934      	ldr	r1, [pc, #208]	; (80012ac <HAL_GPIO_Init+0x2e8>)
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	089b      	lsrs	r3, r3, #2
 80011de:	3302      	adds	r3, #2
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011e6:	4b37      	ldr	r3, [pc, #220]	; (80012c4 <HAL_GPIO_Init+0x300>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d003      	beq.n	800120a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	4313      	orrs	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800120a:	4a2e      	ldr	r2, [pc, #184]	; (80012c4 <HAL_GPIO_Init+0x300>)
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001210:	4b2c      	ldr	r3, [pc, #176]	; (80012c4 <HAL_GPIO_Init+0x300>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	43db      	mvns	r3, r3
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4013      	ands	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d003      	beq.n	8001234 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	4313      	orrs	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001234:	4a23      	ldr	r2, [pc, #140]	; (80012c4 <HAL_GPIO_Init+0x300>)
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800123a:	4b22      	ldr	r3, [pc, #136]	; (80012c4 <HAL_GPIO_Init+0x300>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	43db      	mvns	r3, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4013      	ands	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d003      	beq.n	800125e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	4313      	orrs	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800125e:	4a19      	ldr	r2, [pc, #100]	; (80012c4 <HAL_GPIO_Init+0x300>)
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001264:	4b17      	ldr	r3, [pc, #92]	; (80012c4 <HAL_GPIO_Init+0x300>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	43db      	mvns	r3, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4013      	ands	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d003      	beq.n	8001288 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	4313      	orrs	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001288:	4a0e      	ldr	r2, [pc, #56]	; (80012c4 <HAL_GPIO_Init+0x300>)
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	3301      	adds	r3, #1
 8001292:	61fb      	str	r3, [r7, #28]
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	2b0f      	cmp	r3, #15
 8001298:	f67f aea2 	bls.w	8000fe0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800129c:	bf00      	nop
 800129e:	3724      	adds	r7, #36	; 0x24
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40013800 	.word	0x40013800
 80012b0:	40020000 	.word	0x40020000
 80012b4:	40020400 	.word	0x40020400
 80012b8:	40020800 	.word	0x40020800
 80012bc:	40020c00 	.word	0x40020c00
 80012c0:	40021000 	.word	0x40021000
 80012c4:	40013c00 	.word	0x40013c00

080012c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	460b      	mov	r3, r1
 80012d2:	807b      	strh	r3, [r7, #2]
 80012d4:	4613      	mov	r3, r2
 80012d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012d8:	787b      	ldrb	r3, [r7, #1]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d003      	beq.n	80012e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012de:	887a      	ldrh	r2, [r7, #2]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012e4:	e003      	b.n	80012ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012e6:	887b      	ldrh	r3, [r7, #2]
 80012e8:	041a      	lsls	r2, r3, #16
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	619a      	str	r2, [r3, #24]
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
	...

080012fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001306:	4b08      	ldr	r3, [pc, #32]	; (8001328 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001308:	695a      	ldr	r2, [r3, #20]
 800130a:	88fb      	ldrh	r3, [r7, #6]
 800130c:	4013      	ands	r3, r2
 800130e:	2b00      	cmp	r3, #0
 8001310:	d006      	beq.n	8001320 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001312:	4a05      	ldr	r2, [pc, #20]	; (8001328 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001314:	88fb      	ldrh	r3, [r7, #6]
 8001316:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001318:	88fb      	ldrh	r3, [r7, #6]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff fa88 	bl	8000830 <HAL_GPIO_EXTI_Callback>
  }
}
 8001320:	bf00      	nop
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40013c00 	.word	0x40013c00

0800132c <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <HAL_PWR_PVD_IRQHandler+0x20>)
 8001332:	695b      	ldr	r3, [r3, #20]
 8001334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d005      	beq.n	8001348 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 800133c:	f000 f808 	bl	8001350 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8001340:	4b02      	ldr	r3, [pc, #8]	; (800134c <HAL_PWR_PVD_IRQHandler+0x20>)
 8001342:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001346:	615a      	str	r2, [r3, #20]
  }
}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40013c00 	.word	0x40013c00

08001350 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
	...

08001360 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d101      	bne.n	8001372 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e25b      	b.n	800182a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	2b00      	cmp	r3, #0
 800137c:	d075      	beq.n	800146a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800137e:	4ba3      	ldr	r3, [pc, #652]	; (800160c <HAL_RCC_OscConfig+0x2ac>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f003 030c 	and.w	r3, r3, #12
 8001386:	2b04      	cmp	r3, #4
 8001388:	d00c      	beq.n	80013a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800138a:	4ba0      	ldr	r3, [pc, #640]	; (800160c <HAL_RCC_OscConfig+0x2ac>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001392:	2b08      	cmp	r3, #8
 8001394:	d112      	bne.n	80013bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001396:	4b9d      	ldr	r3, [pc, #628]	; (800160c <HAL_RCC_OscConfig+0x2ac>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800139e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013a2:	d10b      	bne.n	80013bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a4:	4b99      	ldr	r3, [pc, #612]	; (800160c <HAL_RCC_OscConfig+0x2ac>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d05b      	beq.n	8001468 <HAL_RCC_OscConfig+0x108>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d157      	bne.n	8001468 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e236      	b.n	800182a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013c4:	d106      	bne.n	80013d4 <HAL_RCC_OscConfig+0x74>
 80013c6:	4b91      	ldr	r3, [pc, #580]	; (800160c <HAL_RCC_OscConfig+0x2ac>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a90      	ldr	r2, [pc, #576]	; (800160c <HAL_RCC_OscConfig+0x2ac>)
 80013cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	e01d      	b.n	8001410 <HAL_RCC_OscConfig+0xb0>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013dc:	d10c      	bne.n	80013f8 <HAL_RCC_OscConfig+0x98>
 80013de:	4b8b      	ldr	r3, [pc, #556]	; (800160c <HAL_RCC_OscConfig+0x2ac>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a8a      	ldr	r2, [pc, #552]	; (800160c <HAL_RCC_OscConfig+0x2ac>)
 80013e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013e8:	6013      	str	r3, [r2, #0]
 80013ea:	4b88      	ldr	r3, [pc, #544]	; (800160c <HAL_RCC_OscConfig+0x2ac>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a87      	ldr	r2, [pc, #540]	; (800160c <HAL_RCC_OscConfig+0x2ac>)
 80013f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013f4:	6013      	str	r3, [r2, #0]
 80013f6:	e00b      	b.n	8001410 <HAL_RCC_OscConfig+0xb0>
 80013f8:	4b84      	ldr	r3, [pc, #528]	; (800160c <HAL_RCC_OscConfig+0x2ac>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a83      	ldr	r2, [pc, #524]	; (800160c <HAL_RCC_OscConfig+0x2ac>)
 80013fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001402:	6013      	str	r3, [r2, #0]
 8001404:	4b81      	ldr	r3, [pc, #516]	; (800160c <HAL_RCC_OscConfig+0x2ac>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a80      	ldr	r2, [pc, #512]	; (800160c <HAL_RCC_OscConfig+0x2ac>)
 800140a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800140e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d013      	beq.n	8001440 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001418:	f7ff fcb6 	bl	8000d88 <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001420:	f7ff fcb2 	bl	8000d88 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b64      	cmp	r3, #100	; 0x64
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e1fb      	b.n	800182a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001432:	4b76      	ldr	r3, [pc, #472]	; (800160c <HAL_RCC_OscConfig+0x2ac>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d0f0      	beq.n	8001420 <HAL_RCC_OscConfig+0xc0>
 800143e:	e014      	b.n	800146a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001440:	f7ff fca2 	bl	8000d88 <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001448:	f7ff fc9e 	bl	8000d88 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b64      	cmp	r3, #100	; 0x64
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e1e7      	b.n	800182a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800145a:	4b6c      	ldr	r3, [pc, #432]	; (800160c <HAL_RCC_OscConfig+0x2ac>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1f0      	bne.n	8001448 <HAL_RCC_OscConfig+0xe8>
 8001466:	e000      	b.n	800146a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001468:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d063      	beq.n	800153e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001476:	4b65      	ldr	r3, [pc, #404]	; (800160c <HAL_RCC_OscConfig+0x2ac>)
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f003 030c 	and.w	r3, r3, #12
 800147e:	2b00      	cmp	r3, #0
 8001480:	d00b      	beq.n	800149a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001482:	4b62      	ldr	r3, [pc, #392]	; (800160c <HAL_RCC_OscConfig+0x2ac>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800148a:	2b08      	cmp	r3, #8
 800148c:	d11c      	bne.n	80014c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800148e:	4b5f      	ldr	r3, [pc, #380]	; (800160c <HAL_RCC_OscConfig+0x2ac>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d116      	bne.n	80014c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800149a:	4b5c      	ldr	r3, [pc, #368]	; (800160c <HAL_RCC_OscConfig+0x2ac>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d005      	beq.n	80014b2 <HAL_RCC_OscConfig+0x152>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d001      	beq.n	80014b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e1bb      	b.n	800182a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b2:	4b56      	ldr	r3, [pc, #344]	; (800160c <HAL_RCC_OscConfig+0x2ac>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	691b      	ldr	r3, [r3, #16]
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	4952      	ldr	r1, [pc, #328]	; (800160c <HAL_RCC_OscConfig+0x2ac>)
 80014c2:	4313      	orrs	r3, r2
 80014c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014c6:	e03a      	b.n	800153e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d020      	beq.n	8001512 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014d0:	4b4f      	ldr	r3, [pc, #316]	; (8001610 <HAL_RCC_OscConfig+0x2b0>)
 80014d2:	2201      	movs	r2, #1
 80014d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d6:	f7ff fc57 	bl	8000d88 <HAL_GetTick>
 80014da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014dc:	e008      	b.n	80014f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014de:	f7ff fc53 	bl	8000d88 <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d901      	bls.n	80014f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	e19c      	b.n	800182a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f0:	4b46      	ldr	r3, [pc, #280]	; (800160c <HAL_RCC_OscConfig+0x2ac>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0302 	and.w	r3, r3, #2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d0f0      	beq.n	80014de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014fc:	4b43      	ldr	r3, [pc, #268]	; (800160c <HAL_RCC_OscConfig+0x2ac>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	691b      	ldr	r3, [r3, #16]
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	4940      	ldr	r1, [pc, #256]	; (800160c <HAL_RCC_OscConfig+0x2ac>)
 800150c:	4313      	orrs	r3, r2
 800150e:	600b      	str	r3, [r1, #0]
 8001510:	e015      	b.n	800153e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001512:	4b3f      	ldr	r3, [pc, #252]	; (8001610 <HAL_RCC_OscConfig+0x2b0>)
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001518:	f7ff fc36 	bl	8000d88 <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001520:	f7ff fc32 	bl	8000d88 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e17b      	b.n	800182a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001532:	4b36      	ldr	r3, [pc, #216]	; (800160c <HAL_RCC_OscConfig+0x2ac>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1f0      	bne.n	8001520 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0308 	and.w	r3, r3, #8
 8001546:	2b00      	cmp	r3, #0
 8001548:	d030      	beq.n	80015ac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	695b      	ldr	r3, [r3, #20]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d016      	beq.n	8001580 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001552:	4b30      	ldr	r3, [pc, #192]	; (8001614 <HAL_RCC_OscConfig+0x2b4>)
 8001554:	2201      	movs	r2, #1
 8001556:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001558:	f7ff fc16 	bl	8000d88 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001560:	f7ff fc12 	bl	8000d88 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e15b      	b.n	800182a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001572:	4b26      	ldr	r3, [pc, #152]	; (800160c <HAL_RCC_OscConfig+0x2ac>)
 8001574:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d0f0      	beq.n	8001560 <HAL_RCC_OscConfig+0x200>
 800157e:	e015      	b.n	80015ac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001580:	4b24      	ldr	r3, [pc, #144]	; (8001614 <HAL_RCC_OscConfig+0x2b4>)
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001586:	f7ff fbff 	bl	8000d88 <HAL_GetTick>
 800158a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800158c:	e008      	b.n	80015a0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800158e:	f7ff fbfb 	bl	8000d88 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e144      	b.n	800182a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015a0:	4b1a      	ldr	r3, [pc, #104]	; (800160c <HAL_RCC_OscConfig+0x2ac>)
 80015a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d1f0      	bne.n	800158e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0304 	and.w	r3, r3, #4
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f000 80a0 	beq.w	80016fa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015ba:	2300      	movs	r3, #0
 80015bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015be:	4b13      	ldr	r3, [pc, #76]	; (800160c <HAL_RCC_OscConfig+0x2ac>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d10f      	bne.n	80015ea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	60bb      	str	r3, [r7, #8]
 80015ce:	4b0f      	ldr	r3, [pc, #60]	; (800160c <HAL_RCC_OscConfig+0x2ac>)
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	4a0e      	ldr	r2, [pc, #56]	; (800160c <HAL_RCC_OscConfig+0x2ac>)
 80015d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d8:	6413      	str	r3, [r2, #64]	; 0x40
 80015da:	4b0c      	ldr	r3, [pc, #48]	; (800160c <HAL_RCC_OscConfig+0x2ac>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015e6:	2301      	movs	r3, #1
 80015e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ea:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <HAL_RCC_OscConfig+0x2b8>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d121      	bne.n	800163a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015f6:	4b08      	ldr	r3, [pc, #32]	; (8001618 <HAL_RCC_OscConfig+0x2b8>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a07      	ldr	r2, [pc, #28]	; (8001618 <HAL_RCC_OscConfig+0x2b8>)
 80015fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001600:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001602:	f7ff fbc1 	bl	8000d88 <HAL_GetTick>
 8001606:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001608:	e011      	b.n	800162e <HAL_RCC_OscConfig+0x2ce>
 800160a:	bf00      	nop
 800160c:	40023800 	.word	0x40023800
 8001610:	42470000 	.word	0x42470000
 8001614:	42470e80 	.word	0x42470e80
 8001618:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800161c:	f7ff fbb4 	bl	8000d88 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e0fd      	b.n	800182a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800162e:	4b81      	ldr	r3, [pc, #516]	; (8001834 <HAL_RCC_OscConfig+0x4d4>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001636:	2b00      	cmp	r3, #0
 8001638:	d0f0      	beq.n	800161c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d106      	bne.n	8001650 <HAL_RCC_OscConfig+0x2f0>
 8001642:	4b7d      	ldr	r3, [pc, #500]	; (8001838 <HAL_RCC_OscConfig+0x4d8>)
 8001644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001646:	4a7c      	ldr	r2, [pc, #496]	; (8001838 <HAL_RCC_OscConfig+0x4d8>)
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	6713      	str	r3, [r2, #112]	; 0x70
 800164e:	e01c      	b.n	800168a <HAL_RCC_OscConfig+0x32a>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	2b05      	cmp	r3, #5
 8001656:	d10c      	bne.n	8001672 <HAL_RCC_OscConfig+0x312>
 8001658:	4b77      	ldr	r3, [pc, #476]	; (8001838 <HAL_RCC_OscConfig+0x4d8>)
 800165a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800165c:	4a76      	ldr	r2, [pc, #472]	; (8001838 <HAL_RCC_OscConfig+0x4d8>)
 800165e:	f043 0304 	orr.w	r3, r3, #4
 8001662:	6713      	str	r3, [r2, #112]	; 0x70
 8001664:	4b74      	ldr	r3, [pc, #464]	; (8001838 <HAL_RCC_OscConfig+0x4d8>)
 8001666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001668:	4a73      	ldr	r2, [pc, #460]	; (8001838 <HAL_RCC_OscConfig+0x4d8>)
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	6713      	str	r3, [r2, #112]	; 0x70
 8001670:	e00b      	b.n	800168a <HAL_RCC_OscConfig+0x32a>
 8001672:	4b71      	ldr	r3, [pc, #452]	; (8001838 <HAL_RCC_OscConfig+0x4d8>)
 8001674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001676:	4a70      	ldr	r2, [pc, #448]	; (8001838 <HAL_RCC_OscConfig+0x4d8>)
 8001678:	f023 0301 	bic.w	r3, r3, #1
 800167c:	6713      	str	r3, [r2, #112]	; 0x70
 800167e:	4b6e      	ldr	r3, [pc, #440]	; (8001838 <HAL_RCC_OscConfig+0x4d8>)
 8001680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001682:	4a6d      	ldr	r2, [pc, #436]	; (8001838 <HAL_RCC_OscConfig+0x4d8>)
 8001684:	f023 0304 	bic.w	r3, r3, #4
 8001688:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d015      	beq.n	80016be <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001692:	f7ff fb79 	bl	8000d88 <HAL_GetTick>
 8001696:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001698:	e00a      	b.n	80016b0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800169a:	f7ff fb75 	bl	8000d88 <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e0bc      	b.n	800182a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b0:	4b61      	ldr	r3, [pc, #388]	; (8001838 <HAL_RCC_OscConfig+0x4d8>)
 80016b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0ee      	beq.n	800169a <HAL_RCC_OscConfig+0x33a>
 80016bc:	e014      	b.n	80016e8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016be:	f7ff fb63 	bl	8000d88 <HAL_GetTick>
 80016c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016c4:	e00a      	b.n	80016dc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016c6:	f7ff fb5f 	bl	8000d88 <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e0a6      	b.n	800182a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016dc:	4b56      	ldr	r3, [pc, #344]	; (8001838 <HAL_RCC_OscConfig+0x4d8>)
 80016de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d1ee      	bne.n	80016c6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016e8:	7dfb      	ldrb	r3, [r7, #23]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d105      	bne.n	80016fa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016ee:	4b52      	ldr	r3, [pc, #328]	; (8001838 <HAL_RCC_OscConfig+0x4d8>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	4a51      	ldr	r2, [pc, #324]	; (8001838 <HAL_RCC_OscConfig+0x4d8>)
 80016f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	f000 8092 	beq.w	8001828 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001704:	4b4c      	ldr	r3, [pc, #304]	; (8001838 <HAL_RCC_OscConfig+0x4d8>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f003 030c 	and.w	r3, r3, #12
 800170c:	2b08      	cmp	r3, #8
 800170e:	d05c      	beq.n	80017ca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	2b02      	cmp	r3, #2
 8001716:	d141      	bne.n	800179c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001718:	4b48      	ldr	r3, [pc, #288]	; (800183c <HAL_RCC_OscConfig+0x4dc>)
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171e:	f7ff fb33 	bl	8000d88 <HAL_GetTick>
 8001722:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001726:	f7ff fb2f 	bl	8000d88 <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e078      	b.n	800182a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001738:	4b3f      	ldr	r3, [pc, #252]	; (8001838 <HAL_RCC_OscConfig+0x4d8>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1f0      	bne.n	8001726 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	69da      	ldr	r2, [r3, #28]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a1b      	ldr	r3, [r3, #32]
 800174c:	431a      	orrs	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001752:	019b      	lsls	r3, r3, #6
 8001754:	431a      	orrs	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175a:	085b      	lsrs	r3, r3, #1
 800175c:	3b01      	subs	r3, #1
 800175e:	041b      	lsls	r3, r3, #16
 8001760:	431a      	orrs	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001766:	061b      	lsls	r3, r3, #24
 8001768:	4933      	ldr	r1, [pc, #204]	; (8001838 <HAL_RCC_OscConfig+0x4d8>)
 800176a:	4313      	orrs	r3, r2
 800176c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800176e:	4b33      	ldr	r3, [pc, #204]	; (800183c <HAL_RCC_OscConfig+0x4dc>)
 8001770:	2201      	movs	r2, #1
 8001772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001774:	f7ff fb08 	bl	8000d88 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800177c:	f7ff fb04 	bl	8000d88 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e04d      	b.n	800182a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800178e:	4b2a      	ldr	r3, [pc, #168]	; (8001838 <HAL_RCC_OscConfig+0x4d8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d0f0      	beq.n	800177c <HAL_RCC_OscConfig+0x41c>
 800179a:	e045      	b.n	8001828 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800179c:	4b27      	ldr	r3, [pc, #156]	; (800183c <HAL_RCC_OscConfig+0x4dc>)
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a2:	f7ff faf1 	bl	8000d88 <HAL_GetTick>
 80017a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017a8:	e008      	b.n	80017bc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017aa:	f7ff faed 	bl	8000d88 <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e036      	b.n	800182a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017bc:	4b1e      	ldr	r3, [pc, #120]	; (8001838 <HAL_RCC_OscConfig+0x4d8>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1f0      	bne.n	80017aa <HAL_RCC_OscConfig+0x44a>
 80017c8:	e02e      	b.n	8001828 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d101      	bne.n	80017d6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e029      	b.n	800182a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017d6:	4b18      	ldr	r3, [pc, #96]	; (8001838 <HAL_RCC_OscConfig+0x4d8>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d11c      	bne.n	8001824 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d115      	bne.n	8001824 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80017f8:	68fa      	ldr	r2, [r7, #12]
 80017fa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017fe:	4013      	ands	r3, r2
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001804:	4293      	cmp	r3, r2
 8001806:	d10d      	bne.n	8001824 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001812:	429a      	cmp	r2, r3
 8001814:	d106      	bne.n	8001824 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001820:	429a      	cmp	r2, r3
 8001822:	d001      	beq.n	8001828 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e000      	b.n	800182a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3718      	adds	r7, #24
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40007000 	.word	0x40007000
 8001838:	40023800 	.word	0x40023800
 800183c:	42470060 	.word	0x42470060

08001840 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d101      	bne.n	8001854 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e0cc      	b.n	80019ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001854:	4b68      	ldr	r3, [pc, #416]	; (80019f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 030f 	and.w	r3, r3, #15
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	429a      	cmp	r2, r3
 8001860:	d90c      	bls.n	800187c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001862:	4b65      	ldr	r3, [pc, #404]	; (80019f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800186a:	4b63      	ldr	r3, [pc, #396]	; (80019f8 <HAL_RCC_ClockConfig+0x1b8>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 030f 	and.w	r3, r3, #15
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	429a      	cmp	r2, r3
 8001876:	d001      	beq.n	800187c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e0b8      	b.n	80019ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d020      	beq.n	80018ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0304 	and.w	r3, r3, #4
 8001890:	2b00      	cmp	r3, #0
 8001892:	d005      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001894:	4b59      	ldr	r3, [pc, #356]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	4a58      	ldr	r2, [pc, #352]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800189e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0308 	and.w	r3, r3, #8
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d005      	beq.n	80018b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018ac:	4b53      	ldr	r3, [pc, #332]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	4a52      	ldr	r2, [pc, #328]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 80018b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018b8:	4b50      	ldr	r3, [pc, #320]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	494d      	ldr	r1, [pc, #308]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 80018c6:	4313      	orrs	r3, r2
 80018c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d044      	beq.n	8001960 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d107      	bne.n	80018ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018de:	4b47      	ldr	r3, [pc, #284]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d119      	bne.n	800191e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e07f      	b.n	80019ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d003      	beq.n	80018fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018fa:	2b03      	cmp	r3, #3
 80018fc:	d107      	bne.n	800190e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018fe:	4b3f      	ldr	r3, [pc, #252]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d109      	bne.n	800191e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e06f      	b.n	80019ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800190e:	4b3b      	ldr	r3, [pc, #236]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d101      	bne.n	800191e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e067      	b.n	80019ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800191e:	4b37      	ldr	r3, [pc, #220]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f023 0203 	bic.w	r2, r3, #3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	4934      	ldr	r1, [pc, #208]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 800192c:	4313      	orrs	r3, r2
 800192e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001930:	f7ff fa2a 	bl	8000d88 <HAL_GetTick>
 8001934:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001936:	e00a      	b.n	800194e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001938:	f7ff fa26 	bl	8000d88 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	f241 3288 	movw	r2, #5000	; 0x1388
 8001946:	4293      	cmp	r3, r2
 8001948:	d901      	bls.n	800194e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e04f      	b.n	80019ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800194e:	4b2b      	ldr	r3, [pc, #172]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f003 020c 	and.w	r2, r3, #12
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	429a      	cmp	r2, r3
 800195e:	d1eb      	bne.n	8001938 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001960:	4b25      	ldr	r3, [pc, #148]	; (80019f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 030f 	and.w	r3, r3, #15
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	429a      	cmp	r2, r3
 800196c:	d20c      	bcs.n	8001988 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800196e:	4b22      	ldr	r3, [pc, #136]	; (80019f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001976:	4b20      	ldr	r3, [pc, #128]	; (80019f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	683a      	ldr	r2, [r7, #0]
 8001980:	429a      	cmp	r2, r3
 8001982:	d001      	beq.n	8001988 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e032      	b.n	80019ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0304 	and.w	r3, r3, #4
 8001990:	2b00      	cmp	r3, #0
 8001992:	d008      	beq.n	80019a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001994:	4b19      	ldr	r3, [pc, #100]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	4916      	ldr	r1, [pc, #88]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0308 	and.w	r3, r3, #8
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d009      	beq.n	80019c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019b2:	4b12      	ldr	r3, [pc, #72]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	490e      	ldr	r1, [pc, #56]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019c6:	f000 f821 	bl	8001a0c <HAL_RCC_GetSysClockFreq>
 80019ca:	4601      	mov	r1, r0
 80019cc:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	091b      	lsrs	r3, r3, #4
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	4a0a      	ldr	r2, [pc, #40]	; (8001a00 <HAL_RCC_ClockConfig+0x1c0>)
 80019d8:	5cd3      	ldrb	r3, [r2, r3]
 80019da:	fa21 f303 	lsr.w	r3, r1, r3
 80019de:	4a09      	ldr	r2, [pc, #36]	; (8001a04 <HAL_RCC_ClockConfig+0x1c4>)
 80019e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019e2:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <HAL_RCC_ClockConfig+0x1c8>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff f98a 	bl	8000d00 <HAL_InitTick>

  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40023c00 	.word	0x40023c00
 80019fc:	40023800 	.word	0x40023800
 8001a00:	080038ec 	.word	0x080038ec
 8001a04:	20000000 	.word	0x20000000
 8001a08:	20000004 	.word	0x20000004

08001a0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a12:	2300      	movs	r3, #0
 8001a14:	607b      	str	r3, [r7, #4]
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a22:	4b63      	ldr	r3, [pc, #396]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f003 030c 	and.w	r3, r3, #12
 8001a2a:	2b04      	cmp	r3, #4
 8001a2c:	d007      	beq.n	8001a3e <HAL_RCC_GetSysClockFreq+0x32>
 8001a2e:	2b08      	cmp	r3, #8
 8001a30:	d008      	beq.n	8001a44 <HAL_RCC_GetSysClockFreq+0x38>
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f040 80b4 	bne.w	8001ba0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a38:	4b5e      	ldr	r3, [pc, #376]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001a3a:	60bb      	str	r3, [r7, #8]
       break;
 8001a3c:	e0b3      	b.n	8001ba6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a3e:	4b5e      	ldr	r3, [pc, #376]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001a40:	60bb      	str	r3, [r7, #8]
      break;
 8001a42:	e0b0      	b.n	8001ba6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a44:	4b5a      	ldr	r3, [pc, #360]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a4c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a4e:	4b58      	ldr	r3, [pc, #352]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d04a      	beq.n	8001af0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a5a:	4b55      	ldr	r3, [pc, #340]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	099b      	lsrs	r3, r3, #6
 8001a60:	f04f 0400 	mov.w	r4, #0
 8001a64:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	ea03 0501 	and.w	r5, r3, r1
 8001a70:	ea04 0602 	and.w	r6, r4, r2
 8001a74:	4629      	mov	r1, r5
 8001a76:	4632      	mov	r2, r6
 8001a78:	f04f 0300 	mov.w	r3, #0
 8001a7c:	f04f 0400 	mov.w	r4, #0
 8001a80:	0154      	lsls	r4, r2, #5
 8001a82:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a86:	014b      	lsls	r3, r1, #5
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4622      	mov	r2, r4
 8001a8c:	1b49      	subs	r1, r1, r5
 8001a8e:	eb62 0206 	sbc.w	r2, r2, r6
 8001a92:	f04f 0300 	mov.w	r3, #0
 8001a96:	f04f 0400 	mov.w	r4, #0
 8001a9a:	0194      	lsls	r4, r2, #6
 8001a9c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001aa0:	018b      	lsls	r3, r1, #6
 8001aa2:	1a5b      	subs	r3, r3, r1
 8001aa4:	eb64 0402 	sbc.w	r4, r4, r2
 8001aa8:	f04f 0100 	mov.w	r1, #0
 8001aac:	f04f 0200 	mov.w	r2, #0
 8001ab0:	00e2      	lsls	r2, r4, #3
 8001ab2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001ab6:	00d9      	lsls	r1, r3, #3
 8001ab8:	460b      	mov	r3, r1
 8001aba:	4614      	mov	r4, r2
 8001abc:	195b      	adds	r3, r3, r5
 8001abe:	eb44 0406 	adc.w	r4, r4, r6
 8001ac2:	f04f 0100 	mov.w	r1, #0
 8001ac6:	f04f 0200 	mov.w	r2, #0
 8001aca:	0262      	lsls	r2, r4, #9
 8001acc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001ad0:	0259      	lsls	r1, r3, #9
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4614      	mov	r4, r2
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	4621      	mov	r1, r4
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f04f 0400 	mov.w	r4, #0
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	4623      	mov	r3, r4
 8001ae4:	f7fe fbcc 	bl	8000280 <__aeabi_uldivmod>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	460c      	mov	r4, r1
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	e049      	b.n	8001b84 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001af0:	4b2f      	ldr	r3, [pc, #188]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	099b      	lsrs	r3, r3, #6
 8001af6:	f04f 0400 	mov.w	r4, #0
 8001afa:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001afe:	f04f 0200 	mov.w	r2, #0
 8001b02:	ea03 0501 	and.w	r5, r3, r1
 8001b06:	ea04 0602 	and.w	r6, r4, r2
 8001b0a:	4629      	mov	r1, r5
 8001b0c:	4632      	mov	r2, r6
 8001b0e:	f04f 0300 	mov.w	r3, #0
 8001b12:	f04f 0400 	mov.w	r4, #0
 8001b16:	0154      	lsls	r4, r2, #5
 8001b18:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b1c:	014b      	lsls	r3, r1, #5
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4622      	mov	r2, r4
 8001b22:	1b49      	subs	r1, r1, r5
 8001b24:	eb62 0206 	sbc.w	r2, r2, r6
 8001b28:	f04f 0300 	mov.w	r3, #0
 8001b2c:	f04f 0400 	mov.w	r4, #0
 8001b30:	0194      	lsls	r4, r2, #6
 8001b32:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001b36:	018b      	lsls	r3, r1, #6
 8001b38:	1a5b      	subs	r3, r3, r1
 8001b3a:	eb64 0402 	sbc.w	r4, r4, r2
 8001b3e:	f04f 0100 	mov.w	r1, #0
 8001b42:	f04f 0200 	mov.w	r2, #0
 8001b46:	00e2      	lsls	r2, r4, #3
 8001b48:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001b4c:	00d9      	lsls	r1, r3, #3
 8001b4e:	460b      	mov	r3, r1
 8001b50:	4614      	mov	r4, r2
 8001b52:	195b      	adds	r3, r3, r5
 8001b54:	eb44 0406 	adc.w	r4, r4, r6
 8001b58:	f04f 0100 	mov.w	r1, #0
 8001b5c:	f04f 0200 	mov.w	r2, #0
 8001b60:	02a2      	lsls	r2, r4, #10
 8001b62:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001b66:	0299      	lsls	r1, r3, #10
 8001b68:	460b      	mov	r3, r1
 8001b6a:	4614      	mov	r4, r2
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	4621      	mov	r1, r4
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f04f 0400 	mov.w	r4, #0
 8001b76:	461a      	mov	r2, r3
 8001b78:	4623      	mov	r3, r4
 8001b7a:	f7fe fb81 	bl	8000280 <__aeabi_uldivmod>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	460c      	mov	r4, r1
 8001b82:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b84:	4b0a      	ldr	r3, [pc, #40]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	0c1b      	lsrs	r3, r3, #16
 8001b8a:	f003 0303 	and.w	r3, r3, #3
 8001b8e:	3301      	adds	r3, #1
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001b94:	68fa      	ldr	r2, [r7, #12]
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b9c:	60bb      	str	r3, [r7, #8]
      break;
 8001b9e:	e002      	b.n	8001ba6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ba0:	4b04      	ldr	r3, [pc, #16]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001ba2:	60bb      	str	r3, [r7, #8]
      break;
 8001ba4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ba6:	68bb      	ldr	r3, [r7, #8]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3714      	adds	r7, #20
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	00f42400 	.word	0x00f42400
 8001bb8:	007a1200 	.word	0x007a1200

08001bbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bc0:	4b03      	ldr	r3, [pc, #12]	; (8001bd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	20000000 	.word	0x20000000

08001bd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bd8:	f7ff fff0 	bl	8001bbc <HAL_RCC_GetHCLKFreq>
 8001bdc:	4601      	mov	r1, r0
 8001bde:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	0a9b      	lsrs	r3, r3, #10
 8001be4:	f003 0307 	and.w	r3, r3, #7
 8001be8:	4a03      	ldr	r2, [pc, #12]	; (8001bf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bea:	5cd3      	ldrb	r3, [r2, r3]
 8001bec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	080038fc 	.word	0x080038fc

08001bfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c00:	f7ff ffdc 	bl	8001bbc <HAL_RCC_GetHCLKFreq>
 8001c04:	4601      	mov	r1, r0
 8001c06:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	0b5b      	lsrs	r3, r3, #13
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	4a03      	ldr	r2, [pc, #12]	; (8001c20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c12:	5cd3      	ldrb	r3, [r2, r3]
 8001c14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	080038fc 	.word	0x080038fc

08001c24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e01d      	b.n	8001c72 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d106      	bne.n	8001c50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7fe ff42 	bl	8000ad4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2202      	movs	r2, #2
 8001c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3304      	adds	r3, #4
 8001c60:	4619      	mov	r1, r3
 8001c62:	4610      	mov	r0, r2
 8001c64:	f000 f9ee 	bl	8002044 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b082      	sub	sp, #8
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d101      	bne.n	8001c8c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e01d      	b.n	8001cc8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d106      	bne.n	8001ca6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f000 f815 	bl	8001cd0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2202      	movs	r2, #2
 8001caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4610      	mov	r0, r2
 8001cba:	f000 f9c3 	bl	8002044 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	6839      	ldr	r1, [r7, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f000 fc4a 	bl	8002590 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a10      	ldr	r2, [pc, #64]	; (8001d44 <HAL_TIM_PWM_Start+0x60>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d107      	bne.n	8001d16 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d14:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2b06      	cmp	r3, #6
 8001d26:	d007      	beq.n	8001d38 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f042 0201 	orr.w	r2, r2, #1
 8001d36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40010000 	.word	0x40010000

08001d48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d101      	bne.n	8001d62 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001d5e:	2302      	movs	r3, #2
 8001d60:	e0b4      	b.n	8001ecc <HAL_TIM_PWM_ConfigChannel+0x184>
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2201      	movs	r2, #1
 8001d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2202      	movs	r2, #2
 8001d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2b0c      	cmp	r3, #12
 8001d76:	f200 809f 	bhi.w	8001eb8 <HAL_TIM_PWM_ConfigChannel+0x170>
 8001d7a:	a201      	add	r2, pc, #4	; (adr r2, 8001d80 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d80:	08001db5 	.word	0x08001db5
 8001d84:	08001eb9 	.word	0x08001eb9
 8001d88:	08001eb9 	.word	0x08001eb9
 8001d8c:	08001eb9 	.word	0x08001eb9
 8001d90:	08001df5 	.word	0x08001df5
 8001d94:	08001eb9 	.word	0x08001eb9
 8001d98:	08001eb9 	.word	0x08001eb9
 8001d9c:	08001eb9 	.word	0x08001eb9
 8001da0:	08001e37 	.word	0x08001e37
 8001da4:	08001eb9 	.word	0x08001eb9
 8001da8:	08001eb9 	.word	0x08001eb9
 8001dac:	08001eb9 	.word	0x08001eb9
 8001db0:	08001e77 	.word	0x08001e77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	68b9      	ldr	r1, [r7, #8]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f000 f9c2 	bl	8002144 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	699a      	ldr	r2, [r3, #24]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f042 0208 	orr.w	r2, r2, #8
 8001dce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	699a      	ldr	r2, [r3, #24]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 0204 	bic.w	r2, r2, #4
 8001dde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6999      	ldr	r1, [r3, #24]
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	691a      	ldr	r2, [r3, #16]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	430a      	orrs	r2, r1
 8001df0:	619a      	str	r2, [r3, #24]
      break;
 8001df2:	e062      	b.n	8001eba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68b9      	ldr	r1, [r7, #8]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f000 fa08 	bl	8002210 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	699a      	ldr	r2, [r3, #24]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	699a      	ldr	r2, [r3, #24]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6999      	ldr	r1, [r3, #24]
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	021a      	lsls	r2, r3, #8
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	430a      	orrs	r2, r1
 8001e32:	619a      	str	r2, [r3, #24]
      break;
 8001e34:	e041      	b.n	8001eba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68b9      	ldr	r1, [r7, #8]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f000 fa53 	bl	80022e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	69da      	ldr	r2, [r3, #28]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f042 0208 	orr.w	r2, r2, #8
 8001e50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	69da      	ldr	r2, [r3, #28]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f022 0204 	bic.w	r2, r2, #4
 8001e60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	69d9      	ldr	r1, [r3, #28]
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	691a      	ldr	r2, [r3, #16]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	430a      	orrs	r2, r1
 8001e72:	61da      	str	r2, [r3, #28]
      break;
 8001e74:	e021      	b.n	8001eba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68b9      	ldr	r1, [r7, #8]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f000 fa9d 	bl	80023bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	69da      	ldr	r2, [r3, #28]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	69da      	ldr	r2, [r3, #28]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ea0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	69d9      	ldr	r1, [r3, #28]
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	021a      	lsls	r2, r3, #8
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	61da      	str	r2, [r3, #28]
      break;
 8001eb6:	e000      	b.n	8001eba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8001eb8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d101      	bne.n	8001eec <HAL_TIM_ConfigClockSource+0x18>
 8001ee8:	2302      	movs	r3, #2
 8001eea:	e0a6      	b.n	800203a <HAL_TIM_ConfigClockSource+0x166>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001f0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f12:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2b40      	cmp	r3, #64	; 0x40
 8001f22:	d067      	beq.n	8001ff4 <HAL_TIM_ConfigClockSource+0x120>
 8001f24:	2b40      	cmp	r3, #64	; 0x40
 8001f26:	d80b      	bhi.n	8001f40 <HAL_TIM_ConfigClockSource+0x6c>
 8001f28:	2b10      	cmp	r3, #16
 8001f2a:	d073      	beq.n	8002014 <HAL_TIM_ConfigClockSource+0x140>
 8001f2c:	2b10      	cmp	r3, #16
 8001f2e:	d802      	bhi.n	8001f36 <HAL_TIM_ConfigClockSource+0x62>
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d06f      	beq.n	8002014 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001f34:	e078      	b.n	8002028 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001f36:	2b20      	cmp	r3, #32
 8001f38:	d06c      	beq.n	8002014 <HAL_TIM_ConfigClockSource+0x140>
 8001f3a:	2b30      	cmp	r3, #48	; 0x30
 8001f3c:	d06a      	beq.n	8002014 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001f3e:	e073      	b.n	8002028 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001f40:	2b70      	cmp	r3, #112	; 0x70
 8001f42:	d00d      	beq.n	8001f60 <HAL_TIM_ConfigClockSource+0x8c>
 8001f44:	2b70      	cmp	r3, #112	; 0x70
 8001f46:	d804      	bhi.n	8001f52 <HAL_TIM_ConfigClockSource+0x7e>
 8001f48:	2b50      	cmp	r3, #80	; 0x50
 8001f4a:	d033      	beq.n	8001fb4 <HAL_TIM_ConfigClockSource+0xe0>
 8001f4c:	2b60      	cmp	r3, #96	; 0x60
 8001f4e:	d041      	beq.n	8001fd4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001f50:	e06a      	b.n	8002028 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f56:	d066      	beq.n	8002026 <HAL_TIM_ConfigClockSource+0x152>
 8001f58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f5c:	d017      	beq.n	8001f8e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001f5e:	e063      	b.n	8002028 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6818      	ldr	r0, [r3, #0]
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	6899      	ldr	r1, [r3, #8]
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685a      	ldr	r2, [r3, #4]
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	f000 faee 	bl	8002550 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001f82:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	609a      	str	r2, [r3, #8]
      break;
 8001f8c:	e04c      	b.n	8002028 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6818      	ldr	r0, [r3, #0]
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	6899      	ldr	r1, [r3, #8]
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	f000 fad7 	bl	8002550 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001fb0:	609a      	str	r2, [r3, #8]
      break;
 8001fb2:	e039      	b.n	8002028 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6818      	ldr	r0, [r3, #0]
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	6859      	ldr	r1, [r3, #4]
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	f000 fa4b 	bl	800245c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2150      	movs	r1, #80	; 0x50
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f000 faa4 	bl	800251a <TIM_ITRx_SetConfig>
      break;
 8001fd2:	e029      	b.n	8002028 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6818      	ldr	r0, [r3, #0]
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	6859      	ldr	r1, [r3, #4]
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	f000 fa6a 	bl	80024ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2160      	movs	r1, #96	; 0x60
 8001fec:	4618      	mov	r0, r3
 8001fee:	f000 fa94 	bl	800251a <TIM_ITRx_SetConfig>
      break;
 8001ff2:	e019      	b.n	8002028 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6818      	ldr	r0, [r3, #0]
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	6859      	ldr	r1, [r3, #4]
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	461a      	mov	r2, r3
 8002002:	f000 fa2b 	bl	800245c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2140      	movs	r1, #64	; 0x40
 800200c:	4618      	mov	r0, r3
 800200e:	f000 fa84 	bl	800251a <TIM_ITRx_SetConfig>
      break;
 8002012:	e009      	b.n	8002028 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4619      	mov	r1, r3
 800201e:	4610      	mov	r0, r2
 8002020:	f000 fa7b 	bl	800251a <TIM_ITRx_SetConfig>
      break;
 8002024:	e000      	b.n	8002028 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002026:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
	...

08002044 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a34      	ldr	r2, [pc, #208]	; (8002128 <TIM_Base_SetConfig+0xe4>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d00f      	beq.n	800207c <TIM_Base_SetConfig+0x38>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002062:	d00b      	beq.n	800207c <TIM_Base_SetConfig+0x38>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a31      	ldr	r2, [pc, #196]	; (800212c <TIM_Base_SetConfig+0xe8>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d007      	beq.n	800207c <TIM_Base_SetConfig+0x38>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a30      	ldr	r2, [pc, #192]	; (8002130 <TIM_Base_SetConfig+0xec>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d003      	beq.n	800207c <TIM_Base_SetConfig+0x38>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a2f      	ldr	r2, [pc, #188]	; (8002134 <TIM_Base_SetConfig+0xf0>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d108      	bne.n	800208e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002082:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	4313      	orrs	r3, r2
 800208c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a25      	ldr	r2, [pc, #148]	; (8002128 <TIM_Base_SetConfig+0xe4>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d01b      	beq.n	80020ce <TIM_Base_SetConfig+0x8a>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800209c:	d017      	beq.n	80020ce <TIM_Base_SetConfig+0x8a>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a22      	ldr	r2, [pc, #136]	; (800212c <TIM_Base_SetConfig+0xe8>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d013      	beq.n	80020ce <TIM_Base_SetConfig+0x8a>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a21      	ldr	r2, [pc, #132]	; (8002130 <TIM_Base_SetConfig+0xec>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d00f      	beq.n	80020ce <TIM_Base_SetConfig+0x8a>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a20      	ldr	r2, [pc, #128]	; (8002134 <TIM_Base_SetConfig+0xf0>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d00b      	beq.n	80020ce <TIM_Base_SetConfig+0x8a>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a1f      	ldr	r2, [pc, #124]	; (8002138 <TIM_Base_SetConfig+0xf4>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d007      	beq.n	80020ce <TIM_Base_SetConfig+0x8a>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a1e      	ldr	r2, [pc, #120]	; (800213c <TIM_Base_SetConfig+0xf8>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d003      	beq.n	80020ce <TIM_Base_SetConfig+0x8a>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a1d      	ldr	r2, [pc, #116]	; (8002140 <TIM_Base_SetConfig+0xfc>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d108      	bne.n	80020e0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	4313      	orrs	r3, r2
 80020de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a08      	ldr	r2, [pc, #32]	; (8002128 <TIM_Base_SetConfig+0xe4>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d103      	bne.n	8002114 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	691a      	ldr	r2, [r3, #16]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	615a      	str	r2, [r3, #20]
}
 800211a:	bf00      	nop
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	40010000 	.word	0x40010000
 800212c:	40000400 	.word	0x40000400
 8002130:	40000800 	.word	0x40000800
 8002134:	40000c00 	.word	0x40000c00
 8002138:	40014000 	.word	0x40014000
 800213c:	40014400 	.word	0x40014400
 8002140:	40014800 	.word	0x40014800

08002144 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002144:	b480      	push	{r7}
 8002146:	b087      	sub	sp, #28
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	f023 0201 	bic.w	r2, r3, #1
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f023 0303 	bic.w	r3, r3, #3
 800217a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	4313      	orrs	r3, r2
 8002184:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	f023 0302 	bic.w	r3, r3, #2
 800218c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	4313      	orrs	r3, r2
 8002196:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a1c      	ldr	r2, [pc, #112]	; (800220c <TIM_OC1_SetConfig+0xc8>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d10c      	bne.n	80021ba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	f023 0308 	bic.w	r3, r3, #8
 80021a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	f023 0304 	bic.w	r3, r3, #4
 80021b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a13      	ldr	r2, [pc, #76]	; (800220c <TIM_OC1_SetConfig+0xc8>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d111      	bne.n	80021e6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80021d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	4313      	orrs	r3, r2
 80021da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685a      	ldr	r2, [r3, #4]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	621a      	str	r2, [r3, #32]
}
 8002200:	bf00      	nop
 8002202:	371c      	adds	r7, #28
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	40010000 	.word	0x40010000

08002210 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002210:	b480      	push	{r7}
 8002212:	b087      	sub	sp, #28
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	f023 0210 	bic.w	r2, r3, #16
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a1b      	ldr	r3, [r3, #32]
 800222a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800223e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002246:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	021b      	lsls	r3, r3, #8
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	4313      	orrs	r3, r2
 8002252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	f023 0320 	bic.w	r3, r3, #32
 800225a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	011b      	lsls	r3, r3, #4
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	4313      	orrs	r3, r2
 8002266:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a1e      	ldr	r2, [pc, #120]	; (80022e4 <TIM_OC2_SetConfig+0xd4>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d10d      	bne.n	800228c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002276:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	011b      	lsls	r3, r3, #4
 800227e:	697a      	ldr	r2, [r7, #20]
 8002280:	4313      	orrs	r3, r2
 8002282:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800228a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a15      	ldr	r2, [pc, #84]	; (80022e4 <TIM_OC2_SetConfig+0xd4>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d113      	bne.n	80022bc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800229a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80022a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685a      	ldr	r2, [r3, #4]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	621a      	str	r2, [r3, #32]
}
 80022d6:	bf00      	nop
 80022d8:	371c      	adds	r7, #28
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	40010000 	.word	0x40010000

080022e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b087      	sub	sp, #28
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a1b      	ldr	r3, [r3, #32]
 8002302:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f023 0303 	bic.w	r3, r3, #3
 800231e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	4313      	orrs	r3, r2
 8002328:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002330:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	021b      	lsls	r3, r3, #8
 8002338:	697a      	ldr	r2, [r7, #20]
 800233a:	4313      	orrs	r3, r2
 800233c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a1d      	ldr	r2, [pc, #116]	; (80023b8 <TIM_OC3_SetConfig+0xd0>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d10d      	bne.n	8002362 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800234c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	021b      	lsls	r3, r3, #8
 8002354:	697a      	ldr	r2, [r7, #20]
 8002356:	4313      	orrs	r3, r2
 8002358:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002360:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a14      	ldr	r2, [pc, #80]	; (80023b8 <TIM_OC3_SetConfig+0xd0>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d113      	bne.n	8002392 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002370:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002378:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	011b      	lsls	r3, r3, #4
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	4313      	orrs	r3, r2
 8002384:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	011b      	lsls	r3, r3, #4
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	4313      	orrs	r3, r2
 8002390:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	697a      	ldr	r2, [r7, #20]
 80023aa:	621a      	str	r2, [r3, #32]
}
 80023ac:	bf00      	nop
 80023ae:	371c      	adds	r7, #28
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	40010000 	.word	0x40010000

080023bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80023bc:	b480      	push	{r7}
 80023be:	b087      	sub	sp, #28
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	021b      	lsls	r3, r3, #8
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002406:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	031b      	lsls	r3, r3, #12
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	4313      	orrs	r3, r2
 8002412:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a10      	ldr	r2, [pc, #64]	; (8002458 <TIM_OC4_SetConfig+0x9c>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d109      	bne.n	8002430 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002422:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	695b      	ldr	r3, [r3, #20]
 8002428:	019b      	lsls	r3, r3, #6
 800242a:	697a      	ldr	r2, [r7, #20]
 800242c:	4313      	orrs	r3, r2
 800242e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	621a      	str	r2, [r3, #32]
}
 800244a:	bf00      	nop
 800244c:	371c      	adds	r7, #28
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	40010000 	.word	0x40010000

0800245c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800245c:	b480      	push	{r7}
 800245e:	b087      	sub	sp, #28
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	f023 0201 	bic.w	r2, r3, #1
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002486:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	011b      	lsls	r3, r3, #4
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	4313      	orrs	r3, r2
 8002490:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	f023 030a 	bic.w	r3, r3, #10
 8002498:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	4313      	orrs	r3, r2
 80024a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	621a      	str	r2, [r3, #32]
}
 80024ae:	bf00      	nop
 80024b0:	371c      	adds	r7, #28
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b087      	sub	sp, #28
 80024be:	af00      	add	r7, sp, #0
 80024c0:	60f8      	str	r0, [r7, #12]
 80024c2:	60b9      	str	r1, [r7, #8]
 80024c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	f023 0210 	bic.w	r2, r3, #16
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80024e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	031b      	lsls	r3, r3, #12
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80024f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	011b      	lsls	r3, r3, #4
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	4313      	orrs	r3, r2
 8002500:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	621a      	str	r2, [r3, #32]
}
 800250e:	bf00      	nop
 8002510:	371c      	adds	r7, #28
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800251a:	b480      	push	{r7}
 800251c:	b085      	sub	sp, #20
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
 8002522:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002530:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4313      	orrs	r3, r2
 8002538:	f043 0307 	orr.w	r3, r3, #7
 800253c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	609a      	str	r2, [r3, #8]
}
 8002544:	bf00      	nop
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002550:	b480      	push	{r7}
 8002552:	b087      	sub	sp, #28
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
 800255c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800256a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	021a      	lsls	r2, r3, #8
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	431a      	orrs	r2, r3
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	4313      	orrs	r3, r2
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	4313      	orrs	r3, r2
 800257c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	697a      	ldr	r2, [r7, #20]
 8002582:	609a      	str	r2, [r3, #8]
}
 8002584:	bf00      	nop
 8002586:	371c      	adds	r7, #28
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002590:	b480      	push	{r7}
 8002592:	b087      	sub	sp, #28
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	f003 031f 	and.w	r3, r3, #31
 80025a2:	2201      	movs	r2, #1
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6a1a      	ldr	r2, [r3, #32]
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	43db      	mvns	r3, r3
 80025b2:	401a      	ands	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6a1a      	ldr	r2, [r3, #32]
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	f003 031f 	and.w	r3, r3, #31
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	fa01 f303 	lsl.w	r3, r1, r3
 80025c8:	431a      	orrs	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	621a      	str	r2, [r3, #32]
}
 80025ce:	bf00      	nop
 80025d0:	371c      	adds	r7, #28
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
	...

080025dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d101      	bne.n	80025f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025f0:	2302      	movs	r3, #2
 80025f2:	e050      	b.n	8002696 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2202      	movs	r2, #2
 8002600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800261a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	4313      	orrs	r3, r2
 8002624:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a1c      	ldr	r2, [pc, #112]	; (80026a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d018      	beq.n	800266a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002640:	d013      	beq.n	800266a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a18      	ldr	r2, [pc, #96]	; (80026a8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d00e      	beq.n	800266a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a16      	ldr	r2, [pc, #88]	; (80026ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d009      	beq.n	800266a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a15      	ldr	r2, [pc, #84]	; (80026b0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d004      	beq.n	800266a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a13      	ldr	r2, [pc, #76]	; (80026b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d10c      	bne.n	8002684 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002670:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	68ba      	ldr	r2, [r7, #8]
 8002678:	4313      	orrs	r3, r2
 800267a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68ba      	ldr	r2, [r7, #8]
 8002682:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3714      	adds	r7, #20
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	40010000 	.word	0x40010000
 80026a8:	40000400 	.word	0x40000400
 80026ac:	40000800 	.word	0x40000800
 80026b0:	40000c00 	.word	0x40000c00
 80026b4:	40014000 	.word	0x40014000

080026b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e03f      	b.n	800274a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d106      	bne.n	80026e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7fe fa7a 	bl	8000bd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2224      	movs	r2, #36	; 0x24
 80026e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68da      	ldr	r2, [r3, #12]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f000 f90b 	bl	8002918 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	691a      	ldr	r2, [r3, #16]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002710:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	695a      	ldr	r2, [r3, #20]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002720:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68da      	ldr	r2, [r3, #12]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002730:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2220      	movs	r2, #32
 800273c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2220      	movs	r2, #32
 8002744:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b088      	sub	sp, #32
 8002756:	af02      	add	r7, sp, #8
 8002758:	60f8      	str	r0, [r7, #12]
 800275a:	60b9      	str	r1, [r7, #8]
 800275c:	603b      	str	r3, [r7, #0]
 800275e:	4613      	mov	r3, r2
 8002760:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002762:	2300      	movs	r3, #0
 8002764:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b20      	cmp	r3, #32
 8002770:	f040 8083 	bne.w	800287a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d002      	beq.n	8002780 <HAL_UART_Transmit+0x2e>
 800277a:	88fb      	ldrh	r3, [r7, #6]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d101      	bne.n	8002784 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e07b      	b.n	800287c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800278a:	2b01      	cmp	r3, #1
 800278c:	d101      	bne.n	8002792 <HAL_UART_Transmit+0x40>
 800278e:	2302      	movs	r3, #2
 8002790:	e074      	b.n	800287c <HAL_UART_Transmit+0x12a>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2201      	movs	r2, #1
 8002796:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2200      	movs	r2, #0
 800279e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2221      	movs	r2, #33	; 0x21
 80027a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80027a8:	f7fe faee 	bl	8000d88 <HAL_GetTick>
 80027ac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	88fa      	ldrh	r2, [r7, #6]
 80027b2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	88fa      	ldrh	r2, [r7, #6]
 80027b8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80027c2:	e042      	b.n	800284a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	3b01      	subs	r3, #1
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027da:	d122      	bne.n	8002822 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	2200      	movs	r2, #0
 80027e4:	2180      	movs	r1, #128	; 0x80
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f000 f84c 	bl	8002884 <UART_WaitOnFlagUntilTimeout>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e042      	b.n	800287c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	881b      	ldrh	r3, [r3, #0]
 80027fe:	461a      	mov	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002808:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d103      	bne.n	800281a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	3302      	adds	r3, #2
 8002816:	60bb      	str	r3, [r7, #8]
 8002818:	e017      	b.n	800284a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	3301      	adds	r3, #1
 800281e:	60bb      	str	r3, [r7, #8]
 8002820:	e013      	b.n	800284a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	2200      	movs	r2, #0
 800282a:	2180      	movs	r1, #128	; 0x80
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f000 f829 	bl	8002884 <UART_WaitOnFlagUntilTimeout>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e01f      	b.n	800287c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	1c5a      	adds	r2, r3, #1
 8002840:	60ba      	str	r2, [r7, #8]
 8002842:	781a      	ldrb	r2, [r3, #0]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800284e:	b29b      	uxth	r3, r3
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1b7      	bne.n	80027c4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	9300      	str	r3, [sp, #0]
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	2200      	movs	r2, #0
 800285c:	2140      	movs	r1, #64	; 0x40
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f000 f810 	bl	8002884 <UART_WaitOnFlagUntilTimeout>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e006      	b.n	800287c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2220      	movs	r2, #32
 8002872:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002876:	2300      	movs	r3, #0
 8002878:	e000      	b.n	800287c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800287a:	2302      	movs	r3, #2
  }
}
 800287c:	4618      	mov	r0, r3
 800287e:	3718      	adds	r7, #24
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	603b      	str	r3, [r7, #0]
 8002890:	4613      	mov	r3, r2
 8002892:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002894:	e02c      	b.n	80028f0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800289c:	d028      	beq.n	80028f0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d007      	beq.n	80028b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80028a4:	f7fe fa70 	bl	8000d88 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d21d      	bcs.n	80028f0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68da      	ldr	r2, [r3, #12]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80028c2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	695a      	ldr	r2, [r3, #20]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f022 0201 	bic.w	r2, r2, #1
 80028d2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2220      	movs	r2, #32
 80028d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2220      	movs	r2, #32
 80028e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e00f      	b.n	8002910 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	4013      	ands	r3, r2
 80028fa:	68ba      	ldr	r2, [r7, #8]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	bf0c      	ite	eq
 8002900:	2301      	moveq	r3, #1
 8002902:	2300      	movne	r3, #0
 8002904:	b2db      	uxtb	r3, r3
 8002906:	461a      	mov	r2, r3
 8002908:	79fb      	ldrb	r3, [r7, #7]
 800290a:	429a      	cmp	r2, r3
 800290c:	d0c3      	beq.n	8002896 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	3710      	adds	r7, #16
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800291c:	b085      	sub	sp, #20
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	68da      	ldr	r2, [r3, #12]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	430a      	orrs	r2, r1
 8002936:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	431a      	orrs	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	69db      	ldr	r3, [r3, #28]
 800294c:	4313      	orrs	r3, r2
 800294e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800295a:	f023 030c 	bic.w	r3, r3, #12
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	6812      	ldr	r2, [r2, #0]
 8002962:	68f9      	ldr	r1, [r7, #12]
 8002964:	430b      	orrs	r3, r1
 8002966:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	699a      	ldr	r2, [r3, #24]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	430a      	orrs	r2, r1
 800297c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002986:	f040 818b 	bne.w	8002ca0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4ac1      	ldr	r2, [pc, #772]	; (8002c94 <UART_SetConfig+0x37c>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d005      	beq.n	80029a0 <UART_SetConfig+0x88>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4abf      	ldr	r2, [pc, #764]	; (8002c98 <UART_SetConfig+0x380>)
 800299a:	4293      	cmp	r3, r2
 800299c:	f040 80bd 	bne.w	8002b1a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80029a0:	f7ff f92c 	bl	8001bfc <HAL_RCC_GetPCLK2Freq>
 80029a4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	461d      	mov	r5, r3
 80029aa:	f04f 0600 	mov.w	r6, #0
 80029ae:	46a8      	mov	r8, r5
 80029b0:	46b1      	mov	r9, r6
 80029b2:	eb18 0308 	adds.w	r3, r8, r8
 80029b6:	eb49 0409 	adc.w	r4, r9, r9
 80029ba:	4698      	mov	r8, r3
 80029bc:	46a1      	mov	r9, r4
 80029be:	eb18 0805 	adds.w	r8, r8, r5
 80029c2:	eb49 0906 	adc.w	r9, r9, r6
 80029c6:	f04f 0100 	mov.w	r1, #0
 80029ca:	f04f 0200 	mov.w	r2, #0
 80029ce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80029d2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80029d6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80029da:	4688      	mov	r8, r1
 80029dc:	4691      	mov	r9, r2
 80029de:	eb18 0005 	adds.w	r0, r8, r5
 80029e2:	eb49 0106 	adc.w	r1, r9, r6
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	461d      	mov	r5, r3
 80029ec:	f04f 0600 	mov.w	r6, #0
 80029f0:	196b      	adds	r3, r5, r5
 80029f2:	eb46 0406 	adc.w	r4, r6, r6
 80029f6:	461a      	mov	r2, r3
 80029f8:	4623      	mov	r3, r4
 80029fa:	f7fd fc41 	bl	8000280 <__aeabi_uldivmod>
 80029fe:	4603      	mov	r3, r0
 8002a00:	460c      	mov	r4, r1
 8002a02:	461a      	mov	r2, r3
 8002a04:	4ba5      	ldr	r3, [pc, #660]	; (8002c9c <UART_SetConfig+0x384>)
 8002a06:	fba3 2302 	umull	r2, r3, r3, r2
 8002a0a:	095b      	lsrs	r3, r3, #5
 8002a0c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	461d      	mov	r5, r3
 8002a14:	f04f 0600 	mov.w	r6, #0
 8002a18:	46a9      	mov	r9, r5
 8002a1a:	46b2      	mov	sl, r6
 8002a1c:	eb19 0309 	adds.w	r3, r9, r9
 8002a20:	eb4a 040a 	adc.w	r4, sl, sl
 8002a24:	4699      	mov	r9, r3
 8002a26:	46a2      	mov	sl, r4
 8002a28:	eb19 0905 	adds.w	r9, r9, r5
 8002a2c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002a30:	f04f 0100 	mov.w	r1, #0
 8002a34:	f04f 0200 	mov.w	r2, #0
 8002a38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a3c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002a40:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a44:	4689      	mov	r9, r1
 8002a46:	4692      	mov	sl, r2
 8002a48:	eb19 0005 	adds.w	r0, r9, r5
 8002a4c:	eb4a 0106 	adc.w	r1, sl, r6
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	461d      	mov	r5, r3
 8002a56:	f04f 0600 	mov.w	r6, #0
 8002a5a:	196b      	adds	r3, r5, r5
 8002a5c:	eb46 0406 	adc.w	r4, r6, r6
 8002a60:	461a      	mov	r2, r3
 8002a62:	4623      	mov	r3, r4
 8002a64:	f7fd fc0c 	bl	8000280 <__aeabi_uldivmod>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	460c      	mov	r4, r1
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	4b8b      	ldr	r3, [pc, #556]	; (8002c9c <UART_SetConfig+0x384>)
 8002a70:	fba3 1302 	umull	r1, r3, r3, r2
 8002a74:	095b      	lsrs	r3, r3, #5
 8002a76:	2164      	movs	r1, #100	; 0x64
 8002a78:	fb01 f303 	mul.w	r3, r1, r3
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	3332      	adds	r3, #50	; 0x32
 8002a82:	4a86      	ldr	r2, [pc, #536]	; (8002c9c <UART_SetConfig+0x384>)
 8002a84:	fba2 2303 	umull	r2, r3, r2, r3
 8002a88:	095b      	lsrs	r3, r3, #5
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a90:	4498      	add	r8, r3
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	461d      	mov	r5, r3
 8002a96:	f04f 0600 	mov.w	r6, #0
 8002a9a:	46a9      	mov	r9, r5
 8002a9c:	46b2      	mov	sl, r6
 8002a9e:	eb19 0309 	adds.w	r3, r9, r9
 8002aa2:	eb4a 040a 	adc.w	r4, sl, sl
 8002aa6:	4699      	mov	r9, r3
 8002aa8:	46a2      	mov	sl, r4
 8002aaa:	eb19 0905 	adds.w	r9, r9, r5
 8002aae:	eb4a 0a06 	adc.w	sl, sl, r6
 8002ab2:	f04f 0100 	mov.w	r1, #0
 8002ab6:	f04f 0200 	mov.w	r2, #0
 8002aba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002abe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ac2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ac6:	4689      	mov	r9, r1
 8002ac8:	4692      	mov	sl, r2
 8002aca:	eb19 0005 	adds.w	r0, r9, r5
 8002ace:	eb4a 0106 	adc.w	r1, sl, r6
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	461d      	mov	r5, r3
 8002ad8:	f04f 0600 	mov.w	r6, #0
 8002adc:	196b      	adds	r3, r5, r5
 8002ade:	eb46 0406 	adc.w	r4, r6, r6
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	4623      	mov	r3, r4
 8002ae6:	f7fd fbcb 	bl	8000280 <__aeabi_uldivmod>
 8002aea:	4603      	mov	r3, r0
 8002aec:	460c      	mov	r4, r1
 8002aee:	461a      	mov	r2, r3
 8002af0:	4b6a      	ldr	r3, [pc, #424]	; (8002c9c <UART_SetConfig+0x384>)
 8002af2:	fba3 1302 	umull	r1, r3, r3, r2
 8002af6:	095b      	lsrs	r3, r3, #5
 8002af8:	2164      	movs	r1, #100	; 0x64
 8002afa:	fb01 f303 	mul.w	r3, r1, r3
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	3332      	adds	r3, #50	; 0x32
 8002b04:	4a65      	ldr	r2, [pc, #404]	; (8002c9c <UART_SetConfig+0x384>)
 8002b06:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0a:	095b      	lsrs	r3, r3, #5
 8002b0c:	f003 0207 	and.w	r2, r3, #7
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4442      	add	r2, r8
 8002b16:	609a      	str	r2, [r3, #8]
 8002b18:	e26f      	b.n	8002ffa <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b1a:	f7ff f85b 	bl	8001bd4 <HAL_RCC_GetPCLK1Freq>
 8002b1e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	461d      	mov	r5, r3
 8002b24:	f04f 0600 	mov.w	r6, #0
 8002b28:	46a8      	mov	r8, r5
 8002b2a:	46b1      	mov	r9, r6
 8002b2c:	eb18 0308 	adds.w	r3, r8, r8
 8002b30:	eb49 0409 	adc.w	r4, r9, r9
 8002b34:	4698      	mov	r8, r3
 8002b36:	46a1      	mov	r9, r4
 8002b38:	eb18 0805 	adds.w	r8, r8, r5
 8002b3c:	eb49 0906 	adc.w	r9, r9, r6
 8002b40:	f04f 0100 	mov.w	r1, #0
 8002b44:	f04f 0200 	mov.w	r2, #0
 8002b48:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002b4c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002b50:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002b54:	4688      	mov	r8, r1
 8002b56:	4691      	mov	r9, r2
 8002b58:	eb18 0005 	adds.w	r0, r8, r5
 8002b5c:	eb49 0106 	adc.w	r1, r9, r6
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	461d      	mov	r5, r3
 8002b66:	f04f 0600 	mov.w	r6, #0
 8002b6a:	196b      	adds	r3, r5, r5
 8002b6c:	eb46 0406 	adc.w	r4, r6, r6
 8002b70:	461a      	mov	r2, r3
 8002b72:	4623      	mov	r3, r4
 8002b74:	f7fd fb84 	bl	8000280 <__aeabi_uldivmod>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	460c      	mov	r4, r1
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	4b47      	ldr	r3, [pc, #284]	; (8002c9c <UART_SetConfig+0x384>)
 8002b80:	fba3 2302 	umull	r2, r3, r3, r2
 8002b84:	095b      	lsrs	r3, r3, #5
 8002b86:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	461d      	mov	r5, r3
 8002b8e:	f04f 0600 	mov.w	r6, #0
 8002b92:	46a9      	mov	r9, r5
 8002b94:	46b2      	mov	sl, r6
 8002b96:	eb19 0309 	adds.w	r3, r9, r9
 8002b9a:	eb4a 040a 	adc.w	r4, sl, sl
 8002b9e:	4699      	mov	r9, r3
 8002ba0:	46a2      	mov	sl, r4
 8002ba2:	eb19 0905 	adds.w	r9, r9, r5
 8002ba6:	eb4a 0a06 	adc.w	sl, sl, r6
 8002baa:	f04f 0100 	mov.w	r1, #0
 8002bae:	f04f 0200 	mov.w	r2, #0
 8002bb2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bb6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002bba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002bbe:	4689      	mov	r9, r1
 8002bc0:	4692      	mov	sl, r2
 8002bc2:	eb19 0005 	adds.w	r0, r9, r5
 8002bc6:	eb4a 0106 	adc.w	r1, sl, r6
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	461d      	mov	r5, r3
 8002bd0:	f04f 0600 	mov.w	r6, #0
 8002bd4:	196b      	adds	r3, r5, r5
 8002bd6:	eb46 0406 	adc.w	r4, r6, r6
 8002bda:	461a      	mov	r2, r3
 8002bdc:	4623      	mov	r3, r4
 8002bde:	f7fd fb4f 	bl	8000280 <__aeabi_uldivmod>
 8002be2:	4603      	mov	r3, r0
 8002be4:	460c      	mov	r4, r1
 8002be6:	461a      	mov	r2, r3
 8002be8:	4b2c      	ldr	r3, [pc, #176]	; (8002c9c <UART_SetConfig+0x384>)
 8002bea:	fba3 1302 	umull	r1, r3, r3, r2
 8002bee:	095b      	lsrs	r3, r3, #5
 8002bf0:	2164      	movs	r1, #100	; 0x64
 8002bf2:	fb01 f303 	mul.w	r3, r1, r3
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	3332      	adds	r3, #50	; 0x32
 8002bfc:	4a27      	ldr	r2, [pc, #156]	; (8002c9c <UART_SetConfig+0x384>)
 8002bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002c02:	095b      	lsrs	r3, r3, #5
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c0a:	4498      	add	r8, r3
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	461d      	mov	r5, r3
 8002c10:	f04f 0600 	mov.w	r6, #0
 8002c14:	46a9      	mov	r9, r5
 8002c16:	46b2      	mov	sl, r6
 8002c18:	eb19 0309 	adds.w	r3, r9, r9
 8002c1c:	eb4a 040a 	adc.w	r4, sl, sl
 8002c20:	4699      	mov	r9, r3
 8002c22:	46a2      	mov	sl, r4
 8002c24:	eb19 0905 	adds.w	r9, r9, r5
 8002c28:	eb4a 0a06 	adc.w	sl, sl, r6
 8002c2c:	f04f 0100 	mov.w	r1, #0
 8002c30:	f04f 0200 	mov.w	r2, #0
 8002c34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c38:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c3c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c40:	4689      	mov	r9, r1
 8002c42:	4692      	mov	sl, r2
 8002c44:	eb19 0005 	adds.w	r0, r9, r5
 8002c48:	eb4a 0106 	adc.w	r1, sl, r6
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	461d      	mov	r5, r3
 8002c52:	f04f 0600 	mov.w	r6, #0
 8002c56:	196b      	adds	r3, r5, r5
 8002c58:	eb46 0406 	adc.w	r4, r6, r6
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	4623      	mov	r3, r4
 8002c60:	f7fd fb0e 	bl	8000280 <__aeabi_uldivmod>
 8002c64:	4603      	mov	r3, r0
 8002c66:	460c      	mov	r4, r1
 8002c68:	461a      	mov	r2, r3
 8002c6a:	4b0c      	ldr	r3, [pc, #48]	; (8002c9c <UART_SetConfig+0x384>)
 8002c6c:	fba3 1302 	umull	r1, r3, r3, r2
 8002c70:	095b      	lsrs	r3, r3, #5
 8002c72:	2164      	movs	r1, #100	; 0x64
 8002c74:	fb01 f303 	mul.w	r3, r1, r3
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	3332      	adds	r3, #50	; 0x32
 8002c7e:	4a07      	ldr	r2, [pc, #28]	; (8002c9c <UART_SetConfig+0x384>)
 8002c80:	fba2 2303 	umull	r2, r3, r2, r3
 8002c84:	095b      	lsrs	r3, r3, #5
 8002c86:	f003 0207 	and.w	r2, r3, #7
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4442      	add	r2, r8
 8002c90:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002c92:	e1b2      	b.n	8002ffa <UART_SetConfig+0x6e2>
 8002c94:	40011000 	.word	0x40011000
 8002c98:	40011400 	.word	0x40011400
 8002c9c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4ad7      	ldr	r2, [pc, #860]	; (8003004 <UART_SetConfig+0x6ec>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d005      	beq.n	8002cb6 <UART_SetConfig+0x39e>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4ad6      	ldr	r2, [pc, #856]	; (8003008 <UART_SetConfig+0x6f0>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	f040 80d1 	bne.w	8002e58 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002cb6:	f7fe ffa1 	bl	8001bfc <HAL_RCC_GetPCLK2Freq>
 8002cba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	469a      	mov	sl, r3
 8002cc0:	f04f 0b00 	mov.w	fp, #0
 8002cc4:	46d0      	mov	r8, sl
 8002cc6:	46d9      	mov	r9, fp
 8002cc8:	eb18 0308 	adds.w	r3, r8, r8
 8002ccc:	eb49 0409 	adc.w	r4, r9, r9
 8002cd0:	4698      	mov	r8, r3
 8002cd2:	46a1      	mov	r9, r4
 8002cd4:	eb18 080a 	adds.w	r8, r8, sl
 8002cd8:	eb49 090b 	adc.w	r9, r9, fp
 8002cdc:	f04f 0100 	mov.w	r1, #0
 8002ce0:	f04f 0200 	mov.w	r2, #0
 8002ce4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002ce8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002cec:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002cf0:	4688      	mov	r8, r1
 8002cf2:	4691      	mov	r9, r2
 8002cf4:	eb1a 0508 	adds.w	r5, sl, r8
 8002cf8:	eb4b 0609 	adc.w	r6, fp, r9
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	4619      	mov	r1, r3
 8002d02:	f04f 0200 	mov.w	r2, #0
 8002d06:	f04f 0300 	mov.w	r3, #0
 8002d0a:	f04f 0400 	mov.w	r4, #0
 8002d0e:	0094      	lsls	r4, r2, #2
 8002d10:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002d14:	008b      	lsls	r3, r1, #2
 8002d16:	461a      	mov	r2, r3
 8002d18:	4623      	mov	r3, r4
 8002d1a:	4628      	mov	r0, r5
 8002d1c:	4631      	mov	r1, r6
 8002d1e:	f7fd faaf 	bl	8000280 <__aeabi_uldivmod>
 8002d22:	4603      	mov	r3, r0
 8002d24:	460c      	mov	r4, r1
 8002d26:	461a      	mov	r2, r3
 8002d28:	4bb8      	ldr	r3, [pc, #736]	; (800300c <UART_SetConfig+0x6f4>)
 8002d2a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d2e:	095b      	lsrs	r3, r3, #5
 8002d30:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	469b      	mov	fp, r3
 8002d38:	f04f 0c00 	mov.w	ip, #0
 8002d3c:	46d9      	mov	r9, fp
 8002d3e:	46e2      	mov	sl, ip
 8002d40:	eb19 0309 	adds.w	r3, r9, r9
 8002d44:	eb4a 040a 	adc.w	r4, sl, sl
 8002d48:	4699      	mov	r9, r3
 8002d4a:	46a2      	mov	sl, r4
 8002d4c:	eb19 090b 	adds.w	r9, r9, fp
 8002d50:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002d54:	f04f 0100 	mov.w	r1, #0
 8002d58:	f04f 0200 	mov.w	r2, #0
 8002d5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d60:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d64:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d68:	4689      	mov	r9, r1
 8002d6a:	4692      	mov	sl, r2
 8002d6c:	eb1b 0509 	adds.w	r5, fp, r9
 8002d70:	eb4c 060a 	adc.w	r6, ip, sl
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	4619      	mov	r1, r3
 8002d7a:	f04f 0200 	mov.w	r2, #0
 8002d7e:	f04f 0300 	mov.w	r3, #0
 8002d82:	f04f 0400 	mov.w	r4, #0
 8002d86:	0094      	lsls	r4, r2, #2
 8002d88:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002d8c:	008b      	lsls	r3, r1, #2
 8002d8e:	461a      	mov	r2, r3
 8002d90:	4623      	mov	r3, r4
 8002d92:	4628      	mov	r0, r5
 8002d94:	4631      	mov	r1, r6
 8002d96:	f7fd fa73 	bl	8000280 <__aeabi_uldivmod>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	460c      	mov	r4, r1
 8002d9e:	461a      	mov	r2, r3
 8002da0:	4b9a      	ldr	r3, [pc, #616]	; (800300c <UART_SetConfig+0x6f4>)
 8002da2:	fba3 1302 	umull	r1, r3, r3, r2
 8002da6:	095b      	lsrs	r3, r3, #5
 8002da8:	2164      	movs	r1, #100	; 0x64
 8002daa:	fb01 f303 	mul.w	r3, r1, r3
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	011b      	lsls	r3, r3, #4
 8002db2:	3332      	adds	r3, #50	; 0x32
 8002db4:	4a95      	ldr	r2, [pc, #596]	; (800300c <UART_SetConfig+0x6f4>)
 8002db6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dba:	095b      	lsrs	r3, r3, #5
 8002dbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dc0:	4498      	add	r8, r3
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	469b      	mov	fp, r3
 8002dc6:	f04f 0c00 	mov.w	ip, #0
 8002dca:	46d9      	mov	r9, fp
 8002dcc:	46e2      	mov	sl, ip
 8002dce:	eb19 0309 	adds.w	r3, r9, r9
 8002dd2:	eb4a 040a 	adc.w	r4, sl, sl
 8002dd6:	4699      	mov	r9, r3
 8002dd8:	46a2      	mov	sl, r4
 8002dda:	eb19 090b 	adds.w	r9, r9, fp
 8002dde:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002de2:	f04f 0100 	mov.w	r1, #0
 8002de6:	f04f 0200 	mov.w	r2, #0
 8002dea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002dee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002df2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002df6:	4689      	mov	r9, r1
 8002df8:	4692      	mov	sl, r2
 8002dfa:	eb1b 0509 	adds.w	r5, fp, r9
 8002dfe:	eb4c 060a 	adc.w	r6, ip, sl
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	4619      	mov	r1, r3
 8002e08:	f04f 0200 	mov.w	r2, #0
 8002e0c:	f04f 0300 	mov.w	r3, #0
 8002e10:	f04f 0400 	mov.w	r4, #0
 8002e14:	0094      	lsls	r4, r2, #2
 8002e16:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002e1a:	008b      	lsls	r3, r1, #2
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	4623      	mov	r3, r4
 8002e20:	4628      	mov	r0, r5
 8002e22:	4631      	mov	r1, r6
 8002e24:	f7fd fa2c 	bl	8000280 <__aeabi_uldivmod>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	460c      	mov	r4, r1
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	4b77      	ldr	r3, [pc, #476]	; (800300c <UART_SetConfig+0x6f4>)
 8002e30:	fba3 1302 	umull	r1, r3, r3, r2
 8002e34:	095b      	lsrs	r3, r3, #5
 8002e36:	2164      	movs	r1, #100	; 0x64
 8002e38:	fb01 f303 	mul.w	r3, r1, r3
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	011b      	lsls	r3, r3, #4
 8002e40:	3332      	adds	r3, #50	; 0x32
 8002e42:	4a72      	ldr	r2, [pc, #456]	; (800300c <UART_SetConfig+0x6f4>)
 8002e44:	fba2 2303 	umull	r2, r3, r2, r3
 8002e48:	095b      	lsrs	r3, r3, #5
 8002e4a:	f003 020f 	and.w	r2, r3, #15
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4442      	add	r2, r8
 8002e54:	609a      	str	r2, [r3, #8]
 8002e56:	e0d0      	b.n	8002ffa <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e58:	f7fe febc 	bl	8001bd4 <HAL_RCC_GetPCLK1Freq>
 8002e5c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	469a      	mov	sl, r3
 8002e62:	f04f 0b00 	mov.w	fp, #0
 8002e66:	46d0      	mov	r8, sl
 8002e68:	46d9      	mov	r9, fp
 8002e6a:	eb18 0308 	adds.w	r3, r8, r8
 8002e6e:	eb49 0409 	adc.w	r4, r9, r9
 8002e72:	4698      	mov	r8, r3
 8002e74:	46a1      	mov	r9, r4
 8002e76:	eb18 080a 	adds.w	r8, r8, sl
 8002e7a:	eb49 090b 	adc.w	r9, r9, fp
 8002e7e:	f04f 0100 	mov.w	r1, #0
 8002e82:	f04f 0200 	mov.w	r2, #0
 8002e86:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002e8a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002e8e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002e92:	4688      	mov	r8, r1
 8002e94:	4691      	mov	r9, r2
 8002e96:	eb1a 0508 	adds.w	r5, sl, r8
 8002e9a:	eb4b 0609 	adc.w	r6, fp, r9
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	f04f 0200 	mov.w	r2, #0
 8002ea8:	f04f 0300 	mov.w	r3, #0
 8002eac:	f04f 0400 	mov.w	r4, #0
 8002eb0:	0094      	lsls	r4, r2, #2
 8002eb2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002eb6:	008b      	lsls	r3, r1, #2
 8002eb8:	461a      	mov	r2, r3
 8002eba:	4623      	mov	r3, r4
 8002ebc:	4628      	mov	r0, r5
 8002ebe:	4631      	mov	r1, r6
 8002ec0:	f7fd f9de 	bl	8000280 <__aeabi_uldivmod>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	460c      	mov	r4, r1
 8002ec8:	461a      	mov	r2, r3
 8002eca:	4b50      	ldr	r3, [pc, #320]	; (800300c <UART_SetConfig+0x6f4>)
 8002ecc:	fba3 2302 	umull	r2, r3, r3, r2
 8002ed0:	095b      	lsrs	r3, r3, #5
 8002ed2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	469b      	mov	fp, r3
 8002eda:	f04f 0c00 	mov.w	ip, #0
 8002ede:	46d9      	mov	r9, fp
 8002ee0:	46e2      	mov	sl, ip
 8002ee2:	eb19 0309 	adds.w	r3, r9, r9
 8002ee6:	eb4a 040a 	adc.w	r4, sl, sl
 8002eea:	4699      	mov	r9, r3
 8002eec:	46a2      	mov	sl, r4
 8002eee:	eb19 090b 	adds.w	r9, r9, fp
 8002ef2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002ef6:	f04f 0100 	mov.w	r1, #0
 8002efa:	f04f 0200 	mov.w	r2, #0
 8002efe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f02:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f06:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f0a:	4689      	mov	r9, r1
 8002f0c:	4692      	mov	sl, r2
 8002f0e:	eb1b 0509 	adds.w	r5, fp, r9
 8002f12:	eb4c 060a 	adc.w	r6, ip, sl
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	f04f 0200 	mov.w	r2, #0
 8002f20:	f04f 0300 	mov.w	r3, #0
 8002f24:	f04f 0400 	mov.w	r4, #0
 8002f28:	0094      	lsls	r4, r2, #2
 8002f2a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002f2e:	008b      	lsls	r3, r1, #2
 8002f30:	461a      	mov	r2, r3
 8002f32:	4623      	mov	r3, r4
 8002f34:	4628      	mov	r0, r5
 8002f36:	4631      	mov	r1, r6
 8002f38:	f7fd f9a2 	bl	8000280 <__aeabi_uldivmod>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	460c      	mov	r4, r1
 8002f40:	461a      	mov	r2, r3
 8002f42:	4b32      	ldr	r3, [pc, #200]	; (800300c <UART_SetConfig+0x6f4>)
 8002f44:	fba3 1302 	umull	r1, r3, r3, r2
 8002f48:	095b      	lsrs	r3, r3, #5
 8002f4a:	2164      	movs	r1, #100	; 0x64
 8002f4c:	fb01 f303 	mul.w	r3, r1, r3
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	011b      	lsls	r3, r3, #4
 8002f54:	3332      	adds	r3, #50	; 0x32
 8002f56:	4a2d      	ldr	r2, [pc, #180]	; (800300c <UART_SetConfig+0x6f4>)
 8002f58:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5c:	095b      	lsrs	r3, r3, #5
 8002f5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f62:	4498      	add	r8, r3
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	469b      	mov	fp, r3
 8002f68:	f04f 0c00 	mov.w	ip, #0
 8002f6c:	46d9      	mov	r9, fp
 8002f6e:	46e2      	mov	sl, ip
 8002f70:	eb19 0309 	adds.w	r3, r9, r9
 8002f74:	eb4a 040a 	adc.w	r4, sl, sl
 8002f78:	4699      	mov	r9, r3
 8002f7a:	46a2      	mov	sl, r4
 8002f7c:	eb19 090b 	adds.w	r9, r9, fp
 8002f80:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002f84:	f04f 0100 	mov.w	r1, #0
 8002f88:	f04f 0200 	mov.w	r2, #0
 8002f8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f90:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f94:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f98:	4689      	mov	r9, r1
 8002f9a:	4692      	mov	sl, r2
 8002f9c:	eb1b 0509 	adds.w	r5, fp, r9
 8002fa0:	eb4c 060a 	adc.w	r6, ip, sl
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	4619      	mov	r1, r3
 8002faa:	f04f 0200 	mov.w	r2, #0
 8002fae:	f04f 0300 	mov.w	r3, #0
 8002fb2:	f04f 0400 	mov.w	r4, #0
 8002fb6:	0094      	lsls	r4, r2, #2
 8002fb8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002fbc:	008b      	lsls	r3, r1, #2
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	4623      	mov	r3, r4
 8002fc2:	4628      	mov	r0, r5
 8002fc4:	4631      	mov	r1, r6
 8002fc6:	f7fd f95b 	bl	8000280 <__aeabi_uldivmod>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	460c      	mov	r4, r1
 8002fce:	461a      	mov	r2, r3
 8002fd0:	4b0e      	ldr	r3, [pc, #56]	; (800300c <UART_SetConfig+0x6f4>)
 8002fd2:	fba3 1302 	umull	r1, r3, r3, r2
 8002fd6:	095b      	lsrs	r3, r3, #5
 8002fd8:	2164      	movs	r1, #100	; 0x64
 8002fda:	fb01 f303 	mul.w	r3, r1, r3
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	011b      	lsls	r3, r3, #4
 8002fe2:	3332      	adds	r3, #50	; 0x32
 8002fe4:	4a09      	ldr	r2, [pc, #36]	; (800300c <UART_SetConfig+0x6f4>)
 8002fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fea:	095b      	lsrs	r3, r3, #5
 8002fec:	f003 020f 	and.w	r2, r3, #15
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4442      	add	r2, r8
 8002ff6:	609a      	str	r2, [r3, #8]
}
 8002ff8:	e7ff      	b.n	8002ffa <UART_SetConfig+0x6e2>
 8002ffa:	bf00      	nop
 8002ffc:	3714      	adds	r7, #20
 8002ffe:	46bd      	mov	sp, r7
 8003000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003004:	40011000 	.word	0x40011000
 8003008:	40011400 	.word	0x40011400
 800300c:	51eb851f 	.word	0x51eb851f

08003010 <__errno>:
 8003010:	4b01      	ldr	r3, [pc, #4]	; (8003018 <__errno+0x8>)
 8003012:	6818      	ldr	r0, [r3, #0]
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	2000000c 	.word	0x2000000c

0800301c <__libc_init_array>:
 800301c:	b570      	push	{r4, r5, r6, lr}
 800301e:	4e0d      	ldr	r6, [pc, #52]	; (8003054 <__libc_init_array+0x38>)
 8003020:	4c0d      	ldr	r4, [pc, #52]	; (8003058 <__libc_init_array+0x3c>)
 8003022:	1ba4      	subs	r4, r4, r6
 8003024:	10a4      	asrs	r4, r4, #2
 8003026:	2500      	movs	r5, #0
 8003028:	42a5      	cmp	r5, r4
 800302a:	d109      	bne.n	8003040 <__libc_init_array+0x24>
 800302c:	4e0b      	ldr	r6, [pc, #44]	; (800305c <__libc_init_array+0x40>)
 800302e:	4c0c      	ldr	r4, [pc, #48]	; (8003060 <__libc_init_array+0x44>)
 8003030:	f000 fc26 	bl	8003880 <_init>
 8003034:	1ba4      	subs	r4, r4, r6
 8003036:	10a4      	asrs	r4, r4, #2
 8003038:	2500      	movs	r5, #0
 800303a:	42a5      	cmp	r5, r4
 800303c:	d105      	bne.n	800304a <__libc_init_array+0x2e>
 800303e:	bd70      	pop	{r4, r5, r6, pc}
 8003040:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003044:	4798      	blx	r3
 8003046:	3501      	adds	r5, #1
 8003048:	e7ee      	b.n	8003028 <__libc_init_array+0xc>
 800304a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800304e:	4798      	blx	r3
 8003050:	3501      	adds	r5, #1
 8003052:	e7f2      	b.n	800303a <__libc_init_array+0x1e>
 8003054:	08003940 	.word	0x08003940
 8003058:	08003940 	.word	0x08003940
 800305c:	08003940 	.word	0x08003940
 8003060:	08003944 	.word	0x08003944

08003064 <memset>:
 8003064:	4402      	add	r2, r0
 8003066:	4603      	mov	r3, r0
 8003068:	4293      	cmp	r3, r2
 800306a:	d100      	bne.n	800306e <memset+0xa>
 800306c:	4770      	bx	lr
 800306e:	f803 1b01 	strb.w	r1, [r3], #1
 8003072:	e7f9      	b.n	8003068 <memset+0x4>

08003074 <siprintf>:
 8003074:	b40e      	push	{r1, r2, r3}
 8003076:	b500      	push	{lr}
 8003078:	b09c      	sub	sp, #112	; 0x70
 800307a:	ab1d      	add	r3, sp, #116	; 0x74
 800307c:	9002      	str	r0, [sp, #8]
 800307e:	9006      	str	r0, [sp, #24]
 8003080:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003084:	4809      	ldr	r0, [pc, #36]	; (80030ac <siprintf+0x38>)
 8003086:	9107      	str	r1, [sp, #28]
 8003088:	9104      	str	r1, [sp, #16]
 800308a:	4909      	ldr	r1, [pc, #36]	; (80030b0 <siprintf+0x3c>)
 800308c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003090:	9105      	str	r1, [sp, #20]
 8003092:	6800      	ldr	r0, [r0, #0]
 8003094:	9301      	str	r3, [sp, #4]
 8003096:	a902      	add	r1, sp, #8
 8003098:	f000 f866 	bl	8003168 <_svfiprintf_r>
 800309c:	9b02      	ldr	r3, [sp, #8]
 800309e:	2200      	movs	r2, #0
 80030a0:	701a      	strb	r2, [r3, #0]
 80030a2:	b01c      	add	sp, #112	; 0x70
 80030a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80030a8:	b003      	add	sp, #12
 80030aa:	4770      	bx	lr
 80030ac:	2000000c 	.word	0x2000000c
 80030b0:	ffff0208 	.word	0xffff0208

080030b4 <__ssputs_r>:
 80030b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030b8:	688e      	ldr	r6, [r1, #8]
 80030ba:	429e      	cmp	r6, r3
 80030bc:	4682      	mov	sl, r0
 80030be:	460c      	mov	r4, r1
 80030c0:	4690      	mov	r8, r2
 80030c2:	4699      	mov	r9, r3
 80030c4:	d837      	bhi.n	8003136 <__ssputs_r+0x82>
 80030c6:	898a      	ldrh	r2, [r1, #12]
 80030c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80030cc:	d031      	beq.n	8003132 <__ssputs_r+0x7e>
 80030ce:	6825      	ldr	r5, [r4, #0]
 80030d0:	6909      	ldr	r1, [r1, #16]
 80030d2:	1a6f      	subs	r7, r5, r1
 80030d4:	6965      	ldr	r5, [r4, #20]
 80030d6:	2302      	movs	r3, #2
 80030d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80030dc:	fb95 f5f3 	sdiv	r5, r5, r3
 80030e0:	f109 0301 	add.w	r3, r9, #1
 80030e4:	443b      	add	r3, r7
 80030e6:	429d      	cmp	r5, r3
 80030e8:	bf38      	it	cc
 80030ea:	461d      	movcc	r5, r3
 80030ec:	0553      	lsls	r3, r2, #21
 80030ee:	d530      	bpl.n	8003152 <__ssputs_r+0x9e>
 80030f0:	4629      	mov	r1, r5
 80030f2:	f000 fb2b 	bl	800374c <_malloc_r>
 80030f6:	4606      	mov	r6, r0
 80030f8:	b950      	cbnz	r0, 8003110 <__ssputs_r+0x5c>
 80030fa:	230c      	movs	r3, #12
 80030fc:	f8ca 3000 	str.w	r3, [sl]
 8003100:	89a3      	ldrh	r3, [r4, #12]
 8003102:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003106:	81a3      	strh	r3, [r4, #12]
 8003108:	f04f 30ff 	mov.w	r0, #4294967295
 800310c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003110:	463a      	mov	r2, r7
 8003112:	6921      	ldr	r1, [r4, #16]
 8003114:	f000 faa8 	bl	8003668 <memcpy>
 8003118:	89a3      	ldrh	r3, [r4, #12]
 800311a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800311e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003122:	81a3      	strh	r3, [r4, #12]
 8003124:	6126      	str	r6, [r4, #16]
 8003126:	6165      	str	r5, [r4, #20]
 8003128:	443e      	add	r6, r7
 800312a:	1bed      	subs	r5, r5, r7
 800312c:	6026      	str	r6, [r4, #0]
 800312e:	60a5      	str	r5, [r4, #8]
 8003130:	464e      	mov	r6, r9
 8003132:	454e      	cmp	r6, r9
 8003134:	d900      	bls.n	8003138 <__ssputs_r+0x84>
 8003136:	464e      	mov	r6, r9
 8003138:	4632      	mov	r2, r6
 800313a:	4641      	mov	r1, r8
 800313c:	6820      	ldr	r0, [r4, #0]
 800313e:	f000 fa9e 	bl	800367e <memmove>
 8003142:	68a3      	ldr	r3, [r4, #8]
 8003144:	1b9b      	subs	r3, r3, r6
 8003146:	60a3      	str	r3, [r4, #8]
 8003148:	6823      	ldr	r3, [r4, #0]
 800314a:	441e      	add	r6, r3
 800314c:	6026      	str	r6, [r4, #0]
 800314e:	2000      	movs	r0, #0
 8003150:	e7dc      	b.n	800310c <__ssputs_r+0x58>
 8003152:	462a      	mov	r2, r5
 8003154:	f000 fb54 	bl	8003800 <_realloc_r>
 8003158:	4606      	mov	r6, r0
 800315a:	2800      	cmp	r0, #0
 800315c:	d1e2      	bne.n	8003124 <__ssputs_r+0x70>
 800315e:	6921      	ldr	r1, [r4, #16]
 8003160:	4650      	mov	r0, sl
 8003162:	f000 faa5 	bl	80036b0 <_free_r>
 8003166:	e7c8      	b.n	80030fa <__ssputs_r+0x46>

08003168 <_svfiprintf_r>:
 8003168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800316c:	461d      	mov	r5, r3
 800316e:	898b      	ldrh	r3, [r1, #12]
 8003170:	061f      	lsls	r7, r3, #24
 8003172:	b09d      	sub	sp, #116	; 0x74
 8003174:	4680      	mov	r8, r0
 8003176:	460c      	mov	r4, r1
 8003178:	4616      	mov	r6, r2
 800317a:	d50f      	bpl.n	800319c <_svfiprintf_r+0x34>
 800317c:	690b      	ldr	r3, [r1, #16]
 800317e:	b96b      	cbnz	r3, 800319c <_svfiprintf_r+0x34>
 8003180:	2140      	movs	r1, #64	; 0x40
 8003182:	f000 fae3 	bl	800374c <_malloc_r>
 8003186:	6020      	str	r0, [r4, #0]
 8003188:	6120      	str	r0, [r4, #16]
 800318a:	b928      	cbnz	r0, 8003198 <_svfiprintf_r+0x30>
 800318c:	230c      	movs	r3, #12
 800318e:	f8c8 3000 	str.w	r3, [r8]
 8003192:	f04f 30ff 	mov.w	r0, #4294967295
 8003196:	e0c8      	b.n	800332a <_svfiprintf_r+0x1c2>
 8003198:	2340      	movs	r3, #64	; 0x40
 800319a:	6163      	str	r3, [r4, #20]
 800319c:	2300      	movs	r3, #0
 800319e:	9309      	str	r3, [sp, #36]	; 0x24
 80031a0:	2320      	movs	r3, #32
 80031a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80031a6:	2330      	movs	r3, #48	; 0x30
 80031a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80031ac:	9503      	str	r5, [sp, #12]
 80031ae:	f04f 0b01 	mov.w	fp, #1
 80031b2:	4637      	mov	r7, r6
 80031b4:	463d      	mov	r5, r7
 80031b6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80031ba:	b10b      	cbz	r3, 80031c0 <_svfiprintf_r+0x58>
 80031bc:	2b25      	cmp	r3, #37	; 0x25
 80031be:	d13e      	bne.n	800323e <_svfiprintf_r+0xd6>
 80031c0:	ebb7 0a06 	subs.w	sl, r7, r6
 80031c4:	d00b      	beq.n	80031de <_svfiprintf_r+0x76>
 80031c6:	4653      	mov	r3, sl
 80031c8:	4632      	mov	r2, r6
 80031ca:	4621      	mov	r1, r4
 80031cc:	4640      	mov	r0, r8
 80031ce:	f7ff ff71 	bl	80030b4 <__ssputs_r>
 80031d2:	3001      	adds	r0, #1
 80031d4:	f000 80a4 	beq.w	8003320 <_svfiprintf_r+0x1b8>
 80031d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031da:	4453      	add	r3, sl
 80031dc:	9309      	str	r3, [sp, #36]	; 0x24
 80031de:	783b      	ldrb	r3, [r7, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f000 809d 	beq.w	8003320 <_svfiprintf_r+0x1b8>
 80031e6:	2300      	movs	r3, #0
 80031e8:	f04f 32ff 	mov.w	r2, #4294967295
 80031ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80031f0:	9304      	str	r3, [sp, #16]
 80031f2:	9307      	str	r3, [sp, #28]
 80031f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80031f8:	931a      	str	r3, [sp, #104]	; 0x68
 80031fa:	462f      	mov	r7, r5
 80031fc:	2205      	movs	r2, #5
 80031fe:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003202:	4850      	ldr	r0, [pc, #320]	; (8003344 <_svfiprintf_r+0x1dc>)
 8003204:	f7fc ffec 	bl	80001e0 <memchr>
 8003208:	9b04      	ldr	r3, [sp, #16]
 800320a:	b9d0      	cbnz	r0, 8003242 <_svfiprintf_r+0xda>
 800320c:	06d9      	lsls	r1, r3, #27
 800320e:	bf44      	itt	mi
 8003210:	2220      	movmi	r2, #32
 8003212:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003216:	071a      	lsls	r2, r3, #28
 8003218:	bf44      	itt	mi
 800321a:	222b      	movmi	r2, #43	; 0x2b
 800321c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003220:	782a      	ldrb	r2, [r5, #0]
 8003222:	2a2a      	cmp	r2, #42	; 0x2a
 8003224:	d015      	beq.n	8003252 <_svfiprintf_r+0xea>
 8003226:	9a07      	ldr	r2, [sp, #28]
 8003228:	462f      	mov	r7, r5
 800322a:	2000      	movs	r0, #0
 800322c:	250a      	movs	r5, #10
 800322e:	4639      	mov	r1, r7
 8003230:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003234:	3b30      	subs	r3, #48	; 0x30
 8003236:	2b09      	cmp	r3, #9
 8003238:	d94d      	bls.n	80032d6 <_svfiprintf_r+0x16e>
 800323a:	b1b8      	cbz	r0, 800326c <_svfiprintf_r+0x104>
 800323c:	e00f      	b.n	800325e <_svfiprintf_r+0xf6>
 800323e:	462f      	mov	r7, r5
 8003240:	e7b8      	b.n	80031b4 <_svfiprintf_r+0x4c>
 8003242:	4a40      	ldr	r2, [pc, #256]	; (8003344 <_svfiprintf_r+0x1dc>)
 8003244:	1a80      	subs	r0, r0, r2
 8003246:	fa0b f000 	lsl.w	r0, fp, r0
 800324a:	4318      	orrs	r0, r3
 800324c:	9004      	str	r0, [sp, #16]
 800324e:	463d      	mov	r5, r7
 8003250:	e7d3      	b.n	80031fa <_svfiprintf_r+0x92>
 8003252:	9a03      	ldr	r2, [sp, #12]
 8003254:	1d11      	adds	r1, r2, #4
 8003256:	6812      	ldr	r2, [r2, #0]
 8003258:	9103      	str	r1, [sp, #12]
 800325a:	2a00      	cmp	r2, #0
 800325c:	db01      	blt.n	8003262 <_svfiprintf_r+0xfa>
 800325e:	9207      	str	r2, [sp, #28]
 8003260:	e004      	b.n	800326c <_svfiprintf_r+0x104>
 8003262:	4252      	negs	r2, r2
 8003264:	f043 0302 	orr.w	r3, r3, #2
 8003268:	9207      	str	r2, [sp, #28]
 800326a:	9304      	str	r3, [sp, #16]
 800326c:	783b      	ldrb	r3, [r7, #0]
 800326e:	2b2e      	cmp	r3, #46	; 0x2e
 8003270:	d10c      	bne.n	800328c <_svfiprintf_r+0x124>
 8003272:	787b      	ldrb	r3, [r7, #1]
 8003274:	2b2a      	cmp	r3, #42	; 0x2a
 8003276:	d133      	bne.n	80032e0 <_svfiprintf_r+0x178>
 8003278:	9b03      	ldr	r3, [sp, #12]
 800327a:	1d1a      	adds	r2, r3, #4
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	9203      	str	r2, [sp, #12]
 8003280:	2b00      	cmp	r3, #0
 8003282:	bfb8      	it	lt
 8003284:	f04f 33ff 	movlt.w	r3, #4294967295
 8003288:	3702      	adds	r7, #2
 800328a:	9305      	str	r3, [sp, #20]
 800328c:	4d2e      	ldr	r5, [pc, #184]	; (8003348 <_svfiprintf_r+0x1e0>)
 800328e:	7839      	ldrb	r1, [r7, #0]
 8003290:	2203      	movs	r2, #3
 8003292:	4628      	mov	r0, r5
 8003294:	f7fc ffa4 	bl	80001e0 <memchr>
 8003298:	b138      	cbz	r0, 80032aa <_svfiprintf_r+0x142>
 800329a:	2340      	movs	r3, #64	; 0x40
 800329c:	1b40      	subs	r0, r0, r5
 800329e:	fa03 f000 	lsl.w	r0, r3, r0
 80032a2:	9b04      	ldr	r3, [sp, #16]
 80032a4:	4303      	orrs	r3, r0
 80032a6:	3701      	adds	r7, #1
 80032a8:	9304      	str	r3, [sp, #16]
 80032aa:	7839      	ldrb	r1, [r7, #0]
 80032ac:	4827      	ldr	r0, [pc, #156]	; (800334c <_svfiprintf_r+0x1e4>)
 80032ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80032b2:	2206      	movs	r2, #6
 80032b4:	1c7e      	adds	r6, r7, #1
 80032b6:	f7fc ff93 	bl	80001e0 <memchr>
 80032ba:	2800      	cmp	r0, #0
 80032bc:	d038      	beq.n	8003330 <_svfiprintf_r+0x1c8>
 80032be:	4b24      	ldr	r3, [pc, #144]	; (8003350 <_svfiprintf_r+0x1e8>)
 80032c0:	bb13      	cbnz	r3, 8003308 <_svfiprintf_r+0x1a0>
 80032c2:	9b03      	ldr	r3, [sp, #12]
 80032c4:	3307      	adds	r3, #7
 80032c6:	f023 0307 	bic.w	r3, r3, #7
 80032ca:	3308      	adds	r3, #8
 80032cc:	9303      	str	r3, [sp, #12]
 80032ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032d0:	444b      	add	r3, r9
 80032d2:	9309      	str	r3, [sp, #36]	; 0x24
 80032d4:	e76d      	b.n	80031b2 <_svfiprintf_r+0x4a>
 80032d6:	fb05 3202 	mla	r2, r5, r2, r3
 80032da:	2001      	movs	r0, #1
 80032dc:	460f      	mov	r7, r1
 80032de:	e7a6      	b.n	800322e <_svfiprintf_r+0xc6>
 80032e0:	2300      	movs	r3, #0
 80032e2:	3701      	adds	r7, #1
 80032e4:	9305      	str	r3, [sp, #20]
 80032e6:	4619      	mov	r1, r3
 80032e8:	250a      	movs	r5, #10
 80032ea:	4638      	mov	r0, r7
 80032ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80032f0:	3a30      	subs	r2, #48	; 0x30
 80032f2:	2a09      	cmp	r2, #9
 80032f4:	d903      	bls.n	80032fe <_svfiprintf_r+0x196>
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d0c8      	beq.n	800328c <_svfiprintf_r+0x124>
 80032fa:	9105      	str	r1, [sp, #20]
 80032fc:	e7c6      	b.n	800328c <_svfiprintf_r+0x124>
 80032fe:	fb05 2101 	mla	r1, r5, r1, r2
 8003302:	2301      	movs	r3, #1
 8003304:	4607      	mov	r7, r0
 8003306:	e7f0      	b.n	80032ea <_svfiprintf_r+0x182>
 8003308:	ab03      	add	r3, sp, #12
 800330a:	9300      	str	r3, [sp, #0]
 800330c:	4622      	mov	r2, r4
 800330e:	4b11      	ldr	r3, [pc, #68]	; (8003354 <_svfiprintf_r+0x1ec>)
 8003310:	a904      	add	r1, sp, #16
 8003312:	4640      	mov	r0, r8
 8003314:	f3af 8000 	nop.w
 8003318:	f1b0 3fff 	cmp.w	r0, #4294967295
 800331c:	4681      	mov	r9, r0
 800331e:	d1d6      	bne.n	80032ce <_svfiprintf_r+0x166>
 8003320:	89a3      	ldrh	r3, [r4, #12]
 8003322:	065b      	lsls	r3, r3, #25
 8003324:	f53f af35 	bmi.w	8003192 <_svfiprintf_r+0x2a>
 8003328:	9809      	ldr	r0, [sp, #36]	; 0x24
 800332a:	b01d      	add	sp, #116	; 0x74
 800332c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003330:	ab03      	add	r3, sp, #12
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	4622      	mov	r2, r4
 8003336:	4b07      	ldr	r3, [pc, #28]	; (8003354 <_svfiprintf_r+0x1ec>)
 8003338:	a904      	add	r1, sp, #16
 800333a:	4640      	mov	r0, r8
 800333c:	f000 f882 	bl	8003444 <_printf_i>
 8003340:	e7ea      	b.n	8003318 <_svfiprintf_r+0x1b0>
 8003342:	bf00      	nop
 8003344:	08003904 	.word	0x08003904
 8003348:	0800390a 	.word	0x0800390a
 800334c:	0800390e 	.word	0x0800390e
 8003350:	00000000 	.word	0x00000000
 8003354:	080030b5 	.word	0x080030b5

08003358 <_printf_common>:
 8003358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800335c:	4691      	mov	r9, r2
 800335e:	461f      	mov	r7, r3
 8003360:	688a      	ldr	r2, [r1, #8]
 8003362:	690b      	ldr	r3, [r1, #16]
 8003364:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003368:	4293      	cmp	r3, r2
 800336a:	bfb8      	it	lt
 800336c:	4613      	movlt	r3, r2
 800336e:	f8c9 3000 	str.w	r3, [r9]
 8003372:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003376:	4606      	mov	r6, r0
 8003378:	460c      	mov	r4, r1
 800337a:	b112      	cbz	r2, 8003382 <_printf_common+0x2a>
 800337c:	3301      	adds	r3, #1
 800337e:	f8c9 3000 	str.w	r3, [r9]
 8003382:	6823      	ldr	r3, [r4, #0]
 8003384:	0699      	lsls	r1, r3, #26
 8003386:	bf42      	ittt	mi
 8003388:	f8d9 3000 	ldrmi.w	r3, [r9]
 800338c:	3302      	addmi	r3, #2
 800338e:	f8c9 3000 	strmi.w	r3, [r9]
 8003392:	6825      	ldr	r5, [r4, #0]
 8003394:	f015 0506 	ands.w	r5, r5, #6
 8003398:	d107      	bne.n	80033aa <_printf_common+0x52>
 800339a:	f104 0a19 	add.w	sl, r4, #25
 800339e:	68e3      	ldr	r3, [r4, #12]
 80033a0:	f8d9 2000 	ldr.w	r2, [r9]
 80033a4:	1a9b      	subs	r3, r3, r2
 80033a6:	42ab      	cmp	r3, r5
 80033a8:	dc28      	bgt.n	80033fc <_printf_common+0xa4>
 80033aa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80033ae:	6822      	ldr	r2, [r4, #0]
 80033b0:	3300      	adds	r3, #0
 80033b2:	bf18      	it	ne
 80033b4:	2301      	movne	r3, #1
 80033b6:	0692      	lsls	r2, r2, #26
 80033b8:	d42d      	bmi.n	8003416 <_printf_common+0xbe>
 80033ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80033be:	4639      	mov	r1, r7
 80033c0:	4630      	mov	r0, r6
 80033c2:	47c0      	blx	r8
 80033c4:	3001      	adds	r0, #1
 80033c6:	d020      	beq.n	800340a <_printf_common+0xb2>
 80033c8:	6823      	ldr	r3, [r4, #0]
 80033ca:	68e5      	ldr	r5, [r4, #12]
 80033cc:	f8d9 2000 	ldr.w	r2, [r9]
 80033d0:	f003 0306 	and.w	r3, r3, #6
 80033d4:	2b04      	cmp	r3, #4
 80033d6:	bf08      	it	eq
 80033d8:	1aad      	subeq	r5, r5, r2
 80033da:	68a3      	ldr	r3, [r4, #8]
 80033dc:	6922      	ldr	r2, [r4, #16]
 80033de:	bf0c      	ite	eq
 80033e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80033e4:	2500      	movne	r5, #0
 80033e6:	4293      	cmp	r3, r2
 80033e8:	bfc4      	itt	gt
 80033ea:	1a9b      	subgt	r3, r3, r2
 80033ec:	18ed      	addgt	r5, r5, r3
 80033ee:	f04f 0900 	mov.w	r9, #0
 80033f2:	341a      	adds	r4, #26
 80033f4:	454d      	cmp	r5, r9
 80033f6:	d11a      	bne.n	800342e <_printf_common+0xd6>
 80033f8:	2000      	movs	r0, #0
 80033fa:	e008      	b.n	800340e <_printf_common+0xb6>
 80033fc:	2301      	movs	r3, #1
 80033fe:	4652      	mov	r2, sl
 8003400:	4639      	mov	r1, r7
 8003402:	4630      	mov	r0, r6
 8003404:	47c0      	blx	r8
 8003406:	3001      	adds	r0, #1
 8003408:	d103      	bne.n	8003412 <_printf_common+0xba>
 800340a:	f04f 30ff 	mov.w	r0, #4294967295
 800340e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003412:	3501      	adds	r5, #1
 8003414:	e7c3      	b.n	800339e <_printf_common+0x46>
 8003416:	18e1      	adds	r1, r4, r3
 8003418:	1c5a      	adds	r2, r3, #1
 800341a:	2030      	movs	r0, #48	; 0x30
 800341c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003420:	4422      	add	r2, r4
 8003422:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003426:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800342a:	3302      	adds	r3, #2
 800342c:	e7c5      	b.n	80033ba <_printf_common+0x62>
 800342e:	2301      	movs	r3, #1
 8003430:	4622      	mov	r2, r4
 8003432:	4639      	mov	r1, r7
 8003434:	4630      	mov	r0, r6
 8003436:	47c0      	blx	r8
 8003438:	3001      	adds	r0, #1
 800343a:	d0e6      	beq.n	800340a <_printf_common+0xb2>
 800343c:	f109 0901 	add.w	r9, r9, #1
 8003440:	e7d8      	b.n	80033f4 <_printf_common+0x9c>
	...

08003444 <_printf_i>:
 8003444:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003448:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800344c:	460c      	mov	r4, r1
 800344e:	7e09      	ldrb	r1, [r1, #24]
 8003450:	b085      	sub	sp, #20
 8003452:	296e      	cmp	r1, #110	; 0x6e
 8003454:	4617      	mov	r7, r2
 8003456:	4606      	mov	r6, r0
 8003458:	4698      	mov	r8, r3
 800345a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800345c:	f000 80b3 	beq.w	80035c6 <_printf_i+0x182>
 8003460:	d822      	bhi.n	80034a8 <_printf_i+0x64>
 8003462:	2963      	cmp	r1, #99	; 0x63
 8003464:	d036      	beq.n	80034d4 <_printf_i+0x90>
 8003466:	d80a      	bhi.n	800347e <_printf_i+0x3a>
 8003468:	2900      	cmp	r1, #0
 800346a:	f000 80b9 	beq.w	80035e0 <_printf_i+0x19c>
 800346e:	2958      	cmp	r1, #88	; 0x58
 8003470:	f000 8083 	beq.w	800357a <_printf_i+0x136>
 8003474:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003478:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800347c:	e032      	b.n	80034e4 <_printf_i+0xa0>
 800347e:	2964      	cmp	r1, #100	; 0x64
 8003480:	d001      	beq.n	8003486 <_printf_i+0x42>
 8003482:	2969      	cmp	r1, #105	; 0x69
 8003484:	d1f6      	bne.n	8003474 <_printf_i+0x30>
 8003486:	6820      	ldr	r0, [r4, #0]
 8003488:	6813      	ldr	r3, [r2, #0]
 800348a:	0605      	lsls	r5, r0, #24
 800348c:	f103 0104 	add.w	r1, r3, #4
 8003490:	d52a      	bpl.n	80034e8 <_printf_i+0xa4>
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6011      	str	r1, [r2, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	da03      	bge.n	80034a2 <_printf_i+0x5e>
 800349a:	222d      	movs	r2, #45	; 0x2d
 800349c:	425b      	negs	r3, r3
 800349e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80034a2:	486f      	ldr	r0, [pc, #444]	; (8003660 <_printf_i+0x21c>)
 80034a4:	220a      	movs	r2, #10
 80034a6:	e039      	b.n	800351c <_printf_i+0xd8>
 80034a8:	2973      	cmp	r1, #115	; 0x73
 80034aa:	f000 809d 	beq.w	80035e8 <_printf_i+0x1a4>
 80034ae:	d808      	bhi.n	80034c2 <_printf_i+0x7e>
 80034b0:	296f      	cmp	r1, #111	; 0x6f
 80034b2:	d020      	beq.n	80034f6 <_printf_i+0xb2>
 80034b4:	2970      	cmp	r1, #112	; 0x70
 80034b6:	d1dd      	bne.n	8003474 <_printf_i+0x30>
 80034b8:	6823      	ldr	r3, [r4, #0]
 80034ba:	f043 0320 	orr.w	r3, r3, #32
 80034be:	6023      	str	r3, [r4, #0]
 80034c0:	e003      	b.n	80034ca <_printf_i+0x86>
 80034c2:	2975      	cmp	r1, #117	; 0x75
 80034c4:	d017      	beq.n	80034f6 <_printf_i+0xb2>
 80034c6:	2978      	cmp	r1, #120	; 0x78
 80034c8:	d1d4      	bne.n	8003474 <_printf_i+0x30>
 80034ca:	2378      	movs	r3, #120	; 0x78
 80034cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80034d0:	4864      	ldr	r0, [pc, #400]	; (8003664 <_printf_i+0x220>)
 80034d2:	e055      	b.n	8003580 <_printf_i+0x13c>
 80034d4:	6813      	ldr	r3, [r2, #0]
 80034d6:	1d19      	adds	r1, r3, #4
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	6011      	str	r1, [r2, #0]
 80034dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80034e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80034e4:	2301      	movs	r3, #1
 80034e6:	e08c      	b.n	8003602 <_printf_i+0x1be>
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	6011      	str	r1, [r2, #0]
 80034ec:	f010 0f40 	tst.w	r0, #64	; 0x40
 80034f0:	bf18      	it	ne
 80034f2:	b21b      	sxthne	r3, r3
 80034f4:	e7cf      	b.n	8003496 <_printf_i+0x52>
 80034f6:	6813      	ldr	r3, [r2, #0]
 80034f8:	6825      	ldr	r5, [r4, #0]
 80034fa:	1d18      	adds	r0, r3, #4
 80034fc:	6010      	str	r0, [r2, #0]
 80034fe:	0628      	lsls	r0, r5, #24
 8003500:	d501      	bpl.n	8003506 <_printf_i+0xc2>
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	e002      	b.n	800350c <_printf_i+0xc8>
 8003506:	0668      	lsls	r0, r5, #25
 8003508:	d5fb      	bpl.n	8003502 <_printf_i+0xbe>
 800350a:	881b      	ldrh	r3, [r3, #0]
 800350c:	4854      	ldr	r0, [pc, #336]	; (8003660 <_printf_i+0x21c>)
 800350e:	296f      	cmp	r1, #111	; 0x6f
 8003510:	bf14      	ite	ne
 8003512:	220a      	movne	r2, #10
 8003514:	2208      	moveq	r2, #8
 8003516:	2100      	movs	r1, #0
 8003518:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800351c:	6865      	ldr	r5, [r4, #4]
 800351e:	60a5      	str	r5, [r4, #8]
 8003520:	2d00      	cmp	r5, #0
 8003522:	f2c0 8095 	blt.w	8003650 <_printf_i+0x20c>
 8003526:	6821      	ldr	r1, [r4, #0]
 8003528:	f021 0104 	bic.w	r1, r1, #4
 800352c:	6021      	str	r1, [r4, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d13d      	bne.n	80035ae <_printf_i+0x16a>
 8003532:	2d00      	cmp	r5, #0
 8003534:	f040 808e 	bne.w	8003654 <_printf_i+0x210>
 8003538:	4665      	mov	r5, ip
 800353a:	2a08      	cmp	r2, #8
 800353c:	d10b      	bne.n	8003556 <_printf_i+0x112>
 800353e:	6823      	ldr	r3, [r4, #0]
 8003540:	07db      	lsls	r3, r3, #31
 8003542:	d508      	bpl.n	8003556 <_printf_i+0x112>
 8003544:	6923      	ldr	r3, [r4, #16]
 8003546:	6862      	ldr	r2, [r4, #4]
 8003548:	429a      	cmp	r2, r3
 800354a:	bfde      	ittt	le
 800354c:	2330      	movle	r3, #48	; 0x30
 800354e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003552:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003556:	ebac 0305 	sub.w	r3, ip, r5
 800355a:	6123      	str	r3, [r4, #16]
 800355c:	f8cd 8000 	str.w	r8, [sp]
 8003560:	463b      	mov	r3, r7
 8003562:	aa03      	add	r2, sp, #12
 8003564:	4621      	mov	r1, r4
 8003566:	4630      	mov	r0, r6
 8003568:	f7ff fef6 	bl	8003358 <_printf_common>
 800356c:	3001      	adds	r0, #1
 800356e:	d14d      	bne.n	800360c <_printf_i+0x1c8>
 8003570:	f04f 30ff 	mov.w	r0, #4294967295
 8003574:	b005      	add	sp, #20
 8003576:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800357a:	4839      	ldr	r0, [pc, #228]	; (8003660 <_printf_i+0x21c>)
 800357c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003580:	6813      	ldr	r3, [r2, #0]
 8003582:	6821      	ldr	r1, [r4, #0]
 8003584:	1d1d      	adds	r5, r3, #4
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6015      	str	r5, [r2, #0]
 800358a:	060a      	lsls	r2, r1, #24
 800358c:	d50b      	bpl.n	80035a6 <_printf_i+0x162>
 800358e:	07ca      	lsls	r2, r1, #31
 8003590:	bf44      	itt	mi
 8003592:	f041 0120 	orrmi.w	r1, r1, #32
 8003596:	6021      	strmi	r1, [r4, #0]
 8003598:	b91b      	cbnz	r3, 80035a2 <_printf_i+0x15e>
 800359a:	6822      	ldr	r2, [r4, #0]
 800359c:	f022 0220 	bic.w	r2, r2, #32
 80035a0:	6022      	str	r2, [r4, #0]
 80035a2:	2210      	movs	r2, #16
 80035a4:	e7b7      	b.n	8003516 <_printf_i+0xd2>
 80035a6:	064d      	lsls	r5, r1, #25
 80035a8:	bf48      	it	mi
 80035aa:	b29b      	uxthmi	r3, r3
 80035ac:	e7ef      	b.n	800358e <_printf_i+0x14a>
 80035ae:	4665      	mov	r5, ip
 80035b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80035b4:	fb02 3311 	mls	r3, r2, r1, r3
 80035b8:	5cc3      	ldrb	r3, [r0, r3]
 80035ba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80035be:	460b      	mov	r3, r1
 80035c0:	2900      	cmp	r1, #0
 80035c2:	d1f5      	bne.n	80035b0 <_printf_i+0x16c>
 80035c4:	e7b9      	b.n	800353a <_printf_i+0xf6>
 80035c6:	6813      	ldr	r3, [r2, #0]
 80035c8:	6825      	ldr	r5, [r4, #0]
 80035ca:	6961      	ldr	r1, [r4, #20]
 80035cc:	1d18      	adds	r0, r3, #4
 80035ce:	6010      	str	r0, [r2, #0]
 80035d0:	0628      	lsls	r0, r5, #24
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	d501      	bpl.n	80035da <_printf_i+0x196>
 80035d6:	6019      	str	r1, [r3, #0]
 80035d8:	e002      	b.n	80035e0 <_printf_i+0x19c>
 80035da:	066a      	lsls	r2, r5, #25
 80035dc:	d5fb      	bpl.n	80035d6 <_printf_i+0x192>
 80035de:	8019      	strh	r1, [r3, #0]
 80035e0:	2300      	movs	r3, #0
 80035e2:	6123      	str	r3, [r4, #16]
 80035e4:	4665      	mov	r5, ip
 80035e6:	e7b9      	b.n	800355c <_printf_i+0x118>
 80035e8:	6813      	ldr	r3, [r2, #0]
 80035ea:	1d19      	adds	r1, r3, #4
 80035ec:	6011      	str	r1, [r2, #0]
 80035ee:	681d      	ldr	r5, [r3, #0]
 80035f0:	6862      	ldr	r2, [r4, #4]
 80035f2:	2100      	movs	r1, #0
 80035f4:	4628      	mov	r0, r5
 80035f6:	f7fc fdf3 	bl	80001e0 <memchr>
 80035fa:	b108      	cbz	r0, 8003600 <_printf_i+0x1bc>
 80035fc:	1b40      	subs	r0, r0, r5
 80035fe:	6060      	str	r0, [r4, #4]
 8003600:	6863      	ldr	r3, [r4, #4]
 8003602:	6123      	str	r3, [r4, #16]
 8003604:	2300      	movs	r3, #0
 8003606:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800360a:	e7a7      	b.n	800355c <_printf_i+0x118>
 800360c:	6923      	ldr	r3, [r4, #16]
 800360e:	462a      	mov	r2, r5
 8003610:	4639      	mov	r1, r7
 8003612:	4630      	mov	r0, r6
 8003614:	47c0      	blx	r8
 8003616:	3001      	adds	r0, #1
 8003618:	d0aa      	beq.n	8003570 <_printf_i+0x12c>
 800361a:	6823      	ldr	r3, [r4, #0]
 800361c:	079b      	lsls	r3, r3, #30
 800361e:	d413      	bmi.n	8003648 <_printf_i+0x204>
 8003620:	68e0      	ldr	r0, [r4, #12]
 8003622:	9b03      	ldr	r3, [sp, #12]
 8003624:	4298      	cmp	r0, r3
 8003626:	bfb8      	it	lt
 8003628:	4618      	movlt	r0, r3
 800362a:	e7a3      	b.n	8003574 <_printf_i+0x130>
 800362c:	2301      	movs	r3, #1
 800362e:	464a      	mov	r2, r9
 8003630:	4639      	mov	r1, r7
 8003632:	4630      	mov	r0, r6
 8003634:	47c0      	blx	r8
 8003636:	3001      	adds	r0, #1
 8003638:	d09a      	beq.n	8003570 <_printf_i+0x12c>
 800363a:	3501      	adds	r5, #1
 800363c:	68e3      	ldr	r3, [r4, #12]
 800363e:	9a03      	ldr	r2, [sp, #12]
 8003640:	1a9b      	subs	r3, r3, r2
 8003642:	42ab      	cmp	r3, r5
 8003644:	dcf2      	bgt.n	800362c <_printf_i+0x1e8>
 8003646:	e7eb      	b.n	8003620 <_printf_i+0x1dc>
 8003648:	2500      	movs	r5, #0
 800364a:	f104 0919 	add.w	r9, r4, #25
 800364e:	e7f5      	b.n	800363c <_printf_i+0x1f8>
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1ac      	bne.n	80035ae <_printf_i+0x16a>
 8003654:	7803      	ldrb	r3, [r0, #0]
 8003656:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800365a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800365e:	e76c      	b.n	800353a <_printf_i+0xf6>
 8003660:	08003915 	.word	0x08003915
 8003664:	08003926 	.word	0x08003926

08003668 <memcpy>:
 8003668:	b510      	push	{r4, lr}
 800366a:	1e43      	subs	r3, r0, #1
 800366c:	440a      	add	r2, r1
 800366e:	4291      	cmp	r1, r2
 8003670:	d100      	bne.n	8003674 <memcpy+0xc>
 8003672:	bd10      	pop	{r4, pc}
 8003674:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003678:	f803 4f01 	strb.w	r4, [r3, #1]!
 800367c:	e7f7      	b.n	800366e <memcpy+0x6>

0800367e <memmove>:
 800367e:	4288      	cmp	r0, r1
 8003680:	b510      	push	{r4, lr}
 8003682:	eb01 0302 	add.w	r3, r1, r2
 8003686:	d807      	bhi.n	8003698 <memmove+0x1a>
 8003688:	1e42      	subs	r2, r0, #1
 800368a:	4299      	cmp	r1, r3
 800368c:	d00a      	beq.n	80036a4 <memmove+0x26>
 800368e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003692:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003696:	e7f8      	b.n	800368a <memmove+0xc>
 8003698:	4283      	cmp	r3, r0
 800369a:	d9f5      	bls.n	8003688 <memmove+0xa>
 800369c:	1881      	adds	r1, r0, r2
 800369e:	1ad2      	subs	r2, r2, r3
 80036a0:	42d3      	cmn	r3, r2
 80036a2:	d100      	bne.n	80036a6 <memmove+0x28>
 80036a4:	bd10      	pop	{r4, pc}
 80036a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80036aa:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80036ae:	e7f7      	b.n	80036a0 <memmove+0x22>

080036b0 <_free_r>:
 80036b0:	b538      	push	{r3, r4, r5, lr}
 80036b2:	4605      	mov	r5, r0
 80036b4:	2900      	cmp	r1, #0
 80036b6:	d045      	beq.n	8003744 <_free_r+0x94>
 80036b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036bc:	1f0c      	subs	r4, r1, #4
 80036be:	2b00      	cmp	r3, #0
 80036c0:	bfb8      	it	lt
 80036c2:	18e4      	addlt	r4, r4, r3
 80036c4:	f000 f8d2 	bl	800386c <__malloc_lock>
 80036c8:	4a1f      	ldr	r2, [pc, #124]	; (8003748 <_free_r+0x98>)
 80036ca:	6813      	ldr	r3, [r2, #0]
 80036cc:	4610      	mov	r0, r2
 80036ce:	b933      	cbnz	r3, 80036de <_free_r+0x2e>
 80036d0:	6063      	str	r3, [r4, #4]
 80036d2:	6014      	str	r4, [r2, #0]
 80036d4:	4628      	mov	r0, r5
 80036d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80036da:	f000 b8c8 	b.w	800386e <__malloc_unlock>
 80036de:	42a3      	cmp	r3, r4
 80036e0:	d90c      	bls.n	80036fc <_free_r+0x4c>
 80036e2:	6821      	ldr	r1, [r4, #0]
 80036e4:	1862      	adds	r2, r4, r1
 80036e6:	4293      	cmp	r3, r2
 80036e8:	bf04      	itt	eq
 80036ea:	681a      	ldreq	r2, [r3, #0]
 80036ec:	685b      	ldreq	r3, [r3, #4]
 80036ee:	6063      	str	r3, [r4, #4]
 80036f0:	bf04      	itt	eq
 80036f2:	1852      	addeq	r2, r2, r1
 80036f4:	6022      	streq	r2, [r4, #0]
 80036f6:	6004      	str	r4, [r0, #0]
 80036f8:	e7ec      	b.n	80036d4 <_free_r+0x24>
 80036fa:	4613      	mov	r3, r2
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	b10a      	cbz	r2, 8003704 <_free_r+0x54>
 8003700:	42a2      	cmp	r2, r4
 8003702:	d9fa      	bls.n	80036fa <_free_r+0x4a>
 8003704:	6819      	ldr	r1, [r3, #0]
 8003706:	1858      	adds	r0, r3, r1
 8003708:	42a0      	cmp	r0, r4
 800370a:	d10b      	bne.n	8003724 <_free_r+0x74>
 800370c:	6820      	ldr	r0, [r4, #0]
 800370e:	4401      	add	r1, r0
 8003710:	1858      	adds	r0, r3, r1
 8003712:	4282      	cmp	r2, r0
 8003714:	6019      	str	r1, [r3, #0]
 8003716:	d1dd      	bne.n	80036d4 <_free_r+0x24>
 8003718:	6810      	ldr	r0, [r2, #0]
 800371a:	6852      	ldr	r2, [r2, #4]
 800371c:	605a      	str	r2, [r3, #4]
 800371e:	4401      	add	r1, r0
 8003720:	6019      	str	r1, [r3, #0]
 8003722:	e7d7      	b.n	80036d4 <_free_r+0x24>
 8003724:	d902      	bls.n	800372c <_free_r+0x7c>
 8003726:	230c      	movs	r3, #12
 8003728:	602b      	str	r3, [r5, #0]
 800372a:	e7d3      	b.n	80036d4 <_free_r+0x24>
 800372c:	6820      	ldr	r0, [r4, #0]
 800372e:	1821      	adds	r1, r4, r0
 8003730:	428a      	cmp	r2, r1
 8003732:	bf04      	itt	eq
 8003734:	6811      	ldreq	r1, [r2, #0]
 8003736:	6852      	ldreq	r2, [r2, #4]
 8003738:	6062      	str	r2, [r4, #4]
 800373a:	bf04      	itt	eq
 800373c:	1809      	addeq	r1, r1, r0
 800373e:	6021      	streq	r1, [r4, #0]
 8003740:	605c      	str	r4, [r3, #4]
 8003742:	e7c7      	b.n	80036d4 <_free_r+0x24>
 8003744:	bd38      	pop	{r3, r4, r5, pc}
 8003746:	bf00      	nop
 8003748:	20000094 	.word	0x20000094

0800374c <_malloc_r>:
 800374c:	b570      	push	{r4, r5, r6, lr}
 800374e:	1ccd      	adds	r5, r1, #3
 8003750:	f025 0503 	bic.w	r5, r5, #3
 8003754:	3508      	adds	r5, #8
 8003756:	2d0c      	cmp	r5, #12
 8003758:	bf38      	it	cc
 800375a:	250c      	movcc	r5, #12
 800375c:	2d00      	cmp	r5, #0
 800375e:	4606      	mov	r6, r0
 8003760:	db01      	blt.n	8003766 <_malloc_r+0x1a>
 8003762:	42a9      	cmp	r1, r5
 8003764:	d903      	bls.n	800376e <_malloc_r+0x22>
 8003766:	230c      	movs	r3, #12
 8003768:	6033      	str	r3, [r6, #0]
 800376a:	2000      	movs	r0, #0
 800376c:	bd70      	pop	{r4, r5, r6, pc}
 800376e:	f000 f87d 	bl	800386c <__malloc_lock>
 8003772:	4a21      	ldr	r2, [pc, #132]	; (80037f8 <_malloc_r+0xac>)
 8003774:	6814      	ldr	r4, [r2, #0]
 8003776:	4621      	mov	r1, r4
 8003778:	b991      	cbnz	r1, 80037a0 <_malloc_r+0x54>
 800377a:	4c20      	ldr	r4, [pc, #128]	; (80037fc <_malloc_r+0xb0>)
 800377c:	6823      	ldr	r3, [r4, #0]
 800377e:	b91b      	cbnz	r3, 8003788 <_malloc_r+0x3c>
 8003780:	4630      	mov	r0, r6
 8003782:	f000 f863 	bl	800384c <_sbrk_r>
 8003786:	6020      	str	r0, [r4, #0]
 8003788:	4629      	mov	r1, r5
 800378a:	4630      	mov	r0, r6
 800378c:	f000 f85e 	bl	800384c <_sbrk_r>
 8003790:	1c43      	adds	r3, r0, #1
 8003792:	d124      	bne.n	80037de <_malloc_r+0x92>
 8003794:	230c      	movs	r3, #12
 8003796:	6033      	str	r3, [r6, #0]
 8003798:	4630      	mov	r0, r6
 800379a:	f000 f868 	bl	800386e <__malloc_unlock>
 800379e:	e7e4      	b.n	800376a <_malloc_r+0x1e>
 80037a0:	680b      	ldr	r3, [r1, #0]
 80037a2:	1b5b      	subs	r3, r3, r5
 80037a4:	d418      	bmi.n	80037d8 <_malloc_r+0x8c>
 80037a6:	2b0b      	cmp	r3, #11
 80037a8:	d90f      	bls.n	80037ca <_malloc_r+0x7e>
 80037aa:	600b      	str	r3, [r1, #0]
 80037ac:	50cd      	str	r5, [r1, r3]
 80037ae:	18cc      	adds	r4, r1, r3
 80037b0:	4630      	mov	r0, r6
 80037b2:	f000 f85c 	bl	800386e <__malloc_unlock>
 80037b6:	f104 000b 	add.w	r0, r4, #11
 80037ba:	1d23      	adds	r3, r4, #4
 80037bc:	f020 0007 	bic.w	r0, r0, #7
 80037c0:	1ac3      	subs	r3, r0, r3
 80037c2:	d0d3      	beq.n	800376c <_malloc_r+0x20>
 80037c4:	425a      	negs	r2, r3
 80037c6:	50e2      	str	r2, [r4, r3]
 80037c8:	e7d0      	b.n	800376c <_malloc_r+0x20>
 80037ca:	428c      	cmp	r4, r1
 80037cc:	684b      	ldr	r3, [r1, #4]
 80037ce:	bf16      	itet	ne
 80037d0:	6063      	strne	r3, [r4, #4]
 80037d2:	6013      	streq	r3, [r2, #0]
 80037d4:	460c      	movne	r4, r1
 80037d6:	e7eb      	b.n	80037b0 <_malloc_r+0x64>
 80037d8:	460c      	mov	r4, r1
 80037da:	6849      	ldr	r1, [r1, #4]
 80037dc:	e7cc      	b.n	8003778 <_malloc_r+0x2c>
 80037de:	1cc4      	adds	r4, r0, #3
 80037e0:	f024 0403 	bic.w	r4, r4, #3
 80037e4:	42a0      	cmp	r0, r4
 80037e6:	d005      	beq.n	80037f4 <_malloc_r+0xa8>
 80037e8:	1a21      	subs	r1, r4, r0
 80037ea:	4630      	mov	r0, r6
 80037ec:	f000 f82e 	bl	800384c <_sbrk_r>
 80037f0:	3001      	adds	r0, #1
 80037f2:	d0cf      	beq.n	8003794 <_malloc_r+0x48>
 80037f4:	6025      	str	r5, [r4, #0]
 80037f6:	e7db      	b.n	80037b0 <_malloc_r+0x64>
 80037f8:	20000094 	.word	0x20000094
 80037fc:	20000098 	.word	0x20000098

08003800 <_realloc_r>:
 8003800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003802:	4607      	mov	r7, r0
 8003804:	4614      	mov	r4, r2
 8003806:	460e      	mov	r6, r1
 8003808:	b921      	cbnz	r1, 8003814 <_realloc_r+0x14>
 800380a:	4611      	mov	r1, r2
 800380c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003810:	f7ff bf9c 	b.w	800374c <_malloc_r>
 8003814:	b922      	cbnz	r2, 8003820 <_realloc_r+0x20>
 8003816:	f7ff ff4b 	bl	80036b0 <_free_r>
 800381a:	4625      	mov	r5, r4
 800381c:	4628      	mov	r0, r5
 800381e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003820:	f000 f826 	bl	8003870 <_malloc_usable_size_r>
 8003824:	42a0      	cmp	r0, r4
 8003826:	d20f      	bcs.n	8003848 <_realloc_r+0x48>
 8003828:	4621      	mov	r1, r4
 800382a:	4638      	mov	r0, r7
 800382c:	f7ff ff8e 	bl	800374c <_malloc_r>
 8003830:	4605      	mov	r5, r0
 8003832:	2800      	cmp	r0, #0
 8003834:	d0f2      	beq.n	800381c <_realloc_r+0x1c>
 8003836:	4631      	mov	r1, r6
 8003838:	4622      	mov	r2, r4
 800383a:	f7ff ff15 	bl	8003668 <memcpy>
 800383e:	4631      	mov	r1, r6
 8003840:	4638      	mov	r0, r7
 8003842:	f7ff ff35 	bl	80036b0 <_free_r>
 8003846:	e7e9      	b.n	800381c <_realloc_r+0x1c>
 8003848:	4635      	mov	r5, r6
 800384a:	e7e7      	b.n	800381c <_realloc_r+0x1c>

0800384c <_sbrk_r>:
 800384c:	b538      	push	{r3, r4, r5, lr}
 800384e:	4c06      	ldr	r4, [pc, #24]	; (8003868 <_sbrk_r+0x1c>)
 8003850:	2300      	movs	r3, #0
 8003852:	4605      	mov	r5, r0
 8003854:	4608      	mov	r0, r1
 8003856:	6023      	str	r3, [r4, #0]
 8003858:	f7fd f87a 	bl	8000950 <_sbrk>
 800385c:	1c43      	adds	r3, r0, #1
 800385e:	d102      	bne.n	8003866 <_sbrk_r+0x1a>
 8003860:	6823      	ldr	r3, [r4, #0]
 8003862:	b103      	cbz	r3, 8003866 <_sbrk_r+0x1a>
 8003864:	602b      	str	r3, [r5, #0]
 8003866:	bd38      	pop	{r3, r4, r5, pc}
 8003868:	20000128 	.word	0x20000128

0800386c <__malloc_lock>:
 800386c:	4770      	bx	lr

0800386e <__malloc_unlock>:
 800386e:	4770      	bx	lr

08003870 <_malloc_usable_size_r>:
 8003870:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003874:	1f18      	subs	r0, r3, #4
 8003876:	2b00      	cmp	r3, #0
 8003878:	bfbc      	itt	lt
 800387a:	580b      	ldrlt	r3, [r1, r0]
 800387c:	18c0      	addlt	r0, r0, r3
 800387e:	4770      	bx	lr

08003880 <_init>:
 8003880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003882:	bf00      	nop
 8003884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003886:	bc08      	pop	{r3}
 8003888:	469e      	mov	lr, r3
 800388a:	4770      	bx	lr

0800388c <_fini>:
 800388c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800388e:	bf00      	nop
 8003890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003892:	bc08      	pop	{r3}
 8003894:	469e      	mov	lr, r3
 8003896:	4770      	bx	lr
