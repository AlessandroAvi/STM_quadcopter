
STM_quadcopter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cc0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  08009e60  08009e60  00019e60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3c4  0800a3c4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a3c4  0800a3c4  0001a3c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3cc  0800a3cc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3cc  0800a3cc  0001a3cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3d0  0800a3d0  0001a3d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a3d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  200001e0  0800a5b4  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000504  0800a5b4  00020504  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019105  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003121  00000000  00000000  00039315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001170  00000000  00000000  0003c438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001050  00000000  00000000  0003d5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019158  00000000  00000000  0003e5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000183a4  00000000  00000000  00057750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009261e  00000000  00000000  0006faf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00102112  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b24  00000000  00000000  00102168  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009e48 	.word	0x08009e48

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08009e48 	.word	0x08009e48

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96e 	b.w	8000eac <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8083 	bne.w	8000cfe <__udivmoddi4+0x116>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d947      	bls.n	8000c8e <__udivmoddi4+0xa6>
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b142      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	f1c2 0020 	rsb	r0, r2, #32
 8000c08:	fa24 f000 	lsr.w	r0, r4, r0
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4097      	lsls	r7, r2
 8000c10:	ea40 0c01 	orr.w	ip, r0, r1
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c20:	fa1f fe87 	uxth.w	lr, r7
 8000c24:	fb08 c116 	mls	r1, r8, r6, ip
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3a:	f080 8119 	bcs.w	8000e70 <__udivmoddi4+0x288>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8116 	bls.w	8000e70 <__udivmoddi4+0x288>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	193c      	adds	r4, r7, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8105 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f240 8102 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c70:	3802      	subs	r0, #2
 8000c72:	443c      	add	r4, r7
 8000c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c78:	eba4 040e 	sub.w	r4, r4, lr
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xaa>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d150      	bne.n	8000d3c <__udivmoddi4+0x154>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000caa:	0c21      	lsrs	r1, r4, #16
 8000cac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000cbc:	1879      	adds	r1, r7, r1
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0xe2>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	f200 80e9 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1ac9      	subs	r1, r1, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x10c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x10a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80d9 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e7bf      	b.n	8000c7e <__udivmoddi4+0x96>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x12e>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <__udivmoddi4+0x282>
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f683 	clz	r6, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d14a      	bne.n	8000db4 <__udivmoddi4+0x1cc>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0x140>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80b8 	bhi.w	8000e98 <__udivmoddi4+0x2b0>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	468c      	mov	ip, r1
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d0a8      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000d36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f603 	lsr.w	r6, r0, r3
 8000d44:	4097      	lsls	r7, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	4330      	orrs	r0, r6
 8000d52:	0c03      	lsrs	r3, r0, #16
 8000d54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d58:	fa1f f887 	uxth.w	r8, r7
 8000d5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb06 f108 	mul.w	r1, r6, r8
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x19c>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d76:	f080 808d 	bcs.w	8000e94 <__udivmoddi4+0x2ac>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 808a 	bls.w	8000e94 <__udivmoddi4+0x2ac>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b281      	uxth	r1, r0
 8000d88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb00 f308 	mul.w	r3, r0, r8
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x1c4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da2:	d273      	bcs.n	8000e8c <__udivmoddi4+0x2a4>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d971      	bls.n	8000e8c <__udivmoddi4+0x2a4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4439      	add	r1, r7
 8000dac:	1acb      	subs	r3, r1, r3
 8000dae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db2:	e778      	b.n	8000ca6 <__udivmoddi4+0xbe>
 8000db4:	f1c6 0c20 	rsb	ip, r6, #32
 8000db8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dbc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dce:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	0c3b      	lsrs	r3, r7, #16
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fa1f f884 	uxth.w	r8, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dea:	458a      	cmp	sl, r1
 8000dec:	fa02 f206 	lsl.w	r2, r2, r6
 8000df0:	fa00 f306 	lsl.w	r3, r0, r6
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x220>
 8000df6:	1861      	adds	r1, r4, r1
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dfc:	d248      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	d946      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4421      	add	r1, r4
 8000e08:	eba1 010a 	sub.w	r1, r1, sl
 8000e0c:	b2bf      	uxth	r7, r7
 8000e0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1a:	fb00 f808 	mul.w	r8, r0, r8
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x24a>
 8000e22:	19e7      	adds	r7, r4, r7
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e28:	d22e      	bcs.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2a:	45b8      	cmp	r8, r7
 8000e2c:	d92c      	bls.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4427      	add	r7, r4
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	eba7 0708 	sub.w	r7, r7, r8
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	454f      	cmp	r7, r9
 8000e40:	46c6      	mov	lr, r8
 8000e42:	4649      	mov	r1, r9
 8000e44:	d31a      	bcc.n	8000e7c <__udivmoddi4+0x294>
 8000e46:	d017      	beq.n	8000e78 <__udivmoddi4+0x290>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x27a>
 8000e4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e56:	40f2      	lsrs	r2, r6
 8000e58:	ea4c 0202 	orr.w	r2, ip, r2
 8000e5c:	40f7      	lsrs	r7, r6
 8000e5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e70b      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fd      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e78:	4543      	cmp	r3, r8
 8000e7a:	d2e5      	bcs.n	8000e48 <__udivmoddi4+0x260>
 8000e7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e80:	eb69 0104 	sbc.w	r1, r9, r4
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7df      	b.n	8000e48 <__udivmoddi4+0x260>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e7d2      	b.n	8000e32 <__udivmoddi4+0x24a>
 8000e8c:	4660      	mov	r0, ip
 8000e8e:	e78d      	b.n	8000dac <__udivmoddi4+0x1c4>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e7b9      	b.n	8000e08 <__udivmoddi4+0x220>
 8000e94:	4666      	mov	r6, ip
 8000e96:	e775      	b.n	8000d84 <__udivmoddi4+0x19c>
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e74a      	b.n	8000d32 <__udivmoddi4+0x14a>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	4439      	add	r1, r7
 8000ea2:	e713      	b.n	8000ccc <__udivmoddi4+0xe4>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e724      	b.n	8000cf4 <__udivmoddi4+0x10c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <ESC_Init>:

char cmd_rx[1];


// FUNCTIONS *****************************
void ESC_Init(ESC_CONF * ESC_speed){
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]

	  ESC_speed->FR = 0;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	801a      	strh	r2, [r3, #0]
	  ESC_speed->FL = 0;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	805a      	strh	r2, [r3, #2]
	  ESC_speed->RR = 0;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	809a      	strh	r2, [r3, #4]
	  ESC_speed->RL = 0;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	80da      	strh	r2, [r3, #6]

	  ESC_speed->state = ARMED;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	729a      	strb	r2, [r3, #10]

	  ESC_speed->up_value = 0;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	811a      	strh	r2, [r3, #8]

	  // Set PWM to 0 for the ESC (1 ms)
	  TIM3->CCR1 = ESC_speed->FR + 1000;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ee2:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <ESC_Init+0x70>)
 8000ee8:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM3->CCR2 = ESC_speed->FL + 1000;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000ef0:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8000ef4:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <ESC_Init+0x70>)
 8000ef6:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM3->CCR3 = ESC_speed->RR + 1000;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000efe:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8000f02:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <ESC_Init+0x70>)
 8000f04:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM3->CCR4 = ESC_speed->RL + 1000;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000f0c:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8000f10:	4b03      	ldr	r3, [pc, #12]	; (8000f20 <ESC_Init+0x70>)
 8000f12:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	40000400 	.word	0x40000400

08000f24 <ESC_followCmd>:


void ESC_followCmd(ESC_CONF * ESC_speed, IMU_MEASURE * MPU_measure, char cmd){
 8000f24:	b5b0      	push	{r4, r5, r7, lr}
 8000f26:	b096      	sub	sp, #88	; 0x58
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	4613      	mov	r3, r2
 8000f30:	71fb      	strb	r3, [r7, #7]

	int cmd_pitch = 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	657b      	str	r3, [r7, #84]	; 0x54
	int cmd_roll  = 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	653b      	str	r3, [r7, #80]	; 0x50

	int16_t low_lim = 0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	int16_t high_lim = 600;
 8000f40:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000f44:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	// PID values
	int P_pitch = 2;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	64bb      	str	r3, [r7, #72]	; 0x48
	int D_pitch  = 1;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	647b      	str	r3, [r7, #68]	; 0x44
	//int I_pitch = 0;
	int P_roll  = 2;
 8000f50:	2302      	movs	r3, #2
 8000f52:	643b      	str	r3, [r7, #64]	; 0x40
	int D_roll  = 1;
 8000f54:	2301      	movs	r3, #1
 8000f56:	63fb      	str	r3, [r7, #60]	; 0x3c
	//int I_roll = 0;


	if(cmd == 'W'){	// forward
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	2b57      	cmp	r3, #87	; 0x57
 8000f5c:	d106      	bne.n	8000f6c <ESC_followCmd+0x48>
		cmd_pitch = -10;
 8000f5e:	f06f 0309 	mvn.w	r3, #9
 8000f62:	657b      	str	r3, [r7, #84]	; 0x54
		PRINTF("FORWARD \n\r");
 8000f64:	482b      	ldr	r0, [pc, #172]	; (8001014 <ESC_followCmd+0xf0>)
 8000f66:	f000 ff4b 	bl	8001e00 <PRINTF>
 8000f6a:	e06e      	b.n	800104a <ESC_followCmd+0x126>


	}else if(cmd == 'A'){ // left
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	2b41      	cmp	r3, #65	; 0x41
 8000f70:	d106      	bne.n	8000f80 <ESC_followCmd+0x5c>
		cmd_roll = -10;
 8000f72:	f06f 0309 	mvn.w	r3, #9
 8000f76:	653b      	str	r3, [r7, #80]	; 0x50
		PRINTF("LEFT \n\r");
 8000f78:	4827      	ldr	r0, [pc, #156]	; (8001018 <ESC_followCmd+0xf4>)
 8000f7a:	f000 ff41 	bl	8001e00 <PRINTF>
 8000f7e:	e064      	b.n	800104a <ESC_followCmd+0x126>


	}else if(cmd == 'S'){ // back
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	2b53      	cmp	r3, #83	; 0x53
 8000f84:	d105      	bne.n	8000f92 <ESC_followCmd+0x6e>
		cmd_pitch = 10;
 8000f86:	230a      	movs	r3, #10
 8000f88:	657b      	str	r3, [r7, #84]	; 0x54
		PRINTF("BACK \n\r");
 8000f8a:	4824      	ldr	r0, [pc, #144]	; (800101c <ESC_followCmd+0xf8>)
 8000f8c:	f000 ff38 	bl	8001e00 <PRINTF>
 8000f90:	e05b      	b.n	800104a <ESC_followCmd+0x126>


	}else if(cmd == 'D'){ // right
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	2b44      	cmp	r3, #68	; 0x44
 8000f96:	d105      	bne.n	8000fa4 <ESC_followCmd+0x80>
		cmd_roll = +10;
 8000f98:	230a      	movs	r3, #10
 8000f9a:	653b      	str	r3, [r7, #80]	; 0x50
		PRINTF("RIGHT \n\r");
 8000f9c:	4820      	ldr	r0, [pc, #128]	; (8001020 <ESC_followCmd+0xfc>)
 8000f9e:	f000 ff2f 	bl	8001e00 <PRINTF>
 8000fa2:	e052      	b.n	800104a <ESC_followCmd+0x126>


	}else if(cmd == 'I'){ // up
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	2b49      	cmp	r3, #73	; 0x49
 8000fa8:	d10c      	bne.n	8000fc4 <ESC_followCmd+0xa0>
		ESC_speed->up_value += 50;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	3332      	adds	r3, #50	; 0x32
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	b21a      	sxth	r2, r3
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	811a      	strh	r2, [r3, #8]
		PRINTF("UP \n\r");
 8000fbc:	4819      	ldr	r0, [pc, #100]	; (8001024 <ESC_followCmd+0x100>)
 8000fbe:	f000 ff1f 	bl	8001e00 <PRINTF>
 8000fc2:	e042      	b.n	800104a <ESC_followCmd+0x126>


	}else if(cmd == 'J'){ // rotate left
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	2b4a      	cmp	r3, #74	; 0x4a
 8000fc8:	d103      	bne.n	8000fd2 <ESC_followCmd+0xae>
		PRINTF("ROT LEFT \n\r");
 8000fca:	4817      	ldr	r0, [pc, #92]	; (8001028 <ESC_followCmd+0x104>)
 8000fcc:	f000 ff18 	bl	8001e00 <PRINTF>
 8000fd0:	e03b      	b.n	800104a <ESC_followCmd+0x126>


	}else if(cmd == 'K'){ // down
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	2b4b      	cmp	r3, #75	; 0x4b
 8000fd6:	d10c      	bne.n	8000ff2 <ESC_followCmd+0xce>
		ESC_speed->up_value -= 50;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	3b32      	subs	r3, #50	; 0x32
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	b21a      	sxth	r2, r3
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	811a      	strh	r2, [r3, #8]
		PRINTF("DOWN \n\r");
 8000fea:	4810      	ldr	r0, [pc, #64]	; (800102c <ESC_followCmd+0x108>)
 8000fec:	f000 ff08 	bl	8001e00 <PRINTF>
 8000ff0:	e02b      	b.n	800104a <ESC_followCmd+0x126>

	}else if(cmd == 'L'){ // rotate right
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	2b4c      	cmp	r3, #76	; 0x4c
 8000ff6:	d103      	bne.n	8001000 <ESC_followCmd+0xdc>
		PRINTF("ROT RIGHT \n\r");
 8000ff8:	480d      	ldr	r0, [pc, #52]	; (8001030 <ESC_followCmd+0x10c>)
 8000ffa:	f000 ff01 	bl	8001e00 <PRINTF>
 8000ffe:	e024      	b.n	800104a <ESC_followCmd+0x126>


	}else if(cmd == 'X'){ // disarm drone
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	2b58      	cmp	r3, #88	; 0x58
 8001004:	d118      	bne.n	8001038 <ESC_followCmd+0x114>
		ESC_speed->state = DISARMED;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	2200      	movs	r2, #0
 800100a:	729a      	strb	r2, [r3, #10]
		PRINTF("DISARM \n\r");
 800100c:	4809      	ldr	r0, [pc, #36]	; (8001034 <ESC_followCmd+0x110>)
 800100e:	f000 fef7 	bl	8001e00 <PRINTF>
 8001012:	e01a      	b.n	800104a <ESC_followCmd+0x126>
 8001014:	08009e60 	.word	0x08009e60
 8001018:	08009e6c 	.word	0x08009e6c
 800101c:	08009e74 	.word	0x08009e74
 8001020:	08009e7c 	.word	0x08009e7c
 8001024:	08009e88 	.word	0x08009e88
 8001028:	08009e90 	.word	0x08009e90
 800102c:	08009e9c 	.word	0x08009e9c
 8001030:	08009ea4 	.word	0x08009ea4
 8001034:	08009eb4 	.word	0x08009eb4


	}else if(cmd == 'C'){ // arms DRONE
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	2b43      	cmp	r3, #67	; 0x43
 800103c:	d105      	bne.n	800104a <ESC_followCmd+0x126>
		ESC_speed->state = ARMED;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	2201      	movs	r2, #1
 8001042:	729a      	strb	r2, [r3, #10]
		PRINTF("ARM \n\r");
 8001044:	48cb      	ldr	r0, [pc, #812]	; (8001374 <ESC_followCmd+0x450>)
 8001046:	f000 fedb 	bl	8001e00 <PRINTF>


	}

	if(ESC_speed->state == ARMED){
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	7a9b      	ldrb	r3, [r3, #10]
 800104e:	2b01      	cmp	r3, #1
 8001050:	f040 81a2 	bne.w	8001398 <ESC_followCmd+0x474>

		double pitch_err   = cmd_pitch - MPU_measure->angle_X;
 8001054:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001056:	f7ff fa6d 	bl	8000534 <__aeabi_i2d>
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001060:	f7ff f91a 	bl	8000298 <__aeabi_dsub>
 8001064:	4602      	mov	r2, r0
 8001066:	460b      	mov	r3, r1
 8001068:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		double pitch_d_err = MPU_measure->gyro_angle_dX;
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001072:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		double roll_err    = cmd_roll  - MPU_measure->angle_Y;
 8001076:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001078:	f7ff fa5c 	bl	8000534 <__aeabi_i2d>
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001082:	f7ff f909 	bl	8000298 <__aeabi_dsub>
 8001086:	4602      	mov	r2, r0
 8001088:	460b      	mov	r3, r1
 800108a:	e9c7 2308 	strd	r2, r3, [r7, #32]
		double roll_d_err  = MPU_measure->gyro_angle_dY;
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001094:	e9c7 2306 	strd	r2, r3, [r7, #24]

		// DA PROVARE NON SONO SICURO
		int16_t FR_tmp = ESC_speed->up_value + pitch_err*P_pitch - pitch_d_err*D_pitch - roll_err*P_roll + roll_d_err*D_roll;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff fa48 	bl	8000534 <__aeabi_i2d>
 80010a4:	4604      	mov	r4, r0
 80010a6:	460d      	mov	r5, r1
 80010a8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80010aa:	f7ff fa43 	bl	8000534 <__aeabi_i2d>
 80010ae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80010b2:	f7ff faa9 	bl	8000608 <__aeabi_dmul>
 80010b6:	4602      	mov	r2, r0
 80010b8:	460b      	mov	r3, r1
 80010ba:	4620      	mov	r0, r4
 80010bc:	4629      	mov	r1, r5
 80010be:	f7ff f8ed 	bl	800029c <__adddf3>
 80010c2:	4602      	mov	r2, r0
 80010c4:	460b      	mov	r3, r1
 80010c6:	4614      	mov	r4, r2
 80010c8:	461d      	mov	r5, r3
 80010ca:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80010cc:	f7ff fa32 	bl	8000534 <__aeabi_i2d>
 80010d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80010d4:	f7ff fa98 	bl	8000608 <__aeabi_dmul>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	4620      	mov	r0, r4
 80010de:	4629      	mov	r1, r5
 80010e0:	f7ff f8da 	bl	8000298 <__aeabi_dsub>
 80010e4:	4602      	mov	r2, r0
 80010e6:	460b      	mov	r3, r1
 80010e8:	4614      	mov	r4, r2
 80010ea:	461d      	mov	r5, r3
 80010ec:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80010ee:	f7ff fa21 	bl	8000534 <__aeabi_i2d>
 80010f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80010f6:	f7ff fa87 	bl	8000608 <__aeabi_dmul>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	4620      	mov	r0, r4
 8001100:	4629      	mov	r1, r5
 8001102:	f7ff f8c9 	bl	8000298 <__aeabi_dsub>
 8001106:	4602      	mov	r2, r0
 8001108:	460b      	mov	r3, r1
 800110a:	4614      	mov	r4, r2
 800110c:	461d      	mov	r5, r3
 800110e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001110:	f7ff fa10 	bl	8000534 <__aeabi_i2d>
 8001114:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001118:	f7ff fa76 	bl	8000608 <__aeabi_dmul>
 800111c:	4602      	mov	r2, r0
 800111e:	460b      	mov	r3, r1
 8001120:	4620      	mov	r0, r4
 8001122:	4629      	mov	r1, r5
 8001124:	f7ff f8ba 	bl	800029c <__adddf3>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	4610      	mov	r0, r2
 800112e:	4619      	mov	r1, r3
 8001130:	f7ff fd1a 	bl	8000b68 <__aeabi_d2iz>
 8001134:	4603      	mov	r3, r0
 8001136:	82fb      	strh	r3, [r7, #22]
		int16_t FL_tmp = ESC_speed->up_value + pitch_err*P_pitch - pitch_d_err*D_pitch + roll_err*P_roll - roll_d_err*D_roll;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff f9f8 	bl	8000534 <__aeabi_i2d>
 8001144:	4604      	mov	r4, r0
 8001146:	460d      	mov	r5, r1
 8001148:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800114a:	f7ff f9f3 	bl	8000534 <__aeabi_i2d>
 800114e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001152:	f7ff fa59 	bl	8000608 <__aeabi_dmul>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	4620      	mov	r0, r4
 800115c:	4629      	mov	r1, r5
 800115e:	f7ff f89d 	bl	800029c <__adddf3>
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	4614      	mov	r4, r2
 8001168:	461d      	mov	r5, r3
 800116a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800116c:	f7ff f9e2 	bl	8000534 <__aeabi_i2d>
 8001170:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001174:	f7ff fa48 	bl	8000608 <__aeabi_dmul>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	4620      	mov	r0, r4
 800117e:	4629      	mov	r1, r5
 8001180:	f7ff f88a 	bl	8000298 <__aeabi_dsub>
 8001184:	4602      	mov	r2, r0
 8001186:	460b      	mov	r3, r1
 8001188:	4614      	mov	r4, r2
 800118a:	461d      	mov	r5, r3
 800118c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800118e:	f7ff f9d1 	bl	8000534 <__aeabi_i2d>
 8001192:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001196:	f7ff fa37 	bl	8000608 <__aeabi_dmul>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	4620      	mov	r0, r4
 80011a0:	4629      	mov	r1, r5
 80011a2:	f7ff f87b 	bl	800029c <__adddf3>
 80011a6:	4602      	mov	r2, r0
 80011a8:	460b      	mov	r3, r1
 80011aa:	4614      	mov	r4, r2
 80011ac:	461d      	mov	r5, r3
 80011ae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80011b0:	f7ff f9c0 	bl	8000534 <__aeabi_i2d>
 80011b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80011b8:	f7ff fa26 	bl	8000608 <__aeabi_dmul>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4620      	mov	r0, r4
 80011c2:	4629      	mov	r1, r5
 80011c4:	f7ff f868 	bl	8000298 <__aeabi_dsub>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4610      	mov	r0, r2
 80011ce:	4619      	mov	r1, r3
 80011d0:	f7ff fcca 	bl	8000b68 <__aeabi_d2iz>
 80011d4:	4603      	mov	r3, r0
 80011d6:	82bb      	strh	r3, [r7, #20]
		int16_t RR_tmp = ESC_speed->up_value - pitch_err*P_pitch + pitch_d_err*D_pitch - roll_err*P_roll + roll_d_err*D_roll;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff f9a8 	bl	8000534 <__aeabi_i2d>
 80011e4:	4604      	mov	r4, r0
 80011e6:	460d      	mov	r5, r1
 80011e8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80011ea:	f7ff f9a3 	bl	8000534 <__aeabi_i2d>
 80011ee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80011f2:	f7ff fa09 	bl	8000608 <__aeabi_dmul>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4620      	mov	r0, r4
 80011fc:	4629      	mov	r1, r5
 80011fe:	f7ff f84b 	bl	8000298 <__aeabi_dsub>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	4614      	mov	r4, r2
 8001208:	461d      	mov	r5, r3
 800120a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800120c:	f7ff f992 	bl	8000534 <__aeabi_i2d>
 8001210:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001214:	f7ff f9f8 	bl	8000608 <__aeabi_dmul>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4620      	mov	r0, r4
 800121e:	4629      	mov	r1, r5
 8001220:	f7ff f83c 	bl	800029c <__adddf3>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4614      	mov	r4, r2
 800122a:	461d      	mov	r5, r3
 800122c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800122e:	f7ff f981 	bl	8000534 <__aeabi_i2d>
 8001232:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001236:	f7ff f9e7 	bl	8000608 <__aeabi_dmul>
 800123a:	4602      	mov	r2, r0
 800123c:	460b      	mov	r3, r1
 800123e:	4620      	mov	r0, r4
 8001240:	4629      	mov	r1, r5
 8001242:	f7ff f829 	bl	8000298 <__aeabi_dsub>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	4614      	mov	r4, r2
 800124c:	461d      	mov	r5, r3
 800124e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001250:	f7ff f970 	bl	8000534 <__aeabi_i2d>
 8001254:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001258:	f7ff f9d6 	bl	8000608 <__aeabi_dmul>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4620      	mov	r0, r4
 8001262:	4629      	mov	r1, r5
 8001264:	f7ff f81a 	bl	800029c <__adddf3>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	4610      	mov	r0, r2
 800126e:	4619      	mov	r1, r3
 8001270:	f7ff fc7a 	bl	8000b68 <__aeabi_d2iz>
 8001274:	4603      	mov	r3, r0
 8001276:	827b      	strh	r3, [r7, #18]
		int16_t RL_tmp = ESC_speed->up_value - pitch_err*P_pitch + pitch_d_err*D_pitch + roll_err*P_roll - roll_d_err*D_roll;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff f958 	bl	8000534 <__aeabi_i2d>
 8001284:	4604      	mov	r4, r0
 8001286:	460d      	mov	r5, r1
 8001288:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800128a:	f7ff f953 	bl	8000534 <__aeabi_i2d>
 800128e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001292:	f7ff f9b9 	bl	8000608 <__aeabi_dmul>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	4620      	mov	r0, r4
 800129c:	4629      	mov	r1, r5
 800129e:	f7fe fffb 	bl	8000298 <__aeabi_dsub>
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
 80012a6:	4614      	mov	r4, r2
 80012a8:	461d      	mov	r5, r3
 80012aa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80012ac:	f7ff f942 	bl	8000534 <__aeabi_i2d>
 80012b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80012b4:	f7ff f9a8 	bl	8000608 <__aeabi_dmul>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	4620      	mov	r0, r4
 80012be:	4629      	mov	r1, r5
 80012c0:	f7fe ffec 	bl	800029c <__adddf3>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4614      	mov	r4, r2
 80012ca:	461d      	mov	r5, r3
 80012cc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80012ce:	f7ff f931 	bl	8000534 <__aeabi_i2d>
 80012d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80012d6:	f7ff f997 	bl	8000608 <__aeabi_dmul>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	4620      	mov	r0, r4
 80012e0:	4629      	mov	r1, r5
 80012e2:	f7fe ffdb 	bl	800029c <__adddf3>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	4614      	mov	r4, r2
 80012ec:	461d      	mov	r5, r3
 80012ee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80012f0:	f7ff f920 	bl	8000534 <__aeabi_i2d>
 80012f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012f8:	f7ff f986 	bl	8000608 <__aeabi_dmul>
 80012fc:	4602      	mov	r2, r0
 80012fe:	460b      	mov	r3, r1
 8001300:	4620      	mov	r0, r4
 8001302:	4629      	mov	r1, r5
 8001304:	f7fe ffc8 	bl	8000298 <__aeabi_dsub>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	4610      	mov	r0, r2
 800130e:	4619      	mov	r1, r3
 8001310:	f7ff fc2a 	bl	8000b68 <__aeabi_d2iz>
 8001314:	4603      	mov	r3, r0
 8001316:	823b      	strh	r3, [r7, #16]

		if(FR_tmp > low_lim && FR_tmp < high_lim){
 8001318:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800131c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8001320:	429a      	cmp	r2, r3
 8001322:	dd08      	ble.n	8001336 <ESC_followCmd+0x412>
 8001324:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001328:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800132c:	429a      	cmp	r2, r3
 800132e:	da02      	bge.n	8001336 <ESC_followCmd+0x412>
			ESC_speed->FR = FR_tmp;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	8afa      	ldrh	r2, [r7, #22]
 8001334:	801a      	strh	r2, [r3, #0]
		}

		if(FL_tmp > low_lim && FL_tmp < high_lim){
 8001336:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800133a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800133e:	429a      	cmp	r2, r3
 8001340:	dd08      	ble.n	8001354 <ESC_followCmd+0x430>
 8001342:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001346:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800134a:	429a      	cmp	r2, r3
 800134c:	da02      	bge.n	8001354 <ESC_followCmd+0x430>
			ESC_speed->FL = FL_tmp;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	8aba      	ldrh	r2, [r7, #20]
 8001352:	805a      	strh	r2, [r3, #2]
		}

		if(RR_tmp > low_lim && RR_tmp < high_lim){
 8001354:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001358:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800135c:	429a      	cmp	r2, r3
 800135e:	dd0b      	ble.n	8001378 <ESC_followCmd+0x454>
 8001360:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001364:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8001368:	429a      	cmp	r2, r3
 800136a:	da05      	bge.n	8001378 <ESC_followCmd+0x454>
			ESC_speed->RR = RR_tmp;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	8a7a      	ldrh	r2, [r7, #18]
 8001370:	809a      	strh	r2, [r3, #4]
 8001372:	e001      	b.n	8001378 <ESC_followCmd+0x454>
 8001374:	08009ec0 	.word	0x08009ec0
		}

		if(RL_tmp > low_lim && RL_tmp < high_lim){
 8001378:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800137c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8001380:	429a      	cmp	r2, r3
 8001382:	dd1c      	ble.n	80013be <ESC_followCmd+0x49a>
 8001384:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001388:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800138c:	429a      	cmp	r2, r3
 800138e:	da16      	bge.n	80013be <ESC_followCmd+0x49a>
			ESC_speed->RL = RL_tmp;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	8a3a      	ldrh	r2, [r7, #16]
 8001394:	80da      	strh	r2, [r3, #6]
		ESC_speed->FL = 0;
		ESC_speed->RR = 0;
		ESC_speed->RL = 0;
		ESC_speed->up_value =0;
	}
}
 8001396:	e012      	b.n	80013be <ESC_followCmd+0x49a>
	}else if(ESC_speed->state == DISARMED){
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	7a9b      	ldrb	r3, [r3, #10]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d10e      	bne.n	80013be <ESC_followCmd+0x49a>
		ESC_speed->FR = 0;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2200      	movs	r2, #0
 80013a4:	801a      	strh	r2, [r3, #0]
		ESC_speed->FL = 0;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2200      	movs	r2, #0
 80013aa:	805a      	strh	r2, [r3, #2]
		ESC_speed->RR = 0;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2200      	movs	r2, #0
 80013b0:	809a      	strh	r2, [r3, #4]
		ESC_speed->RL = 0;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	2200      	movs	r2, #0
 80013b6:	80da      	strh	r2, [r3, #6]
		ESC_speed->up_value =0;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2200      	movs	r2, #0
 80013bc:	811a      	strh	r2, [r3, #8]
}
 80013be:	bf00      	nop
 80013c0:	3758      	adds	r7, #88	; 0x58
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bdb0      	pop	{r4, r5, r7, pc}
 80013c6:	bf00      	nop

080013c8 <ESC_setSpeed>:


void ESC_setSpeed(ESC_CONF * ESC_speed){
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]

	TIM3->CCR1 = ESC_speed->FR + 1000;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013d6:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 80013da:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <ESC_setSpeed+0x4c>)
 80013dc:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = ESC_speed->FL + 1000;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013e4:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 80013e8:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <ESC_setSpeed+0x4c>)
 80013ea:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR3 = ESC_speed->RR + 1000;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80013f2:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 80013f6:	4b07      	ldr	r3, [pc, #28]	; (8001414 <ESC_setSpeed+0x4c>)
 80013f8:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM3->CCR4 = ESC_speed->RL + 1000;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001400:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8001404:	4b03      	ldr	r3, [pc, #12]	; (8001414 <ESC_setSpeed+0x4c>)
 8001406:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	40000400 	.word	0x40000400

08001418 <MPU6050_Init>:





void MPU6050_Init(IMU_MEASURE * MPU_measure){
 8001418:	b580      	push	{r7, lr}
 800141a:	b088      	sub	sp, #32
 800141c:	af04      	add	r7, sp, #16
 800141e:	6078      	str	r0, [r7, #4]

	uint8_t check = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	// Reads from address if device is connected
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 500);
 8001424:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001428:	9302      	str	r3, [sp, #8]
 800142a:	2301      	movs	r3, #1
 800142c:	9301      	str	r3, [sp, #4]
 800142e:	f107 030f 	add.w	r3, r7, #15
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	2301      	movs	r3, #1
 8001436:	2275      	movs	r2, #117	; 0x75
 8001438:	21d0      	movs	r1, #208	; 0xd0
 800143a:	4829      	ldr	r0, [pc, #164]	; (80014e0 <MPU6050_Init+0xc8>)
 800143c:	f002 f958 	bl	80036f0 <HAL_I2C_Mem_Read>

	if(check == 104){
 8001440:	7bfb      	ldrb	r3, [r7, #15]
 8001442:	2b68      	cmp	r3, #104	; 0x68
 8001444:	d148      	bne.n	80014d8 <MPU6050_Init+0xc0>
		PRINTF("MPU6050 initialized \n\r");
 8001446:	4827      	ldr	r0, [pc, #156]	; (80014e4 <MPU6050_Init+0xcc>)
 8001448:	f000 fcda 	bl	8001e00 <PRINTF>

		// exit SLEEP mode
		data=0;
 800144c:	2300      	movs	r3, #0
 800144e:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, 500);
 8001450:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001454:	9302      	str	r3, [sp, #8]
 8001456:	2301      	movs	r3, #1
 8001458:	9301      	str	r3, [sp, #4]
 800145a:	f107 030e 	add.w	r3, r7, #14
 800145e:	9300      	str	r3, [sp, #0]
 8001460:	2301      	movs	r3, #1
 8001462:	226b      	movs	r2, #107	; 0x6b
 8001464:	21d0      	movs	r1, #208	; 0xd0
 8001466:	481e      	ldr	r0, [pc, #120]	; (80014e0 <MPU6050_Init+0xc8>)
 8001468:	f002 f848 	bl	80034fc <HAL_I2C_Mem_Write>

		// sample frequency = 8 kHZ
		data = 0X07;
 800146c:	2307      	movs	r3, #7
 800146e:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, 500);
 8001470:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001474:	9302      	str	r3, [sp, #8]
 8001476:	2301      	movs	r3, #1
 8001478:	9301      	str	r3, [sp, #4]
 800147a:	f107 030e 	add.w	r3, r7, #14
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	2301      	movs	r3, #1
 8001482:	2219      	movs	r2, #25
 8001484:	21d0      	movs	r1, #208	; 0xd0
 8001486:	4816      	ldr	r0, [pc, #88]	; (80014e0 <MPU6050_Init+0xc8>)
 8001488:	f002 f838 	bl	80034fc <HAL_I2C_Mem_Write>
		// set the MPU digital low pass filter to 250 Hz
		//data = 0X01;
		//HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, CONFIG, 1, &data, 1, 500);

		// Set up the ACC config (full scale and auto test)
		data = 0x08;
 800148c:	2308      	movs	r3, #8
 800148e:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, 500);
 8001490:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001494:	9302      	str	r3, [sp, #8]
 8001496:	2301      	movs	r3, #1
 8001498:	9301      	str	r3, [sp, #4]
 800149a:	f107 030e 	add.w	r3, r7, #14
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	2301      	movs	r3, #1
 80014a2:	221c      	movs	r2, #28
 80014a4:	21d0      	movs	r1, #208	; 0xd0
 80014a6:	480e      	ldr	r0, [pc, #56]	; (80014e0 <MPU6050_Init+0xc8>)
 80014a8:	f002 f828 	bl	80034fc <HAL_I2C_Mem_Write>


		// Set up the GYRO config (full scale)
		data = 0x08;
 80014ac:	2308      	movs	r3, #8
 80014ae:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, 500);
 80014b0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80014b4:	9302      	str	r3, [sp, #8]
 80014b6:	2301      	movs	r3, #1
 80014b8:	9301      	str	r3, [sp, #4]
 80014ba:	f107 030e 	add.w	r3, r7, #14
 80014be:	9300      	str	r3, [sp, #0]
 80014c0:	2301      	movs	r3, #1
 80014c2:	221b      	movs	r2, #27
 80014c4:	21d0      	movs	r1, #208	; 0xd0
 80014c6:	4806      	ldr	r0, [pc, #24]	; (80014e0 <MPU6050_Init+0xc8>)
 80014c8:	f002 f818 	bl	80034fc <HAL_I2C_Mem_Write>

		GYRO_STATE = 1;
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <MPU6050_Init+0xd0>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	701a      	strb	r2, [r3, #0]
		ACC_STATE = 1;
 80014d2:	4b06      	ldr	r3, [pc, #24]	; (80014ec <MPU6050_Init+0xd4>)
 80014d4:	2201      	movs	r2, #1
 80014d6:	701a      	strb	r2, [r3, #0]
	}
}
 80014d8:	bf00      	nop
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000320 	.word	0x20000320
 80014e4:	08009ec8 	.word	0x08009ec8
 80014e8:	20000238 	.word	0x20000238
 80014ec:	20000218 	.word	0x20000218

080014f0 <MPU6050_Reset>:


void MPU6050_Reset(IMU_MEASURE * MPU_measure){
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]

	MPU_measure->gyro_angle_X = 0;
 80014f8:	6879      	ldr	r1, [r7, #4]
 80014fa:	f04f 0200 	mov.w	r2, #0
 80014fe:	f04f 0300 	mov.w	r3, #0
 8001502:	e9c1 2300 	strd	r2, r3, [r1]
	MPU_measure->gyro_angle_Y = 0;
 8001506:	6879      	ldr	r1, [r7, #4]
 8001508:	f04f 0200 	mov.w	r2, #0
 800150c:	f04f 0300 	mov.w	r3, #0
 8001510:	e9c1 2302 	strd	r2, r3, [r1, #8]
	MPU_measure->gyro_angle_Z = 0;
 8001514:	6879      	ldr	r1, [r7, #4]
 8001516:	f04f 0200 	mov.w	r2, #0
 800151a:	f04f 0300 	mov.w	r3, #0
 800151e:	e9c1 2304 	strd	r2, r3, [r1, #16]

	MPU_measure->gyro_angle_dX = 0;
 8001522:	6879      	ldr	r1, [r7, #4]
 8001524:	f04f 0200 	mov.w	r2, #0
 8001528:	f04f 0300 	mov.w	r3, #0
 800152c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	MPU_measure->gyro_angle_dY = 0;
 8001530:	6879      	ldr	r1, [r7, #4]
 8001532:	f04f 0200 	mov.w	r2, #0
 8001536:	f04f 0300 	mov.w	r3, #0
 800153a:	e9c1 2308 	strd	r2, r3, [r1, #32]
	MPU_measure->gyro_angle_dZ = 0;
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	f04f 0200 	mov.w	r2, #0
 8001544:	f04f 0300 	mov.w	r3, #0
 8001548:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	MPU_measure->acc_angle_X = 0;
 800154c:	6879      	ldr	r1, [r7, #4]
 800154e:	f04f 0200 	mov.w	r2, #0
 8001552:	f04f 0300 	mov.w	r3, #0
 8001556:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	MPU_measure->acc_angle_Y = 0;
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	f04f 0200 	mov.w	r2, #0
 8001560:	f04f 0300 	mov.w	r3, #0
 8001564:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	MPU_measure->angle_X = 0;
 8001568:	6879      	ldr	r1, [r7, #4]
 800156a:	f04f 0200 	mov.w	r2, #0
 800156e:	f04f 0300 	mov.w	r3, #0
 8001572:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	MPU_measure->angle_Y = 0;
 8001576:	6879      	ldr	r1, [r7, #4]
 8001578:	f04f 0200 	mov.w	r2, #0
 800157c:	f04f 0300 	mov.w	r3, #0
 8001580:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	MPU_measure->angle_Z = 0;
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	f04f 0200 	mov.w	r2, #0
 800158a:	f04f 0300 	mov.w	r3, #0
 800158e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
	...

080015a0 <MPU6050_ReadAcc>:


// Read ACCELEROMETER data
void MPU6050_ReadAcc(IMU_MEASURE * MPU_measure){
 80015a0:	b5b0      	push	{r4, r5, r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af04      	add	r7, sp, #16
 80015a6:	6078      	str	r0, [r7, #4]

	if(ACC_STATE == DISABLED) return;
 80015a8:	4bb1      	ldr	r3, [pc, #708]	; (8001870 <MPU6050_ReadAcc+0x2d0>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f000 820b 	beq.w	80019c8 <MPU6050_ReadAcc+0x428>

	// read data
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, rec_data1, 6, 500);
 80015b2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015b6:	9302      	str	r3, [sp, #8]
 80015b8:	2306      	movs	r3, #6
 80015ba:	9301      	str	r3, [sp, #4]
 80015bc:	4bad      	ldr	r3, [pc, #692]	; (8001874 <MPU6050_ReadAcc+0x2d4>)
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	2301      	movs	r3, #1
 80015c2:	223b      	movs	r2, #59	; 0x3b
 80015c4:	21d0      	movs	r1, #208	; 0xd0
 80015c6:	48ac      	ldr	r0, [pc, #688]	; (8001878 <MPU6050_ReadAcc+0x2d8>)
 80015c8:	f002 f892 	bl	80036f0 <HAL_I2C_Mem_Read>

	// parse data
	acc_X_raw = (int16_t)(rec_data1[0] << 8 | rec_data1[1]);
 80015cc:	4ba9      	ldr	r3, [pc, #676]	; (8001874 <MPU6050_ReadAcc+0x2d4>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	021b      	lsls	r3, r3, #8
 80015d2:	b21a      	sxth	r2, r3
 80015d4:	4ba7      	ldr	r3, [pc, #668]	; (8001874 <MPU6050_ReadAcc+0x2d4>)
 80015d6:	785b      	ldrb	r3, [r3, #1]
 80015d8:	b21b      	sxth	r3, r3
 80015da:	4313      	orrs	r3, r2
 80015dc:	b21a      	sxth	r2, r3
 80015de:	4ba7      	ldr	r3, [pc, #668]	; (800187c <MPU6050_ReadAcc+0x2dc>)
 80015e0:	801a      	strh	r2, [r3, #0]
	acc_Y_raw = (int16_t)(rec_data1[2] << 8 | rec_data1[3]);
 80015e2:	4ba4      	ldr	r3, [pc, #656]	; (8001874 <MPU6050_ReadAcc+0x2d4>)
 80015e4:	789b      	ldrb	r3, [r3, #2]
 80015e6:	021b      	lsls	r3, r3, #8
 80015e8:	b21a      	sxth	r2, r3
 80015ea:	4ba2      	ldr	r3, [pc, #648]	; (8001874 <MPU6050_ReadAcc+0x2d4>)
 80015ec:	78db      	ldrb	r3, [r3, #3]
 80015ee:	b21b      	sxth	r3, r3
 80015f0:	4313      	orrs	r3, r2
 80015f2:	b21a      	sxth	r2, r3
 80015f4:	4ba2      	ldr	r3, [pc, #648]	; (8001880 <MPU6050_ReadAcc+0x2e0>)
 80015f6:	801a      	strh	r2, [r3, #0]
	acc_Z_raw = (int16_t)(rec_data1[4] << 8 | rec_data1[5]);
 80015f8:	4b9e      	ldr	r3, [pc, #632]	; (8001874 <MPU6050_ReadAcc+0x2d4>)
 80015fa:	791b      	ldrb	r3, [r3, #4]
 80015fc:	021b      	lsls	r3, r3, #8
 80015fe:	b21a      	sxth	r2, r3
 8001600:	4b9c      	ldr	r3, [pc, #624]	; (8001874 <MPU6050_ReadAcc+0x2d4>)
 8001602:	795b      	ldrb	r3, [r3, #5]
 8001604:	b21b      	sxth	r3, r3
 8001606:	4313      	orrs	r3, r2
 8001608:	b21a      	sxth	r2, r3
 800160a:	4b9e      	ldr	r3, [pc, #632]	; (8001884 <MPU6050_ReadAcc+0x2e4>)
 800160c:	801a      	strh	r2, [r3, #0]

	// scale data
	acc_X_scaled = (double)acc_X_raw/ACC_SCALE_FACTOR;
 800160e:	4b9b      	ldr	r3, [pc, #620]	; (800187c <MPU6050_ReadAcc+0x2dc>)
 8001610:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001614:	4618      	mov	r0, r3
 8001616:	f7fe ff8d 	bl	8000534 <__aeabi_i2d>
 800161a:	f04f 0200 	mov.w	r2, #0
 800161e:	4b9a      	ldr	r3, [pc, #616]	; (8001888 <MPU6050_ReadAcc+0x2e8>)
 8001620:	f7ff f91c 	bl	800085c <__aeabi_ddiv>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	4998      	ldr	r1, [pc, #608]	; (800188c <MPU6050_ReadAcc+0x2ec>)
 800162a:	e9c1 2300 	strd	r2, r3, [r1]
	acc_Y_scaled = (double)acc_Y_raw/ACC_SCALE_FACTOR;
 800162e:	4b94      	ldr	r3, [pc, #592]	; (8001880 <MPU6050_ReadAcc+0x2e0>)
 8001630:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001634:	4618      	mov	r0, r3
 8001636:	f7fe ff7d 	bl	8000534 <__aeabi_i2d>
 800163a:	f04f 0200 	mov.w	r2, #0
 800163e:	4b92      	ldr	r3, [pc, #584]	; (8001888 <MPU6050_ReadAcc+0x2e8>)
 8001640:	f7ff f90c 	bl	800085c <__aeabi_ddiv>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	4991      	ldr	r1, [pc, #580]	; (8001890 <MPU6050_ReadAcc+0x2f0>)
 800164a:	e9c1 2300 	strd	r2, r3, [r1]
	acc_Z_scaled = (double)acc_Z_raw/ACC_SCALE_FACTOR;
 800164e:	4b8d      	ldr	r3, [pc, #564]	; (8001884 <MPU6050_ReadAcc+0x2e4>)
 8001650:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe ff6d 	bl	8000534 <__aeabi_i2d>
 800165a:	f04f 0200 	mov.w	r2, #0
 800165e:	4b8a      	ldr	r3, [pc, #552]	; (8001888 <MPU6050_ReadAcc+0x2e8>)
 8001660:	f7ff f8fc 	bl	800085c <__aeabi_ddiv>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	498a      	ldr	r1, [pc, #552]	; (8001894 <MPU6050_ReadAcc+0x2f4>)
 800166a:	e9c1 2300 	strd	r2, r3, [r1]

	if(ACC_STATE == CALIBRATION){
 800166e:	4b80      	ldr	r3, [pc, #512]	; (8001870 <MPU6050_ReadAcc+0x2d0>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b01      	cmp	r3, #1
 8001674:	f040 8120 	bne.w	80018b8 <MPU6050_ReadAcc+0x318>
		iter_a += 1;
 8001678:	4b87      	ldr	r3, [pc, #540]	; (8001898 <MPU6050_ReadAcc+0x2f8>)
 800167a:	881b      	ldrh	r3, [r3, #0]
 800167c:	3301      	adds	r3, #1
 800167e:	b29a      	uxth	r2, r3
 8001680:	4b85      	ldr	r3, [pc, #532]	; (8001898 <MPU6050_ReadAcc+0x2f8>)
 8001682:	801a      	strh	r2, [r3, #0]

		avrg_aX += acc_X_scaled;
 8001684:	4b85      	ldr	r3, [pc, #532]	; (800189c <MPU6050_ReadAcc+0x2fc>)
 8001686:	e9d3 0100 	ldrd	r0, r1, [r3]
 800168a:	4b80      	ldr	r3, [pc, #512]	; (800188c <MPU6050_ReadAcc+0x2ec>)
 800168c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001690:	f7fe fe04 	bl	800029c <__adddf3>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4980      	ldr	r1, [pc, #512]	; (800189c <MPU6050_ReadAcc+0x2fc>)
 800169a:	e9c1 2300 	strd	r2, r3, [r1]
		avrg_aY += acc_Y_scaled;
 800169e:	4b80      	ldr	r3, [pc, #512]	; (80018a0 <MPU6050_ReadAcc+0x300>)
 80016a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016a4:	4b7a      	ldr	r3, [pc, #488]	; (8001890 <MPU6050_ReadAcc+0x2f0>)
 80016a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016aa:	f7fe fdf7 	bl	800029c <__adddf3>
 80016ae:	4602      	mov	r2, r0
 80016b0:	460b      	mov	r3, r1
 80016b2:	497b      	ldr	r1, [pc, #492]	; (80018a0 <MPU6050_ReadAcc+0x300>)
 80016b4:	e9c1 2300 	strd	r2, r3, [r1]
		avrg_aZ += acc_Z_scaled;
 80016b8:	4b7a      	ldr	r3, [pc, #488]	; (80018a4 <MPU6050_ReadAcc+0x304>)
 80016ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016be:	4b75      	ldr	r3, [pc, #468]	; (8001894 <MPU6050_ReadAcc+0x2f4>)
 80016c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c4:	f7fe fdea 	bl	800029c <__adddf3>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4975      	ldr	r1, [pc, #468]	; (80018a4 <MPU6050_ReadAcc+0x304>)
 80016ce:	e9c1 2300 	strd	r2, r3, [r1]

		if(iter_a == CALIBRATION_TIME*SAMPL_FREQ){
 80016d2:	4b71      	ldr	r3, [pc, #452]	; (8001898 <MPU6050_ReadAcc+0x2f8>)
 80016d4:	881b      	ldrh	r3, [r3, #0]
 80016d6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016da:	f040 8176 	bne.w	80019ca <MPU6050_ReadAcc+0x42a>

			avrg_aX = avrg_aX/iter_a;
 80016de:	4b6f      	ldr	r3, [pc, #444]	; (800189c <MPU6050_ReadAcc+0x2fc>)
 80016e0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80016e4:	4b6c      	ldr	r3, [pc, #432]	; (8001898 <MPU6050_ReadAcc+0x2f8>)
 80016e6:	881b      	ldrh	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7fe ff23 	bl	8000534 <__aeabi_i2d>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	4620      	mov	r0, r4
 80016f4:	4629      	mov	r1, r5
 80016f6:	f7ff f8b1 	bl	800085c <__aeabi_ddiv>
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	4967      	ldr	r1, [pc, #412]	; (800189c <MPU6050_ReadAcc+0x2fc>)
 8001700:	e9c1 2300 	strd	r2, r3, [r1]
			avrg_aY = avrg_aY/iter_a;
 8001704:	4b66      	ldr	r3, [pc, #408]	; (80018a0 <MPU6050_ReadAcc+0x300>)
 8001706:	e9d3 4500 	ldrd	r4, r5, [r3]
 800170a:	4b63      	ldr	r3, [pc, #396]	; (8001898 <MPU6050_ReadAcc+0x2f8>)
 800170c:	881b      	ldrh	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f7fe ff10 	bl	8000534 <__aeabi_i2d>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	4620      	mov	r0, r4
 800171a:	4629      	mov	r1, r5
 800171c:	f7ff f89e 	bl	800085c <__aeabi_ddiv>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	495e      	ldr	r1, [pc, #376]	; (80018a0 <MPU6050_ReadAcc+0x300>)
 8001726:	e9c1 2300 	strd	r2, r3, [r1]
			avrg_aZ = avrg_aZ/iter_a;
 800172a:	4b5e      	ldr	r3, [pc, #376]	; (80018a4 <MPU6050_ReadAcc+0x304>)
 800172c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001730:	4b59      	ldr	r3, [pc, #356]	; (8001898 <MPU6050_ReadAcc+0x2f8>)
 8001732:	881b      	ldrh	r3, [r3, #0]
 8001734:	4618      	mov	r0, r3
 8001736:	f7fe fefd 	bl	8000534 <__aeabi_i2d>
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	4620      	mov	r0, r4
 8001740:	4629      	mov	r1, r5
 8001742:	f7ff f88b 	bl	800085c <__aeabi_ddiv>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	4956      	ldr	r1, [pc, #344]	; (80018a4 <MPU6050_ReadAcc+0x304>)
 800174c:	e9c1 2300 	strd	r2, r3, [r1]

			tot_acc = sqrt((avrg_aX*avrg_aX) + (avrg_aY*avrg_aY) + (avrg_aZ*avrg_aZ));
 8001750:	4b52      	ldr	r3, [pc, #328]	; (800189c <MPU6050_ReadAcc+0x2fc>)
 8001752:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001756:	4b51      	ldr	r3, [pc, #324]	; (800189c <MPU6050_ReadAcc+0x2fc>)
 8001758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175c:	f7fe ff54 	bl	8000608 <__aeabi_dmul>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	4614      	mov	r4, r2
 8001766:	461d      	mov	r5, r3
 8001768:	4b4d      	ldr	r3, [pc, #308]	; (80018a0 <MPU6050_ReadAcc+0x300>)
 800176a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800176e:	4b4c      	ldr	r3, [pc, #304]	; (80018a0 <MPU6050_ReadAcc+0x300>)
 8001770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001774:	f7fe ff48 	bl	8000608 <__aeabi_dmul>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4620      	mov	r0, r4
 800177e:	4629      	mov	r1, r5
 8001780:	f7fe fd8c 	bl	800029c <__adddf3>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	4614      	mov	r4, r2
 800178a:	461d      	mov	r5, r3
 800178c:	4b45      	ldr	r3, [pc, #276]	; (80018a4 <MPU6050_ReadAcc+0x304>)
 800178e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001792:	4b44      	ldr	r3, [pc, #272]	; (80018a4 <MPU6050_ReadAcc+0x304>)
 8001794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001798:	f7fe ff36 	bl	8000608 <__aeabi_dmul>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	4620      	mov	r0, r4
 80017a2:	4629      	mov	r1, r5
 80017a4:	f7fe fd7a 	bl	800029c <__adddf3>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	ec43 2b17 	vmov	d7, r2, r3
 80017b0:	eeb0 0a47 	vmov.f32	s0, s14
 80017b4:	eef0 0a67 	vmov.f32	s1, s15
 80017b8:	f008 f836 	bl	8009828 <sqrt>
 80017bc:	eeb0 7a40 	vmov.f32	s14, s0
 80017c0:	eef0 7a60 	vmov.f32	s15, s1
 80017c4:	4b38      	ldr	r3, [pc, #224]	; (80018a8 <MPU6050_ReadAcc+0x308>)
 80017c6:	ed83 7b00 	vstr	d7, [r3]
			MPU_measure->angle_X = asin(avrg_aY/tot_acc) * RAD_TO_DEG;
 80017ca:	4b35      	ldr	r3, [pc, #212]	; (80018a0 <MPU6050_ReadAcc+0x300>)
 80017cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017d0:	4b35      	ldr	r3, [pc, #212]	; (80018a8 <MPU6050_ReadAcc+0x308>)
 80017d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d6:	f7ff f841 	bl	800085c <__aeabi_ddiv>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	ec43 2b17 	vmov	d7, r2, r3
 80017e2:	eeb0 0a47 	vmov.f32	s0, s14
 80017e6:	eef0 0a67 	vmov.f32	s1, s15
 80017ea:	f007 ffe3 	bl	80097b4 <asin>
 80017ee:	ec51 0b10 	vmov	r0, r1, d0
 80017f2:	f04f 0200 	mov.w	r2, #0
 80017f6:	4b2d      	ldr	r3, [pc, #180]	; (80018ac <MPU6050_ReadAcc+0x30c>)
 80017f8:	f7fe ff06 	bl	8000608 <__aeabi_dmul>
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	4610      	mov	r0, r2
 8001802:	4619      	mov	r1, r3
 8001804:	a316      	add	r3, pc, #88	; (adr r3, 8001860 <MPU6050_ReadAcc+0x2c0>)
 8001806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180a:	f7ff f827 	bl	800085c <__aeabi_ddiv>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	6879      	ldr	r1, [r7, #4]
 8001814:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
			MPU_measure->angle_Y = asin(avrg_aX/tot_acc) * (-RAD_TO_DEG);
 8001818:	4b20      	ldr	r3, [pc, #128]	; (800189c <MPU6050_ReadAcc+0x2fc>)
 800181a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800181e:	4b22      	ldr	r3, [pc, #136]	; (80018a8 <MPU6050_ReadAcc+0x308>)
 8001820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001824:	f7ff f81a 	bl	800085c <__aeabi_ddiv>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	ec43 2b17 	vmov	d7, r2, r3
 8001830:	eeb0 0a47 	vmov.f32	s0, s14
 8001834:	eef0 0a67 	vmov.f32	s1, s15
 8001838:	f007 ffbc 	bl	80097b4 <asin>
 800183c:	ec51 0b10 	vmov	r0, r1, d0
 8001840:	a309      	add	r3, pc, #36	; (adr r3, 8001868 <MPU6050_ReadAcc+0x2c8>)
 8001842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001846:	f7fe fedf 	bl	8000608 <__aeabi_dmul>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			ACC_STATE = READY;
 8001854:	4b06      	ldr	r3, [pc, #24]	; (8001870 <MPU6050_ReadAcc+0x2d0>)
 8001856:	2202      	movs	r2, #2
 8001858:	701a      	strb	r2, [r3, #0]
 800185a:	e029      	b.n	80018b0 <MPU6050_ReadAcc+0x310>
 800185c:	f3af 8000 	nop.w
 8001860:	53c8d4f1 	.word	0x53c8d4f1
 8001864:	400921fb 	.word	0x400921fb
 8001868:	1af05a77 	.word	0x1af05a77
 800186c:	c04ca5dc 	.word	0xc04ca5dc
 8001870:	20000218 	.word	0x20000218
 8001874:	20000308 	.word	0x20000308
 8001878:	20000320 	.word	0x20000320
 800187c:	2000030e 	.word	0x2000030e
 8001880:	200002f8 	.word	0x200002f8
 8001884:	200002f0 	.word	0x200002f0
 8001888:	40c00000 	.word	0x40c00000
 800188c:	20000258 	.word	0x20000258
 8001890:	200002e8 	.word	0x200002e8
 8001894:	20000318 	.word	0x20000318
 8001898:	200001fc 	.word	0x200001fc
 800189c:	20000200 	.word	0x20000200
 80018a0:	20000208 	.word	0x20000208
 80018a4:	20000210 	.word	0x20000210
 80018a8:	20000270 	.word	0x20000270
 80018ac:	40668000 	.word	0x40668000

			PRINTF("MPU6050 READY TO USE - acc \n\r");
 80018b0:	484b      	ldr	r0, [pc, #300]	; (80019e0 <MPU6050_ReadAcc+0x440>)
 80018b2:	f000 faa5 	bl	8001e00 <PRINTF>
 80018b6:	e088      	b.n	80019ca <MPU6050_ReadAcc+0x42a>
		}

	}else if(ACC_STATE == READY){
 80018b8:	4b4a      	ldr	r3, [pc, #296]	; (80019e4 <MPU6050_ReadAcc+0x444>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b02      	cmp	r3, #2
 80018be:	f040 8084 	bne.w	80019ca <MPU6050_ReadAcc+0x42a>

		tot_acc = sqrt((acc_X_scaled*acc_X_scaled) + (acc_Y_scaled*acc_Y_scaled) + (acc_Z_scaled*acc_Z_scaled));
 80018c2:	4b49      	ldr	r3, [pc, #292]	; (80019e8 <MPU6050_ReadAcc+0x448>)
 80018c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018c8:	4b47      	ldr	r3, [pc, #284]	; (80019e8 <MPU6050_ReadAcc+0x448>)
 80018ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ce:	f7fe fe9b 	bl	8000608 <__aeabi_dmul>
 80018d2:	4602      	mov	r2, r0
 80018d4:	460b      	mov	r3, r1
 80018d6:	4614      	mov	r4, r2
 80018d8:	461d      	mov	r5, r3
 80018da:	4b44      	ldr	r3, [pc, #272]	; (80019ec <MPU6050_ReadAcc+0x44c>)
 80018dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018e0:	4b42      	ldr	r3, [pc, #264]	; (80019ec <MPU6050_ReadAcc+0x44c>)
 80018e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e6:	f7fe fe8f 	bl	8000608 <__aeabi_dmul>
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	4620      	mov	r0, r4
 80018f0:	4629      	mov	r1, r5
 80018f2:	f7fe fcd3 	bl	800029c <__adddf3>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	4614      	mov	r4, r2
 80018fc:	461d      	mov	r5, r3
 80018fe:	4b3c      	ldr	r3, [pc, #240]	; (80019f0 <MPU6050_ReadAcc+0x450>)
 8001900:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001904:	4b3a      	ldr	r3, [pc, #232]	; (80019f0 <MPU6050_ReadAcc+0x450>)
 8001906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800190a:	f7fe fe7d 	bl	8000608 <__aeabi_dmul>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	4620      	mov	r0, r4
 8001914:	4629      	mov	r1, r5
 8001916:	f7fe fcc1 	bl	800029c <__adddf3>
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	ec43 2b17 	vmov	d7, r2, r3
 8001922:	eeb0 0a47 	vmov.f32	s0, s14
 8001926:	eef0 0a67 	vmov.f32	s1, s15
 800192a:	f007 ff7d 	bl	8009828 <sqrt>
 800192e:	eeb0 7a40 	vmov.f32	s14, s0
 8001932:	eef0 7a60 	vmov.f32	s15, s1
 8001936:	4b2f      	ldr	r3, [pc, #188]	; (80019f4 <MPU6050_ReadAcc+0x454>)
 8001938:	ed83 7b00 	vstr	d7, [r3]
		MPU_measure->acc_angle_X = asin(acc_Y_scaled/tot_acc) * RAD_TO_DEG;
 800193c:	4b2b      	ldr	r3, [pc, #172]	; (80019ec <MPU6050_ReadAcc+0x44c>)
 800193e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001942:	4b2c      	ldr	r3, [pc, #176]	; (80019f4 <MPU6050_ReadAcc+0x454>)
 8001944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001948:	f7fe ff88 	bl	800085c <__aeabi_ddiv>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	ec43 2b17 	vmov	d7, r2, r3
 8001954:	eeb0 0a47 	vmov.f32	s0, s14
 8001958:	eef0 0a67 	vmov.f32	s1, s15
 800195c:	f007 ff2a 	bl	80097b4 <asin>
 8001960:	ec51 0b10 	vmov	r0, r1, d0
 8001964:	f04f 0200 	mov.w	r2, #0
 8001968:	4b23      	ldr	r3, [pc, #140]	; (80019f8 <MPU6050_ReadAcc+0x458>)
 800196a:	f7fe fe4d 	bl	8000608 <__aeabi_dmul>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	4610      	mov	r0, r2
 8001974:	4619      	mov	r1, r3
 8001976:	a316      	add	r3, pc, #88	; (adr r3, 80019d0 <MPU6050_ReadAcc+0x430>)
 8001978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197c:	f7fe ff6e 	bl	800085c <__aeabi_ddiv>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	6879      	ldr	r1, [r7, #4]
 8001986:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		MPU_measure->acc_angle_Y = asin(acc_X_scaled/tot_acc) * (-RAD_TO_DEG);
 800198a:	4b17      	ldr	r3, [pc, #92]	; (80019e8 <MPU6050_ReadAcc+0x448>)
 800198c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001990:	4b18      	ldr	r3, [pc, #96]	; (80019f4 <MPU6050_ReadAcc+0x454>)
 8001992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001996:	f7fe ff61 	bl	800085c <__aeabi_ddiv>
 800199a:	4602      	mov	r2, r0
 800199c:	460b      	mov	r3, r1
 800199e:	ec43 2b17 	vmov	d7, r2, r3
 80019a2:	eeb0 0a47 	vmov.f32	s0, s14
 80019a6:	eef0 0a67 	vmov.f32	s1, s15
 80019aa:	f007 ff03 	bl	80097b4 <asin>
 80019ae:	ec51 0b10 	vmov	r0, r1, d0
 80019b2:	a309      	add	r3, pc, #36	; (adr r3, 80019d8 <MPU6050_ReadAcc+0x438>)
 80019b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b8:	f7fe fe26 	bl	8000608 <__aeabi_dmul>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	6879      	ldr	r1, [r7, #4]
 80019c2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 80019c6:	e000      	b.n	80019ca <MPU6050_ReadAcc+0x42a>
	if(ACC_STATE == DISABLED) return;
 80019c8:	bf00      	nop

	}

}
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bdb0      	pop	{r4, r5, r7, pc}
 80019d0:	53c8d4f1 	.word	0x53c8d4f1
 80019d4:	400921fb 	.word	0x400921fb
 80019d8:	1af05a77 	.word	0x1af05a77
 80019dc:	c04ca5dc 	.word	0xc04ca5dc
 80019e0:	08009ee0 	.word	0x08009ee0
 80019e4:	20000218 	.word	0x20000218
 80019e8:	20000258 	.word	0x20000258
 80019ec:	200002e8 	.word	0x200002e8
 80019f0:	20000318 	.word	0x20000318
 80019f4:	20000270 	.word	0x20000270
 80019f8:	40668000 	.word	0x40668000
 80019fc:	00000000 	.word	0x00000000

08001a00 <MPU6050_ReadGyro>:





void MPU6050_ReadGyro(IMU_MEASURE * MPU6050_measure){
 8001a00:	b5b0      	push	{r4, r5, r7, lr}
 8001a02:	b08c      	sub	sp, #48	; 0x30
 8001a04:	af04      	add	r7, sp, #16
 8001a06:	6078      	str	r0, [r7, #4]

	if(GYRO_STATE == DISABLED) return;
 8001a08:	4b6f      	ldr	r3, [pc, #444]	; (8001bc8 <MPU6050_ReadGyro+0x1c8>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f000 8187 	beq.w	8001d20 <MPU6050_ReadGyro+0x320>

	// read data
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, rec_data2, 6, 500);
 8001a12:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001a16:	9302      	str	r3, [sp, #8]
 8001a18:	2306      	movs	r3, #6
 8001a1a:	9301      	str	r3, [sp, #4]
 8001a1c:	4b6b      	ldr	r3, [pc, #428]	; (8001bcc <MPU6050_ReadGyro+0x1cc>)
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	2301      	movs	r3, #1
 8001a22:	2243      	movs	r2, #67	; 0x43
 8001a24:	21d0      	movs	r1, #208	; 0xd0
 8001a26:	486a      	ldr	r0, [pc, #424]	; (8001bd0 <MPU6050_ReadGyro+0x1d0>)
 8001a28:	f001 fe62 	bl	80036f0 <HAL_I2C_Mem_Read>

	// parse data
	gyro_X_raw = (int16_t)(rec_data2[0] << 8 | rec_data2[1]);
 8001a2c:	4b67      	ldr	r3, [pc, #412]	; (8001bcc <MPU6050_ReadGyro+0x1cc>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	021b      	lsls	r3, r3, #8
 8001a32:	b21a      	sxth	r2, r3
 8001a34:	4b65      	ldr	r3, [pc, #404]	; (8001bcc <MPU6050_ReadGyro+0x1cc>)
 8001a36:	785b      	ldrb	r3, [r3, #1]
 8001a38:	b21b      	sxth	r3, r3
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	b21a      	sxth	r2, r3
 8001a3e:	4b65      	ldr	r3, [pc, #404]	; (8001bd4 <MPU6050_ReadGyro+0x1d4>)
 8001a40:	801a      	strh	r2, [r3, #0]
	gyro_Y_raw = (int16_t)(rec_data2[2] << 8 | rec_data2[3]);
 8001a42:	4b62      	ldr	r3, [pc, #392]	; (8001bcc <MPU6050_ReadGyro+0x1cc>)
 8001a44:	789b      	ldrb	r3, [r3, #2]
 8001a46:	021b      	lsls	r3, r3, #8
 8001a48:	b21a      	sxth	r2, r3
 8001a4a:	4b60      	ldr	r3, [pc, #384]	; (8001bcc <MPU6050_ReadGyro+0x1cc>)
 8001a4c:	78db      	ldrb	r3, [r3, #3]
 8001a4e:	b21b      	sxth	r3, r3
 8001a50:	4313      	orrs	r3, r2
 8001a52:	b21a      	sxth	r2, r3
 8001a54:	4b60      	ldr	r3, [pc, #384]	; (8001bd8 <MPU6050_ReadGyro+0x1d8>)
 8001a56:	801a      	strh	r2, [r3, #0]
	gyro_Z_raw = (int16_t)(rec_data2[4] << 8 | rec_data2[5]);
 8001a58:	4b5c      	ldr	r3, [pc, #368]	; (8001bcc <MPU6050_ReadGyro+0x1cc>)
 8001a5a:	791b      	ldrb	r3, [r3, #4]
 8001a5c:	021b      	lsls	r3, r3, #8
 8001a5e:	b21a      	sxth	r2, r3
 8001a60:	4b5a      	ldr	r3, [pc, #360]	; (8001bcc <MPU6050_ReadGyro+0x1cc>)
 8001a62:	795b      	ldrb	r3, [r3, #5]
 8001a64:	b21b      	sxth	r3, r3
 8001a66:	4313      	orrs	r3, r2
 8001a68:	b21a      	sxth	r2, r3
 8001a6a:	4b5c      	ldr	r3, [pc, #368]	; (8001bdc <MPU6050_ReadGyro+0x1dc>)
 8001a6c:	801a      	strh	r2, [r3, #0]

	// scale data
	gyro_X_scaled = gyro_X_raw/GYRO_SCALE_FACTOR;
 8001a6e:	4b59      	ldr	r3, [pc, #356]	; (8001bd4 <MPU6050_ReadGyro+0x1d4>)
 8001a70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7fe fd5d 	bl	8000534 <__aeabi_i2d>
 8001a7a:	a351      	add	r3, pc, #324	; (adr r3, 8001bc0 <MPU6050_ReadGyro+0x1c0>)
 8001a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a80:	f7fe feec 	bl	800085c <__aeabi_ddiv>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	4955      	ldr	r1, [pc, #340]	; (8001be0 <MPU6050_ReadGyro+0x1e0>)
 8001a8a:	e9c1 2300 	strd	r2, r3, [r1]
	gyro_Y_scaled = gyro_Y_raw/GYRO_SCALE_FACTOR;
 8001a8e:	4b52      	ldr	r3, [pc, #328]	; (8001bd8 <MPU6050_ReadGyro+0x1d8>)
 8001a90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7fe fd4d 	bl	8000534 <__aeabi_i2d>
 8001a9a:	a349      	add	r3, pc, #292	; (adr r3, 8001bc0 <MPU6050_ReadGyro+0x1c0>)
 8001a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa0:	f7fe fedc 	bl	800085c <__aeabi_ddiv>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	494e      	ldr	r1, [pc, #312]	; (8001be4 <MPU6050_ReadGyro+0x1e4>)
 8001aaa:	e9c1 2300 	strd	r2, r3, [r1]
	gyro_Z_scaled = gyro_Z_raw/GYRO_SCALE_FACTOR;
 8001aae:	4b4b      	ldr	r3, [pc, #300]	; (8001bdc <MPU6050_ReadGyro+0x1dc>)
 8001ab0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7fe fd3d 	bl	8000534 <__aeabi_i2d>
 8001aba:	a341      	add	r3, pc, #260	; (adr r3, 8001bc0 <MPU6050_ReadGyro+0x1c0>)
 8001abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac0:	f7fe fecc 	bl	800085c <__aeabi_ddiv>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	4947      	ldr	r1, [pc, #284]	; (8001be8 <MPU6050_ReadGyro+0x1e8>)
 8001aca:	e9c1 2300 	strd	r2, r3, [r1]


	// either calibrate or compute angle
	if(GYRO_STATE == CALIBRATION){
 8001ace:	4b3e      	ldr	r3, [pc, #248]	; (8001bc8 <MPU6050_ReadGyro+0x1c8>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	f040 8094 	bne.w	8001c00 <MPU6050_ReadGyro+0x200>
		iter_g += 1;
 8001ad8:	4b44      	ldr	r3, [pc, #272]	; (8001bec <MPU6050_ReadGyro+0x1ec>)
 8001ada:	881b      	ldrh	r3, [r3, #0]
 8001adc:	3301      	adds	r3, #1
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	4b42      	ldr	r3, [pc, #264]	; (8001bec <MPU6050_ReadGyro+0x1ec>)
 8001ae2:	801a      	strh	r2, [r3, #0]

		avrg_gX += gyro_X_scaled;
 8001ae4:	4b42      	ldr	r3, [pc, #264]	; (8001bf0 <MPU6050_ReadGyro+0x1f0>)
 8001ae6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001aea:	4b3d      	ldr	r3, [pc, #244]	; (8001be0 <MPU6050_ReadGyro+0x1e0>)
 8001aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af0:	f7fe fbd4 	bl	800029c <__adddf3>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	493d      	ldr	r1, [pc, #244]	; (8001bf0 <MPU6050_ReadGyro+0x1f0>)
 8001afa:	e9c1 2300 	strd	r2, r3, [r1]
		avrg_gY += gyro_Y_scaled;
 8001afe:	4b3d      	ldr	r3, [pc, #244]	; (8001bf4 <MPU6050_ReadGyro+0x1f4>)
 8001b00:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b04:	4b37      	ldr	r3, [pc, #220]	; (8001be4 <MPU6050_ReadGyro+0x1e4>)
 8001b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b0a:	f7fe fbc7 	bl	800029c <__adddf3>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	4938      	ldr	r1, [pc, #224]	; (8001bf4 <MPU6050_ReadGyro+0x1f4>)
 8001b14:	e9c1 2300 	strd	r2, r3, [r1]
		avrg_gZ += gyro_Z_scaled;
 8001b18:	4b37      	ldr	r3, [pc, #220]	; (8001bf8 <MPU6050_ReadGyro+0x1f8>)
 8001b1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b1e:	4b32      	ldr	r3, [pc, #200]	; (8001be8 <MPU6050_ReadGyro+0x1e8>)
 8001b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b24:	f7fe fbba 	bl	800029c <__adddf3>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4932      	ldr	r1, [pc, #200]	; (8001bf8 <MPU6050_ReadGyro+0x1f8>)
 8001b2e:	e9c1 2300 	strd	r2, r3, [r1]

		if(iter_g == CALIBRATION_TIME*SAMPL_FREQ){
 8001b32:	4b2e      	ldr	r3, [pc, #184]	; (8001bec <MPU6050_ReadGyro+0x1ec>)
 8001b34:	881b      	ldrh	r3, [r3, #0]
 8001b36:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001b3a:	f040 80f2 	bne.w	8001d22 <MPU6050_ReadGyro+0x322>
			avrg_gX = avrg_gX/iter_g;
 8001b3e:	4b2c      	ldr	r3, [pc, #176]	; (8001bf0 <MPU6050_ReadGyro+0x1f0>)
 8001b40:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001b44:	4b29      	ldr	r3, [pc, #164]	; (8001bec <MPU6050_ReadGyro+0x1ec>)
 8001b46:	881b      	ldrh	r3, [r3, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7fe fcf3 	bl	8000534 <__aeabi_i2d>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	4620      	mov	r0, r4
 8001b54:	4629      	mov	r1, r5
 8001b56:	f7fe fe81 	bl	800085c <__aeabi_ddiv>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	4924      	ldr	r1, [pc, #144]	; (8001bf0 <MPU6050_ReadGyro+0x1f0>)
 8001b60:	e9c1 2300 	strd	r2, r3, [r1]
			avrg_gY = avrg_gY/iter_g;
 8001b64:	4b23      	ldr	r3, [pc, #140]	; (8001bf4 <MPU6050_ReadGyro+0x1f4>)
 8001b66:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001b6a:	4b20      	ldr	r3, [pc, #128]	; (8001bec <MPU6050_ReadGyro+0x1ec>)
 8001b6c:	881b      	ldrh	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7fe fce0 	bl	8000534 <__aeabi_i2d>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4620      	mov	r0, r4
 8001b7a:	4629      	mov	r1, r5
 8001b7c:	f7fe fe6e 	bl	800085c <__aeabi_ddiv>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	491b      	ldr	r1, [pc, #108]	; (8001bf4 <MPU6050_ReadGyro+0x1f4>)
 8001b86:	e9c1 2300 	strd	r2, r3, [r1]
			avrg_gZ = avrg_gZ/iter_g;
 8001b8a:	4b1b      	ldr	r3, [pc, #108]	; (8001bf8 <MPU6050_ReadGyro+0x1f8>)
 8001b8c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001b90:	4b16      	ldr	r3, [pc, #88]	; (8001bec <MPU6050_ReadGyro+0x1ec>)
 8001b92:	881b      	ldrh	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7fe fccd 	bl	8000534 <__aeabi_i2d>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	4620      	mov	r0, r4
 8001ba0:	4629      	mov	r1, r5
 8001ba2:	f7fe fe5b 	bl	800085c <__aeabi_ddiv>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	4913      	ldr	r1, [pc, #76]	; (8001bf8 <MPU6050_ReadGyro+0x1f8>)
 8001bac:	e9c1 2300 	strd	r2, r3, [r1]
			GYRO_STATE = READY;
 8001bb0:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <MPU6050_ReadGyro+0x1c8>)
 8001bb2:	2202      	movs	r2, #2
 8001bb4:	701a      	strb	r2, [r3, #0]

			PRINTF("MPU6050 READY TO USE - gyro \n\r");
 8001bb6:	4811      	ldr	r0, [pc, #68]	; (8001bfc <MPU6050_ReadGyro+0x1fc>)
 8001bb8:	f000 f922 	bl	8001e00 <PRINTF>
 8001bbc:	e0b1      	b.n	8001d22 <MPU6050_ReadGyro+0x322>
 8001bbe:	bf00      	nop
 8001bc0:	00000000 	.word	0x00000000
 8001bc4:	40506000 	.word	0x40506000
 8001bc8:	20000238 	.word	0x20000238
 8001bcc:	20000260 	.word	0x20000260
 8001bd0:	20000320 	.word	0x20000320
 8001bd4:	20000310 	.word	0x20000310
 8001bd8:	20000278 	.word	0x20000278
 8001bdc:	2000027a 	.word	0x2000027a
 8001be0:	20000300 	.word	0x20000300
 8001be4:	20000268 	.word	0x20000268
 8001be8:	200002e0 	.word	0x200002e0
 8001bec:	2000021a 	.word	0x2000021a
 8001bf0:	20000220 	.word	0x20000220
 8001bf4:	20000228 	.word	0x20000228
 8001bf8:	20000230 	.word	0x20000230
 8001bfc:	08009f00 	.word	0x08009f00
		}

	}else if(GYRO_STATE == READY){
 8001c00:	4b49      	ldr	r3, [pc, #292]	; (8001d28 <MPU6050_ReadGyro+0x328>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	f040 808c 	bne.w	8001d22 <MPU6050_ReadGyro+0x322>

		double tmp_X = (gyro_X_scaled-avrg_gX)/SAMPL_FREQ;
 8001c0a:	4b48      	ldr	r3, [pc, #288]	; (8001d2c <MPU6050_ReadGyro+0x32c>)
 8001c0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c10:	4b47      	ldr	r3, [pc, #284]	; (8001d30 <MPU6050_ReadGyro+0x330>)
 8001c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c16:	f7fe fb3f 	bl	8000298 <__aeabi_dsub>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	4610      	mov	r0, r2
 8001c20:	4619      	mov	r1, r3
 8001c22:	f04f 0200 	mov.w	r2, #0
 8001c26:	4b43      	ldr	r3, [pc, #268]	; (8001d34 <MPU6050_ReadGyro+0x334>)
 8001c28:	f7fe fe18 	bl	800085c <__aeabi_ddiv>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	e9c7 2306 	strd	r2, r3, [r7, #24]
		double tmp_Y = (gyro_Y_scaled-avrg_gY)/SAMPL_FREQ;
 8001c34:	4b40      	ldr	r3, [pc, #256]	; (8001d38 <MPU6050_ReadGyro+0x338>)
 8001c36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c3a:	4b40      	ldr	r3, [pc, #256]	; (8001d3c <MPU6050_ReadGyro+0x33c>)
 8001c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c40:	f7fe fb2a 	bl	8000298 <__aeabi_dsub>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4610      	mov	r0, r2
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	4b38      	ldr	r3, [pc, #224]	; (8001d34 <MPU6050_ReadGyro+0x334>)
 8001c52:	f7fe fe03 	bl	800085c <__aeabi_ddiv>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		double tmp_Z = (gyro_Z_scaled-avrg_gZ)/SAMPL_FREQ;
 8001c5e:	4b38      	ldr	r3, [pc, #224]	; (8001d40 <MPU6050_ReadGyro+0x340>)
 8001c60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c64:	4b37      	ldr	r3, [pc, #220]	; (8001d44 <MPU6050_ReadGyro+0x344>)
 8001c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6a:	f7fe fb15 	bl	8000298 <__aeabi_dsub>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	4610      	mov	r0, r2
 8001c74:	4619      	mov	r1, r3
 8001c76:	f04f 0200 	mov.w	r2, #0
 8001c7a:	4b2e      	ldr	r3, [pc, #184]	; (8001d34 <MPU6050_ReadGyro+0x334>)
 8001c7c:	f7fe fdee 	bl	800085c <__aeabi_ddiv>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	e9c7 2302 	strd	r2, r3, [r7, #8]

		MPU6050_measure->gyro_angle_dX = gyro_X_scaled-avrg_gX;
 8001c88:	4b28      	ldr	r3, [pc, #160]	; (8001d2c <MPU6050_ReadGyro+0x32c>)
 8001c8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c8e:	4b28      	ldr	r3, [pc, #160]	; (8001d30 <MPU6050_ReadGyro+0x330>)
 8001c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c94:	f7fe fb00 	bl	8000298 <__aeabi_dsub>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	6879      	ldr	r1, [r7, #4]
 8001c9e:	e9c1 2306 	strd	r2, r3, [r1, #24]
		MPU6050_measure->gyro_angle_dY = gyro_Y_scaled-avrg_gY;
 8001ca2:	4b25      	ldr	r3, [pc, #148]	; (8001d38 <MPU6050_ReadGyro+0x338>)
 8001ca4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ca8:	4b24      	ldr	r3, [pc, #144]	; (8001d3c <MPU6050_ReadGyro+0x33c>)
 8001caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cae:	f7fe faf3 	bl	8000298 <__aeabi_dsub>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	6879      	ldr	r1, [r7, #4]
 8001cb8:	e9c1 2308 	strd	r2, r3, [r1, #32]
		MPU6050_measure->gyro_angle_dZ = gyro_Z_scaled-avrg_gZ;
 8001cbc:	4b20      	ldr	r3, [pc, #128]	; (8001d40 <MPU6050_ReadGyro+0x340>)
 8001cbe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cc2:	4b20      	ldr	r3, [pc, #128]	; (8001d44 <MPU6050_ReadGyro+0x344>)
 8001cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc8:	f7fe fae6 	bl	8000298 <__aeabi_dsub>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	6879      	ldr	r1, [r7, #4]
 8001cd2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

		// x -> pitch | y -> roll | z -> yaw
		MPU6050_measure->gyro_angle_X += tmp_X;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ce0:	f7fe fadc 	bl	800029c <__adddf3>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	6879      	ldr	r1, [r7, #4]
 8001cea:	e9c1 2300 	strd	r2, r3, [r1]
		MPU6050_measure->gyro_angle_Y += tmp_Y;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001cf4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001cf8:	f7fe fad0 	bl	800029c <__adddf3>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	6879      	ldr	r1, [r7, #4]
 8001d02:	e9c1 2302 	strd	r2, r3, [r1, #8]
		MPU6050_measure->gyro_angle_Z += tmp_Z;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001d0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d10:	f7fe fac4 	bl	800029c <__adddf3>
 8001d14:	4602      	mov	r2, r0
 8001d16:	460b      	mov	r3, r1
 8001d18:	6879      	ldr	r1, [r7, #4]
 8001d1a:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001d1e:	e000      	b.n	8001d22 <MPU6050_ReadGyro+0x322>
	if(GYRO_STATE == DISABLED) return;
 8001d20:	bf00      	nop
	}
}
 8001d22:	3720      	adds	r7, #32
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bdb0      	pop	{r4, r5, r7, pc}
 8001d28:	20000238 	.word	0x20000238
 8001d2c:	20000300 	.word	0x20000300
 8001d30:	20000220 	.word	0x20000220
 8001d34:	406f4000 	.word	0x406f4000
 8001d38:	20000268 	.word	0x20000268
 8001d3c:	20000228 	.word	0x20000228
 8001d40:	200002e0 	.word	0x200002e0
 8001d44:	20000230 	.word	0x20000230

08001d48 <MPU6050_SensorFusion>:


void MPU6050_SensorFusion(IMU_MEASURE * MPU6050_measure){
 8001d48:	b5b0      	push	{r4, r5, r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]

	if(GYRO_STATE==READY && ACC_STATE==READY){
 8001d50:	4b29      	ldr	r3, [pc, #164]	; (8001df8 <MPU6050_SensorFusion+0xb0>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d141      	bne.n	8001ddc <MPU6050_SensorFusion+0x94>
 8001d58:	4b28      	ldr	r3, [pc, #160]	; (8001dfc <MPU6050_SensorFusion+0xb4>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d13d      	bne.n	8001ddc <MPU6050_SensorFusion+0x94>

		MPU6050_measure->angle_X = MPU6050_measure->gyro_angle_X * 0.9996 +  MPU6050_measure->acc_angle_X * 0.0004;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d66:	a320      	add	r3, pc, #128	; (adr r3, 8001de8 <MPU6050_SensorFusion+0xa0>)
 8001d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d6c:	f7fe fc4c 	bl	8000608 <__aeabi_dmul>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	4614      	mov	r4, r2
 8001d76:	461d      	mov	r5, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001d7e:	a31c      	add	r3, pc, #112	; (adr r3, 8001df0 <MPU6050_SensorFusion+0xa8>)
 8001d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d84:	f7fe fc40 	bl	8000608 <__aeabi_dmul>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	4620      	mov	r0, r4
 8001d8e:	4629      	mov	r1, r5
 8001d90:	f7fe fa84 	bl	800029c <__adddf3>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	6879      	ldr	r1, [r7, #4]
 8001d9a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		MPU6050_measure->angle_Y = MPU6050_measure->gyro_angle_Y * 0.9996 +  MPU6050_measure->acc_angle_Y * 0.0004;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001da4:	a310      	add	r3, pc, #64	; (adr r3, 8001de8 <MPU6050_SensorFusion+0xa0>)
 8001da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001daa:	f7fe fc2d 	bl	8000608 <__aeabi_dmul>
 8001dae:	4602      	mov	r2, r0
 8001db0:	460b      	mov	r3, r1
 8001db2:	4614      	mov	r4, r2
 8001db4:	461d      	mov	r5, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001dbc:	a30c      	add	r3, pc, #48	; (adr r3, 8001df0 <MPU6050_SensorFusion+0xa8>)
 8001dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc2:	f7fe fc21 	bl	8000608 <__aeabi_dmul>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	460b      	mov	r3, r1
 8001dca:	4620      	mov	r0, r4
 8001dcc:	4629      	mov	r1, r5
 8001dce:	f7fe fa65 	bl	800029c <__adddf3>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	6879      	ldr	r1, [r7, #4]
 8001dd8:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

	}



}
 8001ddc:	bf00      	nop
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bdb0      	pop	{r4, r5, r7, pc}
 8001de4:	f3af 8000 	nop.w
 8001de8:	23a29c78 	.word	0x23a29c78
 8001dec:	3feffcb9 	.word	0x3feffcb9
 8001df0:	eb1c432d 	.word	0xeb1c432d
 8001df4:	3f3a36e2 	.word	0x3f3a36e2
 8001df8:	20000238 	.word	0x20000238
 8001dfc:	20000218 	.word	0x20000218

08001e00 <PRINTF>:





void PRINTF(char str[100]){
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b09c      	sub	sp, #112	; 0x70
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  char msg[100];
  int msg_len;
  msg_len = sprintf(msg, str);
 8001e08:	f107 0308 	add.w	r3, r7, #8
 8001e0c:	6879      	ldr	r1, [r7, #4]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f005 faa6 	bl	8007360 <siprintf>
 8001e14:	66f8      	str	r0, [r7, #108]	; 0x6c
  HAL_UART_Transmit(&huart2, (uint8_t *)msg, msg_len, 5000);
 8001e16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	f107 0108 	add.w	r1, r7, #8
 8001e1e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001e22:	4803      	ldr	r0, [pc, #12]	; (8001e30 <PRINTF+0x30>)
 8001e24:	f003 fe85 	bl	8005b32 <HAL_UART_Transmit>
}
 8001e28:	bf00      	nop
 8001e2a:	3770      	adds	r7, #112	; 0x70
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	200004ac 	.word	0x200004ac

08001e34 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b08a      	sub	sp, #40	; 0x28
 8001e38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3a:	f107 0314 	add.w	r3, r7, #20
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	605a      	str	r2, [r3, #4]
 8001e44:	609a      	str	r2, [r3, #8]
 8001e46:	60da      	str	r2, [r3, #12]
 8001e48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	613b      	str	r3, [r7, #16]
 8001e4e:	4b3b      	ldr	r3, [pc, #236]	; (8001f3c <MX_GPIO_Init+0x108>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	4a3a      	ldr	r2, [pc, #232]	; (8001f3c <MX_GPIO_Init+0x108>)
 8001e54:	f043 0304 	orr.w	r3, r3, #4
 8001e58:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5a:	4b38      	ldr	r3, [pc, #224]	; (8001f3c <MX_GPIO_Init+0x108>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	f003 0304 	and.w	r3, r3, #4
 8001e62:	613b      	str	r3, [r7, #16]
 8001e64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	4b34      	ldr	r3, [pc, #208]	; (8001f3c <MX_GPIO_Init+0x108>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	4a33      	ldr	r2, [pc, #204]	; (8001f3c <MX_GPIO_Init+0x108>)
 8001e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e74:	6313      	str	r3, [r2, #48]	; 0x30
 8001e76:	4b31      	ldr	r3, [pc, #196]	; (8001f3c <MX_GPIO_Init+0x108>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	60bb      	str	r3, [r7, #8]
 8001e86:	4b2d      	ldr	r3, [pc, #180]	; (8001f3c <MX_GPIO_Init+0x108>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	4a2c      	ldr	r2, [pc, #176]	; (8001f3c <MX_GPIO_Init+0x108>)
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	6313      	str	r3, [r2, #48]	; 0x30
 8001e92:	4b2a      	ldr	r3, [pc, #168]	; (8001f3c <MX_GPIO_Init+0x108>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	60bb      	str	r3, [r7, #8]
 8001e9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	607b      	str	r3, [r7, #4]
 8001ea2:	4b26      	ldr	r3, [pc, #152]	; (8001f3c <MX_GPIO_Init+0x108>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	4a25      	ldr	r2, [pc, #148]	; (8001f3c <MX_GPIO_Init+0x108>)
 8001ea8:	f043 0302 	orr.w	r3, r3, #2
 8001eac:	6313      	str	r3, [r2, #48]	; 0x30
 8001eae:	4b23      	ldr	r3, [pc, #140]	; (8001f3c <MX_GPIO_Init+0x108>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	607b      	str	r3, [r7, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001eba:	2200      	movs	r2, #0
 8001ebc:	2120      	movs	r1, #32
 8001ebe:	4820      	ldr	r0, [pc, #128]	; (8001f40 <MX_GPIO_Init+0x10c>)
 8001ec0:	f001 f9a6 	bl	8003210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	481e      	ldr	r0, [pc, #120]	; (8001f44 <MX_GPIO_Init+0x110>)
 8001eca:	f001 f9a1 	bl	8003210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ece:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ed2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ed4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001ed8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ede:	f107 0314 	add.w	r3, r7, #20
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4818      	ldr	r0, [pc, #96]	; (8001f48 <MX_GPIO_Init+0x114>)
 8001ee6:	f001 f80f 	bl	8002f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001eea:	2320      	movs	r3, #32
 8001eec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001efa:	f107 0314 	add.w	r3, r7, #20
 8001efe:	4619      	mov	r1, r3
 8001f00:	480f      	ldr	r0, [pc, #60]	; (8001f40 <MX_GPIO_Init+0x10c>)
 8001f02:	f001 f801 	bl	8002f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f06:	2301      	movs	r3, #1
 8001f08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f12:	2300      	movs	r3, #0
 8001f14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f16:	f107 0314 	add.w	r3, r7, #20
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4809      	ldr	r0, [pc, #36]	; (8001f44 <MX_GPIO_Init+0x110>)
 8001f1e:	f000 fff3 	bl	8002f08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f22:	2200      	movs	r2, #0
 8001f24:	2100      	movs	r1, #0
 8001f26:	2028      	movs	r0, #40	; 0x28
 8001f28:	f000 ff25 	bl	8002d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f2c:	2028      	movs	r0, #40	; 0x28
 8001f2e:	f000 ff3e 	bl	8002dae <HAL_NVIC_EnableIRQ>

}
 8001f32:	bf00      	nop
 8001f34:	3728      	adds	r7, #40	; 0x28
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	40020000 	.word	0x40020000
 8001f44:	40020400 	.word	0x40020400
 8001f48:	40020800 	.word	0x40020800

08001f4c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f50:	4b12      	ldr	r3, [pc, #72]	; (8001f9c <MX_I2C1_Init+0x50>)
 8001f52:	4a13      	ldr	r2, [pc, #76]	; (8001fa0 <MX_I2C1_Init+0x54>)
 8001f54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f56:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <MX_I2C1_Init+0x50>)
 8001f58:	4a12      	ldr	r2, [pc, #72]	; (8001fa4 <MX_I2C1_Init+0x58>)
 8001f5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f5c:	4b0f      	ldr	r3, [pc, #60]	; (8001f9c <MX_I2C1_Init+0x50>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f62:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <MX_I2C1_Init+0x50>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f68:	4b0c      	ldr	r3, [pc, #48]	; (8001f9c <MX_I2C1_Init+0x50>)
 8001f6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f6e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f70:	4b0a      	ldr	r3, [pc, #40]	; (8001f9c <MX_I2C1_Init+0x50>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f76:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <MX_I2C1_Init+0x50>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f7c:	4b07      	ldr	r3, [pc, #28]	; (8001f9c <MX_I2C1_Init+0x50>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f82:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <MX_I2C1_Init+0x50>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f88:	4804      	ldr	r0, [pc, #16]	; (8001f9c <MX_I2C1_Init+0x50>)
 8001f8a:	f001 f973 	bl	8003274 <HAL_I2C_Init>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f94:	f000 f9be 	bl	8002314 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f98:	bf00      	nop
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	20000320 	.word	0x20000320
 8001fa0:	40005400 	.word	0x40005400
 8001fa4:	000186a0 	.word	0x000186a0

08001fa8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08a      	sub	sp, #40	; 0x28
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb0:	f107 0314 	add.w	r3, r7, #20
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	60da      	str	r2, [r3, #12]
 8001fbe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a19      	ldr	r2, [pc, #100]	; (800202c <HAL_I2C_MspInit+0x84>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d12b      	bne.n	8002022 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	613b      	str	r3, [r7, #16]
 8001fce:	4b18      	ldr	r3, [pc, #96]	; (8002030 <HAL_I2C_MspInit+0x88>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	4a17      	ldr	r2, [pc, #92]	; (8002030 <HAL_I2C_MspInit+0x88>)
 8001fd4:	f043 0302 	orr.w	r3, r3, #2
 8001fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fda:	4b15      	ldr	r3, [pc, #84]	; (8002030 <HAL_I2C_MspInit+0x88>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	613b      	str	r3, [r7, #16]
 8001fe4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fe6:	23c0      	movs	r3, #192	; 0xc0
 8001fe8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fea:	2312      	movs	r3, #18
 8001fec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ff6:	2304      	movs	r3, #4
 8001ff8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ffa:	f107 0314 	add.w	r3, r7, #20
 8001ffe:	4619      	mov	r1, r3
 8002000:	480c      	ldr	r0, [pc, #48]	; (8002034 <HAL_I2C_MspInit+0x8c>)
 8002002:	f000 ff81 	bl	8002f08 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	4b09      	ldr	r3, [pc, #36]	; (8002030 <HAL_I2C_MspInit+0x88>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	4a08      	ldr	r2, [pc, #32]	; (8002030 <HAL_I2C_MspInit+0x88>)
 8002010:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002014:	6413      	str	r3, [r2, #64]	; 0x40
 8002016:	4b06      	ldr	r3, [pc, #24]	; (8002030 <HAL_I2C_MspInit+0x88>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002022:	bf00      	nop
 8002024:	3728      	adds	r7, #40	; 0x28
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40005400 	.word	0x40005400
 8002030:	40023800 	.word	0x40023800
 8002034:	40020400 	.word	0x40020400

08002038 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002038:	b590      	push	{r4, r7, lr}
 800203a:	b0a1      	sub	sp, #132	; 0x84
 800203c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800203e:	f000 fd4d 	bl	8002adc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002042:	f000 f8af 	bl	80021a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002046:	f7ff fef5 	bl	8001e34 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800204a:	f000 fc43 	bl	80028d4 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 800204e:	f000 fc6b 	bl	8002928 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 8002052:	f000 facb 	bl	80025ec <MX_TIM3_Init>
  MX_I2C1_Init();
 8002056:	f7ff ff79 	bl	8001f4c <MX_I2C1_Init>
  MX_TIM10_Init();
 800205a:	f000 fb5f 	bl	800271c <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  PRINTF("\n\r BEGINNING OF THE CODE \n\n\r");
 800205e:	4842      	ldr	r0, [pc, #264]	; (8002168 <main+0x130>)
 8002060:	f7ff fece 	bl	8001e00 <PRINTF>

  // Start timer interrupt that enables the GYRO reading 250 Hz
  HAL_TIM_Base_Start_IT(&htim10);
 8002064:	4841      	ldr	r0, [pc, #260]	; (800216c <main+0x134>)
 8002066:	f002 fda3 	bl	8004bb0 <HAL_TIM_Base_Start_IT>

  // Start timer for the PWM signal
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800206a:	2100      	movs	r1, #0
 800206c:	4840      	ldr	r0, [pc, #256]	; (8002170 <main+0x138>)
 800206e:	f002 fe5b 	bl	8004d28 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002072:	2104      	movs	r1, #4
 8002074:	483e      	ldr	r0, [pc, #248]	; (8002170 <main+0x138>)
 8002076:	f002 fe57 	bl	8004d28 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800207a:	2108      	movs	r1, #8
 800207c:	483c      	ldr	r0, [pc, #240]	; (8002170 <main+0x138>)
 800207e:	f002 fe53 	bl	8004d28 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8002082:	210c      	movs	r1, #12
 8002084:	483a      	ldr	r0, [pc, #232]	; (8002170 <main+0x138>)
 8002086:	f002 fe4f 	bl	8004d28 <HAL_TIM_PWM_Start>

  // Start interrupt for bluetooth Rx commands
  HAL_UART_Receive_IT(&huart6, (uint8_t*)cmd_rx, 1);
 800208a:	2201      	movs	r2, #1
 800208c:	4939      	ldr	r1, [pc, #228]	; (8002174 <main+0x13c>)
 800208e:	483a      	ldr	r0, [pc, #232]	; (8002178 <main+0x140>)
 8002090:	f003 fde1 	bl	8005c56 <HAL_UART_Receive_IT>

  ESC_CONF ESC_speed;

  PRINTF(" -- Press blue button to start the code \n\n\r");
 8002094:	4839      	ldr	r0, [pc, #228]	; (800217c <main+0x144>)
 8002096:	f7ff feb3 	bl	8001e00 <PRINTF>
  while(BLUE_BUTTON==0){
 800209a:	e003      	b.n	80020a4 <main+0x6c>
	  if(BLUE_BUTTON==1){
 800209c:	4b38      	ldr	r3, [pc, #224]	; (8002180 <main+0x148>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d004      	beq.n	80020ae <main+0x76>
  while(BLUE_BUTTON==0){
 80020a4:	4b36      	ldr	r3, [pc, #216]	; (8002180 <main+0x148>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d0f7      	beq.n	800209c <main+0x64>
 80020ac:	e000      	b.n	80020b0 <main+0x78>
		  break;
 80020ae:	bf00      	nop
	  }
  }

  MPU6050_Init(&MPU_measure);
 80020b0:	4834      	ldr	r0, [pc, #208]	; (8002184 <main+0x14c>)
 80020b2:	f7ff f9b1 	bl	8001418 <MPU6050_Init>
  MPU6050_Reset(&MPU_measure);
 80020b6:	4833      	ldr	r0, [pc, #204]	; (8002184 <main+0x14c>)
 80020b8:	f7ff fa1a 	bl	80014f0 <MPU6050_Reset>

  ESC_Init(&ESC_speed);
 80020bc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7fe fef5 	bl	8000eb0 <ESC_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(ACC_STATE == READY){
 80020c6:	4b30      	ldr	r3, [pc, #192]	; (8002188 <main+0x150>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d116      	bne.n	80020fc <main+0xc4>
		  char messaggio[100];
		  int lengh = sprintf(messaggio, "ACC: x %f, y %f \n\r", MPU_measure.angle_X, MPU_measure.angle_Y);
 80020ce:	4b2d      	ldr	r3, [pc, #180]	; (8002184 <main+0x14c>)
 80020d0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80020d4:	4b2b      	ldr	r3, [pc, #172]	; (8002184 <main+0x14c>)
 80020d6:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80020da:	1d3c      	adds	r4, r7, #4
 80020dc:	e9cd 2300 	strd	r2, r3, [sp]
 80020e0:	4602      	mov	r2, r0
 80020e2:	460b      	mov	r3, r1
 80020e4:	4929      	ldr	r1, [pc, #164]	; (800218c <main+0x154>)
 80020e6:	4620      	mov	r0, r4
 80020e8:	f005 f93a 	bl	8007360 <siprintf>
 80020ec:	6778      	str	r0, [r7, #116]	; 0x74
		  HAL_UART_Transmit(&huart2, (uint8_t*)messaggio, lengh, 50);
 80020ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	1d39      	adds	r1, r7, #4
 80020f4:	2332      	movs	r3, #50	; 0x32
 80020f6:	4826      	ldr	r0, [pc, #152]	; (8002190 <main+0x158>)
 80020f8:	f003 fd1b 	bl	8005b32 <HAL_UART_Transmit>
	  }


	  // Receive the command from the radio/bl controller
	  if(BLUETOOTH_FLAG == 1){
 80020fc:	4b25      	ldr	r3, [pc, #148]	; (8002194 <main+0x15c>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d120      	bne.n	8002146 <main+0x10e>

		  msgLen = sprintf(msgDebug, "\n\r   FRONTT LEFT %d  -  FRONT RIGHT %d  -  REAR LEFT %d - REAR RIGHT %d \r\n", ESC_speed.FL, ESC_speed.FR, ESC_speed.RL, ESC_speed.RR);
 8002104:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 8002108:	4619      	mov	r1, r3
 800210a:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800210e:	4618      	mov	r0, r3
 8002110:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8002114:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 8002118:	9201      	str	r2, [sp, #4]
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	4603      	mov	r3, r0
 800211e:	460a      	mov	r2, r1
 8002120:	491d      	ldr	r1, [pc, #116]	; (8002198 <main+0x160>)
 8002122:	481e      	ldr	r0, [pc, #120]	; (800219c <main+0x164>)
 8002124:	f005 f91c 	bl	8007360 <siprintf>
 8002128:	4603      	mov	r3, r0
 800212a:	4a1d      	ldr	r2, [pc, #116]	; (80021a0 <main+0x168>)
 800212c:	6013      	str	r3, [r2, #0]
		  HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 10);
 800212e:	4b1c      	ldr	r3, [pc, #112]	; (80021a0 <main+0x168>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	b29a      	uxth	r2, r3
 8002134:	230a      	movs	r3, #10
 8002136:	4919      	ldr	r1, [pc, #100]	; (800219c <main+0x164>)
 8002138:	4815      	ldr	r0, [pc, #84]	; (8002190 <main+0x158>)
 800213a:	f003 fcfa 	bl	8005b32 <HAL_UART_Transmit>

		  BLUETOOTH_FLAG = 0;
 800213e:	4b15      	ldr	r3, [pc, #84]	; (8002194 <main+0x15c>)
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	e002      	b.n	800214c <main+0x114>
	  }else{
		  cmd_rx[0] = ' ';
 8002146:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <main+0x13c>)
 8002148:	2220      	movs	r2, #32
 800214a:	701a      	strb	r2, [r3, #0]
	  }



	  ESC_followCmd(&ESC_speed, &MPU_measure, cmd_rx[0]);
 800214c:	4b09      	ldr	r3, [pc, #36]	; (8002174 <main+0x13c>)
 800214e:	781a      	ldrb	r2, [r3, #0]
 8002150:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002154:	490b      	ldr	r1, [pc, #44]	; (8002184 <main+0x14c>)
 8002156:	4618      	mov	r0, r3
 8002158:	f7fe fee4 	bl	8000f24 <ESC_followCmd>
	  ESC_setSpeed(&ESC_speed);
 800215c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff f931 	bl	80013c8 <ESC_setSpeed>
	  if(ACC_STATE == READY){
 8002166:	e7ae      	b.n	80020c6 <main+0x8e>
 8002168:	08009f20 	.word	0x08009f20
 800216c:	200003d8 	.word	0x200003d8
 8002170:	20000420 	.word	0x20000420
 8002174:	20000250 	.word	0x20000250
 8002178:	20000468 	.word	0x20000468
 800217c:	08009f40 	.word	0x08009f40
 8002180:	2000023c 	.word	0x2000023c
 8002184:	20000380 	.word	0x20000380
 8002188:	20000218 	.word	0x20000218
 800218c:	08009f6c 	.word	0x08009f6c
 8002190:	200004ac 	.word	0x200004ac
 8002194:	20000240 	.word	0x20000240
 8002198:	08009f80 	.word	0x08009f80
 800219c:	2000027c 	.word	0x2000027c
 80021a0:	200002f4 	.word	0x200002f4

080021a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b094      	sub	sp, #80	; 0x50
 80021a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021aa:	f107 0320 	add.w	r3, r7, #32
 80021ae:	2230      	movs	r2, #48	; 0x30
 80021b0:	2100      	movs	r1, #0
 80021b2:	4618      	mov	r0, r3
 80021b4:	f004 fc62 	bl	8006a7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021b8:	f107 030c 	add.w	r3, r7, #12
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	605a      	str	r2, [r3, #4]
 80021c2:	609a      	str	r2, [r3, #8]
 80021c4:	60da      	str	r2, [r3, #12]
 80021c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021c8:	2300      	movs	r3, #0
 80021ca:	60bb      	str	r3, [r7, #8]
 80021cc:	4b29      	ldr	r3, [pc, #164]	; (8002274 <SystemClock_Config+0xd0>)
 80021ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d0:	4a28      	ldr	r2, [pc, #160]	; (8002274 <SystemClock_Config+0xd0>)
 80021d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d6:	6413      	str	r3, [r2, #64]	; 0x40
 80021d8:	4b26      	ldr	r3, [pc, #152]	; (8002274 <SystemClock_Config+0xd0>)
 80021da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e0:	60bb      	str	r3, [r7, #8]
 80021e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80021e4:	2300      	movs	r3, #0
 80021e6:	607b      	str	r3, [r7, #4]
 80021e8:	4b23      	ldr	r3, [pc, #140]	; (8002278 <SystemClock_Config+0xd4>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80021f0:	4a21      	ldr	r2, [pc, #132]	; (8002278 <SystemClock_Config+0xd4>)
 80021f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021f6:	6013      	str	r3, [r2, #0]
 80021f8:	4b1f      	ldr	r3, [pc, #124]	; (8002278 <SystemClock_Config+0xd4>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002200:	607b      	str	r3, [r7, #4]
 8002202:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002204:	2302      	movs	r3, #2
 8002206:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002208:	2301      	movs	r3, #1
 800220a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800220c:	2310      	movs	r3, #16
 800220e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002210:	2302      	movs	r3, #2
 8002212:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002214:	2300      	movs	r3, #0
 8002216:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002218:	2310      	movs	r3, #16
 800221a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800221c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002220:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002222:	2304      	movs	r3, #4
 8002224:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002226:	2307      	movs	r3, #7
 8002228:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800222a:	f107 0320 	add.w	r3, r7, #32
 800222e:	4618      	mov	r0, r3
 8002230:	f001 fffa 	bl	8004228 <HAL_RCC_OscConfig>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800223a:	f000 f86b 	bl	8002314 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800223e:	230f      	movs	r3, #15
 8002240:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002242:	2302      	movs	r3, #2
 8002244:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002246:	2300      	movs	r3, #0
 8002248:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800224a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800224e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002250:	2300      	movs	r3, #0
 8002252:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002254:	f107 030c 	add.w	r3, r7, #12
 8002258:	2102      	movs	r1, #2
 800225a:	4618      	mov	r0, r3
 800225c:	f002 fa5c 	bl	8004718 <HAL_RCC_ClockConfig>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002266:	f000 f855 	bl	8002314 <Error_Handler>
  }
}
 800226a:	bf00      	nop
 800226c:	3750      	adds	r7, #80	; 0x50
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40023800 	.word	0x40023800
 8002278:	40007000 	.word	0x40007000

0800227c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 4 */



// Interrupt from the timer
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]

	if(htim == &htim10){
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a08      	ldr	r2, [pc, #32]	; (80022a8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d108      	bne.n	800229e <HAL_TIM_PeriodElapsedCallback+0x22>
		MPU6050_ReadAcc(&MPU_measure);
 800228c:	4807      	ldr	r0, [pc, #28]	; (80022ac <HAL_TIM_PeriodElapsedCallback+0x30>)
 800228e:	f7ff f987 	bl	80015a0 <MPU6050_ReadAcc>
		MPU6050_ReadGyro(&MPU_measure);
 8002292:	4806      	ldr	r0, [pc, #24]	; (80022ac <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002294:	f7ff fbb4 	bl	8001a00 <MPU6050_ReadGyro>
		MPU6050_SensorFusion(&MPU_measure);
 8002298:	4804      	ldr	r0, [pc, #16]	; (80022ac <HAL_TIM_PeriodElapsedCallback+0x30>)
 800229a:	f7ff fd55 	bl	8001d48 <MPU6050_SensorFusion>
	}
}
 800229e:	bf00      	nop
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	200003d8 	.word	0x200003d8
 80022ac:	20000380 	.word	0x20000380

080022b0 <HAL_UART_RxCpltCallback>:


// Interrupt from bluetooth
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]

	if(BLUETOOTH_FLAG==0){
 80022b8:	4b07      	ldr	r3, [pc, #28]	; (80022d8 <HAL_UART_RxCpltCallback+0x28>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d102      	bne.n	80022c6 <HAL_UART_RxCpltCallback+0x16>
		BLUETOOTH_FLAG = 1;
 80022c0:	4b05      	ldr	r3, [pc, #20]	; (80022d8 <HAL_UART_RxCpltCallback+0x28>)
 80022c2:	2201      	movs	r2, #1
 80022c4:	601a      	str	r2, [r3, #0]
	}

	HAL_UART_Receive_IT(&huart6, (uint8_t*)cmd_rx, 1);
 80022c6:	2201      	movs	r2, #1
 80022c8:	4904      	ldr	r1, [pc, #16]	; (80022dc <HAL_UART_RxCpltCallback+0x2c>)
 80022ca:	4805      	ldr	r0, [pc, #20]	; (80022e0 <HAL_UART_RxCpltCallback+0x30>)
 80022cc:	f003 fcc3 	bl	8005c56 <HAL_UART_Receive_IT>
}
 80022d0:	bf00      	nop
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	20000240 	.word	0x20000240
 80022dc:	20000250 	.word	0x20000250
 80022e0:	20000468 	.word	0x20000468

080022e4 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == B1_Pin){
 80022ee:	88fb      	ldrh	r3, [r7, #6]
 80022f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022f4:	d106      	bne.n	8002304 <HAL_GPIO_EXTI_Callback+0x20>
		if(BLUE_BUTTON == 0){
 80022f6:	4b06      	ldr	r3, [pc, #24]	; (8002310 <HAL_GPIO_EXTI_Callback+0x2c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d102      	bne.n	8002304 <HAL_GPIO_EXTI_Callback+0x20>
			BLUE_BUTTON=1;
 80022fe:	4b04      	ldr	r3, [pc, #16]	; (8002310 <HAL_GPIO_EXTI_Callback+0x2c>)
 8002300:	2201      	movs	r2, #1
 8002302:	601a      	str	r2, [r3, #0]
		}
	}

}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	2000023c 	.word	0x2000023c

08002314 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002318:	b672      	cpsid	i
}
 800231a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800231c:	e7fe      	b.n	800231c <Error_Handler+0x8>
	...

08002320 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	607b      	str	r3, [r7, #4]
 800232a:	4b18      	ldr	r3, [pc, #96]	; (800238c <HAL_MspInit+0x6c>)
 800232c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232e:	4a17      	ldr	r2, [pc, #92]	; (800238c <HAL_MspInit+0x6c>)
 8002330:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002334:	6453      	str	r3, [r2, #68]	; 0x44
 8002336:	4b15      	ldr	r3, [pc, #84]	; (800238c <HAL_MspInit+0x6c>)
 8002338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800233e:	607b      	str	r3, [r7, #4]
 8002340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	603b      	str	r3, [r7, #0]
 8002346:	4b11      	ldr	r3, [pc, #68]	; (800238c <HAL_MspInit+0x6c>)
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	4a10      	ldr	r2, [pc, #64]	; (800238c <HAL_MspInit+0x6c>)
 800234c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002350:	6413      	str	r3, [r2, #64]	; 0x40
 8002352:	4b0e      	ldr	r3, [pc, #56]	; (800238c <HAL_MspInit+0x6c>)
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235a:	603b      	str	r3, [r7, #0]
 800235c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800235e:	2007      	movs	r0, #7
 8002360:	f000 fcfe 	bl	8002d60 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8002364:	2200      	movs	r2, #0
 8002366:	2100      	movs	r1, #0
 8002368:	2001      	movs	r0, #1
 800236a:	f000 fd04 	bl	8002d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 800236e:	2001      	movs	r0, #1
 8002370:	f000 fd1d 	bl	8002dae <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 8002374:	2200      	movs	r2, #0
 8002376:	2100      	movs	r1, #0
 8002378:	2051      	movs	r0, #81	; 0x51
 800237a:	f000 fcfc 	bl	8002d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 800237e:	2051      	movs	r0, #81	; 0x51
 8002380:	f000 fd15 	bl	8002dae <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002384:	bf00      	nop
 8002386:	3708      	adds	r7, #8
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40023800 	.word	0x40023800

08002390 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002394:	e7fe      	b.n	8002394 <NMI_Handler+0x4>

08002396 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002396:	b480      	push	{r7}
 8002398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800239a:	e7fe      	b.n	800239a <HardFault_Handler+0x4>

0800239c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023a0:	e7fe      	b.n	80023a0 <MemManage_Handler+0x4>

080023a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023a2:	b480      	push	{r7}
 80023a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023a6:	e7fe      	b.n	80023a6 <BusFault_Handler+0x4>

080023a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023ac:	e7fe      	b.n	80023ac <UsageFault_Handler+0x4>

080023ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023ae:	b480      	push	{r7}
 80023b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023b2:	bf00      	nop
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023c0:	bf00      	nop
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr

080023ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023ca:	b480      	push	{r7}
 80023cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023ce:	bf00      	nop
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023dc:	f000 fbd0 	bl	8002b80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023e0:	bf00      	nop
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 80023e8:	f001 ff04 	bl	80041f4 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 80023ec:	bf00      	nop
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80023f4:	4802      	ldr	r0, [pc, #8]	; (8002400 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80023f6:	f002 fd47 	bl	8004e88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80023fa:	bf00      	nop
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	200003d8 	.word	0x200003d8

08002404 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002408:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800240c:	f000 ff1a 	bl	8003244 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002410:	bf00      	nop
 8002412:	bd80      	pop	{r7, pc}

08002414 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002418:	4802      	ldr	r0, [pc, #8]	; (8002424 <USART6_IRQHandler+0x10>)
 800241a:	f003 fc4d 	bl	8005cb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800241e:	bf00      	nop
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	20000468 	.word	0x20000468

08002428 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 800242c:	bf00      	nop
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002436:	b480      	push	{r7}
 8002438:	af00      	add	r7, sp, #0
	return 1;
 800243a:	2301      	movs	r3, #1
}
 800243c:	4618      	mov	r0, r3
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <_kill>:

int _kill(int pid, int sig)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b082      	sub	sp, #8
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
 800244e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002450:	f004 faea 	bl	8006a28 <__errno>
 8002454:	4603      	mov	r3, r0
 8002456:	2216      	movs	r2, #22
 8002458:	601a      	str	r2, [r3, #0]
	return -1;
 800245a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <_exit>:

void _exit (int status)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b082      	sub	sp, #8
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800246e:	f04f 31ff 	mov.w	r1, #4294967295
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7ff ffe7 	bl	8002446 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002478:	e7fe      	b.n	8002478 <_exit+0x12>

0800247a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b086      	sub	sp, #24
 800247e:	af00      	add	r7, sp, #0
 8002480:	60f8      	str	r0, [r7, #12]
 8002482:	60b9      	str	r1, [r7, #8]
 8002484:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002486:	2300      	movs	r3, #0
 8002488:	617b      	str	r3, [r7, #20]
 800248a:	e00a      	b.n	80024a2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800248c:	f3af 8000 	nop.w
 8002490:	4601      	mov	r1, r0
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	1c5a      	adds	r2, r3, #1
 8002496:	60ba      	str	r2, [r7, #8]
 8002498:	b2ca      	uxtb	r2, r1
 800249a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	3301      	adds	r3, #1
 80024a0:	617b      	str	r3, [r7, #20]
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	dbf0      	blt.n	800248c <_read+0x12>
	}

return len;
 80024aa:	687b      	ldr	r3, [r7, #4]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3718      	adds	r7, #24
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024c0:	2300      	movs	r3, #0
 80024c2:	617b      	str	r3, [r7, #20]
 80024c4:	e009      	b.n	80024da <_write+0x26>
	{
		__io_putchar(*ptr++);
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	1c5a      	adds	r2, r3, #1
 80024ca:	60ba      	str	r2, [r7, #8]
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	3301      	adds	r3, #1
 80024d8:	617b      	str	r3, [r7, #20]
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	429a      	cmp	r2, r3
 80024e0:	dbf1      	blt.n	80024c6 <_write+0x12>
	}
	return len;
 80024e2:	687b      	ldr	r3, [r7, #4]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <_close>:

int _close(int file)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
	return -1;
 80024f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002514:	605a      	str	r2, [r3, #4]
	return 0;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <_isatty>:

int _isatty(int file)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
	return 1;
 800252c:	2301      	movs	r3, #1
}
 800252e:	4618      	mov	r0, r3
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr

0800253a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800253a:	b480      	push	{r7}
 800253c:	b085      	sub	sp, #20
 800253e:	af00      	add	r7, sp, #0
 8002540:	60f8      	str	r0, [r7, #12]
 8002542:	60b9      	str	r1, [r7, #8]
 8002544:	607a      	str	r2, [r7, #4]
	return 0;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3714      	adds	r7, #20
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800255c:	4a14      	ldr	r2, [pc, #80]	; (80025b0 <_sbrk+0x5c>)
 800255e:	4b15      	ldr	r3, [pc, #84]	; (80025b4 <_sbrk+0x60>)
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002568:	4b13      	ldr	r3, [pc, #76]	; (80025b8 <_sbrk+0x64>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d102      	bne.n	8002576 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002570:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <_sbrk+0x64>)
 8002572:	4a12      	ldr	r2, [pc, #72]	; (80025bc <_sbrk+0x68>)
 8002574:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002576:	4b10      	ldr	r3, [pc, #64]	; (80025b8 <_sbrk+0x64>)
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4413      	add	r3, r2
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	429a      	cmp	r2, r3
 8002582:	d207      	bcs.n	8002594 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002584:	f004 fa50 	bl	8006a28 <__errno>
 8002588:	4603      	mov	r3, r0
 800258a:	220c      	movs	r2, #12
 800258c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800258e:	f04f 33ff 	mov.w	r3, #4294967295
 8002592:	e009      	b.n	80025a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002594:	4b08      	ldr	r3, [pc, #32]	; (80025b8 <_sbrk+0x64>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800259a:	4b07      	ldr	r3, [pc, #28]	; (80025b8 <_sbrk+0x64>)
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4413      	add	r3, r2
 80025a2:	4a05      	ldr	r2, [pc, #20]	; (80025b8 <_sbrk+0x64>)
 80025a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025a6:	68fb      	ldr	r3, [r7, #12]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3718      	adds	r7, #24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	20018000 	.word	0x20018000
 80025b4:	00000400 	.word	0x00000400
 80025b8:	20000244 	.word	0x20000244
 80025bc:	20000508 	.word	0x20000508

080025c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025c4:	4b08      	ldr	r3, [pc, #32]	; (80025e8 <SystemInit+0x28>)
 80025c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ca:	4a07      	ldr	r2, [pc, #28]	; (80025e8 <SystemInit+0x28>)
 80025cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80025d4:	4b04      	ldr	r3, [pc, #16]	; (80025e8 <SystemInit+0x28>)
 80025d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025da:	609a      	str	r2, [r3, #8]
#endif
}
 80025dc:	bf00      	nop
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	e000ed00 	.word	0xe000ed00

080025ec <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim10;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b08e      	sub	sp, #56	; 0x38
 80025f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	605a      	str	r2, [r3, #4]
 80025fc:	609a      	str	r2, [r3, #8]
 80025fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002600:	f107 0320 	add.w	r3, r7, #32
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800260a:	1d3b      	adds	r3, r7, #4
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	605a      	str	r2, [r3, #4]
 8002612:	609a      	str	r2, [r3, #8]
 8002614:	60da      	str	r2, [r3, #12]
 8002616:	611a      	str	r2, [r3, #16]
 8002618:	615a      	str	r2, [r3, #20]
 800261a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800261c:	4b3d      	ldr	r3, [pc, #244]	; (8002714 <MX_TIM3_Init+0x128>)
 800261e:	4a3e      	ldr	r2, [pc, #248]	; (8002718 <MX_TIM3_Init+0x12c>)
 8002620:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8002622:	4b3c      	ldr	r3, [pc, #240]	; (8002714 <MX_TIM3_Init+0x128>)
 8002624:	2253      	movs	r2, #83	; 0x53
 8002626:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002628:	4b3a      	ldr	r3, [pc, #232]	; (8002714 <MX_TIM3_Init+0x128>)
 800262a:	2200      	movs	r2, #0
 800262c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 800262e:	4b39      	ldr	r3, [pc, #228]	; (8002714 <MX_TIM3_Init+0x128>)
 8002630:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002634:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002636:	4b37      	ldr	r3, [pc, #220]	; (8002714 <MX_TIM3_Init+0x128>)
 8002638:	2200      	movs	r2, #0
 800263a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800263c:	4b35      	ldr	r3, [pc, #212]	; (8002714 <MX_TIM3_Init+0x128>)
 800263e:	2280      	movs	r2, #128	; 0x80
 8002640:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002642:	4834      	ldr	r0, [pc, #208]	; (8002714 <MX_TIM3_Init+0x128>)
 8002644:	f002 fa64 	bl	8004b10 <HAL_TIM_Base_Init>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800264e:	f7ff fe61 	bl	8002314 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002656:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002658:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800265c:	4619      	mov	r1, r3
 800265e:	482d      	ldr	r0, [pc, #180]	; (8002714 <MX_TIM3_Init+0x128>)
 8002660:	f002 fddc 	bl	800521c <HAL_TIM_ConfigClockSource>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800266a:	f7ff fe53 	bl	8002314 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800266e:	4829      	ldr	r0, [pc, #164]	; (8002714 <MX_TIM3_Init+0x128>)
 8002670:	f002 fb00 	bl	8004c74 <HAL_TIM_PWM_Init>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800267a:	f7ff fe4b 	bl	8002314 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800267e:	2300      	movs	r3, #0
 8002680:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002682:	2300      	movs	r3, #0
 8002684:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002686:	f107 0320 	add.w	r3, r7, #32
 800268a:	4619      	mov	r1, r3
 800268c:	4821      	ldr	r0, [pc, #132]	; (8002714 <MX_TIM3_Init+0x128>)
 800268e:	f003 f981 	bl	8005994 <HAL_TIMEx_MasterConfigSynchronization>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002698:	f7ff fe3c 	bl	8002314 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800269c:	2360      	movs	r3, #96	; 0x60
 800269e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80026a0:	2300      	movs	r3, #0
 80026a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026a4:	2300      	movs	r3, #0
 80026a6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026a8:	2300      	movs	r3, #0
 80026aa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026ac:	1d3b      	adds	r3, r7, #4
 80026ae:	2200      	movs	r2, #0
 80026b0:	4619      	mov	r1, r3
 80026b2:	4818      	ldr	r0, [pc, #96]	; (8002714 <MX_TIM3_Init+0x128>)
 80026b4:	f002 fcf0 	bl	8005098 <HAL_TIM_PWM_ConfigChannel>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80026be:	f7ff fe29 	bl	8002314 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80026c2:	1d3b      	adds	r3, r7, #4
 80026c4:	2204      	movs	r2, #4
 80026c6:	4619      	mov	r1, r3
 80026c8:	4812      	ldr	r0, [pc, #72]	; (8002714 <MX_TIM3_Init+0x128>)
 80026ca:	f002 fce5 	bl	8005098 <HAL_TIM_PWM_ConfigChannel>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80026d4:	f7ff fe1e 	bl	8002314 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80026d8:	1d3b      	adds	r3, r7, #4
 80026da:	2208      	movs	r2, #8
 80026dc:	4619      	mov	r1, r3
 80026de:	480d      	ldr	r0, [pc, #52]	; (8002714 <MX_TIM3_Init+0x128>)
 80026e0:	f002 fcda 	bl	8005098 <HAL_TIM_PWM_ConfigChannel>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80026ea:	f7ff fe13 	bl	8002314 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80026ee:	1d3b      	adds	r3, r7, #4
 80026f0:	220c      	movs	r2, #12
 80026f2:	4619      	mov	r1, r3
 80026f4:	4807      	ldr	r0, [pc, #28]	; (8002714 <MX_TIM3_Init+0x128>)
 80026f6:	f002 fccf 	bl	8005098 <HAL_TIM_PWM_ConfigChannel>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8002700:	f7ff fe08 	bl	8002314 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002704:	4803      	ldr	r0, [pc, #12]	; (8002714 <MX_TIM3_Init+0x128>)
 8002706:	f000 f86b 	bl	80027e0 <HAL_TIM_MspPostInit>

}
 800270a:	bf00      	nop
 800270c:	3738      	adds	r7, #56	; 0x38
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	20000420 	.word	0x20000420
 8002718:	40000400 	.word	0x40000400

0800271c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002720:	4b0e      	ldr	r3, [pc, #56]	; (800275c <MX_TIM10_Init+0x40>)
 8002722:	4a0f      	ldr	r2, [pc, #60]	; (8002760 <MX_TIM10_Init+0x44>)
 8002724:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 33600-1;
 8002726:	4b0d      	ldr	r3, [pc, #52]	; (800275c <MX_TIM10_Init+0x40>)
 8002728:	f248 323f 	movw	r2, #33599	; 0x833f
 800272c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800272e:	4b0b      	ldr	r3, [pc, #44]	; (800275c <MX_TIM10_Init+0x40>)
 8002730:	2200      	movs	r2, #0
 8002732:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10-1;
 8002734:	4b09      	ldr	r3, [pc, #36]	; (800275c <MX_TIM10_Init+0x40>)
 8002736:	2209      	movs	r2, #9
 8002738:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800273a:	4b08      	ldr	r3, [pc, #32]	; (800275c <MX_TIM10_Init+0x40>)
 800273c:	2200      	movs	r2, #0
 800273e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002740:	4b06      	ldr	r3, [pc, #24]	; (800275c <MX_TIM10_Init+0x40>)
 8002742:	2200      	movs	r2, #0
 8002744:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002746:	4805      	ldr	r0, [pc, #20]	; (800275c <MX_TIM10_Init+0x40>)
 8002748:	f002 f9e2 	bl	8004b10 <HAL_TIM_Base_Init>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8002752:	f7ff fddf 	bl	8002314 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	200003d8 	.word	0x200003d8
 8002760:	40014400 	.word	0x40014400

08002764 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a18      	ldr	r2, [pc, #96]	; (80027d4 <HAL_TIM_Base_MspInit+0x70>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d10e      	bne.n	8002794 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	4b17      	ldr	r3, [pc, #92]	; (80027d8 <HAL_TIM_Base_MspInit+0x74>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	4a16      	ldr	r2, [pc, #88]	; (80027d8 <HAL_TIM_Base_MspInit+0x74>)
 8002780:	f043 0302 	orr.w	r3, r3, #2
 8002784:	6413      	str	r3, [r2, #64]	; 0x40
 8002786:	4b14      	ldr	r3, [pc, #80]	; (80027d8 <HAL_TIM_Base_MspInit+0x74>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8002792:	e01a      	b.n	80027ca <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM10)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a10      	ldr	r2, [pc, #64]	; (80027dc <HAL_TIM_Base_MspInit+0x78>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d115      	bne.n	80027ca <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	60bb      	str	r3, [r7, #8]
 80027a2:	4b0d      	ldr	r3, [pc, #52]	; (80027d8 <HAL_TIM_Base_MspInit+0x74>)
 80027a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a6:	4a0c      	ldr	r2, [pc, #48]	; (80027d8 <HAL_TIM_Base_MspInit+0x74>)
 80027a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027ac:	6453      	str	r3, [r2, #68]	; 0x44
 80027ae:	4b0a      	ldr	r3, [pc, #40]	; (80027d8 <HAL_TIM_Base_MspInit+0x74>)
 80027b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b6:	60bb      	str	r3, [r7, #8]
 80027b8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80027ba:	2200      	movs	r2, #0
 80027bc:	2100      	movs	r1, #0
 80027be:	2019      	movs	r0, #25
 80027c0:	f000 fad9 	bl	8002d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80027c4:	2019      	movs	r0, #25
 80027c6:	f000 faf2 	bl	8002dae <HAL_NVIC_EnableIRQ>
}
 80027ca:	bf00      	nop
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	40000400 	.word	0x40000400
 80027d8:	40023800 	.word	0x40023800
 80027dc:	40014400 	.word	0x40014400

080027e0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b08a      	sub	sp, #40	; 0x28
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e8:	f107 0314 	add.w	r3, r7, #20
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	605a      	str	r2, [r3, #4]
 80027f2:	609a      	str	r2, [r3, #8]
 80027f4:	60da      	str	r2, [r3, #12]
 80027f6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a30      	ldr	r2, [pc, #192]	; (80028c0 <HAL_TIM_MspPostInit+0xe0>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d15a      	bne.n	80028b8 <HAL_TIM_MspPostInit+0xd8>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	613b      	str	r3, [r7, #16]
 8002806:	4b2f      	ldr	r3, [pc, #188]	; (80028c4 <HAL_TIM_MspPostInit+0xe4>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	4a2e      	ldr	r2, [pc, #184]	; (80028c4 <HAL_TIM_MspPostInit+0xe4>)
 800280c:	f043 0301 	orr.w	r3, r3, #1
 8002810:	6313      	str	r3, [r2, #48]	; 0x30
 8002812:	4b2c      	ldr	r3, [pc, #176]	; (80028c4 <HAL_TIM_MspPostInit+0xe4>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	613b      	str	r3, [r7, #16]
 800281c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	4b28      	ldr	r3, [pc, #160]	; (80028c4 <HAL_TIM_MspPostInit+0xe4>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	4a27      	ldr	r2, [pc, #156]	; (80028c4 <HAL_TIM_MspPostInit+0xe4>)
 8002828:	f043 0302 	orr.w	r3, r3, #2
 800282c:	6313      	str	r3, [r2, #48]	; 0x30
 800282e:	4b25      	ldr	r3, [pc, #148]	; (80028c4 <HAL_TIM_MspPostInit+0xe4>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	60bb      	str	r3, [r7, #8]
 800283e:	4b21      	ldr	r3, [pc, #132]	; (80028c4 <HAL_TIM_MspPostInit+0xe4>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	4a20      	ldr	r2, [pc, #128]	; (80028c4 <HAL_TIM_MspPostInit+0xe4>)
 8002844:	f043 0304 	orr.w	r3, r3, #4
 8002848:	6313      	str	r3, [r2, #48]	; 0x30
 800284a:	4b1e      	ldr	r3, [pc, #120]	; (80028c4 <HAL_TIM_MspPostInit+0xe4>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	f003 0304 	and.w	r3, r3, #4
 8002852:	60bb      	str	r3, [r7, #8]
 8002854:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB1     ------> TIM3_CH4
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002856:	23c0      	movs	r3, #192	; 0xc0
 8002858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285a:	2302      	movs	r3, #2
 800285c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285e:	2300      	movs	r3, #0
 8002860:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002862:	2300      	movs	r3, #0
 8002864:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002866:	2302      	movs	r3, #2
 8002868:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800286a:	f107 0314 	add.w	r3, r7, #20
 800286e:	4619      	mov	r1, r3
 8002870:	4815      	ldr	r0, [pc, #84]	; (80028c8 <HAL_TIM_MspPostInit+0xe8>)
 8002872:	f000 fb49 	bl	8002f08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002876:	2302      	movs	r3, #2
 8002878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287a:	2302      	movs	r3, #2
 800287c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287e:	2300      	movs	r3, #0
 8002880:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002882:	2300      	movs	r3, #0
 8002884:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002886:	2302      	movs	r3, #2
 8002888:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800288a:	f107 0314 	add.w	r3, r7, #20
 800288e:	4619      	mov	r1, r3
 8002890:	480e      	ldr	r0, [pc, #56]	; (80028cc <HAL_TIM_MspPostInit+0xec>)
 8002892:	f000 fb39 	bl	8002f08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002896:	f44f 7380 	mov.w	r3, #256	; 0x100
 800289a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289c:	2302      	movs	r3, #2
 800289e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a0:	2300      	movs	r3, #0
 80028a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a4:	2300      	movs	r3, #0
 80028a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80028a8:	2302      	movs	r3, #2
 80028aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028ac:	f107 0314 	add.w	r3, r7, #20
 80028b0:	4619      	mov	r1, r3
 80028b2:	4807      	ldr	r0, [pc, #28]	; (80028d0 <HAL_TIM_MspPostInit+0xf0>)
 80028b4:	f000 fb28 	bl	8002f08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80028b8:	bf00      	nop
 80028ba:	3728      	adds	r7, #40	; 0x28
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40000400 	.word	0x40000400
 80028c4:	40023800 	.word	0x40023800
 80028c8:	40020000 	.word	0x40020000
 80028cc:	40020400 	.word	0x40020400
 80028d0:	40020800 	.word	0x40020800

080028d4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart6;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80028d8:	4b11      	ldr	r3, [pc, #68]	; (8002920 <MX_USART2_UART_Init+0x4c>)
 80028da:	4a12      	ldr	r2, [pc, #72]	; (8002924 <MX_USART2_UART_Init+0x50>)
 80028dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80028de:	4b10      	ldr	r3, [pc, #64]	; (8002920 <MX_USART2_UART_Init+0x4c>)
 80028e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80028e6:	4b0e      	ldr	r3, [pc, #56]	; (8002920 <MX_USART2_UART_Init+0x4c>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80028ec:	4b0c      	ldr	r3, [pc, #48]	; (8002920 <MX_USART2_UART_Init+0x4c>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80028f2:	4b0b      	ldr	r3, [pc, #44]	; (8002920 <MX_USART2_UART_Init+0x4c>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028f8:	4b09      	ldr	r3, [pc, #36]	; (8002920 <MX_USART2_UART_Init+0x4c>)
 80028fa:	220c      	movs	r2, #12
 80028fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028fe:	4b08      	ldr	r3, [pc, #32]	; (8002920 <MX_USART2_UART_Init+0x4c>)
 8002900:	2200      	movs	r2, #0
 8002902:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002904:	4b06      	ldr	r3, [pc, #24]	; (8002920 <MX_USART2_UART_Init+0x4c>)
 8002906:	2200      	movs	r2, #0
 8002908:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800290a:	4805      	ldr	r0, [pc, #20]	; (8002920 <MX_USART2_UART_Init+0x4c>)
 800290c:	f003 f8c4 	bl	8005a98 <HAL_UART_Init>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002916:	f7ff fcfd 	bl	8002314 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800291a:	bf00      	nop
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	200004ac 	.word	0x200004ac
 8002924:	40004400 	.word	0x40004400

08002928 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800292c:	4b11      	ldr	r3, [pc, #68]	; (8002974 <MX_USART6_UART_Init+0x4c>)
 800292e:	4a12      	ldr	r2, [pc, #72]	; (8002978 <MX_USART6_UART_Init+0x50>)
 8002930:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002932:	4b10      	ldr	r3, [pc, #64]	; (8002974 <MX_USART6_UART_Init+0x4c>)
 8002934:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002938:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800293a:	4b0e      	ldr	r3, [pc, #56]	; (8002974 <MX_USART6_UART_Init+0x4c>)
 800293c:	2200      	movs	r2, #0
 800293e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002940:	4b0c      	ldr	r3, [pc, #48]	; (8002974 <MX_USART6_UART_Init+0x4c>)
 8002942:	2200      	movs	r2, #0
 8002944:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002946:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <MX_USART6_UART_Init+0x4c>)
 8002948:	2200      	movs	r2, #0
 800294a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800294c:	4b09      	ldr	r3, [pc, #36]	; (8002974 <MX_USART6_UART_Init+0x4c>)
 800294e:	220c      	movs	r2, #12
 8002950:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002952:	4b08      	ldr	r3, [pc, #32]	; (8002974 <MX_USART6_UART_Init+0x4c>)
 8002954:	2200      	movs	r2, #0
 8002956:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002958:	4b06      	ldr	r3, [pc, #24]	; (8002974 <MX_USART6_UART_Init+0x4c>)
 800295a:	2200      	movs	r2, #0
 800295c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800295e:	4805      	ldr	r0, [pc, #20]	; (8002974 <MX_USART6_UART_Init+0x4c>)
 8002960:	f003 f89a 	bl	8005a98 <HAL_UART_Init>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800296a:	f7ff fcd3 	bl	8002314 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800296e:	bf00      	nop
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	20000468 	.word	0x20000468
 8002978:	40011400 	.word	0x40011400

0800297c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b08c      	sub	sp, #48	; 0x30
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002984:	f107 031c 	add.w	r3, r7, #28
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	605a      	str	r2, [r3, #4]
 800298e:	609a      	str	r2, [r3, #8]
 8002990:	60da      	str	r2, [r3, #12]
 8002992:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a36      	ldr	r2, [pc, #216]	; (8002a74 <HAL_UART_MspInit+0xf8>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d12c      	bne.n	80029f8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800299e:	2300      	movs	r3, #0
 80029a0:	61bb      	str	r3, [r7, #24]
 80029a2:	4b35      	ldr	r3, [pc, #212]	; (8002a78 <HAL_UART_MspInit+0xfc>)
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	4a34      	ldr	r2, [pc, #208]	; (8002a78 <HAL_UART_MspInit+0xfc>)
 80029a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029ac:	6413      	str	r3, [r2, #64]	; 0x40
 80029ae:	4b32      	ldr	r3, [pc, #200]	; (8002a78 <HAL_UART_MspInit+0xfc>)
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b6:	61bb      	str	r3, [r7, #24]
 80029b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ba:	2300      	movs	r3, #0
 80029bc:	617b      	str	r3, [r7, #20]
 80029be:	4b2e      	ldr	r3, [pc, #184]	; (8002a78 <HAL_UART_MspInit+0xfc>)
 80029c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c2:	4a2d      	ldr	r2, [pc, #180]	; (8002a78 <HAL_UART_MspInit+0xfc>)
 80029c4:	f043 0301 	orr.w	r3, r3, #1
 80029c8:	6313      	str	r3, [r2, #48]	; 0x30
 80029ca:	4b2b      	ldr	r3, [pc, #172]	; (8002a78 <HAL_UART_MspInit+0xfc>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	617b      	str	r3, [r7, #20]
 80029d4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80029d6:	230c      	movs	r3, #12
 80029d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029da:	2302      	movs	r3, #2
 80029dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80029e2:	2301      	movs	r3, #1
 80029e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029e6:	2307      	movs	r3, #7
 80029e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ea:	f107 031c 	add.w	r3, r7, #28
 80029ee:	4619      	mov	r1, r3
 80029f0:	4822      	ldr	r0, [pc, #136]	; (8002a7c <HAL_UART_MspInit+0x100>)
 80029f2:	f000 fa89 	bl	8002f08 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80029f6:	e038      	b.n	8002a6a <HAL_UART_MspInit+0xee>
  else if(uartHandle->Instance==USART6)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a20      	ldr	r2, [pc, #128]	; (8002a80 <HAL_UART_MspInit+0x104>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d133      	bne.n	8002a6a <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002a02:	2300      	movs	r3, #0
 8002a04:	613b      	str	r3, [r7, #16]
 8002a06:	4b1c      	ldr	r3, [pc, #112]	; (8002a78 <HAL_UART_MspInit+0xfc>)
 8002a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0a:	4a1b      	ldr	r2, [pc, #108]	; (8002a78 <HAL_UART_MspInit+0xfc>)
 8002a0c:	f043 0320 	orr.w	r3, r3, #32
 8002a10:	6453      	str	r3, [r2, #68]	; 0x44
 8002a12:	4b19      	ldr	r3, [pc, #100]	; (8002a78 <HAL_UART_MspInit+0xfc>)
 8002a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a16:	f003 0320 	and.w	r3, r3, #32
 8002a1a:	613b      	str	r3, [r7, #16]
 8002a1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	4b15      	ldr	r3, [pc, #84]	; (8002a78 <HAL_UART_MspInit+0xfc>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	4a14      	ldr	r2, [pc, #80]	; (8002a78 <HAL_UART_MspInit+0xfc>)
 8002a28:	f043 0304 	orr.w	r3, r3, #4
 8002a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a2e:	4b12      	ldr	r3, [pc, #72]	; (8002a78 <HAL_UART_MspInit+0xfc>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	f003 0304 	and.w	r3, r3, #4
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a3a:	23c0      	movs	r3, #192	; 0xc0
 8002a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3e:	2302      	movs	r3, #2
 8002a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a42:	2300      	movs	r3, #0
 8002a44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a46:	2303      	movs	r3, #3
 8002a48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002a4a:	2308      	movs	r3, #8
 8002a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a4e:	f107 031c 	add.w	r3, r7, #28
 8002a52:	4619      	mov	r1, r3
 8002a54:	480b      	ldr	r0, [pc, #44]	; (8002a84 <HAL_UART_MspInit+0x108>)
 8002a56:	f000 fa57 	bl	8002f08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	2047      	movs	r0, #71	; 0x47
 8002a60:	f000 f989 	bl	8002d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002a64:	2047      	movs	r0, #71	; 0x47
 8002a66:	f000 f9a2 	bl	8002dae <HAL_NVIC_EnableIRQ>
}
 8002a6a:	bf00      	nop
 8002a6c:	3730      	adds	r7, #48	; 0x30
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40004400 	.word	0x40004400
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	40020000 	.word	0x40020000
 8002a80:	40011400 	.word	0x40011400
 8002a84:	40020800 	.word	0x40020800

08002a88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ac0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002a8c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002a8e:	e003      	b.n	8002a98 <LoopCopyDataInit>

08002a90 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002a90:	4b0c      	ldr	r3, [pc, #48]	; (8002ac4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002a92:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002a94:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002a96:	3104      	adds	r1, #4

08002a98 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002a98:	480b      	ldr	r0, [pc, #44]	; (8002ac8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002a9a:	4b0c      	ldr	r3, [pc, #48]	; (8002acc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002a9c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002a9e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002aa0:	d3f6      	bcc.n	8002a90 <CopyDataInit>
  ldr  r2, =_sbss
 8002aa2:	4a0b      	ldr	r2, [pc, #44]	; (8002ad0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002aa4:	e002      	b.n	8002aac <LoopFillZerobss>

08002aa6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002aa6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002aa8:	f842 3b04 	str.w	r3, [r2], #4

08002aac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002aac:	4b09      	ldr	r3, [pc, #36]	; (8002ad4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002aae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002ab0:	d3f9      	bcc.n	8002aa6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002ab2:	f7ff fd85 	bl	80025c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ab6:	f003 ffbd 	bl	8006a34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002aba:	f7ff fabd 	bl	8002038 <main>
  bx  lr    
 8002abe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ac0:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8002ac4:	0800a3d4 	.word	0x0800a3d4
  ldr  r0, =_sdata
 8002ac8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002acc:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8002ad0:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8002ad4:	20000504 	.word	0x20000504

08002ad8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ad8:	e7fe      	b.n	8002ad8 <ADC_IRQHandler>
	...

08002adc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ae0:	4b0e      	ldr	r3, [pc, #56]	; (8002b1c <HAL_Init+0x40>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a0d      	ldr	r2, [pc, #52]	; (8002b1c <HAL_Init+0x40>)
 8002ae6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002aea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002aec:	4b0b      	ldr	r3, [pc, #44]	; (8002b1c <HAL_Init+0x40>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a0a      	ldr	r2, [pc, #40]	; (8002b1c <HAL_Init+0x40>)
 8002af2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002af6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002af8:	4b08      	ldr	r3, [pc, #32]	; (8002b1c <HAL_Init+0x40>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a07      	ldr	r2, [pc, #28]	; (8002b1c <HAL_Init+0x40>)
 8002afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b04:	2003      	movs	r0, #3
 8002b06:	f000 f92b 	bl	8002d60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b0a:	2000      	movs	r0, #0
 8002b0c:	f000 f808 	bl	8002b20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b10:	f7ff fc06 	bl	8002320 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	40023c00 	.word	0x40023c00

08002b20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b28:	4b12      	ldr	r3, [pc, #72]	; (8002b74 <HAL_InitTick+0x54>)
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	4b12      	ldr	r3, [pc, #72]	; (8002b78 <HAL_InitTick+0x58>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	4619      	mov	r1, r3
 8002b32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b36:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f000 f943 	bl	8002dca <HAL_SYSTICK_Config>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e00e      	b.n	8002b6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2b0f      	cmp	r3, #15
 8002b52:	d80a      	bhi.n	8002b6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b54:	2200      	movs	r2, #0
 8002b56:	6879      	ldr	r1, [r7, #4]
 8002b58:	f04f 30ff 	mov.w	r0, #4294967295
 8002b5c:	f000 f90b 	bl	8002d76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b60:	4a06      	ldr	r2, [pc, #24]	; (8002b7c <HAL_InitTick+0x5c>)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
 8002b68:	e000      	b.n	8002b6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	20000000 	.word	0x20000000
 8002b78:	20000008 	.word	0x20000008
 8002b7c:	20000004 	.word	0x20000004

08002b80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b84:	4b06      	ldr	r3, [pc, #24]	; (8002ba0 <HAL_IncTick+0x20>)
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	461a      	mov	r2, r3
 8002b8a:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <HAL_IncTick+0x24>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4413      	add	r3, r2
 8002b90:	4a04      	ldr	r2, [pc, #16]	; (8002ba4 <HAL_IncTick+0x24>)
 8002b92:	6013      	str	r3, [r2, #0]
}
 8002b94:	bf00      	nop
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	20000008 	.word	0x20000008
 8002ba4:	200004f0 	.word	0x200004f0

08002ba8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  return uwTick;
 8002bac:	4b03      	ldr	r3, [pc, #12]	; (8002bbc <HAL_GetTick+0x14>)
 8002bae:	681b      	ldr	r3, [r3, #0]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	200004f0 	.word	0x200004f0

08002bc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f003 0307 	and.w	r3, r3, #7
 8002bce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bd0:	4b0c      	ldr	r3, [pc, #48]	; (8002c04 <__NVIC_SetPriorityGrouping+0x44>)
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bd6:	68ba      	ldr	r2, [r7, #8]
 8002bd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bdc:	4013      	ands	r3, r2
 8002bde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002be8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bf2:	4a04      	ldr	r2, [pc, #16]	; (8002c04 <__NVIC_SetPriorityGrouping+0x44>)
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	60d3      	str	r3, [r2, #12]
}
 8002bf8:	bf00      	nop
 8002bfa:	3714      	adds	r7, #20
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr
 8002c04:	e000ed00 	.word	0xe000ed00

08002c08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c0c:	4b04      	ldr	r3, [pc, #16]	; (8002c20 <__NVIC_GetPriorityGrouping+0x18>)
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	0a1b      	lsrs	r3, r3, #8
 8002c12:	f003 0307 	and.w	r3, r3, #7
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	e000ed00 	.word	0xe000ed00

08002c24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	db0b      	blt.n	8002c4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c36:	79fb      	ldrb	r3, [r7, #7]
 8002c38:	f003 021f 	and.w	r2, r3, #31
 8002c3c:	4907      	ldr	r1, [pc, #28]	; (8002c5c <__NVIC_EnableIRQ+0x38>)
 8002c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c42:	095b      	lsrs	r3, r3, #5
 8002c44:	2001      	movs	r0, #1
 8002c46:	fa00 f202 	lsl.w	r2, r0, r2
 8002c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	e000e100 	.word	0xe000e100

08002c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	6039      	str	r1, [r7, #0]
 8002c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	db0a      	blt.n	8002c8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	490c      	ldr	r1, [pc, #48]	; (8002cac <__NVIC_SetPriority+0x4c>)
 8002c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7e:	0112      	lsls	r2, r2, #4
 8002c80:	b2d2      	uxtb	r2, r2
 8002c82:	440b      	add	r3, r1
 8002c84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c88:	e00a      	b.n	8002ca0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	4908      	ldr	r1, [pc, #32]	; (8002cb0 <__NVIC_SetPriority+0x50>)
 8002c90:	79fb      	ldrb	r3, [r7, #7]
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	3b04      	subs	r3, #4
 8002c98:	0112      	lsls	r2, r2, #4
 8002c9a:	b2d2      	uxtb	r2, r2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	761a      	strb	r2, [r3, #24]
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	e000e100 	.word	0xe000e100
 8002cb0:	e000ed00 	.word	0xe000ed00

08002cb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b089      	sub	sp, #36	; 0x24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f003 0307 	and.w	r3, r3, #7
 8002cc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	f1c3 0307 	rsb	r3, r3, #7
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	bf28      	it	cs
 8002cd2:	2304      	movcs	r3, #4
 8002cd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	3304      	adds	r3, #4
 8002cda:	2b06      	cmp	r3, #6
 8002cdc:	d902      	bls.n	8002ce4 <NVIC_EncodePriority+0x30>
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	3b03      	subs	r3, #3
 8002ce2:	e000      	b.n	8002ce6 <NVIC_EncodePriority+0x32>
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf2:	43da      	mvns	r2, r3
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	401a      	ands	r2, r3
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	fa01 f303 	lsl.w	r3, r1, r3
 8002d06:	43d9      	mvns	r1, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d0c:	4313      	orrs	r3, r2
         );
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3724      	adds	r7, #36	; 0x24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
	...

08002d1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	3b01      	subs	r3, #1
 8002d28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d2c:	d301      	bcc.n	8002d32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e00f      	b.n	8002d52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d32:	4a0a      	ldr	r2, [pc, #40]	; (8002d5c <SysTick_Config+0x40>)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3b01      	subs	r3, #1
 8002d38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d3a:	210f      	movs	r1, #15
 8002d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d40:	f7ff ff8e 	bl	8002c60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d44:	4b05      	ldr	r3, [pc, #20]	; (8002d5c <SysTick_Config+0x40>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d4a:	4b04      	ldr	r3, [pc, #16]	; (8002d5c <SysTick_Config+0x40>)
 8002d4c:	2207      	movs	r2, #7
 8002d4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	e000e010 	.word	0xe000e010

08002d60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f7ff ff29 	bl	8002bc0 <__NVIC_SetPriorityGrouping>
}
 8002d6e:	bf00      	nop
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b086      	sub	sp, #24
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	60b9      	str	r1, [r7, #8]
 8002d80:	607a      	str	r2, [r7, #4]
 8002d82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d88:	f7ff ff3e 	bl	8002c08 <__NVIC_GetPriorityGrouping>
 8002d8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	68b9      	ldr	r1, [r7, #8]
 8002d92:	6978      	ldr	r0, [r7, #20]
 8002d94:	f7ff ff8e 	bl	8002cb4 <NVIC_EncodePriority>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d9e:	4611      	mov	r1, r2
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff ff5d 	bl	8002c60 <__NVIC_SetPriority>
}
 8002da6:	bf00      	nop
 8002da8:	3718      	adds	r7, #24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b082      	sub	sp, #8
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	4603      	mov	r3, r0
 8002db6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff ff31 	bl	8002c24 <__NVIC_EnableIRQ>
}
 8002dc2:	bf00      	nop
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b082      	sub	sp, #8
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f7ff ffa2 	bl	8002d1c <SysTick_Config>
 8002dd8:	4603      	mov	r3, r0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b084      	sub	sp, #16
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dee:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002df0:	f7ff feda 	bl	8002ba8 <HAL_GetTick>
 8002df4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d008      	beq.n	8002e14 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2280      	movs	r2, #128	; 0x80
 8002e06:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e052      	b.n	8002eba <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f022 0216 	bic.w	r2, r2, #22
 8002e22:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	695a      	ldr	r2, [r3, #20]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e32:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d103      	bne.n	8002e44 <HAL_DMA_Abort+0x62>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d007      	beq.n	8002e54 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 0208 	bic.w	r2, r2, #8
 8002e52:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 0201 	bic.w	r2, r2, #1
 8002e62:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e64:	e013      	b.n	8002e8e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e66:	f7ff fe9f 	bl	8002ba8 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b05      	cmp	r3, #5
 8002e72:	d90c      	bls.n	8002e8e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2220      	movs	r2, #32
 8002e78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2203      	movs	r2, #3
 8002e7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e015      	b.n	8002eba <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1e4      	bne.n	8002e66 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea0:	223f      	movs	r2, #63	; 0x3f
 8002ea2:	409a      	lsls	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b083      	sub	sp, #12
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d004      	beq.n	8002ee0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2280      	movs	r2, #128	; 0x80
 8002eda:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e00c      	b.n	8002efa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2205      	movs	r2, #5
 8002ee4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0201 	bic.w	r2, r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
	...

08002f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b089      	sub	sp, #36	; 0x24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f12:	2300      	movs	r3, #0
 8002f14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f16:	2300      	movs	r3, #0
 8002f18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f1e:	2300      	movs	r3, #0
 8002f20:	61fb      	str	r3, [r7, #28]
 8002f22:	e159      	b.n	80031d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f24:	2201      	movs	r2, #1
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	4013      	ands	r3, r2
 8002f36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	f040 8148 	bne.w	80031d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f003 0303 	and.w	r3, r3, #3
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d005      	beq.n	8002f5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d130      	bne.n	8002fbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	2203      	movs	r2, #3
 8002f66:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6a:	43db      	mvns	r3, r3
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	68da      	ldr	r2, [r3, #12]
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f90:	2201      	movs	r2, #1
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	43db      	mvns	r3, r3
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	091b      	lsrs	r3, r3, #4
 8002fa6:	f003 0201 	and.w	r2, r3, #1
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f003 0303 	and.w	r3, r3, #3
 8002fc4:	2b03      	cmp	r3, #3
 8002fc6:	d017      	beq.n	8002ff8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	2203      	movs	r2, #3
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f003 0303 	and.w	r3, r3, #3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d123      	bne.n	800304c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	08da      	lsrs	r2, r3, #3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	3208      	adds	r2, #8
 800300c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003010:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	f003 0307 	and.w	r3, r3, #7
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	220f      	movs	r2, #15
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	43db      	mvns	r3, r3
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	4013      	ands	r3, r2
 8003026:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	691a      	ldr	r2, [r3, #16]
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	f003 0307 	and.w	r3, r3, #7
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	fa02 f303 	lsl.w	r3, r2, r3
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	4313      	orrs	r3, r2
 800303c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	08da      	lsrs	r2, r3, #3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	3208      	adds	r2, #8
 8003046:	69b9      	ldr	r1, [r7, #24]
 8003048:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	2203      	movs	r2, #3
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	43db      	mvns	r3, r3
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	4013      	ands	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f003 0203 	and.w	r2, r3, #3
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	4313      	orrs	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 80a2 	beq.w	80031d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800308e:	2300      	movs	r3, #0
 8003090:	60fb      	str	r3, [r7, #12]
 8003092:	4b57      	ldr	r3, [pc, #348]	; (80031f0 <HAL_GPIO_Init+0x2e8>)
 8003094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003096:	4a56      	ldr	r2, [pc, #344]	; (80031f0 <HAL_GPIO_Init+0x2e8>)
 8003098:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800309c:	6453      	str	r3, [r2, #68]	; 0x44
 800309e:	4b54      	ldr	r3, [pc, #336]	; (80031f0 <HAL_GPIO_Init+0x2e8>)
 80030a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030a6:	60fb      	str	r3, [r7, #12]
 80030a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030aa:	4a52      	ldr	r2, [pc, #328]	; (80031f4 <HAL_GPIO_Init+0x2ec>)
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	089b      	lsrs	r3, r3, #2
 80030b0:	3302      	adds	r3, #2
 80030b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	f003 0303 	and.w	r3, r3, #3
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	220f      	movs	r2, #15
 80030c2:	fa02 f303 	lsl.w	r3, r2, r3
 80030c6:	43db      	mvns	r3, r3
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	4013      	ands	r3, r2
 80030cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a49      	ldr	r2, [pc, #292]	; (80031f8 <HAL_GPIO_Init+0x2f0>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d019      	beq.n	800310a <HAL_GPIO_Init+0x202>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a48      	ldr	r2, [pc, #288]	; (80031fc <HAL_GPIO_Init+0x2f4>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d013      	beq.n	8003106 <HAL_GPIO_Init+0x1fe>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a47      	ldr	r2, [pc, #284]	; (8003200 <HAL_GPIO_Init+0x2f8>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d00d      	beq.n	8003102 <HAL_GPIO_Init+0x1fa>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a46      	ldr	r2, [pc, #280]	; (8003204 <HAL_GPIO_Init+0x2fc>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d007      	beq.n	80030fe <HAL_GPIO_Init+0x1f6>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a45      	ldr	r2, [pc, #276]	; (8003208 <HAL_GPIO_Init+0x300>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d101      	bne.n	80030fa <HAL_GPIO_Init+0x1f2>
 80030f6:	2304      	movs	r3, #4
 80030f8:	e008      	b.n	800310c <HAL_GPIO_Init+0x204>
 80030fa:	2307      	movs	r3, #7
 80030fc:	e006      	b.n	800310c <HAL_GPIO_Init+0x204>
 80030fe:	2303      	movs	r3, #3
 8003100:	e004      	b.n	800310c <HAL_GPIO_Init+0x204>
 8003102:	2302      	movs	r3, #2
 8003104:	e002      	b.n	800310c <HAL_GPIO_Init+0x204>
 8003106:	2301      	movs	r3, #1
 8003108:	e000      	b.n	800310c <HAL_GPIO_Init+0x204>
 800310a:	2300      	movs	r3, #0
 800310c:	69fa      	ldr	r2, [r7, #28]
 800310e:	f002 0203 	and.w	r2, r2, #3
 8003112:	0092      	lsls	r2, r2, #2
 8003114:	4093      	lsls	r3, r2
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	4313      	orrs	r3, r2
 800311a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800311c:	4935      	ldr	r1, [pc, #212]	; (80031f4 <HAL_GPIO_Init+0x2ec>)
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	089b      	lsrs	r3, r3, #2
 8003122:	3302      	adds	r3, #2
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800312a:	4b38      	ldr	r3, [pc, #224]	; (800320c <HAL_GPIO_Init+0x304>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	43db      	mvns	r3, r3
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	4013      	ands	r3, r2
 8003138:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	4313      	orrs	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800314e:	4a2f      	ldr	r2, [pc, #188]	; (800320c <HAL_GPIO_Init+0x304>)
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003154:	4b2d      	ldr	r3, [pc, #180]	; (800320c <HAL_GPIO_Init+0x304>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	43db      	mvns	r3, r3
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	4013      	ands	r3, r2
 8003162:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d003      	beq.n	8003178 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	4313      	orrs	r3, r2
 8003176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003178:	4a24      	ldr	r2, [pc, #144]	; (800320c <HAL_GPIO_Init+0x304>)
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800317e:	4b23      	ldr	r3, [pc, #140]	; (800320c <HAL_GPIO_Init+0x304>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	43db      	mvns	r3, r3
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	4013      	ands	r3, r2
 800318c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	4313      	orrs	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031a2:	4a1a      	ldr	r2, [pc, #104]	; (800320c <HAL_GPIO_Init+0x304>)
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031a8:	4b18      	ldr	r3, [pc, #96]	; (800320c <HAL_GPIO_Init+0x304>)
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	43db      	mvns	r3, r3
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	4013      	ands	r3, r2
 80031b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d003      	beq.n	80031cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031cc:	4a0f      	ldr	r2, [pc, #60]	; (800320c <HAL_GPIO_Init+0x304>)
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	3301      	adds	r3, #1
 80031d6:	61fb      	str	r3, [r7, #28]
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	2b0f      	cmp	r3, #15
 80031dc:	f67f aea2 	bls.w	8002f24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031e0:	bf00      	nop
 80031e2:	bf00      	nop
 80031e4:	3724      	adds	r7, #36	; 0x24
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	40023800 	.word	0x40023800
 80031f4:	40013800 	.word	0x40013800
 80031f8:	40020000 	.word	0x40020000
 80031fc:	40020400 	.word	0x40020400
 8003200:	40020800 	.word	0x40020800
 8003204:	40020c00 	.word	0x40020c00
 8003208:	40021000 	.word	0x40021000
 800320c:	40013c00 	.word	0x40013c00

08003210 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	460b      	mov	r3, r1
 800321a:	807b      	strh	r3, [r7, #2]
 800321c:	4613      	mov	r3, r2
 800321e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003220:	787b      	ldrb	r3, [r7, #1]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d003      	beq.n	800322e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003226:	887a      	ldrh	r2, [r7, #2]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800322c:	e003      	b.n	8003236 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800322e:	887b      	ldrh	r3, [r7, #2]
 8003230:	041a      	lsls	r2, r3, #16
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	619a      	str	r2, [r3, #24]
}
 8003236:	bf00      	nop
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
	...

08003244 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	4603      	mov	r3, r0
 800324c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800324e:	4b08      	ldr	r3, [pc, #32]	; (8003270 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003250:	695a      	ldr	r2, [r3, #20]
 8003252:	88fb      	ldrh	r3, [r7, #6]
 8003254:	4013      	ands	r3, r2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d006      	beq.n	8003268 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800325a:	4a05      	ldr	r2, [pc, #20]	; (8003270 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800325c:	88fb      	ldrh	r3, [r7, #6]
 800325e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003260:	88fb      	ldrh	r3, [r7, #6]
 8003262:	4618      	mov	r0, r3
 8003264:	f7ff f83e 	bl	80022e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003268:	bf00      	nop
 800326a:	3708      	adds	r7, #8
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40013c00 	.word	0x40013c00

08003274 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e12b      	b.n	80034de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d106      	bne.n	80032a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7fe fe84 	bl	8001fa8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2224      	movs	r2, #36	; 0x24
 80032a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 0201 	bic.w	r2, r2, #1
 80032b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032d8:	f001 fbf2 	bl	8004ac0 <HAL_RCC_GetPCLK1Freq>
 80032dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	4a81      	ldr	r2, [pc, #516]	; (80034e8 <HAL_I2C_Init+0x274>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d807      	bhi.n	80032f8 <HAL_I2C_Init+0x84>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4a80      	ldr	r2, [pc, #512]	; (80034ec <HAL_I2C_Init+0x278>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	bf94      	ite	ls
 80032f0:	2301      	movls	r3, #1
 80032f2:	2300      	movhi	r3, #0
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	e006      	b.n	8003306 <HAL_I2C_Init+0x92>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4a7d      	ldr	r2, [pc, #500]	; (80034f0 <HAL_I2C_Init+0x27c>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	bf94      	ite	ls
 8003300:	2301      	movls	r3, #1
 8003302:	2300      	movhi	r3, #0
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e0e7      	b.n	80034de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	4a78      	ldr	r2, [pc, #480]	; (80034f4 <HAL_I2C_Init+0x280>)
 8003312:	fba2 2303 	umull	r2, r3, r2, r3
 8003316:	0c9b      	lsrs	r3, r3, #18
 8003318:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68ba      	ldr	r2, [r7, #8]
 800332a:	430a      	orrs	r2, r1
 800332c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	4a6a      	ldr	r2, [pc, #424]	; (80034e8 <HAL_I2C_Init+0x274>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d802      	bhi.n	8003348 <HAL_I2C_Init+0xd4>
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	3301      	adds	r3, #1
 8003346:	e009      	b.n	800335c <HAL_I2C_Init+0xe8>
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800334e:	fb02 f303 	mul.w	r3, r2, r3
 8003352:	4a69      	ldr	r2, [pc, #420]	; (80034f8 <HAL_I2C_Init+0x284>)
 8003354:	fba2 2303 	umull	r2, r3, r2, r3
 8003358:	099b      	lsrs	r3, r3, #6
 800335a:	3301      	adds	r3, #1
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	6812      	ldr	r2, [r2, #0]
 8003360:	430b      	orrs	r3, r1
 8003362:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800336e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	495c      	ldr	r1, [pc, #368]	; (80034e8 <HAL_I2C_Init+0x274>)
 8003378:	428b      	cmp	r3, r1
 800337a:	d819      	bhi.n	80033b0 <HAL_I2C_Init+0x13c>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	1e59      	subs	r1, r3, #1
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	fbb1 f3f3 	udiv	r3, r1, r3
 800338a:	1c59      	adds	r1, r3, #1
 800338c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003390:	400b      	ands	r3, r1
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00a      	beq.n	80033ac <HAL_I2C_Init+0x138>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	1e59      	subs	r1, r3, #1
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80033a4:	3301      	adds	r3, #1
 80033a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033aa:	e051      	b.n	8003450 <HAL_I2C_Init+0x1dc>
 80033ac:	2304      	movs	r3, #4
 80033ae:	e04f      	b.n	8003450 <HAL_I2C_Init+0x1dc>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d111      	bne.n	80033dc <HAL_I2C_Init+0x168>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	1e58      	subs	r0, r3, #1
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6859      	ldr	r1, [r3, #4]
 80033c0:	460b      	mov	r3, r1
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	440b      	add	r3, r1
 80033c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80033ca:	3301      	adds	r3, #1
 80033cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	bf0c      	ite	eq
 80033d4:	2301      	moveq	r3, #1
 80033d6:	2300      	movne	r3, #0
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	e012      	b.n	8003402 <HAL_I2C_Init+0x18e>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	1e58      	subs	r0, r3, #1
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6859      	ldr	r1, [r3, #4]
 80033e4:	460b      	mov	r3, r1
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	440b      	add	r3, r1
 80033ea:	0099      	lsls	r1, r3, #2
 80033ec:	440b      	add	r3, r1
 80033ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80033f2:	3301      	adds	r3, #1
 80033f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	bf0c      	ite	eq
 80033fc:	2301      	moveq	r3, #1
 80033fe:	2300      	movne	r3, #0
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <HAL_I2C_Init+0x196>
 8003406:	2301      	movs	r3, #1
 8003408:	e022      	b.n	8003450 <HAL_I2C_Init+0x1dc>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10e      	bne.n	8003430 <HAL_I2C_Init+0x1bc>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	1e58      	subs	r0, r3, #1
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6859      	ldr	r1, [r3, #4]
 800341a:	460b      	mov	r3, r1
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	440b      	add	r3, r1
 8003420:	fbb0 f3f3 	udiv	r3, r0, r3
 8003424:	3301      	adds	r3, #1
 8003426:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800342a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800342e:	e00f      	b.n	8003450 <HAL_I2C_Init+0x1dc>
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	1e58      	subs	r0, r3, #1
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6859      	ldr	r1, [r3, #4]
 8003438:	460b      	mov	r3, r1
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	440b      	add	r3, r1
 800343e:	0099      	lsls	r1, r3, #2
 8003440:	440b      	add	r3, r1
 8003442:	fbb0 f3f3 	udiv	r3, r0, r3
 8003446:	3301      	adds	r3, #1
 8003448:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800344c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003450:	6879      	ldr	r1, [r7, #4]
 8003452:	6809      	ldr	r1, [r1, #0]
 8003454:	4313      	orrs	r3, r2
 8003456:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	69da      	ldr	r2, [r3, #28]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	431a      	orrs	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	430a      	orrs	r2, r1
 8003472:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800347e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	6911      	ldr	r1, [r2, #16]
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	68d2      	ldr	r2, [r2, #12]
 800348a:	4311      	orrs	r1, r2
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	6812      	ldr	r2, [r2, #0]
 8003490:	430b      	orrs	r3, r1
 8003492:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	695a      	ldr	r2, [r3, #20]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	431a      	orrs	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	430a      	orrs	r2, r1
 80034ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f042 0201 	orr.w	r2, r2, #1
 80034be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2220      	movs	r2, #32
 80034ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	000186a0 	.word	0x000186a0
 80034ec:	001e847f 	.word	0x001e847f
 80034f0:	003d08ff 	.word	0x003d08ff
 80034f4:	431bde83 	.word	0x431bde83
 80034f8:	10624dd3 	.word	0x10624dd3

080034fc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b088      	sub	sp, #32
 8003500:	af02      	add	r7, sp, #8
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	4608      	mov	r0, r1
 8003506:	4611      	mov	r1, r2
 8003508:	461a      	mov	r2, r3
 800350a:	4603      	mov	r3, r0
 800350c:	817b      	strh	r3, [r7, #10]
 800350e:	460b      	mov	r3, r1
 8003510:	813b      	strh	r3, [r7, #8]
 8003512:	4613      	mov	r3, r2
 8003514:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003516:	f7ff fb47 	bl	8002ba8 <HAL_GetTick>
 800351a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003522:	b2db      	uxtb	r3, r3
 8003524:	2b20      	cmp	r3, #32
 8003526:	f040 80d9 	bne.w	80036dc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	9300      	str	r3, [sp, #0]
 800352e:	2319      	movs	r3, #25
 8003530:	2201      	movs	r2, #1
 8003532:	496d      	ldr	r1, [pc, #436]	; (80036e8 <HAL_I2C_Mem_Write+0x1ec>)
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	f000 fc7f 	bl	8003e38 <I2C_WaitOnFlagUntilTimeout>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d001      	beq.n	8003544 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003540:	2302      	movs	r3, #2
 8003542:	e0cc      	b.n	80036de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800354a:	2b01      	cmp	r3, #1
 800354c:	d101      	bne.n	8003552 <HAL_I2C_Mem_Write+0x56>
 800354e:	2302      	movs	r3, #2
 8003550:	e0c5      	b.n	80036de <HAL_I2C_Mem_Write+0x1e2>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2201      	movs	r2, #1
 8003556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	2b01      	cmp	r3, #1
 8003566:	d007      	beq.n	8003578 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f042 0201 	orr.w	r2, r2, #1
 8003576:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003586:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2221      	movs	r2, #33	; 0x21
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2240      	movs	r2, #64	; 0x40
 8003594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6a3a      	ldr	r2, [r7, #32]
 80035a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80035a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	4a4d      	ldr	r2, [pc, #308]	; (80036ec <HAL_I2C_Mem_Write+0x1f0>)
 80035b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035ba:	88f8      	ldrh	r0, [r7, #6]
 80035bc:	893a      	ldrh	r2, [r7, #8]
 80035be:	8979      	ldrh	r1, [r7, #10]
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	9301      	str	r3, [sp, #4]
 80035c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c6:	9300      	str	r3, [sp, #0]
 80035c8:	4603      	mov	r3, r0
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f000 fab6 	bl	8003b3c <I2C_RequestMemoryWrite>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d052      	beq.n	800367c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e081      	b.n	80036de <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f000 fd00 	bl	8003fe4 <I2C_WaitOnTXEFlagUntilTimeout>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00d      	beq.n	8003606 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	2b04      	cmp	r3, #4
 80035f0:	d107      	bne.n	8003602 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003600:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e06b      	b.n	80036de <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360a:	781a      	ldrb	r2, [r3, #0]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003616:	1c5a      	adds	r2, r3, #1
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003620:	3b01      	subs	r3, #1
 8003622:	b29a      	uxth	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362c:	b29b      	uxth	r3, r3
 800362e:	3b01      	subs	r3, #1
 8003630:	b29a      	uxth	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	695b      	ldr	r3, [r3, #20]
 800363c:	f003 0304 	and.w	r3, r3, #4
 8003640:	2b04      	cmp	r3, #4
 8003642:	d11b      	bne.n	800367c <HAL_I2C_Mem_Write+0x180>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003648:	2b00      	cmp	r3, #0
 800364a:	d017      	beq.n	800367c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003650:	781a      	ldrb	r2, [r3, #0]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365c:	1c5a      	adds	r2, r3, #1
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003666:	3b01      	subs	r3, #1
 8003668:	b29a      	uxth	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003672:	b29b      	uxth	r3, r3
 8003674:	3b01      	subs	r3, #1
 8003676:	b29a      	uxth	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1aa      	bne.n	80035da <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003684:	697a      	ldr	r2, [r7, #20]
 8003686:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f000 fcec 	bl	8004066 <I2C_WaitOnBTFFlagUntilTimeout>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00d      	beq.n	80036b0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003698:	2b04      	cmp	r3, #4
 800369a:	d107      	bne.n	80036ac <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036aa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e016      	b.n	80036de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2220      	movs	r2, #32
 80036c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80036d8:	2300      	movs	r3, #0
 80036da:	e000      	b.n	80036de <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80036dc:	2302      	movs	r3, #2
  }
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3718      	adds	r7, #24
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	00100002 	.word	0x00100002
 80036ec:	ffff0000 	.word	0xffff0000

080036f0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b08c      	sub	sp, #48	; 0x30
 80036f4:	af02      	add	r7, sp, #8
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	4608      	mov	r0, r1
 80036fa:	4611      	mov	r1, r2
 80036fc:	461a      	mov	r2, r3
 80036fe:	4603      	mov	r3, r0
 8003700:	817b      	strh	r3, [r7, #10]
 8003702:	460b      	mov	r3, r1
 8003704:	813b      	strh	r3, [r7, #8]
 8003706:	4613      	mov	r3, r2
 8003708:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800370a:	f7ff fa4d 	bl	8002ba8 <HAL_GetTick>
 800370e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b20      	cmp	r3, #32
 800371a:	f040 8208 	bne.w	8003b2e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800371e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	2319      	movs	r3, #25
 8003724:	2201      	movs	r2, #1
 8003726:	497b      	ldr	r1, [pc, #492]	; (8003914 <HAL_I2C_Mem_Read+0x224>)
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f000 fb85 	bl	8003e38 <I2C_WaitOnFlagUntilTimeout>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003734:	2302      	movs	r3, #2
 8003736:	e1fb      	b.n	8003b30 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800373e:	2b01      	cmp	r3, #1
 8003740:	d101      	bne.n	8003746 <HAL_I2C_Mem_Read+0x56>
 8003742:	2302      	movs	r3, #2
 8003744:	e1f4      	b.n	8003b30 <HAL_I2C_Mem_Read+0x440>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0301 	and.w	r3, r3, #1
 8003758:	2b01      	cmp	r3, #1
 800375a:	d007      	beq.n	800376c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f042 0201 	orr.w	r2, r2, #1
 800376a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800377a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2222      	movs	r2, #34	; 0x22
 8003780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2240      	movs	r2, #64	; 0x40
 8003788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003796:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800379c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	4a5b      	ldr	r2, [pc, #364]	; (8003918 <HAL_I2C_Mem_Read+0x228>)
 80037ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037ae:	88f8      	ldrh	r0, [r7, #6]
 80037b0:	893a      	ldrh	r2, [r7, #8]
 80037b2:	8979      	ldrh	r1, [r7, #10]
 80037b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b6:	9301      	str	r3, [sp, #4]
 80037b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ba:	9300      	str	r3, [sp, #0]
 80037bc:	4603      	mov	r3, r0
 80037be:	68f8      	ldr	r0, [r7, #12]
 80037c0:	f000 fa52 	bl	8003c68 <I2C_RequestMemoryRead>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e1b0      	b.n	8003b30 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d113      	bne.n	80037fe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037d6:	2300      	movs	r3, #0
 80037d8:	623b      	str	r3, [r7, #32]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	623b      	str	r3, [r7, #32]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	623b      	str	r3, [r7, #32]
 80037ea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	e184      	b.n	8003b08 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003802:	2b01      	cmp	r3, #1
 8003804:	d11b      	bne.n	800383e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003814:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003816:	2300      	movs	r3, #0
 8003818:	61fb      	str	r3, [r7, #28]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	61fb      	str	r3, [r7, #28]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	61fb      	str	r3, [r7, #28]
 800382a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800383a:	601a      	str	r2, [r3, #0]
 800383c:	e164      	b.n	8003b08 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003842:	2b02      	cmp	r3, #2
 8003844:	d11b      	bne.n	800387e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003854:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003864:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003866:	2300      	movs	r3, #0
 8003868:	61bb      	str	r3, [r7, #24]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	61bb      	str	r3, [r7, #24]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	61bb      	str	r3, [r7, #24]
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	e144      	b.n	8003b08 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800387e:	2300      	movs	r3, #0
 8003880:	617b      	str	r3, [r7, #20]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	695b      	ldr	r3, [r3, #20]
 8003888:	617b      	str	r3, [r7, #20]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	617b      	str	r3, [r7, #20]
 8003892:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003894:	e138      	b.n	8003b08 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800389a:	2b03      	cmp	r3, #3
 800389c:	f200 80f1 	bhi.w	8003a82 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d123      	bne.n	80038f0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038ac:	68f8      	ldr	r0, [r7, #12]
 80038ae:	f000 fc1b 	bl	80040e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e139      	b.n	8003b30 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	691a      	ldr	r2, [r3, #16]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c6:	b2d2      	uxtb	r2, r2
 80038c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ce:	1c5a      	adds	r2, r3, #1
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d8:	3b01      	subs	r3, #1
 80038da:	b29a      	uxth	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	3b01      	subs	r3, #1
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038ee:	e10b      	b.n	8003b08 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d14e      	bne.n	8003996 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fa:	9300      	str	r3, [sp, #0]
 80038fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038fe:	2200      	movs	r2, #0
 8003900:	4906      	ldr	r1, [pc, #24]	; (800391c <HAL_I2C_Mem_Read+0x22c>)
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f000 fa98 	bl	8003e38 <I2C_WaitOnFlagUntilTimeout>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d008      	beq.n	8003920 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e10e      	b.n	8003b30 <HAL_I2C_Mem_Read+0x440>
 8003912:	bf00      	nop
 8003914:	00100002 	.word	0x00100002
 8003918:	ffff0000 	.word	0xffff0000
 800391c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800392e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	691a      	ldr	r2, [r3, #16]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393a:	b2d2      	uxtb	r2, r2
 800393c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003942:	1c5a      	adds	r2, r3, #1
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800394c:	3b01      	subs	r3, #1
 800394e:	b29a      	uxth	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003958:	b29b      	uxth	r3, r3
 800395a:	3b01      	subs	r3, #1
 800395c:	b29a      	uxth	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	691a      	ldr	r2, [r3, #16]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396c:	b2d2      	uxtb	r2, r2
 800396e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	1c5a      	adds	r2, r3, #1
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800397e:	3b01      	subs	r3, #1
 8003980:	b29a      	uxth	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800398a:	b29b      	uxth	r3, r3
 800398c:	3b01      	subs	r3, #1
 800398e:	b29a      	uxth	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003994:	e0b8      	b.n	8003b08 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003998:	9300      	str	r3, [sp, #0]
 800399a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800399c:	2200      	movs	r2, #0
 800399e:	4966      	ldr	r1, [pc, #408]	; (8003b38 <HAL_I2C_Mem_Read+0x448>)
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f000 fa49 	bl	8003e38 <I2C_WaitOnFlagUntilTimeout>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d001      	beq.n	80039b0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e0bf      	b.n	8003b30 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	691a      	ldr	r2, [r3, #16]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ca:	b2d2      	uxtb	r2, r2
 80039cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	1c5a      	adds	r2, r3, #1
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039dc:	3b01      	subs	r3, #1
 80039de:	b29a      	uxth	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	3b01      	subs	r3, #1
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f4:	9300      	str	r3, [sp, #0]
 80039f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f8:	2200      	movs	r2, #0
 80039fa:	494f      	ldr	r1, [pc, #316]	; (8003b38 <HAL_I2C_Mem_Read+0x448>)
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f000 fa1b 	bl	8003e38 <I2C_WaitOnFlagUntilTimeout>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e091      	b.n	8003b30 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	691a      	ldr	r2, [r3, #16]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a26:	b2d2      	uxtb	r2, r2
 8003a28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2e:	1c5a      	adds	r2, r3, #1
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	b29a      	uxth	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	3b01      	subs	r3, #1
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	691a      	ldr	r2, [r3, #16]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a58:	b2d2      	uxtb	r2, r2
 8003a5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a60:	1c5a      	adds	r2, r3, #1
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	b29a      	uxth	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a80:	e042      	b.n	8003b08 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 fb2e 	bl	80040e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e04c      	b.n	8003b30 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	691a      	ldr	r2, [r3, #16]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa0:	b2d2      	uxtb	r2, r2
 8003aa2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa8:	1c5a      	adds	r2, r3, #1
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	f003 0304 	and.w	r3, r3, #4
 8003ad2:	2b04      	cmp	r3, #4
 8003ad4:	d118      	bne.n	8003b08 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	691a      	ldr	r2, [r3, #16]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae0:	b2d2      	uxtb	r2, r2
 8003ae2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae8:	1c5a      	adds	r2, r3, #1
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af2:	3b01      	subs	r3, #1
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	3b01      	subs	r3, #1
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f47f aec2 	bne.w	8003896 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2220      	movs	r2, #32
 8003b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	e000      	b.n	8003b30 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003b2e:	2302      	movs	r3, #2
  }
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3728      	adds	r7, #40	; 0x28
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	00010004 	.word	0x00010004

08003b3c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b088      	sub	sp, #32
 8003b40:	af02      	add	r7, sp, #8
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	4608      	mov	r0, r1
 8003b46:	4611      	mov	r1, r2
 8003b48:	461a      	mov	r2, r3
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	817b      	strh	r3, [r7, #10]
 8003b4e:	460b      	mov	r3, r1
 8003b50:	813b      	strh	r3, [r7, #8]
 8003b52:	4613      	mov	r3, r2
 8003b54:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b64:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	6a3b      	ldr	r3, [r7, #32]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b72:	68f8      	ldr	r0, [r7, #12]
 8003b74:	f000 f960 	bl	8003e38 <I2C_WaitOnFlagUntilTimeout>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00d      	beq.n	8003b9a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b8c:	d103      	bne.n	8003b96 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b94:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e05f      	b.n	8003c5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b9a:	897b      	ldrh	r3, [r7, #10]
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ba8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bac:	6a3a      	ldr	r2, [r7, #32]
 8003bae:	492d      	ldr	r1, [pc, #180]	; (8003c64 <I2C_RequestMemoryWrite+0x128>)
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f000 f998 	bl	8003ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d001      	beq.n	8003bc0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e04c      	b.n	8003c5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	617b      	str	r3, [r7, #20]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	617b      	str	r3, [r7, #20]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	617b      	str	r3, [r7, #20]
 8003bd4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bd8:	6a39      	ldr	r1, [r7, #32]
 8003bda:	68f8      	ldr	r0, [r7, #12]
 8003bdc:	f000 fa02 	bl	8003fe4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00d      	beq.n	8003c02 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	2b04      	cmp	r3, #4
 8003bec:	d107      	bne.n	8003bfe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bfc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e02b      	b.n	8003c5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c02:	88fb      	ldrh	r3, [r7, #6]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d105      	bne.n	8003c14 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c08:	893b      	ldrh	r3, [r7, #8]
 8003c0a:	b2da      	uxtb	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	611a      	str	r2, [r3, #16]
 8003c12:	e021      	b.n	8003c58 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c14:	893b      	ldrh	r3, [r7, #8]
 8003c16:	0a1b      	lsrs	r3, r3, #8
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	b2da      	uxtb	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c24:	6a39      	ldr	r1, [r7, #32]
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f000 f9dc 	bl	8003fe4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00d      	beq.n	8003c4e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c36:	2b04      	cmp	r3, #4
 8003c38:	d107      	bne.n	8003c4a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c48:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e005      	b.n	8003c5a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c4e:	893b      	ldrh	r3, [r7, #8]
 8003c50:	b2da      	uxtb	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3718      	adds	r7, #24
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	00010002 	.word	0x00010002

08003c68 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b088      	sub	sp, #32
 8003c6c:	af02      	add	r7, sp, #8
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	4608      	mov	r0, r1
 8003c72:	4611      	mov	r1, r2
 8003c74:	461a      	mov	r2, r3
 8003c76:	4603      	mov	r3, r0
 8003c78:	817b      	strh	r3, [r7, #10]
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	813b      	strh	r3, [r7, #8]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c90:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ca0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca4:	9300      	str	r3, [sp, #0]
 8003ca6:	6a3b      	ldr	r3, [r7, #32]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f000 f8c2 	bl	8003e38 <I2C_WaitOnFlagUntilTimeout>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00d      	beq.n	8003cd6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cc8:	d103      	bne.n	8003cd2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cd0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e0aa      	b.n	8003e2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003cd6:	897b      	ldrh	r3, [r7, #10]
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	461a      	mov	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ce4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce8:	6a3a      	ldr	r2, [r7, #32]
 8003cea:	4952      	ldr	r1, [pc, #328]	; (8003e34 <I2C_RequestMemoryRead+0x1cc>)
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f000 f8fa 	bl	8003ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d001      	beq.n	8003cfc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e097      	b.n	8003e2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	617b      	str	r3, [r7, #20]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	617b      	str	r3, [r7, #20]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	617b      	str	r3, [r7, #20]
 8003d10:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d14:	6a39      	ldr	r1, [r7, #32]
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f000 f964 	bl	8003fe4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00d      	beq.n	8003d3e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	d107      	bne.n	8003d3a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d38:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e076      	b.n	8003e2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d3e:	88fb      	ldrh	r3, [r7, #6]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d105      	bne.n	8003d50 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d44:	893b      	ldrh	r3, [r7, #8]
 8003d46:	b2da      	uxtb	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	611a      	str	r2, [r3, #16]
 8003d4e:	e021      	b.n	8003d94 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d50:	893b      	ldrh	r3, [r7, #8]
 8003d52:	0a1b      	lsrs	r3, r3, #8
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	b2da      	uxtb	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d60:	6a39      	ldr	r1, [r7, #32]
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	f000 f93e 	bl	8003fe4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00d      	beq.n	8003d8a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	2b04      	cmp	r3, #4
 8003d74:	d107      	bne.n	8003d86 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d84:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e050      	b.n	8003e2c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d8a:	893b      	ldrh	r3, [r7, #8]
 8003d8c:	b2da      	uxtb	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d96:	6a39      	ldr	r1, [r7, #32]
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f000 f923 	bl	8003fe4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d00d      	beq.n	8003dc0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da8:	2b04      	cmp	r3, #4
 8003daa:	d107      	bne.n	8003dbc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e035      	b.n	8003e2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dce:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	6a3b      	ldr	r3, [r7, #32]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f000 f82b 	bl	8003e38 <I2C_WaitOnFlagUntilTimeout>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d00d      	beq.n	8003e04 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003df6:	d103      	bne.n	8003e00 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dfe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e013      	b.n	8003e2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003e04:	897b      	ldrh	r3, [r7, #10]
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	f043 0301 	orr.w	r3, r3, #1
 8003e0c:	b2da      	uxtb	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e16:	6a3a      	ldr	r2, [r7, #32]
 8003e18:	4906      	ldr	r1, [pc, #24]	; (8003e34 <I2C_RequestMemoryRead+0x1cc>)
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f000 f863 	bl	8003ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e000      	b.n	8003e2c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3718      	adds	r7, #24
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	00010002 	.word	0x00010002

08003e38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	603b      	str	r3, [r7, #0]
 8003e44:	4613      	mov	r3, r2
 8003e46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e48:	e025      	b.n	8003e96 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e50:	d021      	beq.n	8003e96 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e52:	f7fe fea9 	bl	8002ba8 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	683a      	ldr	r2, [r7, #0]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d302      	bcc.n	8003e68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d116      	bne.n	8003e96 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2220      	movs	r2, #32
 8003e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e82:	f043 0220 	orr.w	r2, r3, #32
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e023      	b.n	8003ede <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	0c1b      	lsrs	r3, r3, #16
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d10d      	bne.n	8003ebc <I2C_WaitOnFlagUntilTimeout+0x84>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	43da      	mvns	r2, r3
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	bf0c      	ite	eq
 8003eb2:	2301      	moveq	r3, #1
 8003eb4:	2300      	movne	r3, #0
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	461a      	mov	r2, r3
 8003eba:	e00c      	b.n	8003ed6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	43da      	mvns	r2, r3
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	bf0c      	ite	eq
 8003ece:	2301      	moveq	r3, #1
 8003ed0:	2300      	movne	r3, #0
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	79fb      	ldrb	r3, [r7, #7]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d0b6      	beq.n	8003e4a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b084      	sub	sp, #16
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	60f8      	str	r0, [r7, #12]
 8003eee:	60b9      	str	r1, [r7, #8]
 8003ef0:	607a      	str	r2, [r7, #4]
 8003ef2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ef4:	e051      	b.n	8003f9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	695b      	ldr	r3, [r3, #20]
 8003efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f04:	d123      	bne.n	8003f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f14:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f1e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2220      	movs	r2, #32
 8003f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3a:	f043 0204 	orr.w	r2, r3, #4
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e046      	b.n	8003fdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f54:	d021      	beq.n	8003f9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f56:	f7fe fe27 	bl	8002ba8 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d302      	bcc.n	8003f6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d116      	bne.n	8003f9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2220      	movs	r2, #32
 8003f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	f043 0220 	orr.w	r2, r3, #32
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e020      	b.n	8003fdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	0c1b      	lsrs	r3, r3, #16
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d10c      	bne.n	8003fbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	43da      	mvns	r2, r3
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	4013      	ands	r3, r2
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	bf14      	ite	ne
 8003fb6:	2301      	movne	r3, #1
 8003fb8:	2300      	moveq	r3, #0
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	e00b      	b.n	8003fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	43da      	mvns	r2, r3
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	4013      	ands	r3, r2
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	bf14      	ite	ne
 8003fd0:	2301      	movne	r3, #1
 8003fd2:	2300      	moveq	r3, #0
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d18d      	bne.n	8003ef6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3710      	adds	r7, #16
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ff0:	e02d      	b.n	800404e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ff2:	68f8      	ldr	r0, [r7, #12]
 8003ff4:	f000 f8ce 	bl	8004194 <I2C_IsAcknowledgeFailed>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d001      	beq.n	8004002 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e02d      	b.n	800405e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004008:	d021      	beq.n	800404e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800400a:	f7fe fdcd 	bl	8002ba8 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	68ba      	ldr	r2, [r7, #8]
 8004016:	429a      	cmp	r2, r3
 8004018:	d302      	bcc.n	8004020 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d116      	bne.n	800404e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2220      	movs	r2, #32
 800402a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403a:	f043 0220 	orr.w	r2, r3, #32
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e007      	b.n	800405e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	695b      	ldr	r3, [r3, #20]
 8004054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004058:	2b80      	cmp	r3, #128	; 0x80
 800405a:	d1ca      	bne.n	8003ff2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004066:	b580      	push	{r7, lr}
 8004068:	b084      	sub	sp, #16
 800406a:	af00      	add	r7, sp, #0
 800406c:	60f8      	str	r0, [r7, #12]
 800406e:	60b9      	str	r1, [r7, #8]
 8004070:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004072:	e02d      	b.n	80040d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f000 f88d 	bl	8004194 <I2C_IsAcknowledgeFailed>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d001      	beq.n	8004084 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e02d      	b.n	80040e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800408a:	d021      	beq.n	80040d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800408c:	f7fe fd8c 	bl	8002ba8 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	68ba      	ldr	r2, [r7, #8]
 8004098:	429a      	cmp	r2, r3
 800409a:	d302      	bcc.n	80040a2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d116      	bne.n	80040d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2220      	movs	r2, #32
 80040ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040bc:	f043 0220 	orr.w	r2, r3, #32
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e007      	b.n	80040e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	f003 0304 	and.w	r3, r3, #4
 80040da:	2b04      	cmp	r3, #4
 80040dc:	d1ca      	bne.n	8004074 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80040f4:	e042      	b.n	800417c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	f003 0310 	and.w	r3, r3, #16
 8004100:	2b10      	cmp	r3, #16
 8004102:	d119      	bne.n	8004138 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f06f 0210 	mvn.w	r2, #16
 800410c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2220      	movs	r2, #32
 8004118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e029      	b.n	800418c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004138:	f7fe fd36 	bl	8002ba8 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	68ba      	ldr	r2, [r7, #8]
 8004144:	429a      	cmp	r2, r3
 8004146:	d302      	bcc.n	800414e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d116      	bne.n	800417c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2220      	movs	r2, #32
 8004158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004168:	f043 0220 	orr.w	r2, r3, #32
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e007      	b.n	800418c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004186:	2b40      	cmp	r3, #64	; 0x40
 8004188:	d1b5      	bne.n	80040f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3710      	adds	r7, #16
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041aa:	d11b      	bne.n	80041e4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041b4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2220      	movs	r2, #32
 80041c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d0:	f043 0204 	orr.w	r2, r3, #4
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e000      	b.n	80041e6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	370c      	adds	r7, #12
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
	...

080041f4 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 80041f8:	4b06      	ldr	r3, [pc, #24]	; (8004214 <HAL_PWR_PVD_IRQHandler+0x20>)
 80041fa:	695b      	ldr	r3, [r3, #20]
 80041fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d005      	beq.n	8004210 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8004204:	f000 f808 	bl	8004218 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8004208:	4b02      	ldr	r3, [pc, #8]	; (8004214 <HAL_PWR_PVD_IRQHandler+0x20>)
 800420a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800420e:	615a      	str	r2, [r3, #20]
  }
}
 8004210:	bf00      	nop
 8004212:	bd80      	pop	{r7, pc}
 8004214:	40013c00 	.word	0x40013c00

08004218 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 800421c:	bf00      	nop
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
	...

08004228 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d101      	bne.n	800423a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e264      	b.n	8004704 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	2b00      	cmp	r3, #0
 8004244:	d075      	beq.n	8004332 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004246:	4ba3      	ldr	r3, [pc, #652]	; (80044d4 <HAL_RCC_OscConfig+0x2ac>)
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f003 030c 	and.w	r3, r3, #12
 800424e:	2b04      	cmp	r3, #4
 8004250:	d00c      	beq.n	800426c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004252:	4ba0      	ldr	r3, [pc, #640]	; (80044d4 <HAL_RCC_OscConfig+0x2ac>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800425a:	2b08      	cmp	r3, #8
 800425c:	d112      	bne.n	8004284 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800425e:	4b9d      	ldr	r3, [pc, #628]	; (80044d4 <HAL_RCC_OscConfig+0x2ac>)
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004266:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800426a:	d10b      	bne.n	8004284 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800426c:	4b99      	ldr	r3, [pc, #612]	; (80044d4 <HAL_RCC_OscConfig+0x2ac>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d05b      	beq.n	8004330 <HAL_RCC_OscConfig+0x108>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d157      	bne.n	8004330 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e23f      	b.n	8004704 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800428c:	d106      	bne.n	800429c <HAL_RCC_OscConfig+0x74>
 800428e:	4b91      	ldr	r3, [pc, #580]	; (80044d4 <HAL_RCC_OscConfig+0x2ac>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a90      	ldr	r2, [pc, #576]	; (80044d4 <HAL_RCC_OscConfig+0x2ac>)
 8004294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004298:	6013      	str	r3, [r2, #0]
 800429a:	e01d      	b.n	80042d8 <HAL_RCC_OscConfig+0xb0>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042a4:	d10c      	bne.n	80042c0 <HAL_RCC_OscConfig+0x98>
 80042a6:	4b8b      	ldr	r3, [pc, #556]	; (80044d4 <HAL_RCC_OscConfig+0x2ac>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a8a      	ldr	r2, [pc, #552]	; (80044d4 <HAL_RCC_OscConfig+0x2ac>)
 80042ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042b0:	6013      	str	r3, [r2, #0]
 80042b2:	4b88      	ldr	r3, [pc, #544]	; (80044d4 <HAL_RCC_OscConfig+0x2ac>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a87      	ldr	r2, [pc, #540]	; (80044d4 <HAL_RCC_OscConfig+0x2ac>)
 80042b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042bc:	6013      	str	r3, [r2, #0]
 80042be:	e00b      	b.n	80042d8 <HAL_RCC_OscConfig+0xb0>
 80042c0:	4b84      	ldr	r3, [pc, #528]	; (80044d4 <HAL_RCC_OscConfig+0x2ac>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a83      	ldr	r2, [pc, #524]	; (80044d4 <HAL_RCC_OscConfig+0x2ac>)
 80042c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ca:	6013      	str	r3, [r2, #0]
 80042cc:	4b81      	ldr	r3, [pc, #516]	; (80044d4 <HAL_RCC_OscConfig+0x2ac>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a80      	ldr	r2, [pc, #512]	; (80044d4 <HAL_RCC_OscConfig+0x2ac>)
 80042d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d013      	beq.n	8004308 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e0:	f7fe fc62 	bl	8002ba8 <HAL_GetTick>
 80042e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042e6:	e008      	b.n	80042fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042e8:	f7fe fc5e 	bl	8002ba8 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b64      	cmp	r3, #100	; 0x64
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e204      	b.n	8004704 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042fa:	4b76      	ldr	r3, [pc, #472]	; (80044d4 <HAL_RCC_OscConfig+0x2ac>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d0f0      	beq.n	80042e8 <HAL_RCC_OscConfig+0xc0>
 8004306:	e014      	b.n	8004332 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004308:	f7fe fc4e 	bl	8002ba8 <HAL_GetTick>
 800430c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800430e:	e008      	b.n	8004322 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004310:	f7fe fc4a 	bl	8002ba8 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b64      	cmp	r3, #100	; 0x64
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e1f0      	b.n	8004704 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004322:	4b6c      	ldr	r3, [pc, #432]	; (80044d4 <HAL_RCC_OscConfig+0x2ac>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1f0      	bne.n	8004310 <HAL_RCC_OscConfig+0xe8>
 800432e:	e000      	b.n	8004332 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d063      	beq.n	8004406 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800433e:	4b65      	ldr	r3, [pc, #404]	; (80044d4 <HAL_RCC_OscConfig+0x2ac>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f003 030c 	and.w	r3, r3, #12
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00b      	beq.n	8004362 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800434a:	4b62      	ldr	r3, [pc, #392]	; (80044d4 <HAL_RCC_OscConfig+0x2ac>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004352:	2b08      	cmp	r3, #8
 8004354:	d11c      	bne.n	8004390 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004356:	4b5f      	ldr	r3, [pc, #380]	; (80044d4 <HAL_RCC_OscConfig+0x2ac>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d116      	bne.n	8004390 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004362:	4b5c      	ldr	r3, [pc, #368]	; (80044d4 <HAL_RCC_OscConfig+0x2ac>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d005      	beq.n	800437a <HAL_RCC_OscConfig+0x152>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d001      	beq.n	800437a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e1c4      	b.n	8004704 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800437a:	4b56      	ldr	r3, [pc, #344]	; (80044d4 <HAL_RCC_OscConfig+0x2ac>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	4952      	ldr	r1, [pc, #328]	; (80044d4 <HAL_RCC_OscConfig+0x2ac>)
 800438a:	4313      	orrs	r3, r2
 800438c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800438e:	e03a      	b.n	8004406 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d020      	beq.n	80043da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004398:	4b4f      	ldr	r3, [pc, #316]	; (80044d8 <HAL_RCC_OscConfig+0x2b0>)
 800439a:	2201      	movs	r2, #1
 800439c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800439e:	f7fe fc03 	bl	8002ba8 <HAL_GetTick>
 80043a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043a4:	e008      	b.n	80043b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043a6:	f7fe fbff 	bl	8002ba8 <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d901      	bls.n	80043b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e1a5      	b.n	8004704 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043b8:	4b46      	ldr	r3, [pc, #280]	; (80044d4 <HAL_RCC_OscConfig+0x2ac>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d0f0      	beq.n	80043a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043c4:	4b43      	ldr	r3, [pc, #268]	; (80044d4 <HAL_RCC_OscConfig+0x2ac>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	00db      	lsls	r3, r3, #3
 80043d2:	4940      	ldr	r1, [pc, #256]	; (80044d4 <HAL_RCC_OscConfig+0x2ac>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	600b      	str	r3, [r1, #0]
 80043d8:	e015      	b.n	8004406 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043da:	4b3f      	ldr	r3, [pc, #252]	; (80044d8 <HAL_RCC_OscConfig+0x2b0>)
 80043dc:	2200      	movs	r2, #0
 80043de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e0:	f7fe fbe2 	bl	8002ba8 <HAL_GetTick>
 80043e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043e6:	e008      	b.n	80043fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043e8:	f7fe fbde 	bl	8002ba8 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e184      	b.n	8004704 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043fa:	4b36      	ldr	r3, [pc, #216]	; (80044d4 <HAL_RCC_OscConfig+0x2ac>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1f0      	bne.n	80043e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0308 	and.w	r3, r3, #8
 800440e:	2b00      	cmp	r3, #0
 8004410:	d030      	beq.n	8004474 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d016      	beq.n	8004448 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800441a:	4b30      	ldr	r3, [pc, #192]	; (80044dc <HAL_RCC_OscConfig+0x2b4>)
 800441c:	2201      	movs	r2, #1
 800441e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004420:	f7fe fbc2 	bl	8002ba8 <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004426:	e008      	b.n	800443a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004428:	f7fe fbbe 	bl	8002ba8 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b02      	cmp	r3, #2
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e164      	b.n	8004704 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800443a:	4b26      	ldr	r3, [pc, #152]	; (80044d4 <HAL_RCC_OscConfig+0x2ac>)
 800443c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d0f0      	beq.n	8004428 <HAL_RCC_OscConfig+0x200>
 8004446:	e015      	b.n	8004474 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004448:	4b24      	ldr	r3, [pc, #144]	; (80044dc <HAL_RCC_OscConfig+0x2b4>)
 800444a:	2200      	movs	r2, #0
 800444c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800444e:	f7fe fbab 	bl	8002ba8 <HAL_GetTick>
 8004452:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004454:	e008      	b.n	8004468 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004456:	f7fe fba7 	bl	8002ba8 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d901      	bls.n	8004468 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e14d      	b.n	8004704 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004468:	4b1a      	ldr	r3, [pc, #104]	; (80044d4 <HAL_RCC_OscConfig+0x2ac>)
 800446a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1f0      	bne.n	8004456 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0304 	and.w	r3, r3, #4
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 80a0 	beq.w	80045c2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004482:	2300      	movs	r3, #0
 8004484:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004486:	4b13      	ldr	r3, [pc, #76]	; (80044d4 <HAL_RCC_OscConfig+0x2ac>)
 8004488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10f      	bne.n	80044b2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004492:	2300      	movs	r3, #0
 8004494:	60bb      	str	r3, [r7, #8]
 8004496:	4b0f      	ldr	r3, [pc, #60]	; (80044d4 <HAL_RCC_OscConfig+0x2ac>)
 8004498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449a:	4a0e      	ldr	r2, [pc, #56]	; (80044d4 <HAL_RCC_OscConfig+0x2ac>)
 800449c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044a0:	6413      	str	r3, [r2, #64]	; 0x40
 80044a2:	4b0c      	ldr	r3, [pc, #48]	; (80044d4 <HAL_RCC_OscConfig+0x2ac>)
 80044a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044aa:	60bb      	str	r3, [r7, #8]
 80044ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044ae:	2301      	movs	r3, #1
 80044b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044b2:	4b0b      	ldr	r3, [pc, #44]	; (80044e0 <HAL_RCC_OscConfig+0x2b8>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d121      	bne.n	8004502 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044be:	4b08      	ldr	r3, [pc, #32]	; (80044e0 <HAL_RCC_OscConfig+0x2b8>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a07      	ldr	r2, [pc, #28]	; (80044e0 <HAL_RCC_OscConfig+0x2b8>)
 80044c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044ca:	f7fe fb6d 	bl	8002ba8 <HAL_GetTick>
 80044ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d0:	e011      	b.n	80044f6 <HAL_RCC_OscConfig+0x2ce>
 80044d2:	bf00      	nop
 80044d4:	40023800 	.word	0x40023800
 80044d8:	42470000 	.word	0x42470000
 80044dc:	42470e80 	.word	0x42470e80
 80044e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044e4:	f7fe fb60 	bl	8002ba8 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e106      	b.n	8004704 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044f6:	4b85      	ldr	r3, [pc, #532]	; (800470c <HAL_RCC_OscConfig+0x4e4>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d0f0      	beq.n	80044e4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d106      	bne.n	8004518 <HAL_RCC_OscConfig+0x2f0>
 800450a:	4b81      	ldr	r3, [pc, #516]	; (8004710 <HAL_RCC_OscConfig+0x4e8>)
 800450c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450e:	4a80      	ldr	r2, [pc, #512]	; (8004710 <HAL_RCC_OscConfig+0x4e8>)
 8004510:	f043 0301 	orr.w	r3, r3, #1
 8004514:	6713      	str	r3, [r2, #112]	; 0x70
 8004516:	e01c      	b.n	8004552 <HAL_RCC_OscConfig+0x32a>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	2b05      	cmp	r3, #5
 800451e:	d10c      	bne.n	800453a <HAL_RCC_OscConfig+0x312>
 8004520:	4b7b      	ldr	r3, [pc, #492]	; (8004710 <HAL_RCC_OscConfig+0x4e8>)
 8004522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004524:	4a7a      	ldr	r2, [pc, #488]	; (8004710 <HAL_RCC_OscConfig+0x4e8>)
 8004526:	f043 0304 	orr.w	r3, r3, #4
 800452a:	6713      	str	r3, [r2, #112]	; 0x70
 800452c:	4b78      	ldr	r3, [pc, #480]	; (8004710 <HAL_RCC_OscConfig+0x4e8>)
 800452e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004530:	4a77      	ldr	r2, [pc, #476]	; (8004710 <HAL_RCC_OscConfig+0x4e8>)
 8004532:	f043 0301 	orr.w	r3, r3, #1
 8004536:	6713      	str	r3, [r2, #112]	; 0x70
 8004538:	e00b      	b.n	8004552 <HAL_RCC_OscConfig+0x32a>
 800453a:	4b75      	ldr	r3, [pc, #468]	; (8004710 <HAL_RCC_OscConfig+0x4e8>)
 800453c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453e:	4a74      	ldr	r2, [pc, #464]	; (8004710 <HAL_RCC_OscConfig+0x4e8>)
 8004540:	f023 0301 	bic.w	r3, r3, #1
 8004544:	6713      	str	r3, [r2, #112]	; 0x70
 8004546:	4b72      	ldr	r3, [pc, #456]	; (8004710 <HAL_RCC_OscConfig+0x4e8>)
 8004548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800454a:	4a71      	ldr	r2, [pc, #452]	; (8004710 <HAL_RCC_OscConfig+0x4e8>)
 800454c:	f023 0304 	bic.w	r3, r3, #4
 8004550:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d015      	beq.n	8004586 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800455a:	f7fe fb25 	bl	8002ba8 <HAL_GetTick>
 800455e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004560:	e00a      	b.n	8004578 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004562:	f7fe fb21 	bl	8002ba8 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004570:	4293      	cmp	r3, r2
 8004572:	d901      	bls.n	8004578 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e0c5      	b.n	8004704 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004578:	4b65      	ldr	r3, [pc, #404]	; (8004710 <HAL_RCC_OscConfig+0x4e8>)
 800457a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d0ee      	beq.n	8004562 <HAL_RCC_OscConfig+0x33a>
 8004584:	e014      	b.n	80045b0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004586:	f7fe fb0f 	bl	8002ba8 <HAL_GetTick>
 800458a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800458c:	e00a      	b.n	80045a4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800458e:	f7fe fb0b 	bl	8002ba8 <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	f241 3288 	movw	r2, #5000	; 0x1388
 800459c:	4293      	cmp	r3, r2
 800459e:	d901      	bls.n	80045a4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e0af      	b.n	8004704 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045a4:	4b5a      	ldr	r3, [pc, #360]	; (8004710 <HAL_RCC_OscConfig+0x4e8>)
 80045a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a8:	f003 0302 	and.w	r3, r3, #2
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1ee      	bne.n	800458e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045b0:	7dfb      	ldrb	r3, [r7, #23]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d105      	bne.n	80045c2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045b6:	4b56      	ldr	r3, [pc, #344]	; (8004710 <HAL_RCC_OscConfig+0x4e8>)
 80045b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ba:	4a55      	ldr	r2, [pc, #340]	; (8004710 <HAL_RCC_OscConfig+0x4e8>)
 80045bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	f000 809b 	beq.w	8004702 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045cc:	4b50      	ldr	r3, [pc, #320]	; (8004710 <HAL_RCC_OscConfig+0x4e8>)
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	f003 030c 	and.w	r3, r3, #12
 80045d4:	2b08      	cmp	r3, #8
 80045d6:	d05c      	beq.n	8004692 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d141      	bne.n	8004664 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045e0:	4b4c      	ldr	r3, [pc, #304]	; (8004714 <HAL_RCC_OscConfig+0x4ec>)
 80045e2:	2200      	movs	r2, #0
 80045e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e6:	f7fe fadf 	bl	8002ba8 <HAL_GetTick>
 80045ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ec:	e008      	b.n	8004600 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045ee:	f7fe fadb 	bl	8002ba8 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d901      	bls.n	8004600 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e081      	b.n	8004704 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004600:	4b43      	ldr	r3, [pc, #268]	; (8004710 <HAL_RCC_OscConfig+0x4e8>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d1f0      	bne.n	80045ee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	69da      	ldr	r2, [r3, #28]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a1b      	ldr	r3, [r3, #32]
 8004614:	431a      	orrs	r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461a:	019b      	lsls	r3, r3, #6
 800461c:	431a      	orrs	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004622:	085b      	lsrs	r3, r3, #1
 8004624:	3b01      	subs	r3, #1
 8004626:	041b      	lsls	r3, r3, #16
 8004628:	431a      	orrs	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462e:	061b      	lsls	r3, r3, #24
 8004630:	4937      	ldr	r1, [pc, #220]	; (8004710 <HAL_RCC_OscConfig+0x4e8>)
 8004632:	4313      	orrs	r3, r2
 8004634:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004636:	4b37      	ldr	r3, [pc, #220]	; (8004714 <HAL_RCC_OscConfig+0x4ec>)
 8004638:	2201      	movs	r2, #1
 800463a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800463c:	f7fe fab4 	bl	8002ba8 <HAL_GetTick>
 8004640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004642:	e008      	b.n	8004656 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004644:	f7fe fab0 	bl	8002ba8 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b02      	cmp	r3, #2
 8004650:	d901      	bls.n	8004656 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e056      	b.n	8004704 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004656:	4b2e      	ldr	r3, [pc, #184]	; (8004710 <HAL_RCC_OscConfig+0x4e8>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d0f0      	beq.n	8004644 <HAL_RCC_OscConfig+0x41c>
 8004662:	e04e      	b.n	8004702 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004664:	4b2b      	ldr	r3, [pc, #172]	; (8004714 <HAL_RCC_OscConfig+0x4ec>)
 8004666:	2200      	movs	r2, #0
 8004668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800466a:	f7fe fa9d 	bl	8002ba8 <HAL_GetTick>
 800466e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004670:	e008      	b.n	8004684 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004672:	f7fe fa99 	bl	8002ba8 <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	2b02      	cmp	r3, #2
 800467e:	d901      	bls.n	8004684 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e03f      	b.n	8004704 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004684:	4b22      	ldr	r3, [pc, #136]	; (8004710 <HAL_RCC_OscConfig+0x4e8>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d1f0      	bne.n	8004672 <HAL_RCC_OscConfig+0x44a>
 8004690:	e037      	b.n	8004702 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d101      	bne.n	800469e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e032      	b.n	8004704 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800469e:	4b1c      	ldr	r3, [pc, #112]	; (8004710 <HAL_RCC_OscConfig+0x4e8>)
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d028      	beq.n	80046fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d121      	bne.n	80046fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d11a      	bne.n	80046fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046ce:	4013      	ands	r3, r2
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046d4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d111      	bne.n	80046fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e4:	085b      	lsrs	r3, r3, #1
 80046e6:	3b01      	subs	r3, #1
 80046e8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d107      	bne.n	80046fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d001      	beq.n	8004702 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e000      	b.n	8004704 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3718      	adds	r7, #24
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	40007000 	.word	0x40007000
 8004710:	40023800 	.word	0x40023800
 8004714:	42470060 	.word	0x42470060

08004718 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d101      	bne.n	800472c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e0cc      	b.n	80048c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800472c:	4b68      	ldr	r3, [pc, #416]	; (80048d0 <HAL_RCC_ClockConfig+0x1b8>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0307 	and.w	r3, r3, #7
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	429a      	cmp	r2, r3
 8004738:	d90c      	bls.n	8004754 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800473a:	4b65      	ldr	r3, [pc, #404]	; (80048d0 <HAL_RCC_ClockConfig+0x1b8>)
 800473c:	683a      	ldr	r2, [r7, #0]
 800473e:	b2d2      	uxtb	r2, r2
 8004740:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004742:	4b63      	ldr	r3, [pc, #396]	; (80048d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0307 	and.w	r3, r3, #7
 800474a:	683a      	ldr	r2, [r7, #0]
 800474c:	429a      	cmp	r2, r3
 800474e:	d001      	beq.n	8004754 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e0b8      	b.n	80048c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0302 	and.w	r3, r3, #2
 800475c:	2b00      	cmp	r3, #0
 800475e:	d020      	beq.n	80047a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0304 	and.w	r3, r3, #4
 8004768:	2b00      	cmp	r3, #0
 800476a:	d005      	beq.n	8004778 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800476c:	4b59      	ldr	r3, [pc, #356]	; (80048d4 <HAL_RCC_ClockConfig+0x1bc>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	4a58      	ldr	r2, [pc, #352]	; (80048d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004772:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004776:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0308 	and.w	r3, r3, #8
 8004780:	2b00      	cmp	r3, #0
 8004782:	d005      	beq.n	8004790 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004784:	4b53      	ldr	r3, [pc, #332]	; (80048d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	4a52      	ldr	r2, [pc, #328]	; (80048d4 <HAL_RCC_ClockConfig+0x1bc>)
 800478a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800478e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004790:	4b50      	ldr	r3, [pc, #320]	; (80048d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	494d      	ldr	r1, [pc, #308]	; (80048d4 <HAL_RCC_ClockConfig+0x1bc>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d044      	beq.n	8004838 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d107      	bne.n	80047c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047b6:	4b47      	ldr	r3, [pc, #284]	; (80048d4 <HAL_RCC_ClockConfig+0x1bc>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d119      	bne.n	80047f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e07f      	b.n	80048c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d003      	beq.n	80047d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047d2:	2b03      	cmp	r3, #3
 80047d4:	d107      	bne.n	80047e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047d6:	4b3f      	ldr	r3, [pc, #252]	; (80048d4 <HAL_RCC_ClockConfig+0x1bc>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d109      	bne.n	80047f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e06f      	b.n	80048c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047e6:	4b3b      	ldr	r3, [pc, #236]	; (80048d4 <HAL_RCC_ClockConfig+0x1bc>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d101      	bne.n	80047f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e067      	b.n	80048c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047f6:	4b37      	ldr	r3, [pc, #220]	; (80048d4 <HAL_RCC_ClockConfig+0x1bc>)
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f023 0203 	bic.w	r2, r3, #3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	4934      	ldr	r1, [pc, #208]	; (80048d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004804:	4313      	orrs	r3, r2
 8004806:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004808:	f7fe f9ce 	bl	8002ba8 <HAL_GetTick>
 800480c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800480e:	e00a      	b.n	8004826 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004810:	f7fe f9ca 	bl	8002ba8 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	f241 3288 	movw	r2, #5000	; 0x1388
 800481e:	4293      	cmp	r3, r2
 8004820:	d901      	bls.n	8004826 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e04f      	b.n	80048c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004826:	4b2b      	ldr	r3, [pc, #172]	; (80048d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f003 020c 	and.w	r2, r3, #12
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	429a      	cmp	r2, r3
 8004836:	d1eb      	bne.n	8004810 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004838:	4b25      	ldr	r3, [pc, #148]	; (80048d0 <HAL_RCC_ClockConfig+0x1b8>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0307 	and.w	r3, r3, #7
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	429a      	cmp	r2, r3
 8004844:	d20c      	bcs.n	8004860 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004846:	4b22      	ldr	r3, [pc, #136]	; (80048d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	b2d2      	uxtb	r2, r2
 800484c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800484e:	4b20      	ldr	r3, [pc, #128]	; (80048d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0307 	and.w	r3, r3, #7
 8004856:	683a      	ldr	r2, [r7, #0]
 8004858:	429a      	cmp	r2, r3
 800485a:	d001      	beq.n	8004860 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e032      	b.n	80048c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0304 	and.w	r3, r3, #4
 8004868:	2b00      	cmp	r3, #0
 800486a:	d008      	beq.n	800487e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800486c:	4b19      	ldr	r3, [pc, #100]	; (80048d4 <HAL_RCC_ClockConfig+0x1bc>)
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	4916      	ldr	r1, [pc, #88]	; (80048d4 <HAL_RCC_ClockConfig+0x1bc>)
 800487a:	4313      	orrs	r3, r2
 800487c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0308 	and.w	r3, r3, #8
 8004886:	2b00      	cmp	r3, #0
 8004888:	d009      	beq.n	800489e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800488a:	4b12      	ldr	r3, [pc, #72]	; (80048d4 <HAL_RCC_ClockConfig+0x1bc>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	00db      	lsls	r3, r3, #3
 8004898:	490e      	ldr	r1, [pc, #56]	; (80048d4 <HAL_RCC_ClockConfig+0x1bc>)
 800489a:	4313      	orrs	r3, r2
 800489c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800489e:	f000 f821 	bl	80048e4 <HAL_RCC_GetSysClockFreq>
 80048a2:	4602      	mov	r2, r0
 80048a4:	4b0b      	ldr	r3, [pc, #44]	; (80048d4 <HAL_RCC_ClockConfig+0x1bc>)
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	091b      	lsrs	r3, r3, #4
 80048aa:	f003 030f 	and.w	r3, r3, #15
 80048ae:	490a      	ldr	r1, [pc, #40]	; (80048d8 <HAL_RCC_ClockConfig+0x1c0>)
 80048b0:	5ccb      	ldrb	r3, [r1, r3]
 80048b2:	fa22 f303 	lsr.w	r3, r2, r3
 80048b6:	4a09      	ldr	r2, [pc, #36]	; (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 80048b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80048ba:	4b09      	ldr	r3, [pc, #36]	; (80048e0 <HAL_RCC_ClockConfig+0x1c8>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4618      	mov	r0, r3
 80048c0:	f7fe f92e 	bl	8002b20 <HAL_InitTick>

  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	40023c00 	.word	0x40023c00
 80048d4:	40023800 	.word	0x40023800
 80048d8:	08009fcc 	.word	0x08009fcc
 80048dc:	20000000 	.word	0x20000000
 80048e0:	20000004 	.word	0x20000004

080048e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048e4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80048e8:	b084      	sub	sp, #16
 80048ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80048ec:	2300      	movs	r3, #0
 80048ee:	607b      	str	r3, [r7, #4]
 80048f0:	2300      	movs	r3, #0
 80048f2:	60fb      	str	r3, [r7, #12]
 80048f4:	2300      	movs	r3, #0
 80048f6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80048f8:	2300      	movs	r3, #0
 80048fa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048fc:	4b67      	ldr	r3, [pc, #412]	; (8004a9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f003 030c 	and.w	r3, r3, #12
 8004904:	2b08      	cmp	r3, #8
 8004906:	d00d      	beq.n	8004924 <HAL_RCC_GetSysClockFreq+0x40>
 8004908:	2b08      	cmp	r3, #8
 800490a:	f200 80bd 	bhi.w	8004a88 <HAL_RCC_GetSysClockFreq+0x1a4>
 800490e:	2b00      	cmp	r3, #0
 8004910:	d002      	beq.n	8004918 <HAL_RCC_GetSysClockFreq+0x34>
 8004912:	2b04      	cmp	r3, #4
 8004914:	d003      	beq.n	800491e <HAL_RCC_GetSysClockFreq+0x3a>
 8004916:	e0b7      	b.n	8004a88 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004918:	4b61      	ldr	r3, [pc, #388]	; (8004aa0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800491a:	60bb      	str	r3, [r7, #8]
       break;
 800491c:	e0b7      	b.n	8004a8e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800491e:	4b61      	ldr	r3, [pc, #388]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004920:	60bb      	str	r3, [r7, #8]
      break;
 8004922:	e0b4      	b.n	8004a8e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004924:	4b5d      	ldr	r3, [pc, #372]	; (8004a9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800492c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800492e:	4b5b      	ldr	r3, [pc, #364]	; (8004a9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d04d      	beq.n	80049d6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800493a:	4b58      	ldr	r3, [pc, #352]	; (8004a9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	099b      	lsrs	r3, r3, #6
 8004940:	461a      	mov	r2, r3
 8004942:	f04f 0300 	mov.w	r3, #0
 8004946:	f240 10ff 	movw	r0, #511	; 0x1ff
 800494a:	f04f 0100 	mov.w	r1, #0
 800494e:	ea02 0800 	and.w	r8, r2, r0
 8004952:	ea03 0901 	and.w	r9, r3, r1
 8004956:	4640      	mov	r0, r8
 8004958:	4649      	mov	r1, r9
 800495a:	f04f 0200 	mov.w	r2, #0
 800495e:	f04f 0300 	mov.w	r3, #0
 8004962:	014b      	lsls	r3, r1, #5
 8004964:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004968:	0142      	lsls	r2, r0, #5
 800496a:	4610      	mov	r0, r2
 800496c:	4619      	mov	r1, r3
 800496e:	ebb0 0008 	subs.w	r0, r0, r8
 8004972:	eb61 0109 	sbc.w	r1, r1, r9
 8004976:	f04f 0200 	mov.w	r2, #0
 800497a:	f04f 0300 	mov.w	r3, #0
 800497e:	018b      	lsls	r3, r1, #6
 8004980:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004984:	0182      	lsls	r2, r0, #6
 8004986:	1a12      	subs	r2, r2, r0
 8004988:	eb63 0301 	sbc.w	r3, r3, r1
 800498c:	f04f 0000 	mov.w	r0, #0
 8004990:	f04f 0100 	mov.w	r1, #0
 8004994:	00d9      	lsls	r1, r3, #3
 8004996:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800499a:	00d0      	lsls	r0, r2, #3
 800499c:	4602      	mov	r2, r0
 800499e:	460b      	mov	r3, r1
 80049a0:	eb12 0208 	adds.w	r2, r2, r8
 80049a4:	eb43 0309 	adc.w	r3, r3, r9
 80049a8:	f04f 0000 	mov.w	r0, #0
 80049ac:	f04f 0100 	mov.w	r1, #0
 80049b0:	0259      	lsls	r1, r3, #9
 80049b2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80049b6:	0250      	lsls	r0, r2, #9
 80049b8:	4602      	mov	r2, r0
 80049ba:	460b      	mov	r3, r1
 80049bc:	4610      	mov	r0, r2
 80049be:	4619      	mov	r1, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	461a      	mov	r2, r3
 80049c4:	f04f 0300 	mov.w	r3, #0
 80049c8:	f7fc f8f6 	bl	8000bb8 <__aeabi_uldivmod>
 80049cc:	4602      	mov	r2, r0
 80049ce:	460b      	mov	r3, r1
 80049d0:	4613      	mov	r3, r2
 80049d2:	60fb      	str	r3, [r7, #12]
 80049d4:	e04a      	b.n	8004a6c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049d6:	4b31      	ldr	r3, [pc, #196]	; (8004a9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	099b      	lsrs	r3, r3, #6
 80049dc:	461a      	mov	r2, r3
 80049de:	f04f 0300 	mov.w	r3, #0
 80049e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80049e6:	f04f 0100 	mov.w	r1, #0
 80049ea:	ea02 0400 	and.w	r4, r2, r0
 80049ee:	ea03 0501 	and.w	r5, r3, r1
 80049f2:	4620      	mov	r0, r4
 80049f4:	4629      	mov	r1, r5
 80049f6:	f04f 0200 	mov.w	r2, #0
 80049fa:	f04f 0300 	mov.w	r3, #0
 80049fe:	014b      	lsls	r3, r1, #5
 8004a00:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004a04:	0142      	lsls	r2, r0, #5
 8004a06:	4610      	mov	r0, r2
 8004a08:	4619      	mov	r1, r3
 8004a0a:	1b00      	subs	r0, r0, r4
 8004a0c:	eb61 0105 	sbc.w	r1, r1, r5
 8004a10:	f04f 0200 	mov.w	r2, #0
 8004a14:	f04f 0300 	mov.w	r3, #0
 8004a18:	018b      	lsls	r3, r1, #6
 8004a1a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004a1e:	0182      	lsls	r2, r0, #6
 8004a20:	1a12      	subs	r2, r2, r0
 8004a22:	eb63 0301 	sbc.w	r3, r3, r1
 8004a26:	f04f 0000 	mov.w	r0, #0
 8004a2a:	f04f 0100 	mov.w	r1, #0
 8004a2e:	00d9      	lsls	r1, r3, #3
 8004a30:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a34:	00d0      	lsls	r0, r2, #3
 8004a36:	4602      	mov	r2, r0
 8004a38:	460b      	mov	r3, r1
 8004a3a:	1912      	adds	r2, r2, r4
 8004a3c:	eb45 0303 	adc.w	r3, r5, r3
 8004a40:	f04f 0000 	mov.w	r0, #0
 8004a44:	f04f 0100 	mov.w	r1, #0
 8004a48:	0299      	lsls	r1, r3, #10
 8004a4a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004a4e:	0290      	lsls	r0, r2, #10
 8004a50:	4602      	mov	r2, r0
 8004a52:	460b      	mov	r3, r1
 8004a54:	4610      	mov	r0, r2
 8004a56:	4619      	mov	r1, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	f04f 0300 	mov.w	r3, #0
 8004a60:	f7fc f8aa 	bl	8000bb8 <__aeabi_uldivmod>
 8004a64:	4602      	mov	r2, r0
 8004a66:	460b      	mov	r3, r1
 8004a68:	4613      	mov	r3, r2
 8004a6a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a6c:	4b0b      	ldr	r3, [pc, #44]	; (8004a9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	0c1b      	lsrs	r3, r3, #16
 8004a72:	f003 0303 	and.w	r3, r3, #3
 8004a76:	3301      	adds	r3, #1
 8004a78:	005b      	lsls	r3, r3, #1
 8004a7a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a84:	60bb      	str	r3, [r7, #8]
      break;
 8004a86:	e002      	b.n	8004a8e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a88:	4b05      	ldr	r3, [pc, #20]	; (8004aa0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004a8a:	60bb      	str	r3, [r7, #8]
      break;
 8004a8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a8e:	68bb      	ldr	r3, [r7, #8]
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004a9a:	bf00      	nop
 8004a9c:	40023800 	.word	0x40023800
 8004aa0:	00f42400 	.word	0x00f42400
 8004aa4:	007a1200 	.word	0x007a1200

08004aa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004aac:	4b03      	ldr	r3, [pc, #12]	; (8004abc <HAL_RCC_GetHCLKFreq+0x14>)
 8004aae:	681b      	ldr	r3, [r3, #0]
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	20000000 	.word	0x20000000

08004ac0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ac4:	f7ff fff0 	bl	8004aa8 <HAL_RCC_GetHCLKFreq>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	4b05      	ldr	r3, [pc, #20]	; (8004ae0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	0a9b      	lsrs	r3, r3, #10
 8004ad0:	f003 0307 	and.w	r3, r3, #7
 8004ad4:	4903      	ldr	r1, [pc, #12]	; (8004ae4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ad6:	5ccb      	ldrb	r3, [r1, r3]
 8004ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	40023800 	.word	0x40023800
 8004ae4:	08009fdc 	.word	0x08009fdc

08004ae8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004aec:	f7ff ffdc 	bl	8004aa8 <HAL_RCC_GetHCLKFreq>
 8004af0:	4602      	mov	r2, r0
 8004af2:	4b05      	ldr	r3, [pc, #20]	; (8004b08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	0b5b      	lsrs	r3, r3, #13
 8004af8:	f003 0307 	and.w	r3, r3, #7
 8004afc:	4903      	ldr	r1, [pc, #12]	; (8004b0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004afe:	5ccb      	ldrb	r3, [r1, r3]
 8004b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	40023800 	.word	0x40023800
 8004b0c:	08009fdc 	.word	0x08009fdc

08004b10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e041      	b.n	8004ba6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d106      	bne.n	8004b3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7fd fe14 	bl	8002764 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2202      	movs	r2, #2
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	3304      	adds	r3, #4
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	4610      	mov	r0, r2
 8004b50:	f000 fc54 	bl	80053fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3708      	adds	r7, #8
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
	...

08004bb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d001      	beq.n	8004bc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e044      	b.n	8004c52 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68da      	ldr	r2, [r3, #12]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f042 0201 	orr.w	r2, r2, #1
 8004bde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a1e      	ldr	r2, [pc, #120]	; (8004c60 <HAL_TIM_Base_Start_IT+0xb0>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d018      	beq.n	8004c1c <HAL_TIM_Base_Start_IT+0x6c>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bf2:	d013      	beq.n	8004c1c <HAL_TIM_Base_Start_IT+0x6c>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a1a      	ldr	r2, [pc, #104]	; (8004c64 <HAL_TIM_Base_Start_IT+0xb4>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d00e      	beq.n	8004c1c <HAL_TIM_Base_Start_IT+0x6c>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a19      	ldr	r2, [pc, #100]	; (8004c68 <HAL_TIM_Base_Start_IT+0xb8>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d009      	beq.n	8004c1c <HAL_TIM_Base_Start_IT+0x6c>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a17      	ldr	r2, [pc, #92]	; (8004c6c <HAL_TIM_Base_Start_IT+0xbc>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d004      	beq.n	8004c1c <HAL_TIM_Base_Start_IT+0x6c>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a16      	ldr	r2, [pc, #88]	; (8004c70 <HAL_TIM_Base_Start_IT+0xc0>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d111      	bne.n	8004c40 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f003 0307 	and.w	r3, r3, #7
 8004c26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2b06      	cmp	r3, #6
 8004c2c:	d010      	beq.n	8004c50 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f042 0201 	orr.w	r2, r2, #1
 8004c3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c3e:	e007      	b.n	8004c50 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f042 0201 	orr.w	r2, r2, #1
 8004c4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3714      	adds	r7, #20
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	40010000 	.word	0x40010000
 8004c64:	40000400 	.word	0x40000400
 8004c68:	40000800 	.word	0x40000800
 8004c6c:	40000c00 	.word	0x40000c00
 8004c70:	40014000 	.word	0x40014000

08004c74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e041      	b.n	8004d0a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d106      	bne.n	8004ca0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 f839 	bl	8004d12 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	3304      	adds	r3, #4
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	4610      	mov	r0, r2
 8004cb4:	f000 fba2 	bl	80053fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3708      	adds	r7, #8
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d12:	b480      	push	{r7}
 8004d14:	b083      	sub	sp, #12
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d1a:	bf00      	nop
 8004d1c:	370c      	adds	r7, #12
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
	...

08004d28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d109      	bne.n	8004d4c <HAL_TIM_PWM_Start+0x24>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	bf14      	ite	ne
 8004d44:	2301      	movne	r3, #1
 8004d46:	2300      	moveq	r3, #0
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	e022      	b.n	8004d92 <HAL_TIM_PWM_Start+0x6a>
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	2b04      	cmp	r3, #4
 8004d50:	d109      	bne.n	8004d66 <HAL_TIM_PWM_Start+0x3e>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	bf14      	ite	ne
 8004d5e:	2301      	movne	r3, #1
 8004d60:	2300      	moveq	r3, #0
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	e015      	b.n	8004d92 <HAL_TIM_PWM_Start+0x6a>
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	2b08      	cmp	r3, #8
 8004d6a:	d109      	bne.n	8004d80 <HAL_TIM_PWM_Start+0x58>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	bf14      	ite	ne
 8004d78:	2301      	movne	r3, #1
 8004d7a:	2300      	moveq	r3, #0
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	e008      	b.n	8004d92 <HAL_TIM_PWM_Start+0x6a>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	bf14      	ite	ne
 8004d8c:	2301      	movne	r3, #1
 8004d8e:	2300      	moveq	r3, #0
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d001      	beq.n	8004d9a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e068      	b.n	8004e6c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d104      	bne.n	8004daa <HAL_TIM_PWM_Start+0x82>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2202      	movs	r2, #2
 8004da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004da8:	e013      	b.n	8004dd2 <HAL_TIM_PWM_Start+0xaa>
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	2b04      	cmp	r3, #4
 8004dae:	d104      	bne.n	8004dba <HAL_TIM_PWM_Start+0x92>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2202      	movs	r2, #2
 8004db4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004db8:	e00b      	b.n	8004dd2 <HAL_TIM_PWM_Start+0xaa>
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	2b08      	cmp	r3, #8
 8004dbe:	d104      	bne.n	8004dca <HAL_TIM_PWM_Start+0xa2>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2202      	movs	r2, #2
 8004dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dc8:	e003      	b.n	8004dd2 <HAL_TIM_PWM_Start+0xaa>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2202      	movs	r2, #2
 8004dce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	6839      	ldr	r1, [r7, #0]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f000 fdb4 	bl	8005948 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a23      	ldr	r2, [pc, #140]	; (8004e74 <HAL_TIM_PWM_Start+0x14c>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d107      	bne.n	8004dfa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004df8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a1d      	ldr	r2, [pc, #116]	; (8004e74 <HAL_TIM_PWM_Start+0x14c>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d018      	beq.n	8004e36 <HAL_TIM_PWM_Start+0x10e>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e0c:	d013      	beq.n	8004e36 <HAL_TIM_PWM_Start+0x10e>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a19      	ldr	r2, [pc, #100]	; (8004e78 <HAL_TIM_PWM_Start+0x150>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d00e      	beq.n	8004e36 <HAL_TIM_PWM_Start+0x10e>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a17      	ldr	r2, [pc, #92]	; (8004e7c <HAL_TIM_PWM_Start+0x154>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d009      	beq.n	8004e36 <HAL_TIM_PWM_Start+0x10e>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a16      	ldr	r2, [pc, #88]	; (8004e80 <HAL_TIM_PWM_Start+0x158>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d004      	beq.n	8004e36 <HAL_TIM_PWM_Start+0x10e>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a14      	ldr	r2, [pc, #80]	; (8004e84 <HAL_TIM_PWM_Start+0x15c>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d111      	bne.n	8004e5a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f003 0307 	and.w	r3, r3, #7
 8004e40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2b06      	cmp	r3, #6
 8004e46:	d010      	beq.n	8004e6a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f042 0201 	orr.w	r2, r2, #1
 8004e56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e58:	e007      	b.n	8004e6a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f042 0201 	orr.w	r2, r2, #1
 8004e68:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	40010000 	.word	0x40010000
 8004e78:	40000400 	.word	0x40000400
 8004e7c:	40000800 	.word	0x40000800
 8004e80:	40000c00 	.word	0x40000c00
 8004e84:	40014000 	.word	0x40014000

08004e88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	f003 0302 	and.w	r3, r3, #2
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d122      	bne.n	8004ee4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	f003 0302 	and.w	r3, r3, #2
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d11b      	bne.n	8004ee4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f06f 0202 	mvn.w	r2, #2
 8004eb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	f003 0303 	and.w	r3, r3, #3
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d003      	beq.n	8004ed2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 fa77 	bl	80053be <HAL_TIM_IC_CaptureCallback>
 8004ed0:	e005      	b.n	8004ede <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 fa69 	bl	80053aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 fa7a 	bl	80053d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	f003 0304 	and.w	r3, r3, #4
 8004eee:	2b04      	cmp	r3, #4
 8004ef0:	d122      	bne.n	8004f38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	f003 0304 	and.w	r3, r3, #4
 8004efc:	2b04      	cmp	r3, #4
 8004efe:	d11b      	bne.n	8004f38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f06f 0204 	mvn.w	r2, #4
 8004f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2202      	movs	r2, #2
 8004f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d003      	beq.n	8004f26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 fa4d 	bl	80053be <HAL_TIM_IC_CaptureCallback>
 8004f24:	e005      	b.n	8004f32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 fa3f 	bl	80053aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 fa50 	bl	80053d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	f003 0308 	and.w	r3, r3, #8
 8004f42:	2b08      	cmp	r3, #8
 8004f44:	d122      	bne.n	8004f8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	f003 0308 	and.w	r3, r3, #8
 8004f50:	2b08      	cmp	r3, #8
 8004f52:	d11b      	bne.n	8004f8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f06f 0208 	mvn.w	r2, #8
 8004f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2204      	movs	r2, #4
 8004f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	69db      	ldr	r3, [r3, #28]
 8004f6a:	f003 0303 	and.w	r3, r3, #3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d003      	beq.n	8004f7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 fa23 	bl	80053be <HAL_TIM_IC_CaptureCallback>
 8004f78:	e005      	b.n	8004f86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 fa15 	bl	80053aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 fa26 	bl	80053d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	f003 0310 	and.w	r3, r3, #16
 8004f96:	2b10      	cmp	r3, #16
 8004f98:	d122      	bne.n	8004fe0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	f003 0310 	and.w	r3, r3, #16
 8004fa4:	2b10      	cmp	r3, #16
 8004fa6:	d11b      	bne.n	8004fe0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f06f 0210 	mvn.w	r2, #16
 8004fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2208      	movs	r2, #8
 8004fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	69db      	ldr	r3, [r3, #28]
 8004fbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d003      	beq.n	8004fce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 f9f9 	bl	80053be <HAL_TIM_IC_CaptureCallback>
 8004fcc:	e005      	b.n	8004fda <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 f9eb 	bl	80053aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f000 f9fc 	bl	80053d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d10e      	bne.n	800500c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	f003 0301 	and.w	r3, r3, #1
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d107      	bne.n	800500c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f06f 0201 	mvn.w	r2, #1
 8005004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f7fd f938 	bl	800227c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005016:	2b80      	cmp	r3, #128	; 0x80
 8005018:	d10e      	bne.n	8005038 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005024:	2b80      	cmp	r3, #128	; 0x80
 8005026:	d107      	bne.n	8005038 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 fd26 	bl	8005a84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005042:	2b40      	cmp	r3, #64	; 0x40
 8005044:	d10e      	bne.n	8005064 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005050:	2b40      	cmp	r3, #64	; 0x40
 8005052:	d107      	bne.n	8005064 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800505c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 f9c1 	bl	80053e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	f003 0320 	and.w	r3, r3, #32
 800506e:	2b20      	cmp	r3, #32
 8005070:	d10e      	bne.n	8005090 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	f003 0320 	and.w	r3, r3, #32
 800507c:	2b20      	cmp	r3, #32
 800507e:	d107      	bne.n	8005090 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f06f 0220 	mvn.w	r2, #32
 8005088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 fcf0 	bl	8005a70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005090:	bf00      	nop
 8005092:	3708      	adds	r7, #8
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b086      	sub	sp, #24
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050a4:	2300      	movs	r3, #0
 80050a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d101      	bne.n	80050b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80050b2:	2302      	movs	r3, #2
 80050b4:	e0ae      	b.n	8005214 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2b0c      	cmp	r3, #12
 80050c2:	f200 809f 	bhi.w	8005204 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80050c6:	a201      	add	r2, pc, #4	; (adr r2, 80050cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80050c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050cc:	08005101 	.word	0x08005101
 80050d0:	08005205 	.word	0x08005205
 80050d4:	08005205 	.word	0x08005205
 80050d8:	08005205 	.word	0x08005205
 80050dc:	08005141 	.word	0x08005141
 80050e0:	08005205 	.word	0x08005205
 80050e4:	08005205 	.word	0x08005205
 80050e8:	08005205 	.word	0x08005205
 80050ec:	08005183 	.word	0x08005183
 80050f0:	08005205 	.word	0x08005205
 80050f4:	08005205 	.word	0x08005205
 80050f8:	08005205 	.word	0x08005205
 80050fc:	080051c3 	.word	0x080051c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68b9      	ldr	r1, [r7, #8]
 8005106:	4618      	mov	r0, r3
 8005108:	f000 f9f8 	bl	80054fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	699a      	ldr	r2, [r3, #24]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f042 0208 	orr.w	r2, r2, #8
 800511a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	699a      	ldr	r2, [r3, #24]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f022 0204 	bic.w	r2, r2, #4
 800512a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6999      	ldr	r1, [r3, #24]
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	691a      	ldr	r2, [r3, #16]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	430a      	orrs	r2, r1
 800513c:	619a      	str	r2, [r3, #24]
      break;
 800513e:	e064      	b.n	800520a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68b9      	ldr	r1, [r7, #8]
 8005146:	4618      	mov	r0, r3
 8005148:	f000 fa3e 	bl	80055c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	699a      	ldr	r2, [r3, #24]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800515a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	699a      	ldr	r2, [r3, #24]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800516a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6999      	ldr	r1, [r3, #24]
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	021a      	lsls	r2, r3, #8
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	430a      	orrs	r2, r1
 800517e:	619a      	str	r2, [r3, #24]
      break;
 8005180:	e043      	b.n	800520a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68b9      	ldr	r1, [r7, #8]
 8005188:	4618      	mov	r0, r3
 800518a:	f000 fa89 	bl	80056a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	69da      	ldr	r2, [r3, #28]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f042 0208 	orr.w	r2, r2, #8
 800519c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	69da      	ldr	r2, [r3, #28]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f022 0204 	bic.w	r2, r2, #4
 80051ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	69d9      	ldr	r1, [r3, #28]
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	691a      	ldr	r2, [r3, #16]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	430a      	orrs	r2, r1
 80051be:	61da      	str	r2, [r3, #28]
      break;
 80051c0:	e023      	b.n	800520a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68b9      	ldr	r1, [r7, #8]
 80051c8:	4618      	mov	r0, r3
 80051ca:	f000 fad3 	bl	8005774 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	69da      	ldr	r2, [r3, #28]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	69da      	ldr	r2, [r3, #28]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	69d9      	ldr	r1, [r3, #28]
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	021a      	lsls	r2, r3, #8
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	430a      	orrs	r2, r1
 8005200:	61da      	str	r2, [r3, #28]
      break;
 8005202:	e002      	b.n	800520a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	75fb      	strb	r3, [r7, #23]
      break;
 8005208:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005212:	7dfb      	ldrb	r3, [r7, #23]
}
 8005214:	4618      	mov	r0, r3
 8005216:	3718      	adds	r7, #24
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005226:	2300      	movs	r3, #0
 8005228:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005230:	2b01      	cmp	r3, #1
 8005232:	d101      	bne.n	8005238 <HAL_TIM_ConfigClockSource+0x1c>
 8005234:	2302      	movs	r3, #2
 8005236:	e0b4      	b.n	80053a2 <HAL_TIM_ConfigClockSource+0x186>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2202      	movs	r2, #2
 8005244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005256:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800525e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68ba      	ldr	r2, [r7, #8]
 8005266:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005270:	d03e      	beq.n	80052f0 <HAL_TIM_ConfigClockSource+0xd4>
 8005272:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005276:	f200 8087 	bhi.w	8005388 <HAL_TIM_ConfigClockSource+0x16c>
 800527a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800527e:	f000 8086 	beq.w	800538e <HAL_TIM_ConfigClockSource+0x172>
 8005282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005286:	d87f      	bhi.n	8005388 <HAL_TIM_ConfigClockSource+0x16c>
 8005288:	2b70      	cmp	r3, #112	; 0x70
 800528a:	d01a      	beq.n	80052c2 <HAL_TIM_ConfigClockSource+0xa6>
 800528c:	2b70      	cmp	r3, #112	; 0x70
 800528e:	d87b      	bhi.n	8005388 <HAL_TIM_ConfigClockSource+0x16c>
 8005290:	2b60      	cmp	r3, #96	; 0x60
 8005292:	d050      	beq.n	8005336 <HAL_TIM_ConfigClockSource+0x11a>
 8005294:	2b60      	cmp	r3, #96	; 0x60
 8005296:	d877      	bhi.n	8005388 <HAL_TIM_ConfigClockSource+0x16c>
 8005298:	2b50      	cmp	r3, #80	; 0x50
 800529a:	d03c      	beq.n	8005316 <HAL_TIM_ConfigClockSource+0xfa>
 800529c:	2b50      	cmp	r3, #80	; 0x50
 800529e:	d873      	bhi.n	8005388 <HAL_TIM_ConfigClockSource+0x16c>
 80052a0:	2b40      	cmp	r3, #64	; 0x40
 80052a2:	d058      	beq.n	8005356 <HAL_TIM_ConfigClockSource+0x13a>
 80052a4:	2b40      	cmp	r3, #64	; 0x40
 80052a6:	d86f      	bhi.n	8005388 <HAL_TIM_ConfigClockSource+0x16c>
 80052a8:	2b30      	cmp	r3, #48	; 0x30
 80052aa:	d064      	beq.n	8005376 <HAL_TIM_ConfigClockSource+0x15a>
 80052ac:	2b30      	cmp	r3, #48	; 0x30
 80052ae:	d86b      	bhi.n	8005388 <HAL_TIM_ConfigClockSource+0x16c>
 80052b0:	2b20      	cmp	r3, #32
 80052b2:	d060      	beq.n	8005376 <HAL_TIM_ConfigClockSource+0x15a>
 80052b4:	2b20      	cmp	r3, #32
 80052b6:	d867      	bhi.n	8005388 <HAL_TIM_ConfigClockSource+0x16c>
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d05c      	beq.n	8005376 <HAL_TIM_ConfigClockSource+0x15a>
 80052bc:	2b10      	cmp	r3, #16
 80052be:	d05a      	beq.n	8005376 <HAL_TIM_ConfigClockSource+0x15a>
 80052c0:	e062      	b.n	8005388 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6818      	ldr	r0, [r3, #0]
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	6899      	ldr	r1, [r3, #8]
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	685a      	ldr	r2, [r3, #4]
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	f000 fb19 	bl	8005908 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68ba      	ldr	r2, [r7, #8]
 80052ec:	609a      	str	r2, [r3, #8]
      break;
 80052ee:	e04f      	b.n	8005390 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6818      	ldr	r0, [r3, #0]
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	6899      	ldr	r1, [r3, #8]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	685a      	ldr	r2, [r3, #4]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	f000 fb02 	bl	8005908 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	689a      	ldr	r2, [r3, #8]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005312:	609a      	str	r2, [r3, #8]
      break;
 8005314:	e03c      	b.n	8005390 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6818      	ldr	r0, [r3, #0]
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	6859      	ldr	r1, [r3, #4]
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	461a      	mov	r2, r3
 8005324:	f000 fa76 	bl	8005814 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2150      	movs	r1, #80	; 0x50
 800532e:	4618      	mov	r0, r3
 8005330:	f000 facf 	bl	80058d2 <TIM_ITRx_SetConfig>
      break;
 8005334:	e02c      	b.n	8005390 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6818      	ldr	r0, [r3, #0]
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	6859      	ldr	r1, [r3, #4]
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	461a      	mov	r2, r3
 8005344:	f000 fa95 	bl	8005872 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2160      	movs	r1, #96	; 0x60
 800534e:	4618      	mov	r0, r3
 8005350:	f000 fabf 	bl	80058d2 <TIM_ITRx_SetConfig>
      break;
 8005354:	e01c      	b.n	8005390 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6818      	ldr	r0, [r3, #0]
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	6859      	ldr	r1, [r3, #4]
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	461a      	mov	r2, r3
 8005364:	f000 fa56 	bl	8005814 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2140      	movs	r1, #64	; 0x40
 800536e:	4618      	mov	r0, r3
 8005370:	f000 faaf 	bl	80058d2 <TIM_ITRx_SetConfig>
      break;
 8005374:	e00c      	b.n	8005390 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4619      	mov	r1, r3
 8005380:	4610      	mov	r0, r2
 8005382:	f000 faa6 	bl	80058d2 <TIM_ITRx_SetConfig>
      break;
 8005386:	e003      	b.n	8005390 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	73fb      	strb	r3, [r7, #15]
      break;
 800538c:	e000      	b.n	8005390 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800538e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80053a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053aa:	b480      	push	{r7}
 80053ac:	b083      	sub	sp, #12
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053b2:	bf00      	nop
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr

080053be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053be:	b480      	push	{r7}
 80053c0:	b083      	sub	sp, #12
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053c6:	bf00      	nop
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr

080053d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b083      	sub	sp, #12
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053da:	bf00      	nop
 80053dc:	370c      	adds	r7, #12
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr

080053e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053e6:	b480      	push	{r7}
 80053e8:	b083      	sub	sp, #12
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053ee:	bf00      	nop
 80053f0:	370c      	adds	r7, #12
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
	...

080053fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a34      	ldr	r2, [pc, #208]	; (80054e0 <TIM_Base_SetConfig+0xe4>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d00f      	beq.n	8005434 <TIM_Base_SetConfig+0x38>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800541a:	d00b      	beq.n	8005434 <TIM_Base_SetConfig+0x38>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a31      	ldr	r2, [pc, #196]	; (80054e4 <TIM_Base_SetConfig+0xe8>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d007      	beq.n	8005434 <TIM_Base_SetConfig+0x38>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a30      	ldr	r2, [pc, #192]	; (80054e8 <TIM_Base_SetConfig+0xec>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d003      	beq.n	8005434 <TIM_Base_SetConfig+0x38>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a2f      	ldr	r2, [pc, #188]	; (80054ec <TIM_Base_SetConfig+0xf0>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d108      	bne.n	8005446 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800543a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	4313      	orrs	r3, r2
 8005444:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a25      	ldr	r2, [pc, #148]	; (80054e0 <TIM_Base_SetConfig+0xe4>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d01b      	beq.n	8005486 <TIM_Base_SetConfig+0x8a>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005454:	d017      	beq.n	8005486 <TIM_Base_SetConfig+0x8a>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a22      	ldr	r2, [pc, #136]	; (80054e4 <TIM_Base_SetConfig+0xe8>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d013      	beq.n	8005486 <TIM_Base_SetConfig+0x8a>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a21      	ldr	r2, [pc, #132]	; (80054e8 <TIM_Base_SetConfig+0xec>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d00f      	beq.n	8005486 <TIM_Base_SetConfig+0x8a>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a20      	ldr	r2, [pc, #128]	; (80054ec <TIM_Base_SetConfig+0xf0>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d00b      	beq.n	8005486 <TIM_Base_SetConfig+0x8a>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a1f      	ldr	r2, [pc, #124]	; (80054f0 <TIM_Base_SetConfig+0xf4>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d007      	beq.n	8005486 <TIM_Base_SetConfig+0x8a>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a1e      	ldr	r2, [pc, #120]	; (80054f4 <TIM_Base_SetConfig+0xf8>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d003      	beq.n	8005486 <TIM_Base_SetConfig+0x8a>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a1d      	ldr	r2, [pc, #116]	; (80054f8 <TIM_Base_SetConfig+0xfc>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d108      	bne.n	8005498 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800548c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	4313      	orrs	r3, r2
 8005496:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	689a      	ldr	r2, [r3, #8]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a08      	ldr	r2, [pc, #32]	; (80054e0 <TIM_Base_SetConfig+0xe4>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d103      	bne.n	80054cc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	691a      	ldr	r2, [r3, #16]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	615a      	str	r2, [r3, #20]
}
 80054d2:	bf00      	nop
 80054d4:	3714      	adds	r7, #20
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	40010000 	.word	0x40010000
 80054e4:	40000400 	.word	0x40000400
 80054e8:	40000800 	.word	0x40000800
 80054ec:	40000c00 	.word	0x40000c00
 80054f0:	40014000 	.word	0x40014000
 80054f4:	40014400 	.word	0x40014400
 80054f8:	40014800 	.word	0x40014800

080054fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b087      	sub	sp, #28
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	f023 0201 	bic.w	r2, r3, #1
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a1b      	ldr	r3, [r3, #32]
 8005516:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800552a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f023 0303 	bic.w	r3, r3, #3
 8005532:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	4313      	orrs	r3, r2
 800553c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	f023 0302 	bic.w	r3, r3, #2
 8005544:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	4313      	orrs	r3, r2
 800554e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a1c      	ldr	r2, [pc, #112]	; (80055c4 <TIM_OC1_SetConfig+0xc8>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d10c      	bne.n	8005572 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	f023 0308 	bic.w	r3, r3, #8
 800555e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	697a      	ldr	r2, [r7, #20]
 8005566:	4313      	orrs	r3, r2
 8005568:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	f023 0304 	bic.w	r3, r3, #4
 8005570:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a13      	ldr	r2, [pc, #76]	; (80055c4 <TIM_OC1_SetConfig+0xc8>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d111      	bne.n	800559e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005580:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005588:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	693a      	ldr	r2, [r7, #16]
 8005590:	4313      	orrs	r3, r2
 8005592:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	693a      	ldr	r2, [r7, #16]
 800559a:	4313      	orrs	r3, r2
 800559c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	685a      	ldr	r2, [r3, #4]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	621a      	str	r2, [r3, #32]
}
 80055b8:	bf00      	nop
 80055ba:	371c      	adds	r7, #28
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr
 80055c4:	40010000 	.word	0x40010000

080055c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b087      	sub	sp, #28
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	f023 0210 	bic.w	r2, r3, #16
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	021b      	lsls	r3, r3, #8
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	4313      	orrs	r3, r2
 800560a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	f023 0320 	bic.w	r3, r3, #32
 8005612:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	011b      	lsls	r3, r3, #4
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	4313      	orrs	r3, r2
 800561e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a1e      	ldr	r2, [pc, #120]	; (800569c <TIM_OC2_SetConfig+0xd4>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d10d      	bne.n	8005644 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800562e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	011b      	lsls	r3, r3, #4
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	4313      	orrs	r3, r2
 800563a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005642:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a15      	ldr	r2, [pc, #84]	; (800569c <TIM_OC2_SetConfig+0xd4>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d113      	bne.n	8005674 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005652:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800565a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	695b      	ldr	r3, [r3, #20]
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	4313      	orrs	r3, r2
 8005666:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	699b      	ldr	r3, [r3, #24]
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	693a      	ldr	r2, [r7, #16]
 8005670:	4313      	orrs	r3, r2
 8005672:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	685a      	ldr	r2, [r3, #4]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	621a      	str	r2, [r3, #32]
}
 800568e:	bf00      	nop
 8005690:	371c      	adds	r7, #28
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	40010000 	.word	0x40010000

080056a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b087      	sub	sp, #28
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a1b      	ldr	r3, [r3, #32]
 80056ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	69db      	ldr	r3, [r3, #28]
 80056c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f023 0303 	bic.w	r3, r3, #3
 80056d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	4313      	orrs	r3, r2
 80056e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	021b      	lsls	r3, r3, #8
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a1d      	ldr	r2, [pc, #116]	; (8005770 <TIM_OC3_SetConfig+0xd0>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d10d      	bne.n	800571a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005704:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	021b      	lsls	r3, r3, #8
 800570c:	697a      	ldr	r2, [r7, #20]
 800570e:	4313      	orrs	r3, r2
 8005710:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005718:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a14      	ldr	r2, [pc, #80]	; (8005770 <TIM_OC3_SetConfig+0xd0>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d113      	bne.n	800574a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005728:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005730:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	011b      	lsls	r3, r3, #4
 8005738:	693a      	ldr	r2, [r7, #16]
 800573a:	4313      	orrs	r3, r2
 800573c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	011b      	lsls	r3, r3, #4
 8005744:	693a      	ldr	r2, [r7, #16]
 8005746:	4313      	orrs	r3, r2
 8005748:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	685a      	ldr	r2, [r3, #4]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	697a      	ldr	r2, [r7, #20]
 8005762:	621a      	str	r2, [r3, #32]
}
 8005764:	bf00      	nop
 8005766:	371c      	adds	r7, #28
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr
 8005770:	40010000 	.word	0x40010000

08005774 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005774:	b480      	push	{r7}
 8005776:	b087      	sub	sp, #28
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a1b      	ldr	r3, [r3, #32]
 800578e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	69db      	ldr	r3, [r3, #28]
 800579a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	021b      	lsls	r3, r3, #8
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	031b      	lsls	r3, r3, #12
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a10      	ldr	r2, [pc, #64]	; (8005810 <TIM_OC4_SetConfig+0x9c>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d109      	bne.n	80057e8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	695b      	ldr	r3, [r3, #20]
 80057e0:	019b      	lsls	r3, r3, #6
 80057e2:	697a      	ldr	r2, [r7, #20]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	697a      	ldr	r2, [r7, #20]
 80057ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	685a      	ldr	r2, [r3, #4]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	693a      	ldr	r2, [r7, #16]
 8005800:	621a      	str	r2, [r3, #32]
}
 8005802:	bf00      	nop
 8005804:	371c      	adds	r7, #28
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	40010000 	.word	0x40010000

08005814 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005814:	b480      	push	{r7}
 8005816:	b087      	sub	sp, #28
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6a1b      	ldr	r3, [r3, #32]
 8005824:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6a1b      	ldr	r3, [r3, #32]
 800582a:	f023 0201 	bic.w	r2, r3, #1
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	699b      	ldr	r3, [r3, #24]
 8005836:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800583e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	011b      	lsls	r3, r3, #4
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	4313      	orrs	r3, r2
 8005848:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	f023 030a 	bic.w	r3, r3, #10
 8005850:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	4313      	orrs	r3, r2
 8005858:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	693a      	ldr	r2, [r7, #16]
 800585e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	697a      	ldr	r2, [r7, #20]
 8005864:	621a      	str	r2, [r3, #32]
}
 8005866:	bf00      	nop
 8005868:	371c      	adds	r7, #28
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr

08005872 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005872:	b480      	push	{r7}
 8005874:	b087      	sub	sp, #28
 8005876:	af00      	add	r7, sp, #0
 8005878:	60f8      	str	r0, [r7, #12]
 800587a:	60b9      	str	r1, [r7, #8]
 800587c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	f023 0210 	bic.w	r2, r3, #16
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6a1b      	ldr	r3, [r3, #32]
 8005894:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800589c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	031b      	lsls	r3, r3, #12
 80058a2:	697a      	ldr	r2, [r7, #20]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	011b      	lsls	r3, r3, #4
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	693a      	ldr	r2, [r7, #16]
 80058c4:	621a      	str	r2, [r3, #32]
}
 80058c6:	bf00      	nop
 80058c8:	371c      	adds	r7, #28
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr

080058d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058d2:	b480      	push	{r7}
 80058d4:	b085      	sub	sp, #20
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
 80058da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058ea:	683a      	ldr	r2, [r7, #0]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	f043 0307 	orr.w	r3, r3, #7
 80058f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	609a      	str	r2, [r3, #8]
}
 80058fc:	bf00      	nop
 80058fe:	3714      	adds	r7, #20
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005908:	b480      	push	{r7}
 800590a:	b087      	sub	sp, #28
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	607a      	str	r2, [r7, #4]
 8005914:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005922:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	021a      	lsls	r2, r3, #8
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	431a      	orrs	r2, r3
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	4313      	orrs	r3, r2
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	4313      	orrs	r3, r2
 8005934:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	697a      	ldr	r2, [r7, #20]
 800593a:	609a      	str	r2, [r3, #8]
}
 800593c:	bf00      	nop
 800593e:	371c      	adds	r7, #28
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005948:	b480      	push	{r7}
 800594a:	b087      	sub	sp, #28
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	f003 031f 	and.w	r3, r3, #31
 800595a:	2201      	movs	r2, #1
 800595c:	fa02 f303 	lsl.w	r3, r2, r3
 8005960:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6a1a      	ldr	r2, [r3, #32]
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	43db      	mvns	r3, r3
 800596a:	401a      	ands	r2, r3
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6a1a      	ldr	r2, [r3, #32]
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	f003 031f 	and.w	r3, r3, #31
 800597a:	6879      	ldr	r1, [r7, #4]
 800597c:	fa01 f303 	lsl.w	r3, r1, r3
 8005980:	431a      	orrs	r2, r3
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	621a      	str	r2, [r3, #32]
}
 8005986:	bf00      	nop
 8005988:	371c      	adds	r7, #28
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
	...

08005994 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d101      	bne.n	80059ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059a8:	2302      	movs	r3, #2
 80059aa:	e050      	b.n	8005a4e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2202      	movs	r2, #2
 80059b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	4313      	orrs	r3, r2
 80059dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a1c      	ldr	r2, [pc, #112]	; (8005a5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d018      	beq.n	8005a22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059f8:	d013      	beq.n	8005a22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a18      	ldr	r2, [pc, #96]	; (8005a60 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d00e      	beq.n	8005a22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a16      	ldr	r2, [pc, #88]	; (8005a64 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d009      	beq.n	8005a22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a15      	ldr	r2, [pc, #84]	; (8005a68 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d004      	beq.n	8005a22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a13      	ldr	r2, [pc, #76]	; (8005a6c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d10c      	bne.n	8005a3c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	68ba      	ldr	r2, [r7, #8]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68ba      	ldr	r2, [r7, #8]
 8005a3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3714      	adds	r7, #20
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	40010000 	.word	0x40010000
 8005a60:	40000400 	.word	0x40000400
 8005a64:	40000800 	.word	0x40000800
 8005a68:	40000c00 	.word	0x40000c00
 8005a6c:	40014000 	.word	0x40014000

08005a70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a78:	bf00      	nop
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a8c:	bf00      	nop
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d101      	bne.n	8005aaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e03f      	b.n	8005b2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d106      	bne.n	8005ac4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f7fc ff5c 	bl	800297c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2224      	movs	r2, #36	; 0x24
 8005ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68da      	ldr	r2, [r3, #12]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ada:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f000 fddb 	bl	8006698 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	691a      	ldr	r2, [r3, #16]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005af0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	695a      	ldr	r2, [r3, #20]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68da      	ldr	r2, [r3, #12]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2220      	movs	r2, #32
 8005b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2220      	movs	r2, #32
 8005b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3708      	adds	r7, #8
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}

08005b32 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b32:	b580      	push	{r7, lr}
 8005b34:	b08a      	sub	sp, #40	; 0x28
 8005b36:	af02      	add	r7, sp, #8
 8005b38:	60f8      	str	r0, [r7, #12]
 8005b3a:	60b9      	str	r1, [r7, #8]
 8005b3c:	603b      	str	r3, [r7, #0]
 8005b3e:	4613      	mov	r3, r2
 8005b40:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005b42:	2300      	movs	r3, #0
 8005b44:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	2b20      	cmp	r3, #32
 8005b50:	d17c      	bne.n	8005c4c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d002      	beq.n	8005b5e <HAL_UART_Transmit+0x2c>
 8005b58:	88fb      	ldrh	r3, [r7, #6]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d101      	bne.n	8005b62 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e075      	b.n	8005c4e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d101      	bne.n	8005b70 <HAL_UART_Transmit+0x3e>
 8005b6c:	2302      	movs	r3, #2
 8005b6e:	e06e      	b.n	8005c4e <HAL_UART_Transmit+0x11c>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2221      	movs	r2, #33	; 0x21
 8005b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b86:	f7fd f80f 	bl	8002ba8 <HAL_GetTick>
 8005b8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	88fa      	ldrh	r2, [r7, #6]
 8005b90:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	88fa      	ldrh	r2, [r7, #6]
 8005b96:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ba0:	d108      	bne.n	8005bb4 <HAL_UART_Transmit+0x82>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d104      	bne.n	8005bb4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005baa:	2300      	movs	r3, #0
 8005bac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	61bb      	str	r3, [r7, #24]
 8005bb2:	e003      	b.n	8005bbc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005bc4:	e02a      	b.n	8005c1c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	9300      	str	r3, [sp, #0]
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	2180      	movs	r1, #128	; 0x80
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f000 fb1f 	bl	8006214 <UART_WaitOnFlagUntilTimeout>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d001      	beq.n	8005be0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	e036      	b.n	8005c4e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d10b      	bne.n	8005bfe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	881b      	ldrh	r3, [r3, #0]
 8005bea:	461a      	mov	r2, r3
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bf4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	3302      	adds	r3, #2
 8005bfa:	61bb      	str	r3, [r7, #24]
 8005bfc:	e007      	b.n	8005c0e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	781a      	ldrb	r2, [r3, #0]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	3b01      	subs	r3, #1
 8005c16:	b29a      	uxth	r2, r3
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1cf      	bne.n	8005bc6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	9300      	str	r3, [sp, #0]
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	2140      	movs	r1, #64	; 0x40
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	f000 faef 	bl	8006214 <UART_WaitOnFlagUntilTimeout>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d001      	beq.n	8005c40 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e006      	b.n	8005c4e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2220      	movs	r2, #32
 8005c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	e000      	b.n	8005c4e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005c4c:	2302      	movs	r3, #2
  }
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3720      	adds	r7, #32
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b084      	sub	sp, #16
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	60f8      	str	r0, [r7, #12]
 8005c5e:	60b9      	str	r1, [r7, #8]
 8005c60:	4613      	mov	r3, r2
 8005c62:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	2b20      	cmp	r3, #32
 8005c6e:	d11d      	bne.n	8005cac <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d002      	beq.n	8005c7c <HAL_UART_Receive_IT+0x26>
 8005c76:	88fb      	ldrh	r3, [r7, #6]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d101      	bne.n	8005c80 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e016      	b.n	8005cae <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d101      	bne.n	8005c8e <HAL_UART_Receive_IT+0x38>
 8005c8a:	2302      	movs	r3, #2
 8005c8c:	e00f      	b.n	8005cae <HAL_UART_Receive_IT+0x58>
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2201      	movs	r2, #1
 8005c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005c9c:	88fb      	ldrh	r3, [r7, #6]
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	68b9      	ldr	r1, [r7, #8]
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f000 fb24 	bl	80062f0 <UART_Start_Receive_IT>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	e000      	b.n	8005cae <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005cac:	2302      	movs	r3, #2
  }
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3710      	adds	r7, #16
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
	...

08005cb8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b0ba      	sub	sp, #232	; 0xe8
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	695b      	ldr	r3, [r3, #20]
 8005cda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cee:	f003 030f 	and.w	r3, r3, #15
 8005cf2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005cf6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d10f      	bne.n	8005d1e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d02:	f003 0320 	and.w	r3, r3, #32
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d009      	beq.n	8005d1e <HAL_UART_IRQHandler+0x66>
 8005d0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d0e:	f003 0320 	and.w	r3, r3, #32
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d003      	beq.n	8005d1e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 fc03 	bl	8006522 <UART_Receive_IT>
      return;
 8005d1c:	e256      	b.n	80061cc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005d1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	f000 80de 	beq.w	8005ee4 <HAL_UART_IRQHandler+0x22c>
 8005d28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d2c:	f003 0301 	and.w	r3, r3, #1
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d106      	bne.n	8005d42 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d38:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f000 80d1 	beq.w	8005ee4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d46:	f003 0301 	and.w	r3, r3, #1
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00b      	beq.n	8005d66 <HAL_UART_IRQHandler+0xae>
 8005d4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d005      	beq.n	8005d66 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5e:	f043 0201 	orr.w	r2, r3, #1
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d6a:	f003 0304 	and.w	r3, r3, #4
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00b      	beq.n	8005d8a <HAL_UART_IRQHandler+0xd2>
 8005d72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d76:	f003 0301 	and.w	r3, r3, #1
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d005      	beq.n	8005d8a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d82:	f043 0202 	orr.w	r2, r3, #2
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d8e:	f003 0302 	and.w	r3, r3, #2
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00b      	beq.n	8005dae <HAL_UART_IRQHandler+0xf6>
 8005d96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d9a:	f003 0301 	and.w	r3, r3, #1
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d005      	beq.n	8005dae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da6:	f043 0204 	orr.w	r2, r3, #4
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005db2:	f003 0308 	and.w	r3, r3, #8
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d011      	beq.n	8005dde <HAL_UART_IRQHandler+0x126>
 8005dba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dbe:	f003 0320 	and.w	r3, r3, #32
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d105      	bne.n	8005dd2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005dc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dca:	f003 0301 	and.w	r3, r3, #1
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d005      	beq.n	8005dde <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd6:	f043 0208 	orr.w	r2, r3, #8
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	f000 81ed 	beq.w	80061c2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005de8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dec:	f003 0320 	and.w	r3, r3, #32
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d008      	beq.n	8005e06 <HAL_UART_IRQHandler+0x14e>
 8005df4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005df8:	f003 0320 	and.w	r3, r3, #32
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d002      	beq.n	8005e06 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 fb8e 	bl	8006522 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	695b      	ldr	r3, [r3, #20]
 8005e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e10:	2b40      	cmp	r3, #64	; 0x40
 8005e12:	bf0c      	ite	eq
 8005e14:	2301      	moveq	r3, #1
 8005e16:	2300      	movne	r3, #0
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e22:	f003 0308 	and.w	r3, r3, #8
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d103      	bne.n	8005e32 <HAL_UART_IRQHandler+0x17a>
 8005e2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d04f      	beq.n	8005ed2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 fa96 	bl	8006364 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e42:	2b40      	cmp	r3, #64	; 0x40
 8005e44:	d141      	bne.n	8005eca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	3314      	adds	r3, #20
 8005e4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e54:	e853 3f00 	ldrex	r3, [r3]
 8005e58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005e5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	3314      	adds	r3, #20
 8005e6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005e72:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005e76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005e7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005e82:	e841 2300 	strex	r3, r2, [r1]
 8005e86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005e8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d1d9      	bne.n	8005e46 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d013      	beq.n	8005ec2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9e:	4a7d      	ldr	r2, [pc, #500]	; (8006094 <HAL_UART_IRQHandler+0x3dc>)
 8005ea0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7fd f80b 	bl	8002ec2 <HAL_DMA_Abort_IT>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d016      	beq.n	8005ee0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ebc:	4610      	mov	r0, r2
 8005ebe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ec0:	e00e      	b.n	8005ee0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 f990 	bl	80061e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ec8:	e00a      	b.n	8005ee0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 f98c 	bl	80061e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ed0:	e006      	b.n	8005ee0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 f988 	bl	80061e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005ede:	e170      	b.n	80061c2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ee0:	bf00      	nop
    return;
 8005ee2:	e16e      	b.n	80061c2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	f040 814a 	bne.w	8006182 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ef2:	f003 0310 	and.w	r3, r3, #16
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	f000 8143 	beq.w	8006182 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f00:	f003 0310 	and.w	r3, r3, #16
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	f000 813c 	beq.w	8006182 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	60bb      	str	r3, [r7, #8]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	60bb      	str	r3, [r7, #8]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	60bb      	str	r3, [r7, #8]
 8005f1e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	695b      	ldr	r3, [r3, #20]
 8005f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f2a:	2b40      	cmp	r3, #64	; 0x40
 8005f2c:	f040 80b4 	bne.w	8006098 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005f3c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	f000 8140 	beq.w	80061c6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	f080 8139 	bcs.w	80061c6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f5a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f60:	69db      	ldr	r3, [r3, #28]
 8005f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f66:	f000 8088 	beq.w	800607a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	330c      	adds	r3, #12
 8005f70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f78:	e853 3f00 	ldrex	r3, [r3]
 8005f7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005f80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	330c      	adds	r3, #12
 8005f92:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005f96:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005f9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005fa2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005fa6:	e841 2300 	strex	r3, r2, [r1]
 8005faa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005fae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d1d9      	bne.n	8005f6a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	3314      	adds	r3, #20
 8005fbc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fc0:	e853 3f00 	ldrex	r3, [r3]
 8005fc4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005fc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fc8:	f023 0301 	bic.w	r3, r3, #1
 8005fcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	3314      	adds	r3, #20
 8005fd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005fda:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005fde:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005fe2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005fe6:	e841 2300 	strex	r3, r2, [r1]
 8005fea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005fec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d1e1      	bne.n	8005fb6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	3314      	adds	r3, #20
 8005ff8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ffa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ffc:	e853 3f00 	ldrex	r3, [r3]
 8006000:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006002:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006004:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006008:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	3314      	adds	r3, #20
 8006012:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006016:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006018:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800601a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800601c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800601e:	e841 2300 	strex	r3, r2, [r1]
 8006022:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006024:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006026:	2b00      	cmp	r3, #0
 8006028:	d1e3      	bne.n	8005ff2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2220      	movs	r2, #32
 800602e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	330c      	adds	r3, #12
 800603e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006042:	e853 3f00 	ldrex	r3, [r3]
 8006046:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006048:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800604a:	f023 0310 	bic.w	r3, r3, #16
 800604e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	330c      	adds	r3, #12
 8006058:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800605c:	65ba      	str	r2, [r7, #88]	; 0x58
 800605e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006060:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006062:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006064:	e841 2300 	strex	r3, r2, [r1]
 8006068:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800606a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800606c:	2b00      	cmp	r3, #0
 800606e:	d1e3      	bne.n	8006038 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006074:	4618      	mov	r0, r3
 8006076:	f7fc feb4 	bl	8002de2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006082:	b29b      	uxth	r3, r3
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	b29b      	uxth	r3, r3
 8006088:	4619      	mov	r1, r3
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 f8b6 	bl	80061fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006090:	e099      	b.n	80061c6 <HAL_UART_IRQHandler+0x50e>
 8006092:	bf00      	nop
 8006094:	0800642b 	.word	0x0800642b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	1ad3      	subs	r3, r2, r3
 80060a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	f000 808b 	beq.w	80061ca <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80060b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	f000 8086 	beq.w	80061ca <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	330c      	adds	r3, #12
 80060c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c8:	e853 3f00 	ldrex	r3, [r3]
 80060cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80060ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	330c      	adds	r3, #12
 80060de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80060e2:	647a      	str	r2, [r7, #68]	; 0x44
 80060e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80060e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060ea:	e841 2300 	strex	r3, r2, [r1]
 80060ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80060f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1e3      	bne.n	80060be <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	3314      	adds	r3, #20
 80060fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006100:	e853 3f00 	ldrex	r3, [r3]
 8006104:	623b      	str	r3, [r7, #32]
   return(result);
 8006106:	6a3b      	ldr	r3, [r7, #32]
 8006108:	f023 0301 	bic.w	r3, r3, #1
 800610c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	3314      	adds	r3, #20
 8006116:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800611a:	633a      	str	r2, [r7, #48]	; 0x30
 800611c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800611e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006120:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006122:	e841 2300 	strex	r3, r2, [r1]
 8006126:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800612a:	2b00      	cmp	r3, #0
 800612c:	d1e3      	bne.n	80060f6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2220      	movs	r2, #32
 8006132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	330c      	adds	r3, #12
 8006142:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	e853 3f00 	ldrex	r3, [r3]
 800614a:	60fb      	str	r3, [r7, #12]
   return(result);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f023 0310 	bic.w	r3, r3, #16
 8006152:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	330c      	adds	r3, #12
 800615c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006160:	61fa      	str	r2, [r7, #28]
 8006162:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006164:	69b9      	ldr	r1, [r7, #24]
 8006166:	69fa      	ldr	r2, [r7, #28]
 8006168:	e841 2300 	strex	r3, r2, [r1]
 800616c:	617b      	str	r3, [r7, #20]
   return(result);
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1e3      	bne.n	800613c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006174:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006178:	4619      	mov	r1, r3
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 f83e 	bl	80061fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006180:	e023      	b.n	80061ca <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800618a:	2b00      	cmp	r3, #0
 800618c:	d009      	beq.n	80061a2 <HAL_UART_IRQHandler+0x4ea>
 800618e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006196:	2b00      	cmp	r3, #0
 8006198:	d003      	beq.n	80061a2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f959 	bl	8006452 <UART_Transmit_IT>
    return;
 80061a0:	e014      	b.n	80061cc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80061a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00e      	beq.n	80061cc <HAL_UART_IRQHandler+0x514>
 80061ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d008      	beq.n	80061cc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 f999 	bl	80064f2 <UART_EndTransmit_IT>
    return;
 80061c0:	e004      	b.n	80061cc <HAL_UART_IRQHandler+0x514>
    return;
 80061c2:	bf00      	nop
 80061c4:	e002      	b.n	80061cc <HAL_UART_IRQHandler+0x514>
      return;
 80061c6:	bf00      	nop
 80061c8:	e000      	b.n	80061cc <HAL_UART_IRQHandler+0x514>
      return;
 80061ca:	bf00      	nop
  }
}
 80061cc:	37e8      	adds	r7, #232	; 0xe8
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop

080061d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80061dc:	bf00      	nop
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80061f0:	bf00      	nop
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	460b      	mov	r3, r1
 8006206:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006208:	bf00      	nop
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b090      	sub	sp, #64	; 0x40
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	603b      	str	r3, [r7, #0]
 8006220:	4613      	mov	r3, r2
 8006222:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006224:	e050      	b.n	80062c8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006226:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800622c:	d04c      	beq.n	80062c8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800622e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006230:	2b00      	cmp	r3, #0
 8006232:	d007      	beq.n	8006244 <UART_WaitOnFlagUntilTimeout+0x30>
 8006234:	f7fc fcb8 	bl	8002ba8 <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006240:	429a      	cmp	r2, r3
 8006242:	d241      	bcs.n	80062c8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	330c      	adds	r3, #12
 800624a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800624c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800624e:	e853 3f00 	ldrex	r3, [r3]
 8006252:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006256:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800625a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	330c      	adds	r3, #12
 8006262:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006264:	637a      	str	r2, [r7, #52]	; 0x34
 8006266:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006268:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800626a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800626c:	e841 2300 	strex	r3, r2, [r1]
 8006270:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006274:	2b00      	cmp	r3, #0
 8006276:	d1e5      	bne.n	8006244 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	3314      	adds	r3, #20
 800627e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	e853 3f00 	ldrex	r3, [r3]
 8006286:	613b      	str	r3, [r7, #16]
   return(result);
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	f023 0301 	bic.w	r3, r3, #1
 800628e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	3314      	adds	r3, #20
 8006296:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006298:	623a      	str	r2, [r7, #32]
 800629a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800629c:	69f9      	ldr	r1, [r7, #28]
 800629e:	6a3a      	ldr	r2, [r7, #32]
 80062a0:	e841 2300 	strex	r3, r2, [r1]
 80062a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d1e5      	bne.n	8006278 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2220      	movs	r2, #32
 80062b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2220      	movs	r2, #32
 80062b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2200      	movs	r2, #0
 80062c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80062c4:	2303      	movs	r3, #3
 80062c6:	e00f      	b.n	80062e8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	4013      	ands	r3, r2
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	bf0c      	ite	eq
 80062d8:	2301      	moveq	r3, #1
 80062da:	2300      	movne	r3, #0
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	461a      	mov	r2, r3
 80062e0:	79fb      	ldrb	r3, [r7, #7]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d09f      	beq.n	8006226 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80062e6:	2300      	movs	r3, #0
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3740      	adds	r7, #64	; 0x40
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b085      	sub	sp, #20
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	4613      	mov	r3, r2
 80062fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	68ba      	ldr	r2, [r7, #8]
 8006302:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	88fa      	ldrh	r2, [r7, #6]
 8006308:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	88fa      	ldrh	r2, [r7, #6]
 800630e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2222      	movs	r2, #34	; 0x22
 800631a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68da      	ldr	r2, [r3, #12]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006334:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	695a      	ldr	r2, [r3, #20]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f042 0201 	orr.w	r2, r2, #1
 8006344:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68da      	ldr	r2, [r3, #12]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f042 0220 	orr.w	r2, r2, #32
 8006354:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006356:	2300      	movs	r3, #0
}
 8006358:	4618      	mov	r0, r3
 800635a:	3714      	adds	r7, #20
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006364:	b480      	push	{r7}
 8006366:	b095      	sub	sp, #84	; 0x54
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	330c      	adds	r3, #12
 8006372:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006376:	e853 3f00 	ldrex	r3, [r3]
 800637a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800637c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006382:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	330c      	adds	r3, #12
 800638a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800638c:	643a      	str	r2, [r7, #64]	; 0x40
 800638e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006390:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006392:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006394:	e841 2300 	strex	r3, r2, [r1]
 8006398:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800639a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800639c:	2b00      	cmp	r3, #0
 800639e:	d1e5      	bne.n	800636c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	3314      	adds	r3, #20
 80063a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a8:	6a3b      	ldr	r3, [r7, #32]
 80063aa:	e853 3f00 	ldrex	r3, [r3]
 80063ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	f023 0301 	bic.w	r3, r3, #1
 80063b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	3314      	adds	r3, #20
 80063be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063c8:	e841 2300 	strex	r3, r2, [r1]
 80063cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d1e5      	bne.n	80063a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d119      	bne.n	8006410 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	330c      	adds	r3, #12
 80063e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	e853 3f00 	ldrex	r3, [r3]
 80063ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	f023 0310 	bic.w	r3, r3, #16
 80063f2:	647b      	str	r3, [r7, #68]	; 0x44
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	330c      	adds	r3, #12
 80063fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063fc:	61ba      	str	r2, [r7, #24]
 80063fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006400:	6979      	ldr	r1, [r7, #20]
 8006402:	69ba      	ldr	r2, [r7, #24]
 8006404:	e841 2300 	strex	r3, r2, [r1]
 8006408:	613b      	str	r3, [r7, #16]
   return(result);
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1e5      	bne.n	80063dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2220      	movs	r2, #32
 8006414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800641e:	bf00      	nop
 8006420:	3754      	adds	r7, #84	; 0x54
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr

0800642a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800642a:	b580      	push	{r7, lr}
 800642c:	b084      	sub	sp, #16
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006436:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2200      	movs	r2, #0
 800643c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2200      	movs	r2, #0
 8006442:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006444:	68f8      	ldr	r0, [r7, #12]
 8006446:	f7ff fecf 	bl	80061e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800644a:	bf00      	nop
 800644c:	3710      	adds	r7, #16
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}

08006452 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006452:	b480      	push	{r7}
 8006454:	b085      	sub	sp, #20
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006460:	b2db      	uxtb	r3, r3
 8006462:	2b21      	cmp	r3, #33	; 0x21
 8006464:	d13e      	bne.n	80064e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800646e:	d114      	bne.n	800649a <UART_Transmit_IT+0x48>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d110      	bne.n	800649a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6a1b      	ldr	r3, [r3, #32]
 800647c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	881b      	ldrh	r3, [r3, #0]
 8006482:	461a      	mov	r2, r3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800648c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a1b      	ldr	r3, [r3, #32]
 8006492:	1c9a      	adds	r2, r3, #2
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	621a      	str	r2, [r3, #32]
 8006498:	e008      	b.n	80064ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a1b      	ldr	r3, [r3, #32]
 800649e:	1c59      	adds	r1, r3, #1
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	6211      	str	r1, [r2, #32]
 80064a4:	781a      	ldrb	r2, [r3, #0]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	3b01      	subs	r3, #1
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	4619      	mov	r1, r3
 80064ba:	84d1      	strh	r1, [r2, #38]	; 0x26
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d10f      	bne.n	80064e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68da      	ldr	r2, [r3, #12]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68da      	ldr	r2, [r3, #12]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80064e0:	2300      	movs	r3, #0
 80064e2:	e000      	b.n	80064e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80064e4:	2302      	movs	r3, #2
  }
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3714      	adds	r7, #20
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr

080064f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b082      	sub	sp, #8
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	68da      	ldr	r2, [r3, #12]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006508:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2220      	movs	r2, #32
 800650e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f7ff fe5e 	bl	80061d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	3708      	adds	r7, #8
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}

08006522 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006522:	b580      	push	{r7, lr}
 8006524:	b08c      	sub	sp, #48	; 0x30
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006530:	b2db      	uxtb	r3, r3
 8006532:	2b22      	cmp	r3, #34	; 0x22
 8006534:	f040 80ab 	bne.w	800668e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006540:	d117      	bne.n	8006572 <UART_Receive_IT+0x50>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d113      	bne.n	8006572 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800654a:	2300      	movs	r3, #0
 800654c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006552:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	b29b      	uxth	r3, r3
 800655c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006560:	b29a      	uxth	r2, r3
 8006562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006564:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800656a:	1c9a      	adds	r2, r3, #2
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	629a      	str	r2, [r3, #40]	; 0x28
 8006570:	e026      	b.n	80065c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006576:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006578:	2300      	movs	r3, #0
 800657a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006584:	d007      	beq.n	8006596 <UART_Receive_IT+0x74>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d10a      	bne.n	80065a4 <UART_Receive_IT+0x82>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d106      	bne.n	80065a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	b2da      	uxtb	r2, r3
 800659e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a0:	701a      	strb	r2, [r3, #0]
 80065a2:	e008      	b.n	80065b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065b0:	b2da      	uxtb	r2, r3
 80065b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ba:	1c5a      	adds	r2, r3, #1
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	3b01      	subs	r3, #1
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	4619      	mov	r1, r3
 80065ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d15a      	bne.n	800668a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68da      	ldr	r2, [r3, #12]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f022 0220 	bic.w	r2, r2, #32
 80065e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	68da      	ldr	r2, [r3, #12]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	695a      	ldr	r2, [r3, #20]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f022 0201 	bic.w	r2, r2, #1
 8006602:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2220      	movs	r2, #32
 8006608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006610:	2b01      	cmp	r3, #1
 8006612:	d135      	bne.n	8006680 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	330c      	adds	r3, #12
 8006620:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	e853 3f00 	ldrex	r3, [r3]
 8006628:	613b      	str	r3, [r7, #16]
   return(result);
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	f023 0310 	bic.w	r3, r3, #16
 8006630:	627b      	str	r3, [r7, #36]	; 0x24
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	330c      	adds	r3, #12
 8006638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800663a:	623a      	str	r2, [r7, #32]
 800663c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663e:	69f9      	ldr	r1, [r7, #28]
 8006640:	6a3a      	ldr	r2, [r7, #32]
 8006642:	e841 2300 	strex	r3, r2, [r1]
 8006646:	61bb      	str	r3, [r7, #24]
   return(result);
 8006648:	69bb      	ldr	r3, [r7, #24]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d1e5      	bne.n	800661a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 0310 	and.w	r3, r3, #16
 8006658:	2b10      	cmp	r3, #16
 800665a:	d10a      	bne.n	8006672 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800665c:	2300      	movs	r3, #0
 800665e:	60fb      	str	r3, [r7, #12]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	60fb      	str	r3, [r7, #12]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	60fb      	str	r3, [r7, #12]
 8006670:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006676:	4619      	mov	r1, r3
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f7ff fdbf 	bl	80061fc <HAL_UARTEx_RxEventCallback>
 800667e:	e002      	b.n	8006686 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f7fb fe15 	bl	80022b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006686:	2300      	movs	r3, #0
 8006688:	e002      	b.n	8006690 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800668a:	2300      	movs	r3, #0
 800668c:	e000      	b.n	8006690 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800668e:	2302      	movs	r3, #2
  }
}
 8006690:	4618      	mov	r0, r3
 8006692:	3730      	adds	r7, #48	; 0x30
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800669c:	b09f      	sub	sp, #124	; 0x7c
 800669e:	af00      	add	r7, sp, #0
 80066a0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	691b      	ldr	r3, [r3, #16]
 80066a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80066ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066ae:	68d9      	ldr	r1, [r3, #12]
 80066b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	ea40 0301 	orr.w	r3, r0, r1
 80066b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80066ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066bc:	689a      	ldr	r2, [r3, #8]
 80066be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	431a      	orrs	r2, r3
 80066c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066c6:	695b      	ldr	r3, [r3, #20]
 80066c8:	431a      	orrs	r2, r3
 80066ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066cc:	69db      	ldr	r3, [r3, #28]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80066d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80066dc:	f021 010c 	bic.w	r1, r1, #12
 80066e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066e6:	430b      	orrs	r3, r1
 80066e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80066ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	695b      	ldr	r3, [r3, #20]
 80066f0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80066f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066f6:	6999      	ldr	r1, [r3, #24]
 80066f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	ea40 0301 	orr.w	r3, r0, r1
 8006700:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	4bc5      	ldr	r3, [pc, #788]	; (8006a1c <UART_SetConfig+0x384>)
 8006708:	429a      	cmp	r2, r3
 800670a:	d004      	beq.n	8006716 <UART_SetConfig+0x7e>
 800670c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	4bc3      	ldr	r3, [pc, #780]	; (8006a20 <UART_SetConfig+0x388>)
 8006712:	429a      	cmp	r2, r3
 8006714:	d103      	bne.n	800671e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006716:	f7fe f9e7 	bl	8004ae8 <HAL_RCC_GetPCLK2Freq>
 800671a:	6778      	str	r0, [r7, #116]	; 0x74
 800671c:	e002      	b.n	8006724 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800671e:	f7fe f9cf 	bl	8004ac0 <HAL_RCC_GetPCLK1Freq>
 8006722:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006724:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006726:	69db      	ldr	r3, [r3, #28]
 8006728:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800672c:	f040 80b6 	bne.w	800689c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006730:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006732:	461c      	mov	r4, r3
 8006734:	f04f 0500 	mov.w	r5, #0
 8006738:	4622      	mov	r2, r4
 800673a:	462b      	mov	r3, r5
 800673c:	1891      	adds	r1, r2, r2
 800673e:	6439      	str	r1, [r7, #64]	; 0x40
 8006740:	415b      	adcs	r3, r3
 8006742:	647b      	str	r3, [r7, #68]	; 0x44
 8006744:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006748:	1912      	adds	r2, r2, r4
 800674a:	eb45 0303 	adc.w	r3, r5, r3
 800674e:	f04f 0000 	mov.w	r0, #0
 8006752:	f04f 0100 	mov.w	r1, #0
 8006756:	00d9      	lsls	r1, r3, #3
 8006758:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800675c:	00d0      	lsls	r0, r2, #3
 800675e:	4602      	mov	r2, r0
 8006760:	460b      	mov	r3, r1
 8006762:	1911      	adds	r1, r2, r4
 8006764:	6639      	str	r1, [r7, #96]	; 0x60
 8006766:	416b      	adcs	r3, r5
 8006768:	667b      	str	r3, [r7, #100]	; 0x64
 800676a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	461a      	mov	r2, r3
 8006770:	f04f 0300 	mov.w	r3, #0
 8006774:	1891      	adds	r1, r2, r2
 8006776:	63b9      	str	r1, [r7, #56]	; 0x38
 8006778:	415b      	adcs	r3, r3
 800677a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800677c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006780:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006784:	f7fa fa18 	bl	8000bb8 <__aeabi_uldivmod>
 8006788:	4602      	mov	r2, r0
 800678a:	460b      	mov	r3, r1
 800678c:	4ba5      	ldr	r3, [pc, #660]	; (8006a24 <UART_SetConfig+0x38c>)
 800678e:	fba3 2302 	umull	r2, r3, r3, r2
 8006792:	095b      	lsrs	r3, r3, #5
 8006794:	011e      	lsls	r6, r3, #4
 8006796:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006798:	461c      	mov	r4, r3
 800679a:	f04f 0500 	mov.w	r5, #0
 800679e:	4622      	mov	r2, r4
 80067a0:	462b      	mov	r3, r5
 80067a2:	1891      	adds	r1, r2, r2
 80067a4:	6339      	str	r1, [r7, #48]	; 0x30
 80067a6:	415b      	adcs	r3, r3
 80067a8:	637b      	str	r3, [r7, #52]	; 0x34
 80067aa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80067ae:	1912      	adds	r2, r2, r4
 80067b0:	eb45 0303 	adc.w	r3, r5, r3
 80067b4:	f04f 0000 	mov.w	r0, #0
 80067b8:	f04f 0100 	mov.w	r1, #0
 80067bc:	00d9      	lsls	r1, r3, #3
 80067be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80067c2:	00d0      	lsls	r0, r2, #3
 80067c4:	4602      	mov	r2, r0
 80067c6:	460b      	mov	r3, r1
 80067c8:	1911      	adds	r1, r2, r4
 80067ca:	65b9      	str	r1, [r7, #88]	; 0x58
 80067cc:	416b      	adcs	r3, r5
 80067ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	461a      	mov	r2, r3
 80067d6:	f04f 0300 	mov.w	r3, #0
 80067da:	1891      	adds	r1, r2, r2
 80067dc:	62b9      	str	r1, [r7, #40]	; 0x28
 80067de:	415b      	adcs	r3, r3
 80067e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80067e6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80067ea:	f7fa f9e5 	bl	8000bb8 <__aeabi_uldivmod>
 80067ee:	4602      	mov	r2, r0
 80067f0:	460b      	mov	r3, r1
 80067f2:	4b8c      	ldr	r3, [pc, #560]	; (8006a24 <UART_SetConfig+0x38c>)
 80067f4:	fba3 1302 	umull	r1, r3, r3, r2
 80067f8:	095b      	lsrs	r3, r3, #5
 80067fa:	2164      	movs	r1, #100	; 0x64
 80067fc:	fb01 f303 	mul.w	r3, r1, r3
 8006800:	1ad3      	subs	r3, r2, r3
 8006802:	00db      	lsls	r3, r3, #3
 8006804:	3332      	adds	r3, #50	; 0x32
 8006806:	4a87      	ldr	r2, [pc, #540]	; (8006a24 <UART_SetConfig+0x38c>)
 8006808:	fba2 2303 	umull	r2, r3, r2, r3
 800680c:	095b      	lsrs	r3, r3, #5
 800680e:	005b      	lsls	r3, r3, #1
 8006810:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006814:	441e      	add	r6, r3
 8006816:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006818:	4618      	mov	r0, r3
 800681a:	f04f 0100 	mov.w	r1, #0
 800681e:	4602      	mov	r2, r0
 8006820:	460b      	mov	r3, r1
 8006822:	1894      	adds	r4, r2, r2
 8006824:	623c      	str	r4, [r7, #32]
 8006826:	415b      	adcs	r3, r3
 8006828:	627b      	str	r3, [r7, #36]	; 0x24
 800682a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800682e:	1812      	adds	r2, r2, r0
 8006830:	eb41 0303 	adc.w	r3, r1, r3
 8006834:	f04f 0400 	mov.w	r4, #0
 8006838:	f04f 0500 	mov.w	r5, #0
 800683c:	00dd      	lsls	r5, r3, #3
 800683e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006842:	00d4      	lsls	r4, r2, #3
 8006844:	4622      	mov	r2, r4
 8006846:	462b      	mov	r3, r5
 8006848:	1814      	adds	r4, r2, r0
 800684a:	653c      	str	r4, [r7, #80]	; 0x50
 800684c:	414b      	adcs	r3, r1
 800684e:	657b      	str	r3, [r7, #84]	; 0x54
 8006850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	461a      	mov	r2, r3
 8006856:	f04f 0300 	mov.w	r3, #0
 800685a:	1891      	adds	r1, r2, r2
 800685c:	61b9      	str	r1, [r7, #24]
 800685e:	415b      	adcs	r3, r3
 8006860:	61fb      	str	r3, [r7, #28]
 8006862:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006866:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800686a:	f7fa f9a5 	bl	8000bb8 <__aeabi_uldivmod>
 800686e:	4602      	mov	r2, r0
 8006870:	460b      	mov	r3, r1
 8006872:	4b6c      	ldr	r3, [pc, #432]	; (8006a24 <UART_SetConfig+0x38c>)
 8006874:	fba3 1302 	umull	r1, r3, r3, r2
 8006878:	095b      	lsrs	r3, r3, #5
 800687a:	2164      	movs	r1, #100	; 0x64
 800687c:	fb01 f303 	mul.w	r3, r1, r3
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	00db      	lsls	r3, r3, #3
 8006884:	3332      	adds	r3, #50	; 0x32
 8006886:	4a67      	ldr	r2, [pc, #412]	; (8006a24 <UART_SetConfig+0x38c>)
 8006888:	fba2 2303 	umull	r2, r3, r2, r3
 800688c:	095b      	lsrs	r3, r3, #5
 800688e:	f003 0207 	and.w	r2, r3, #7
 8006892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4432      	add	r2, r6
 8006898:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800689a:	e0b9      	b.n	8006a10 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800689c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800689e:	461c      	mov	r4, r3
 80068a0:	f04f 0500 	mov.w	r5, #0
 80068a4:	4622      	mov	r2, r4
 80068a6:	462b      	mov	r3, r5
 80068a8:	1891      	adds	r1, r2, r2
 80068aa:	6139      	str	r1, [r7, #16]
 80068ac:	415b      	adcs	r3, r3
 80068ae:	617b      	str	r3, [r7, #20]
 80068b0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80068b4:	1912      	adds	r2, r2, r4
 80068b6:	eb45 0303 	adc.w	r3, r5, r3
 80068ba:	f04f 0000 	mov.w	r0, #0
 80068be:	f04f 0100 	mov.w	r1, #0
 80068c2:	00d9      	lsls	r1, r3, #3
 80068c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80068c8:	00d0      	lsls	r0, r2, #3
 80068ca:	4602      	mov	r2, r0
 80068cc:	460b      	mov	r3, r1
 80068ce:	eb12 0804 	adds.w	r8, r2, r4
 80068d2:	eb43 0905 	adc.w	r9, r3, r5
 80068d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	4618      	mov	r0, r3
 80068dc:	f04f 0100 	mov.w	r1, #0
 80068e0:	f04f 0200 	mov.w	r2, #0
 80068e4:	f04f 0300 	mov.w	r3, #0
 80068e8:	008b      	lsls	r3, r1, #2
 80068ea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80068ee:	0082      	lsls	r2, r0, #2
 80068f0:	4640      	mov	r0, r8
 80068f2:	4649      	mov	r1, r9
 80068f4:	f7fa f960 	bl	8000bb8 <__aeabi_uldivmod>
 80068f8:	4602      	mov	r2, r0
 80068fa:	460b      	mov	r3, r1
 80068fc:	4b49      	ldr	r3, [pc, #292]	; (8006a24 <UART_SetConfig+0x38c>)
 80068fe:	fba3 2302 	umull	r2, r3, r3, r2
 8006902:	095b      	lsrs	r3, r3, #5
 8006904:	011e      	lsls	r6, r3, #4
 8006906:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006908:	4618      	mov	r0, r3
 800690a:	f04f 0100 	mov.w	r1, #0
 800690e:	4602      	mov	r2, r0
 8006910:	460b      	mov	r3, r1
 8006912:	1894      	adds	r4, r2, r2
 8006914:	60bc      	str	r4, [r7, #8]
 8006916:	415b      	adcs	r3, r3
 8006918:	60fb      	str	r3, [r7, #12]
 800691a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800691e:	1812      	adds	r2, r2, r0
 8006920:	eb41 0303 	adc.w	r3, r1, r3
 8006924:	f04f 0400 	mov.w	r4, #0
 8006928:	f04f 0500 	mov.w	r5, #0
 800692c:	00dd      	lsls	r5, r3, #3
 800692e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006932:	00d4      	lsls	r4, r2, #3
 8006934:	4622      	mov	r2, r4
 8006936:	462b      	mov	r3, r5
 8006938:	1814      	adds	r4, r2, r0
 800693a:	64bc      	str	r4, [r7, #72]	; 0x48
 800693c:	414b      	adcs	r3, r1
 800693e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006940:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	4618      	mov	r0, r3
 8006946:	f04f 0100 	mov.w	r1, #0
 800694a:	f04f 0200 	mov.w	r2, #0
 800694e:	f04f 0300 	mov.w	r3, #0
 8006952:	008b      	lsls	r3, r1, #2
 8006954:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006958:	0082      	lsls	r2, r0, #2
 800695a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800695e:	f7fa f92b 	bl	8000bb8 <__aeabi_uldivmod>
 8006962:	4602      	mov	r2, r0
 8006964:	460b      	mov	r3, r1
 8006966:	4b2f      	ldr	r3, [pc, #188]	; (8006a24 <UART_SetConfig+0x38c>)
 8006968:	fba3 1302 	umull	r1, r3, r3, r2
 800696c:	095b      	lsrs	r3, r3, #5
 800696e:	2164      	movs	r1, #100	; 0x64
 8006970:	fb01 f303 	mul.w	r3, r1, r3
 8006974:	1ad3      	subs	r3, r2, r3
 8006976:	011b      	lsls	r3, r3, #4
 8006978:	3332      	adds	r3, #50	; 0x32
 800697a:	4a2a      	ldr	r2, [pc, #168]	; (8006a24 <UART_SetConfig+0x38c>)
 800697c:	fba2 2303 	umull	r2, r3, r2, r3
 8006980:	095b      	lsrs	r3, r3, #5
 8006982:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006986:	441e      	add	r6, r3
 8006988:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800698a:	4618      	mov	r0, r3
 800698c:	f04f 0100 	mov.w	r1, #0
 8006990:	4602      	mov	r2, r0
 8006992:	460b      	mov	r3, r1
 8006994:	1894      	adds	r4, r2, r2
 8006996:	603c      	str	r4, [r7, #0]
 8006998:	415b      	adcs	r3, r3
 800699a:	607b      	str	r3, [r7, #4]
 800699c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069a0:	1812      	adds	r2, r2, r0
 80069a2:	eb41 0303 	adc.w	r3, r1, r3
 80069a6:	f04f 0400 	mov.w	r4, #0
 80069aa:	f04f 0500 	mov.w	r5, #0
 80069ae:	00dd      	lsls	r5, r3, #3
 80069b0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80069b4:	00d4      	lsls	r4, r2, #3
 80069b6:	4622      	mov	r2, r4
 80069b8:	462b      	mov	r3, r5
 80069ba:	eb12 0a00 	adds.w	sl, r2, r0
 80069be:	eb43 0b01 	adc.w	fp, r3, r1
 80069c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	4618      	mov	r0, r3
 80069c8:	f04f 0100 	mov.w	r1, #0
 80069cc:	f04f 0200 	mov.w	r2, #0
 80069d0:	f04f 0300 	mov.w	r3, #0
 80069d4:	008b      	lsls	r3, r1, #2
 80069d6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80069da:	0082      	lsls	r2, r0, #2
 80069dc:	4650      	mov	r0, sl
 80069de:	4659      	mov	r1, fp
 80069e0:	f7fa f8ea 	bl	8000bb8 <__aeabi_uldivmod>
 80069e4:	4602      	mov	r2, r0
 80069e6:	460b      	mov	r3, r1
 80069e8:	4b0e      	ldr	r3, [pc, #56]	; (8006a24 <UART_SetConfig+0x38c>)
 80069ea:	fba3 1302 	umull	r1, r3, r3, r2
 80069ee:	095b      	lsrs	r3, r3, #5
 80069f0:	2164      	movs	r1, #100	; 0x64
 80069f2:	fb01 f303 	mul.w	r3, r1, r3
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	011b      	lsls	r3, r3, #4
 80069fa:	3332      	adds	r3, #50	; 0x32
 80069fc:	4a09      	ldr	r2, [pc, #36]	; (8006a24 <UART_SetConfig+0x38c>)
 80069fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006a02:	095b      	lsrs	r3, r3, #5
 8006a04:	f003 020f 	and.w	r2, r3, #15
 8006a08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4432      	add	r2, r6
 8006a0e:	609a      	str	r2, [r3, #8]
}
 8006a10:	bf00      	nop
 8006a12:	377c      	adds	r7, #124	; 0x7c
 8006a14:	46bd      	mov	sp, r7
 8006a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a1a:	bf00      	nop
 8006a1c:	40011000 	.word	0x40011000
 8006a20:	40011400 	.word	0x40011400
 8006a24:	51eb851f 	.word	0x51eb851f

08006a28 <__errno>:
 8006a28:	4b01      	ldr	r3, [pc, #4]	; (8006a30 <__errno+0x8>)
 8006a2a:	6818      	ldr	r0, [r3, #0]
 8006a2c:	4770      	bx	lr
 8006a2e:	bf00      	nop
 8006a30:	2000000c 	.word	0x2000000c

08006a34 <__libc_init_array>:
 8006a34:	b570      	push	{r4, r5, r6, lr}
 8006a36:	4d0d      	ldr	r5, [pc, #52]	; (8006a6c <__libc_init_array+0x38>)
 8006a38:	4c0d      	ldr	r4, [pc, #52]	; (8006a70 <__libc_init_array+0x3c>)
 8006a3a:	1b64      	subs	r4, r4, r5
 8006a3c:	10a4      	asrs	r4, r4, #2
 8006a3e:	2600      	movs	r6, #0
 8006a40:	42a6      	cmp	r6, r4
 8006a42:	d109      	bne.n	8006a58 <__libc_init_array+0x24>
 8006a44:	4d0b      	ldr	r5, [pc, #44]	; (8006a74 <__libc_init_array+0x40>)
 8006a46:	4c0c      	ldr	r4, [pc, #48]	; (8006a78 <__libc_init_array+0x44>)
 8006a48:	f003 f9fe 	bl	8009e48 <_init>
 8006a4c:	1b64      	subs	r4, r4, r5
 8006a4e:	10a4      	asrs	r4, r4, #2
 8006a50:	2600      	movs	r6, #0
 8006a52:	42a6      	cmp	r6, r4
 8006a54:	d105      	bne.n	8006a62 <__libc_init_array+0x2e>
 8006a56:	bd70      	pop	{r4, r5, r6, pc}
 8006a58:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a5c:	4798      	blx	r3
 8006a5e:	3601      	adds	r6, #1
 8006a60:	e7ee      	b.n	8006a40 <__libc_init_array+0xc>
 8006a62:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a66:	4798      	blx	r3
 8006a68:	3601      	adds	r6, #1
 8006a6a:	e7f2      	b.n	8006a52 <__libc_init_array+0x1e>
 8006a6c:	0800a3cc 	.word	0x0800a3cc
 8006a70:	0800a3cc 	.word	0x0800a3cc
 8006a74:	0800a3cc 	.word	0x0800a3cc
 8006a78:	0800a3d0 	.word	0x0800a3d0

08006a7c <memset>:
 8006a7c:	4402      	add	r2, r0
 8006a7e:	4603      	mov	r3, r0
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d100      	bne.n	8006a86 <memset+0xa>
 8006a84:	4770      	bx	lr
 8006a86:	f803 1b01 	strb.w	r1, [r3], #1
 8006a8a:	e7f9      	b.n	8006a80 <memset+0x4>

08006a8c <__cvt>:
 8006a8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a90:	ec55 4b10 	vmov	r4, r5, d0
 8006a94:	2d00      	cmp	r5, #0
 8006a96:	460e      	mov	r6, r1
 8006a98:	4619      	mov	r1, r3
 8006a9a:	462b      	mov	r3, r5
 8006a9c:	bfbb      	ittet	lt
 8006a9e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006aa2:	461d      	movlt	r5, r3
 8006aa4:	2300      	movge	r3, #0
 8006aa6:	232d      	movlt	r3, #45	; 0x2d
 8006aa8:	700b      	strb	r3, [r1, #0]
 8006aaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006aac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006ab0:	4691      	mov	r9, r2
 8006ab2:	f023 0820 	bic.w	r8, r3, #32
 8006ab6:	bfbc      	itt	lt
 8006ab8:	4622      	movlt	r2, r4
 8006aba:	4614      	movlt	r4, r2
 8006abc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006ac0:	d005      	beq.n	8006ace <__cvt+0x42>
 8006ac2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006ac6:	d100      	bne.n	8006aca <__cvt+0x3e>
 8006ac8:	3601      	adds	r6, #1
 8006aca:	2102      	movs	r1, #2
 8006acc:	e000      	b.n	8006ad0 <__cvt+0x44>
 8006ace:	2103      	movs	r1, #3
 8006ad0:	ab03      	add	r3, sp, #12
 8006ad2:	9301      	str	r3, [sp, #4]
 8006ad4:	ab02      	add	r3, sp, #8
 8006ad6:	9300      	str	r3, [sp, #0]
 8006ad8:	ec45 4b10 	vmov	d0, r4, r5
 8006adc:	4653      	mov	r3, sl
 8006ade:	4632      	mov	r2, r6
 8006ae0:	f000 fcea 	bl	80074b8 <_dtoa_r>
 8006ae4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006ae8:	4607      	mov	r7, r0
 8006aea:	d102      	bne.n	8006af2 <__cvt+0x66>
 8006aec:	f019 0f01 	tst.w	r9, #1
 8006af0:	d022      	beq.n	8006b38 <__cvt+0xac>
 8006af2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006af6:	eb07 0906 	add.w	r9, r7, r6
 8006afa:	d110      	bne.n	8006b1e <__cvt+0x92>
 8006afc:	783b      	ldrb	r3, [r7, #0]
 8006afe:	2b30      	cmp	r3, #48	; 0x30
 8006b00:	d10a      	bne.n	8006b18 <__cvt+0x8c>
 8006b02:	2200      	movs	r2, #0
 8006b04:	2300      	movs	r3, #0
 8006b06:	4620      	mov	r0, r4
 8006b08:	4629      	mov	r1, r5
 8006b0a:	f7f9 ffe5 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b0e:	b918      	cbnz	r0, 8006b18 <__cvt+0x8c>
 8006b10:	f1c6 0601 	rsb	r6, r6, #1
 8006b14:	f8ca 6000 	str.w	r6, [sl]
 8006b18:	f8da 3000 	ldr.w	r3, [sl]
 8006b1c:	4499      	add	r9, r3
 8006b1e:	2200      	movs	r2, #0
 8006b20:	2300      	movs	r3, #0
 8006b22:	4620      	mov	r0, r4
 8006b24:	4629      	mov	r1, r5
 8006b26:	f7f9 ffd7 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b2a:	b108      	cbz	r0, 8006b30 <__cvt+0xa4>
 8006b2c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006b30:	2230      	movs	r2, #48	; 0x30
 8006b32:	9b03      	ldr	r3, [sp, #12]
 8006b34:	454b      	cmp	r3, r9
 8006b36:	d307      	bcc.n	8006b48 <__cvt+0xbc>
 8006b38:	9b03      	ldr	r3, [sp, #12]
 8006b3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b3c:	1bdb      	subs	r3, r3, r7
 8006b3e:	4638      	mov	r0, r7
 8006b40:	6013      	str	r3, [r2, #0]
 8006b42:	b004      	add	sp, #16
 8006b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b48:	1c59      	adds	r1, r3, #1
 8006b4a:	9103      	str	r1, [sp, #12]
 8006b4c:	701a      	strb	r2, [r3, #0]
 8006b4e:	e7f0      	b.n	8006b32 <__cvt+0xa6>

08006b50 <__exponent>:
 8006b50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b52:	4603      	mov	r3, r0
 8006b54:	2900      	cmp	r1, #0
 8006b56:	bfb8      	it	lt
 8006b58:	4249      	neglt	r1, r1
 8006b5a:	f803 2b02 	strb.w	r2, [r3], #2
 8006b5e:	bfb4      	ite	lt
 8006b60:	222d      	movlt	r2, #45	; 0x2d
 8006b62:	222b      	movge	r2, #43	; 0x2b
 8006b64:	2909      	cmp	r1, #9
 8006b66:	7042      	strb	r2, [r0, #1]
 8006b68:	dd2a      	ble.n	8006bc0 <__exponent+0x70>
 8006b6a:	f10d 0407 	add.w	r4, sp, #7
 8006b6e:	46a4      	mov	ip, r4
 8006b70:	270a      	movs	r7, #10
 8006b72:	46a6      	mov	lr, r4
 8006b74:	460a      	mov	r2, r1
 8006b76:	fb91 f6f7 	sdiv	r6, r1, r7
 8006b7a:	fb07 1516 	mls	r5, r7, r6, r1
 8006b7e:	3530      	adds	r5, #48	; 0x30
 8006b80:	2a63      	cmp	r2, #99	; 0x63
 8006b82:	f104 34ff 	add.w	r4, r4, #4294967295
 8006b86:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006b8a:	4631      	mov	r1, r6
 8006b8c:	dcf1      	bgt.n	8006b72 <__exponent+0x22>
 8006b8e:	3130      	adds	r1, #48	; 0x30
 8006b90:	f1ae 0502 	sub.w	r5, lr, #2
 8006b94:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006b98:	1c44      	adds	r4, r0, #1
 8006b9a:	4629      	mov	r1, r5
 8006b9c:	4561      	cmp	r1, ip
 8006b9e:	d30a      	bcc.n	8006bb6 <__exponent+0x66>
 8006ba0:	f10d 0209 	add.w	r2, sp, #9
 8006ba4:	eba2 020e 	sub.w	r2, r2, lr
 8006ba8:	4565      	cmp	r5, ip
 8006baa:	bf88      	it	hi
 8006bac:	2200      	movhi	r2, #0
 8006bae:	4413      	add	r3, r2
 8006bb0:	1a18      	subs	r0, r3, r0
 8006bb2:	b003      	add	sp, #12
 8006bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006bba:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006bbe:	e7ed      	b.n	8006b9c <__exponent+0x4c>
 8006bc0:	2330      	movs	r3, #48	; 0x30
 8006bc2:	3130      	adds	r1, #48	; 0x30
 8006bc4:	7083      	strb	r3, [r0, #2]
 8006bc6:	70c1      	strb	r1, [r0, #3]
 8006bc8:	1d03      	adds	r3, r0, #4
 8006bca:	e7f1      	b.n	8006bb0 <__exponent+0x60>

08006bcc <_printf_float>:
 8006bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bd0:	ed2d 8b02 	vpush	{d8}
 8006bd4:	b08d      	sub	sp, #52	; 0x34
 8006bd6:	460c      	mov	r4, r1
 8006bd8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006bdc:	4616      	mov	r6, r2
 8006bde:	461f      	mov	r7, r3
 8006be0:	4605      	mov	r5, r0
 8006be2:	f001 fa55 	bl	8008090 <_localeconv_r>
 8006be6:	f8d0 a000 	ldr.w	sl, [r0]
 8006bea:	4650      	mov	r0, sl
 8006bec:	f7f9 faf8 	bl	80001e0 <strlen>
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	930a      	str	r3, [sp, #40]	; 0x28
 8006bf4:	6823      	ldr	r3, [r4, #0]
 8006bf6:	9305      	str	r3, [sp, #20]
 8006bf8:	f8d8 3000 	ldr.w	r3, [r8]
 8006bfc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006c00:	3307      	adds	r3, #7
 8006c02:	f023 0307 	bic.w	r3, r3, #7
 8006c06:	f103 0208 	add.w	r2, r3, #8
 8006c0a:	f8c8 2000 	str.w	r2, [r8]
 8006c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c12:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006c16:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006c1a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006c1e:	9307      	str	r3, [sp, #28]
 8006c20:	f8cd 8018 	str.w	r8, [sp, #24]
 8006c24:	ee08 0a10 	vmov	s16, r0
 8006c28:	4b9f      	ldr	r3, [pc, #636]	; (8006ea8 <_printf_float+0x2dc>)
 8006c2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c2e:	f04f 32ff 	mov.w	r2, #4294967295
 8006c32:	f7f9 ff83 	bl	8000b3c <__aeabi_dcmpun>
 8006c36:	bb88      	cbnz	r0, 8006c9c <_printf_float+0xd0>
 8006c38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c3c:	4b9a      	ldr	r3, [pc, #616]	; (8006ea8 <_printf_float+0x2dc>)
 8006c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8006c42:	f7f9 ff5d 	bl	8000b00 <__aeabi_dcmple>
 8006c46:	bb48      	cbnz	r0, 8006c9c <_printf_float+0xd0>
 8006c48:	2200      	movs	r2, #0
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	4640      	mov	r0, r8
 8006c4e:	4649      	mov	r1, r9
 8006c50:	f7f9 ff4c 	bl	8000aec <__aeabi_dcmplt>
 8006c54:	b110      	cbz	r0, 8006c5c <_printf_float+0x90>
 8006c56:	232d      	movs	r3, #45	; 0x2d
 8006c58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c5c:	4b93      	ldr	r3, [pc, #588]	; (8006eac <_printf_float+0x2e0>)
 8006c5e:	4894      	ldr	r0, [pc, #592]	; (8006eb0 <_printf_float+0x2e4>)
 8006c60:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006c64:	bf94      	ite	ls
 8006c66:	4698      	movls	r8, r3
 8006c68:	4680      	movhi	r8, r0
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	6123      	str	r3, [r4, #16]
 8006c6e:	9b05      	ldr	r3, [sp, #20]
 8006c70:	f023 0204 	bic.w	r2, r3, #4
 8006c74:	6022      	str	r2, [r4, #0]
 8006c76:	f04f 0900 	mov.w	r9, #0
 8006c7a:	9700      	str	r7, [sp, #0]
 8006c7c:	4633      	mov	r3, r6
 8006c7e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006c80:	4621      	mov	r1, r4
 8006c82:	4628      	mov	r0, r5
 8006c84:	f000 f9d8 	bl	8007038 <_printf_common>
 8006c88:	3001      	adds	r0, #1
 8006c8a:	f040 8090 	bne.w	8006dae <_printf_float+0x1e2>
 8006c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8006c92:	b00d      	add	sp, #52	; 0x34
 8006c94:	ecbd 8b02 	vpop	{d8}
 8006c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c9c:	4642      	mov	r2, r8
 8006c9e:	464b      	mov	r3, r9
 8006ca0:	4640      	mov	r0, r8
 8006ca2:	4649      	mov	r1, r9
 8006ca4:	f7f9 ff4a 	bl	8000b3c <__aeabi_dcmpun>
 8006ca8:	b140      	cbz	r0, 8006cbc <_printf_float+0xf0>
 8006caa:	464b      	mov	r3, r9
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	bfbc      	itt	lt
 8006cb0:	232d      	movlt	r3, #45	; 0x2d
 8006cb2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006cb6:	487f      	ldr	r0, [pc, #508]	; (8006eb4 <_printf_float+0x2e8>)
 8006cb8:	4b7f      	ldr	r3, [pc, #508]	; (8006eb8 <_printf_float+0x2ec>)
 8006cba:	e7d1      	b.n	8006c60 <_printf_float+0x94>
 8006cbc:	6863      	ldr	r3, [r4, #4]
 8006cbe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006cc2:	9206      	str	r2, [sp, #24]
 8006cc4:	1c5a      	adds	r2, r3, #1
 8006cc6:	d13f      	bne.n	8006d48 <_printf_float+0x17c>
 8006cc8:	2306      	movs	r3, #6
 8006cca:	6063      	str	r3, [r4, #4]
 8006ccc:	9b05      	ldr	r3, [sp, #20]
 8006cce:	6861      	ldr	r1, [r4, #4]
 8006cd0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	9303      	str	r3, [sp, #12]
 8006cd8:	ab0a      	add	r3, sp, #40	; 0x28
 8006cda:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006cde:	ab09      	add	r3, sp, #36	; 0x24
 8006ce0:	ec49 8b10 	vmov	d0, r8, r9
 8006ce4:	9300      	str	r3, [sp, #0]
 8006ce6:	6022      	str	r2, [r4, #0]
 8006ce8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006cec:	4628      	mov	r0, r5
 8006cee:	f7ff fecd 	bl	8006a8c <__cvt>
 8006cf2:	9b06      	ldr	r3, [sp, #24]
 8006cf4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006cf6:	2b47      	cmp	r3, #71	; 0x47
 8006cf8:	4680      	mov	r8, r0
 8006cfa:	d108      	bne.n	8006d0e <_printf_float+0x142>
 8006cfc:	1cc8      	adds	r0, r1, #3
 8006cfe:	db02      	blt.n	8006d06 <_printf_float+0x13a>
 8006d00:	6863      	ldr	r3, [r4, #4]
 8006d02:	4299      	cmp	r1, r3
 8006d04:	dd41      	ble.n	8006d8a <_printf_float+0x1be>
 8006d06:	f1ab 0b02 	sub.w	fp, fp, #2
 8006d0a:	fa5f fb8b 	uxtb.w	fp, fp
 8006d0e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006d12:	d820      	bhi.n	8006d56 <_printf_float+0x18a>
 8006d14:	3901      	subs	r1, #1
 8006d16:	465a      	mov	r2, fp
 8006d18:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006d1c:	9109      	str	r1, [sp, #36]	; 0x24
 8006d1e:	f7ff ff17 	bl	8006b50 <__exponent>
 8006d22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d24:	1813      	adds	r3, r2, r0
 8006d26:	2a01      	cmp	r2, #1
 8006d28:	4681      	mov	r9, r0
 8006d2a:	6123      	str	r3, [r4, #16]
 8006d2c:	dc02      	bgt.n	8006d34 <_printf_float+0x168>
 8006d2e:	6822      	ldr	r2, [r4, #0]
 8006d30:	07d2      	lsls	r2, r2, #31
 8006d32:	d501      	bpl.n	8006d38 <_printf_float+0x16c>
 8006d34:	3301      	adds	r3, #1
 8006d36:	6123      	str	r3, [r4, #16]
 8006d38:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d09c      	beq.n	8006c7a <_printf_float+0xae>
 8006d40:	232d      	movs	r3, #45	; 0x2d
 8006d42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d46:	e798      	b.n	8006c7a <_printf_float+0xae>
 8006d48:	9a06      	ldr	r2, [sp, #24]
 8006d4a:	2a47      	cmp	r2, #71	; 0x47
 8006d4c:	d1be      	bne.n	8006ccc <_printf_float+0x100>
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d1bc      	bne.n	8006ccc <_printf_float+0x100>
 8006d52:	2301      	movs	r3, #1
 8006d54:	e7b9      	b.n	8006cca <_printf_float+0xfe>
 8006d56:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006d5a:	d118      	bne.n	8006d8e <_printf_float+0x1c2>
 8006d5c:	2900      	cmp	r1, #0
 8006d5e:	6863      	ldr	r3, [r4, #4]
 8006d60:	dd0b      	ble.n	8006d7a <_printf_float+0x1ae>
 8006d62:	6121      	str	r1, [r4, #16]
 8006d64:	b913      	cbnz	r3, 8006d6c <_printf_float+0x1a0>
 8006d66:	6822      	ldr	r2, [r4, #0]
 8006d68:	07d0      	lsls	r0, r2, #31
 8006d6a:	d502      	bpl.n	8006d72 <_printf_float+0x1a6>
 8006d6c:	3301      	adds	r3, #1
 8006d6e:	440b      	add	r3, r1
 8006d70:	6123      	str	r3, [r4, #16]
 8006d72:	65a1      	str	r1, [r4, #88]	; 0x58
 8006d74:	f04f 0900 	mov.w	r9, #0
 8006d78:	e7de      	b.n	8006d38 <_printf_float+0x16c>
 8006d7a:	b913      	cbnz	r3, 8006d82 <_printf_float+0x1b6>
 8006d7c:	6822      	ldr	r2, [r4, #0]
 8006d7e:	07d2      	lsls	r2, r2, #31
 8006d80:	d501      	bpl.n	8006d86 <_printf_float+0x1ba>
 8006d82:	3302      	adds	r3, #2
 8006d84:	e7f4      	b.n	8006d70 <_printf_float+0x1a4>
 8006d86:	2301      	movs	r3, #1
 8006d88:	e7f2      	b.n	8006d70 <_printf_float+0x1a4>
 8006d8a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006d8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d90:	4299      	cmp	r1, r3
 8006d92:	db05      	blt.n	8006da0 <_printf_float+0x1d4>
 8006d94:	6823      	ldr	r3, [r4, #0]
 8006d96:	6121      	str	r1, [r4, #16]
 8006d98:	07d8      	lsls	r0, r3, #31
 8006d9a:	d5ea      	bpl.n	8006d72 <_printf_float+0x1a6>
 8006d9c:	1c4b      	adds	r3, r1, #1
 8006d9e:	e7e7      	b.n	8006d70 <_printf_float+0x1a4>
 8006da0:	2900      	cmp	r1, #0
 8006da2:	bfd4      	ite	le
 8006da4:	f1c1 0202 	rsble	r2, r1, #2
 8006da8:	2201      	movgt	r2, #1
 8006daa:	4413      	add	r3, r2
 8006dac:	e7e0      	b.n	8006d70 <_printf_float+0x1a4>
 8006dae:	6823      	ldr	r3, [r4, #0]
 8006db0:	055a      	lsls	r2, r3, #21
 8006db2:	d407      	bmi.n	8006dc4 <_printf_float+0x1f8>
 8006db4:	6923      	ldr	r3, [r4, #16]
 8006db6:	4642      	mov	r2, r8
 8006db8:	4631      	mov	r1, r6
 8006dba:	4628      	mov	r0, r5
 8006dbc:	47b8      	blx	r7
 8006dbe:	3001      	adds	r0, #1
 8006dc0:	d12c      	bne.n	8006e1c <_printf_float+0x250>
 8006dc2:	e764      	b.n	8006c8e <_printf_float+0xc2>
 8006dc4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006dc8:	f240 80e0 	bls.w	8006f8c <_printf_float+0x3c0>
 8006dcc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	f7f9 fe80 	bl	8000ad8 <__aeabi_dcmpeq>
 8006dd8:	2800      	cmp	r0, #0
 8006dda:	d034      	beq.n	8006e46 <_printf_float+0x27a>
 8006ddc:	4a37      	ldr	r2, [pc, #220]	; (8006ebc <_printf_float+0x2f0>)
 8006dde:	2301      	movs	r3, #1
 8006de0:	4631      	mov	r1, r6
 8006de2:	4628      	mov	r0, r5
 8006de4:	47b8      	blx	r7
 8006de6:	3001      	adds	r0, #1
 8006de8:	f43f af51 	beq.w	8006c8e <_printf_float+0xc2>
 8006dec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006df0:	429a      	cmp	r2, r3
 8006df2:	db02      	blt.n	8006dfa <_printf_float+0x22e>
 8006df4:	6823      	ldr	r3, [r4, #0]
 8006df6:	07d8      	lsls	r0, r3, #31
 8006df8:	d510      	bpl.n	8006e1c <_printf_float+0x250>
 8006dfa:	ee18 3a10 	vmov	r3, s16
 8006dfe:	4652      	mov	r2, sl
 8006e00:	4631      	mov	r1, r6
 8006e02:	4628      	mov	r0, r5
 8006e04:	47b8      	blx	r7
 8006e06:	3001      	adds	r0, #1
 8006e08:	f43f af41 	beq.w	8006c8e <_printf_float+0xc2>
 8006e0c:	f04f 0800 	mov.w	r8, #0
 8006e10:	f104 091a 	add.w	r9, r4, #26
 8006e14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e16:	3b01      	subs	r3, #1
 8006e18:	4543      	cmp	r3, r8
 8006e1a:	dc09      	bgt.n	8006e30 <_printf_float+0x264>
 8006e1c:	6823      	ldr	r3, [r4, #0]
 8006e1e:	079b      	lsls	r3, r3, #30
 8006e20:	f100 8105 	bmi.w	800702e <_printf_float+0x462>
 8006e24:	68e0      	ldr	r0, [r4, #12]
 8006e26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e28:	4298      	cmp	r0, r3
 8006e2a:	bfb8      	it	lt
 8006e2c:	4618      	movlt	r0, r3
 8006e2e:	e730      	b.n	8006c92 <_printf_float+0xc6>
 8006e30:	2301      	movs	r3, #1
 8006e32:	464a      	mov	r2, r9
 8006e34:	4631      	mov	r1, r6
 8006e36:	4628      	mov	r0, r5
 8006e38:	47b8      	blx	r7
 8006e3a:	3001      	adds	r0, #1
 8006e3c:	f43f af27 	beq.w	8006c8e <_printf_float+0xc2>
 8006e40:	f108 0801 	add.w	r8, r8, #1
 8006e44:	e7e6      	b.n	8006e14 <_printf_float+0x248>
 8006e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	dc39      	bgt.n	8006ec0 <_printf_float+0x2f4>
 8006e4c:	4a1b      	ldr	r2, [pc, #108]	; (8006ebc <_printf_float+0x2f0>)
 8006e4e:	2301      	movs	r3, #1
 8006e50:	4631      	mov	r1, r6
 8006e52:	4628      	mov	r0, r5
 8006e54:	47b8      	blx	r7
 8006e56:	3001      	adds	r0, #1
 8006e58:	f43f af19 	beq.w	8006c8e <_printf_float+0xc2>
 8006e5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e60:	4313      	orrs	r3, r2
 8006e62:	d102      	bne.n	8006e6a <_printf_float+0x29e>
 8006e64:	6823      	ldr	r3, [r4, #0]
 8006e66:	07d9      	lsls	r1, r3, #31
 8006e68:	d5d8      	bpl.n	8006e1c <_printf_float+0x250>
 8006e6a:	ee18 3a10 	vmov	r3, s16
 8006e6e:	4652      	mov	r2, sl
 8006e70:	4631      	mov	r1, r6
 8006e72:	4628      	mov	r0, r5
 8006e74:	47b8      	blx	r7
 8006e76:	3001      	adds	r0, #1
 8006e78:	f43f af09 	beq.w	8006c8e <_printf_float+0xc2>
 8006e7c:	f04f 0900 	mov.w	r9, #0
 8006e80:	f104 0a1a 	add.w	sl, r4, #26
 8006e84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e86:	425b      	negs	r3, r3
 8006e88:	454b      	cmp	r3, r9
 8006e8a:	dc01      	bgt.n	8006e90 <_printf_float+0x2c4>
 8006e8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e8e:	e792      	b.n	8006db6 <_printf_float+0x1ea>
 8006e90:	2301      	movs	r3, #1
 8006e92:	4652      	mov	r2, sl
 8006e94:	4631      	mov	r1, r6
 8006e96:	4628      	mov	r0, r5
 8006e98:	47b8      	blx	r7
 8006e9a:	3001      	adds	r0, #1
 8006e9c:	f43f aef7 	beq.w	8006c8e <_printf_float+0xc2>
 8006ea0:	f109 0901 	add.w	r9, r9, #1
 8006ea4:	e7ee      	b.n	8006e84 <_printf_float+0x2b8>
 8006ea6:	bf00      	nop
 8006ea8:	7fefffff 	.word	0x7fefffff
 8006eac:	08009fe8 	.word	0x08009fe8
 8006eb0:	08009fec 	.word	0x08009fec
 8006eb4:	08009ff4 	.word	0x08009ff4
 8006eb8:	08009ff0 	.word	0x08009ff0
 8006ebc:	08009ff8 	.word	0x08009ff8
 8006ec0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ec2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	bfa8      	it	ge
 8006ec8:	461a      	movge	r2, r3
 8006eca:	2a00      	cmp	r2, #0
 8006ecc:	4691      	mov	r9, r2
 8006ece:	dc37      	bgt.n	8006f40 <_printf_float+0x374>
 8006ed0:	f04f 0b00 	mov.w	fp, #0
 8006ed4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ed8:	f104 021a 	add.w	r2, r4, #26
 8006edc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006ede:	9305      	str	r3, [sp, #20]
 8006ee0:	eba3 0309 	sub.w	r3, r3, r9
 8006ee4:	455b      	cmp	r3, fp
 8006ee6:	dc33      	bgt.n	8006f50 <_printf_float+0x384>
 8006ee8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006eec:	429a      	cmp	r2, r3
 8006eee:	db3b      	blt.n	8006f68 <_printf_float+0x39c>
 8006ef0:	6823      	ldr	r3, [r4, #0]
 8006ef2:	07da      	lsls	r2, r3, #31
 8006ef4:	d438      	bmi.n	8006f68 <_printf_float+0x39c>
 8006ef6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ef8:	9b05      	ldr	r3, [sp, #20]
 8006efa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006efc:	1ad3      	subs	r3, r2, r3
 8006efe:	eba2 0901 	sub.w	r9, r2, r1
 8006f02:	4599      	cmp	r9, r3
 8006f04:	bfa8      	it	ge
 8006f06:	4699      	movge	r9, r3
 8006f08:	f1b9 0f00 	cmp.w	r9, #0
 8006f0c:	dc35      	bgt.n	8006f7a <_printf_float+0x3ae>
 8006f0e:	f04f 0800 	mov.w	r8, #0
 8006f12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f16:	f104 0a1a 	add.w	sl, r4, #26
 8006f1a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f1e:	1a9b      	subs	r3, r3, r2
 8006f20:	eba3 0309 	sub.w	r3, r3, r9
 8006f24:	4543      	cmp	r3, r8
 8006f26:	f77f af79 	ble.w	8006e1c <_printf_float+0x250>
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	4652      	mov	r2, sl
 8006f2e:	4631      	mov	r1, r6
 8006f30:	4628      	mov	r0, r5
 8006f32:	47b8      	blx	r7
 8006f34:	3001      	adds	r0, #1
 8006f36:	f43f aeaa 	beq.w	8006c8e <_printf_float+0xc2>
 8006f3a:	f108 0801 	add.w	r8, r8, #1
 8006f3e:	e7ec      	b.n	8006f1a <_printf_float+0x34e>
 8006f40:	4613      	mov	r3, r2
 8006f42:	4631      	mov	r1, r6
 8006f44:	4642      	mov	r2, r8
 8006f46:	4628      	mov	r0, r5
 8006f48:	47b8      	blx	r7
 8006f4a:	3001      	adds	r0, #1
 8006f4c:	d1c0      	bne.n	8006ed0 <_printf_float+0x304>
 8006f4e:	e69e      	b.n	8006c8e <_printf_float+0xc2>
 8006f50:	2301      	movs	r3, #1
 8006f52:	4631      	mov	r1, r6
 8006f54:	4628      	mov	r0, r5
 8006f56:	9205      	str	r2, [sp, #20]
 8006f58:	47b8      	blx	r7
 8006f5a:	3001      	adds	r0, #1
 8006f5c:	f43f ae97 	beq.w	8006c8e <_printf_float+0xc2>
 8006f60:	9a05      	ldr	r2, [sp, #20]
 8006f62:	f10b 0b01 	add.w	fp, fp, #1
 8006f66:	e7b9      	b.n	8006edc <_printf_float+0x310>
 8006f68:	ee18 3a10 	vmov	r3, s16
 8006f6c:	4652      	mov	r2, sl
 8006f6e:	4631      	mov	r1, r6
 8006f70:	4628      	mov	r0, r5
 8006f72:	47b8      	blx	r7
 8006f74:	3001      	adds	r0, #1
 8006f76:	d1be      	bne.n	8006ef6 <_printf_float+0x32a>
 8006f78:	e689      	b.n	8006c8e <_printf_float+0xc2>
 8006f7a:	9a05      	ldr	r2, [sp, #20]
 8006f7c:	464b      	mov	r3, r9
 8006f7e:	4442      	add	r2, r8
 8006f80:	4631      	mov	r1, r6
 8006f82:	4628      	mov	r0, r5
 8006f84:	47b8      	blx	r7
 8006f86:	3001      	adds	r0, #1
 8006f88:	d1c1      	bne.n	8006f0e <_printf_float+0x342>
 8006f8a:	e680      	b.n	8006c8e <_printf_float+0xc2>
 8006f8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f8e:	2a01      	cmp	r2, #1
 8006f90:	dc01      	bgt.n	8006f96 <_printf_float+0x3ca>
 8006f92:	07db      	lsls	r3, r3, #31
 8006f94:	d538      	bpl.n	8007008 <_printf_float+0x43c>
 8006f96:	2301      	movs	r3, #1
 8006f98:	4642      	mov	r2, r8
 8006f9a:	4631      	mov	r1, r6
 8006f9c:	4628      	mov	r0, r5
 8006f9e:	47b8      	blx	r7
 8006fa0:	3001      	adds	r0, #1
 8006fa2:	f43f ae74 	beq.w	8006c8e <_printf_float+0xc2>
 8006fa6:	ee18 3a10 	vmov	r3, s16
 8006faa:	4652      	mov	r2, sl
 8006fac:	4631      	mov	r1, r6
 8006fae:	4628      	mov	r0, r5
 8006fb0:	47b8      	blx	r7
 8006fb2:	3001      	adds	r0, #1
 8006fb4:	f43f ae6b 	beq.w	8006c8e <_printf_float+0xc2>
 8006fb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	f7f9 fd8a 	bl	8000ad8 <__aeabi_dcmpeq>
 8006fc4:	b9d8      	cbnz	r0, 8006ffe <_printf_float+0x432>
 8006fc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fc8:	f108 0201 	add.w	r2, r8, #1
 8006fcc:	3b01      	subs	r3, #1
 8006fce:	4631      	mov	r1, r6
 8006fd0:	4628      	mov	r0, r5
 8006fd2:	47b8      	blx	r7
 8006fd4:	3001      	adds	r0, #1
 8006fd6:	d10e      	bne.n	8006ff6 <_printf_float+0x42a>
 8006fd8:	e659      	b.n	8006c8e <_printf_float+0xc2>
 8006fda:	2301      	movs	r3, #1
 8006fdc:	4652      	mov	r2, sl
 8006fde:	4631      	mov	r1, r6
 8006fe0:	4628      	mov	r0, r5
 8006fe2:	47b8      	blx	r7
 8006fe4:	3001      	adds	r0, #1
 8006fe6:	f43f ae52 	beq.w	8006c8e <_printf_float+0xc2>
 8006fea:	f108 0801 	add.w	r8, r8, #1
 8006fee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ff0:	3b01      	subs	r3, #1
 8006ff2:	4543      	cmp	r3, r8
 8006ff4:	dcf1      	bgt.n	8006fda <_printf_float+0x40e>
 8006ff6:	464b      	mov	r3, r9
 8006ff8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006ffc:	e6dc      	b.n	8006db8 <_printf_float+0x1ec>
 8006ffe:	f04f 0800 	mov.w	r8, #0
 8007002:	f104 0a1a 	add.w	sl, r4, #26
 8007006:	e7f2      	b.n	8006fee <_printf_float+0x422>
 8007008:	2301      	movs	r3, #1
 800700a:	4642      	mov	r2, r8
 800700c:	e7df      	b.n	8006fce <_printf_float+0x402>
 800700e:	2301      	movs	r3, #1
 8007010:	464a      	mov	r2, r9
 8007012:	4631      	mov	r1, r6
 8007014:	4628      	mov	r0, r5
 8007016:	47b8      	blx	r7
 8007018:	3001      	adds	r0, #1
 800701a:	f43f ae38 	beq.w	8006c8e <_printf_float+0xc2>
 800701e:	f108 0801 	add.w	r8, r8, #1
 8007022:	68e3      	ldr	r3, [r4, #12]
 8007024:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007026:	1a5b      	subs	r3, r3, r1
 8007028:	4543      	cmp	r3, r8
 800702a:	dcf0      	bgt.n	800700e <_printf_float+0x442>
 800702c:	e6fa      	b.n	8006e24 <_printf_float+0x258>
 800702e:	f04f 0800 	mov.w	r8, #0
 8007032:	f104 0919 	add.w	r9, r4, #25
 8007036:	e7f4      	b.n	8007022 <_printf_float+0x456>

08007038 <_printf_common>:
 8007038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800703c:	4616      	mov	r6, r2
 800703e:	4699      	mov	r9, r3
 8007040:	688a      	ldr	r2, [r1, #8]
 8007042:	690b      	ldr	r3, [r1, #16]
 8007044:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007048:	4293      	cmp	r3, r2
 800704a:	bfb8      	it	lt
 800704c:	4613      	movlt	r3, r2
 800704e:	6033      	str	r3, [r6, #0]
 8007050:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007054:	4607      	mov	r7, r0
 8007056:	460c      	mov	r4, r1
 8007058:	b10a      	cbz	r2, 800705e <_printf_common+0x26>
 800705a:	3301      	adds	r3, #1
 800705c:	6033      	str	r3, [r6, #0]
 800705e:	6823      	ldr	r3, [r4, #0]
 8007060:	0699      	lsls	r1, r3, #26
 8007062:	bf42      	ittt	mi
 8007064:	6833      	ldrmi	r3, [r6, #0]
 8007066:	3302      	addmi	r3, #2
 8007068:	6033      	strmi	r3, [r6, #0]
 800706a:	6825      	ldr	r5, [r4, #0]
 800706c:	f015 0506 	ands.w	r5, r5, #6
 8007070:	d106      	bne.n	8007080 <_printf_common+0x48>
 8007072:	f104 0a19 	add.w	sl, r4, #25
 8007076:	68e3      	ldr	r3, [r4, #12]
 8007078:	6832      	ldr	r2, [r6, #0]
 800707a:	1a9b      	subs	r3, r3, r2
 800707c:	42ab      	cmp	r3, r5
 800707e:	dc26      	bgt.n	80070ce <_printf_common+0x96>
 8007080:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007084:	1e13      	subs	r3, r2, #0
 8007086:	6822      	ldr	r2, [r4, #0]
 8007088:	bf18      	it	ne
 800708a:	2301      	movne	r3, #1
 800708c:	0692      	lsls	r2, r2, #26
 800708e:	d42b      	bmi.n	80070e8 <_printf_common+0xb0>
 8007090:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007094:	4649      	mov	r1, r9
 8007096:	4638      	mov	r0, r7
 8007098:	47c0      	blx	r8
 800709a:	3001      	adds	r0, #1
 800709c:	d01e      	beq.n	80070dc <_printf_common+0xa4>
 800709e:	6823      	ldr	r3, [r4, #0]
 80070a0:	68e5      	ldr	r5, [r4, #12]
 80070a2:	6832      	ldr	r2, [r6, #0]
 80070a4:	f003 0306 	and.w	r3, r3, #6
 80070a8:	2b04      	cmp	r3, #4
 80070aa:	bf08      	it	eq
 80070ac:	1aad      	subeq	r5, r5, r2
 80070ae:	68a3      	ldr	r3, [r4, #8]
 80070b0:	6922      	ldr	r2, [r4, #16]
 80070b2:	bf0c      	ite	eq
 80070b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070b8:	2500      	movne	r5, #0
 80070ba:	4293      	cmp	r3, r2
 80070bc:	bfc4      	itt	gt
 80070be:	1a9b      	subgt	r3, r3, r2
 80070c0:	18ed      	addgt	r5, r5, r3
 80070c2:	2600      	movs	r6, #0
 80070c4:	341a      	adds	r4, #26
 80070c6:	42b5      	cmp	r5, r6
 80070c8:	d11a      	bne.n	8007100 <_printf_common+0xc8>
 80070ca:	2000      	movs	r0, #0
 80070cc:	e008      	b.n	80070e0 <_printf_common+0xa8>
 80070ce:	2301      	movs	r3, #1
 80070d0:	4652      	mov	r2, sl
 80070d2:	4649      	mov	r1, r9
 80070d4:	4638      	mov	r0, r7
 80070d6:	47c0      	blx	r8
 80070d8:	3001      	adds	r0, #1
 80070da:	d103      	bne.n	80070e4 <_printf_common+0xac>
 80070dc:	f04f 30ff 	mov.w	r0, #4294967295
 80070e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070e4:	3501      	adds	r5, #1
 80070e6:	e7c6      	b.n	8007076 <_printf_common+0x3e>
 80070e8:	18e1      	adds	r1, r4, r3
 80070ea:	1c5a      	adds	r2, r3, #1
 80070ec:	2030      	movs	r0, #48	; 0x30
 80070ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80070f2:	4422      	add	r2, r4
 80070f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80070f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80070fc:	3302      	adds	r3, #2
 80070fe:	e7c7      	b.n	8007090 <_printf_common+0x58>
 8007100:	2301      	movs	r3, #1
 8007102:	4622      	mov	r2, r4
 8007104:	4649      	mov	r1, r9
 8007106:	4638      	mov	r0, r7
 8007108:	47c0      	blx	r8
 800710a:	3001      	adds	r0, #1
 800710c:	d0e6      	beq.n	80070dc <_printf_common+0xa4>
 800710e:	3601      	adds	r6, #1
 8007110:	e7d9      	b.n	80070c6 <_printf_common+0x8e>
	...

08007114 <_printf_i>:
 8007114:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007118:	460c      	mov	r4, r1
 800711a:	4691      	mov	r9, r2
 800711c:	7e27      	ldrb	r7, [r4, #24]
 800711e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007120:	2f78      	cmp	r7, #120	; 0x78
 8007122:	4680      	mov	r8, r0
 8007124:	469a      	mov	sl, r3
 8007126:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800712a:	d807      	bhi.n	800713c <_printf_i+0x28>
 800712c:	2f62      	cmp	r7, #98	; 0x62
 800712e:	d80a      	bhi.n	8007146 <_printf_i+0x32>
 8007130:	2f00      	cmp	r7, #0
 8007132:	f000 80d8 	beq.w	80072e6 <_printf_i+0x1d2>
 8007136:	2f58      	cmp	r7, #88	; 0x58
 8007138:	f000 80a3 	beq.w	8007282 <_printf_i+0x16e>
 800713c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007140:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007144:	e03a      	b.n	80071bc <_printf_i+0xa8>
 8007146:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800714a:	2b15      	cmp	r3, #21
 800714c:	d8f6      	bhi.n	800713c <_printf_i+0x28>
 800714e:	a001      	add	r0, pc, #4	; (adr r0, 8007154 <_printf_i+0x40>)
 8007150:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007154:	080071ad 	.word	0x080071ad
 8007158:	080071c1 	.word	0x080071c1
 800715c:	0800713d 	.word	0x0800713d
 8007160:	0800713d 	.word	0x0800713d
 8007164:	0800713d 	.word	0x0800713d
 8007168:	0800713d 	.word	0x0800713d
 800716c:	080071c1 	.word	0x080071c1
 8007170:	0800713d 	.word	0x0800713d
 8007174:	0800713d 	.word	0x0800713d
 8007178:	0800713d 	.word	0x0800713d
 800717c:	0800713d 	.word	0x0800713d
 8007180:	080072cd 	.word	0x080072cd
 8007184:	080071f1 	.word	0x080071f1
 8007188:	080072af 	.word	0x080072af
 800718c:	0800713d 	.word	0x0800713d
 8007190:	0800713d 	.word	0x0800713d
 8007194:	080072ef 	.word	0x080072ef
 8007198:	0800713d 	.word	0x0800713d
 800719c:	080071f1 	.word	0x080071f1
 80071a0:	0800713d 	.word	0x0800713d
 80071a4:	0800713d 	.word	0x0800713d
 80071a8:	080072b7 	.word	0x080072b7
 80071ac:	680b      	ldr	r3, [r1, #0]
 80071ae:	1d1a      	adds	r2, r3, #4
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	600a      	str	r2, [r1, #0]
 80071b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80071b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071bc:	2301      	movs	r3, #1
 80071be:	e0a3      	b.n	8007308 <_printf_i+0x1f4>
 80071c0:	6825      	ldr	r5, [r4, #0]
 80071c2:	6808      	ldr	r0, [r1, #0]
 80071c4:	062e      	lsls	r6, r5, #24
 80071c6:	f100 0304 	add.w	r3, r0, #4
 80071ca:	d50a      	bpl.n	80071e2 <_printf_i+0xce>
 80071cc:	6805      	ldr	r5, [r0, #0]
 80071ce:	600b      	str	r3, [r1, #0]
 80071d0:	2d00      	cmp	r5, #0
 80071d2:	da03      	bge.n	80071dc <_printf_i+0xc8>
 80071d4:	232d      	movs	r3, #45	; 0x2d
 80071d6:	426d      	negs	r5, r5
 80071d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071dc:	485e      	ldr	r0, [pc, #376]	; (8007358 <_printf_i+0x244>)
 80071de:	230a      	movs	r3, #10
 80071e0:	e019      	b.n	8007216 <_printf_i+0x102>
 80071e2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80071e6:	6805      	ldr	r5, [r0, #0]
 80071e8:	600b      	str	r3, [r1, #0]
 80071ea:	bf18      	it	ne
 80071ec:	b22d      	sxthne	r5, r5
 80071ee:	e7ef      	b.n	80071d0 <_printf_i+0xbc>
 80071f0:	680b      	ldr	r3, [r1, #0]
 80071f2:	6825      	ldr	r5, [r4, #0]
 80071f4:	1d18      	adds	r0, r3, #4
 80071f6:	6008      	str	r0, [r1, #0]
 80071f8:	0628      	lsls	r0, r5, #24
 80071fa:	d501      	bpl.n	8007200 <_printf_i+0xec>
 80071fc:	681d      	ldr	r5, [r3, #0]
 80071fe:	e002      	b.n	8007206 <_printf_i+0xf2>
 8007200:	0669      	lsls	r1, r5, #25
 8007202:	d5fb      	bpl.n	80071fc <_printf_i+0xe8>
 8007204:	881d      	ldrh	r5, [r3, #0]
 8007206:	4854      	ldr	r0, [pc, #336]	; (8007358 <_printf_i+0x244>)
 8007208:	2f6f      	cmp	r7, #111	; 0x6f
 800720a:	bf0c      	ite	eq
 800720c:	2308      	moveq	r3, #8
 800720e:	230a      	movne	r3, #10
 8007210:	2100      	movs	r1, #0
 8007212:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007216:	6866      	ldr	r6, [r4, #4]
 8007218:	60a6      	str	r6, [r4, #8]
 800721a:	2e00      	cmp	r6, #0
 800721c:	bfa2      	ittt	ge
 800721e:	6821      	ldrge	r1, [r4, #0]
 8007220:	f021 0104 	bicge.w	r1, r1, #4
 8007224:	6021      	strge	r1, [r4, #0]
 8007226:	b90d      	cbnz	r5, 800722c <_printf_i+0x118>
 8007228:	2e00      	cmp	r6, #0
 800722a:	d04d      	beq.n	80072c8 <_printf_i+0x1b4>
 800722c:	4616      	mov	r6, r2
 800722e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007232:	fb03 5711 	mls	r7, r3, r1, r5
 8007236:	5dc7      	ldrb	r7, [r0, r7]
 8007238:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800723c:	462f      	mov	r7, r5
 800723e:	42bb      	cmp	r3, r7
 8007240:	460d      	mov	r5, r1
 8007242:	d9f4      	bls.n	800722e <_printf_i+0x11a>
 8007244:	2b08      	cmp	r3, #8
 8007246:	d10b      	bne.n	8007260 <_printf_i+0x14c>
 8007248:	6823      	ldr	r3, [r4, #0]
 800724a:	07df      	lsls	r7, r3, #31
 800724c:	d508      	bpl.n	8007260 <_printf_i+0x14c>
 800724e:	6923      	ldr	r3, [r4, #16]
 8007250:	6861      	ldr	r1, [r4, #4]
 8007252:	4299      	cmp	r1, r3
 8007254:	bfde      	ittt	le
 8007256:	2330      	movle	r3, #48	; 0x30
 8007258:	f806 3c01 	strble.w	r3, [r6, #-1]
 800725c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007260:	1b92      	subs	r2, r2, r6
 8007262:	6122      	str	r2, [r4, #16]
 8007264:	f8cd a000 	str.w	sl, [sp]
 8007268:	464b      	mov	r3, r9
 800726a:	aa03      	add	r2, sp, #12
 800726c:	4621      	mov	r1, r4
 800726e:	4640      	mov	r0, r8
 8007270:	f7ff fee2 	bl	8007038 <_printf_common>
 8007274:	3001      	adds	r0, #1
 8007276:	d14c      	bne.n	8007312 <_printf_i+0x1fe>
 8007278:	f04f 30ff 	mov.w	r0, #4294967295
 800727c:	b004      	add	sp, #16
 800727e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007282:	4835      	ldr	r0, [pc, #212]	; (8007358 <_printf_i+0x244>)
 8007284:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007288:	6823      	ldr	r3, [r4, #0]
 800728a:	680e      	ldr	r6, [r1, #0]
 800728c:	061f      	lsls	r7, r3, #24
 800728e:	f856 5b04 	ldr.w	r5, [r6], #4
 8007292:	600e      	str	r6, [r1, #0]
 8007294:	d514      	bpl.n	80072c0 <_printf_i+0x1ac>
 8007296:	07d9      	lsls	r1, r3, #31
 8007298:	bf44      	itt	mi
 800729a:	f043 0320 	orrmi.w	r3, r3, #32
 800729e:	6023      	strmi	r3, [r4, #0]
 80072a0:	b91d      	cbnz	r5, 80072aa <_printf_i+0x196>
 80072a2:	6823      	ldr	r3, [r4, #0]
 80072a4:	f023 0320 	bic.w	r3, r3, #32
 80072a8:	6023      	str	r3, [r4, #0]
 80072aa:	2310      	movs	r3, #16
 80072ac:	e7b0      	b.n	8007210 <_printf_i+0xfc>
 80072ae:	6823      	ldr	r3, [r4, #0]
 80072b0:	f043 0320 	orr.w	r3, r3, #32
 80072b4:	6023      	str	r3, [r4, #0]
 80072b6:	2378      	movs	r3, #120	; 0x78
 80072b8:	4828      	ldr	r0, [pc, #160]	; (800735c <_printf_i+0x248>)
 80072ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80072be:	e7e3      	b.n	8007288 <_printf_i+0x174>
 80072c0:	065e      	lsls	r6, r3, #25
 80072c2:	bf48      	it	mi
 80072c4:	b2ad      	uxthmi	r5, r5
 80072c6:	e7e6      	b.n	8007296 <_printf_i+0x182>
 80072c8:	4616      	mov	r6, r2
 80072ca:	e7bb      	b.n	8007244 <_printf_i+0x130>
 80072cc:	680b      	ldr	r3, [r1, #0]
 80072ce:	6826      	ldr	r6, [r4, #0]
 80072d0:	6960      	ldr	r0, [r4, #20]
 80072d2:	1d1d      	adds	r5, r3, #4
 80072d4:	600d      	str	r5, [r1, #0]
 80072d6:	0635      	lsls	r5, r6, #24
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	d501      	bpl.n	80072e0 <_printf_i+0x1cc>
 80072dc:	6018      	str	r0, [r3, #0]
 80072de:	e002      	b.n	80072e6 <_printf_i+0x1d2>
 80072e0:	0671      	lsls	r1, r6, #25
 80072e2:	d5fb      	bpl.n	80072dc <_printf_i+0x1c8>
 80072e4:	8018      	strh	r0, [r3, #0]
 80072e6:	2300      	movs	r3, #0
 80072e8:	6123      	str	r3, [r4, #16]
 80072ea:	4616      	mov	r6, r2
 80072ec:	e7ba      	b.n	8007264 <_printf_i+0x150>
 80072ee:	680b      	ldr	r3, [r1, #0]
 80072f0:	1d1a      	adds	r2, r3, #4
 80072f2:	600a      	str	r2, [r1, #0]
 80072f4:	681e      	ldr	r6, [r3, #0]
 80072f6:	6862      	ldr	r2, [r4, #4]
 80072f8:	2100      	movs	r1, #0
 80072fa:	4630      	mov	r0, r6
 80072fc:	f7f8 ff78 	bl	80001f0 <memchr>
 8007300:	b108      	cbz	r0, 8007306 <_printf_i+0x1f2>
 8007302:	1b80      	subs	r0, r0, r6
 8007304:	6060      	str	r0, [r4, #4]
 8007306:	6863      	ldr	r3, [r4, #4]
 8007308:	6123      	str	r3, [r4, #16]
 800730a:	2300      	movs	r3, #0
 800730c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007310:	e7a8      	b.n	8007264 <_printf_i+0x150>
 8007312:	6923      	ldr	r3, [r4, #16]
 8007314:	4632      	mov	r2, r6
 8007316:	4649      	mov	r1, r9
 8007318:	4640      	mov	r0, r8
 800731a:	47d0      	blx	sl
 800731c:	3001      	adds	r0, #1
 800731e:	d0ab      	beq.n	8007278 <_printf_i+0x164>
 8007320:	6823      	ldr	r3, [r4, #0]
 8007322:	079b      	lsls	r3, r3, #30
 8007324:	d413      	bmi.n	800734e <_printf_i+0x23a>
 8007326:	68e0      	ldr	r0, [r4, #12]
 8007328:	9b03      	ldr	r3, [sp, #12]
 800732a:	4298      	cmp	r0, r3
 800732c:	bfb8      	it	lt
 800732e:	4618      	movlt	r0, r3
 8007330:	e7a4      	b.n	800727c <_printf_i+0x168>
 8007332:	2301      	movs	r3, #1
 8007334:	4632      	mov	r2, r6
 8007336:	4649      	mov	r1, r9
 8007338:	4640      	mov	r0, r8
 800733a:	47d0      	blx	sl
 800733c:	3001      	adds	r0, #1
 800733e:	d09b      	beq.n	8007278 <_printf_i+0x164>
 8007340:	3501      	adds	r5, #1
 8007342:	68e3      	ldr	r3, [r4, #12]
 8007344:	9903      	ldr	r1, [sp, #12]
 8007346:	1a5b      	subs	r3, r3, r1
 8007348:	42ab      	cmp	r3, r5
 800734a:	dcf2      	bgt.n	8007332 <_printf_i+0x21e>
 800734c:	e7eb      	b.n	8007326 <_printf_i+0x212>
 800734e:	2500      	movs	r5, #0
 8007350:	f104 0619 	add.w	r6, r4, #25
 8007354:	e7f5      	b.n	8007342 <_printf_i+0x22e>
 8007356:	bf00      	nop
 8007358:	08009ffa 	.word	0x08009ffa
 800735c:	0800a00b 	.word	0x0800a00b

08007360 <siprintf>:
 8007360:	b40e      	push	{r1, r2, r3}
 8007362:	b500      	push	{lr}
 8007364:	b09c      	sub	sp, #112	; 0x70
 8007366:	ab1d      	add	r3, sp, #116	; 0x74
 8007368:	9002      	str	r0, [sp, #8]
 800736a:	9006      	str	r0, [sp, #24]
 800736c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007370:	4809      	ldr	r0, [pc, #36]	; (8007398 <siprintf+0x38>)
 8007372:	9107      	str	r1, [sp, #28]
 8007374:	9104      	str	r1, [sp, #16]
 8007376:	4909      	ldr	r1, [pc, #36]	; (800739c <siprintf+0x3c>)
 8007378:	f853 2b04 	ldr.w	r2, [r3], #4
 800737c:	9105      	str	r1, [sp, #20]
 800737e:	6800      	ldr	r0, [r0, #0]
 8007380:	9301      	str	r3, [sp, #4]
 8007382:	a902      	add	r1, sp, #8
 8007384:	f001 fb32 	bl	80089ec <_svfiprintf_r>
 8007388:	9b02      	ldr	r3, [sp, #8]
 800738a:	2200      	movs	r2, #0
 800738c:	701a      	strb	r2, [r3, #0]
 800738e:	b01c      	add	sp, #112	; 0x70
 8007390:	f85d eb04 	ldr.w	lr, [sp], #4
 8007394:	b003      	add	sp, #12
 8007396:	4770      	bx	lr
 8007398:	2000000c 	.word	0x2000000c
 800739c:	ffff0208 	.word	0xffff0208

080073a0 <quorem>:
 80073a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073a4:	6903      	ldr	r3, [r0, #16]
 80073a6:	690c      	ldr	r4, [r1, #16]
 80073a8:	42a3      	cmp	r3, r4
 80073aa:	4607      	mov	r7, r0
 80073ac:	f2c0 8081 	blt.w	80074b2 <quorem+0x112>
 80073b0:	3c01      	subs	r4, #1
 80073b2:	f101 0814 	add.w	r8, r1, #20
 80073b6:	f100 0514 	add.w	r5, r0, #20
 80073ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80073be:	9301      	str	r3, [sp, #4]
 80073c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80073c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80073c8:	3301      	adds	r3, #1
 80073ca:	429a      	cmp	r2, r3
 80073cc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80073d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80073d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80073d8:	d331      	bcc.n	800743e <quorem+0x9e>
 80073da:	f04f 0e00 	mov.w	lr, #0
 80073de:	4640      	mov	r0, r8
 80073e0:	46ac      	mov	ip, r5
 80073e2:	46f2      	mov	sl, lr
 80073e4:	f850 2b04 	ldr.w	r2, [r0], #4
 80073e8:	b293      	uxth	r3, r2
 80073ea:	fb06 e303 	mla	r3, r6, r3, lr
 80073ee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	ebaa 0303 	sub.w	r3, sl, r3
 80073f8:	0c12      	lsrs	r2, r2, #16
 80073fa:	f8dc a000 	ldr.w	sl, [ip]
 80073fe:	fb06 e202 	mla	r2, r6, r2, lr
 8007402:	fa13 f38a 	uxtah	r3, r3, sl
 8007406:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800740a:	fa1f fa82 	uxth.w	sl, r2
 800740e:	f8dc 2000 	ldr.w	r2, [ip]
 8007412:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007416:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800741a:	b29b      	uxth	r3, r3
 800741c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007420:	4581      	cmp	r9, r0
 8007422:	f84c 3b04 	str.w	r3, [ip], #4
 8007426:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800742a:	d2db      	bcs.n	80073e4 <quorem+0x44>
 800742c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007430:	b92b      	cbnz	r3, 800743e <quorem+0x9e>
 8007432:	9b01      	ldr	r3, [sp, #4]
 8007434:	3b04      	subs	r3, #4
 8007436:	429d      	cmp	r5, r3
 8007438:	461a      	mov	r2, r3
 800743a:	d32e      	bcc.n	800749a <quorem+0xfa>
 800743c:	613c      	str	r4, [r7, #16]
 800743e:	4638      	mov	r0, r7
 8007440:	f001 f8be 	bl	80085c0 <__mcmp>
 8007444:	2800      	cmp	r0, #0
 8007446:	db24      	blt.n	8007492 <quorem+0xf2>
 8007448:	3601      	adds	r6, #1
 800744a:	4628      	mov	r0, r5
 800744c:	f04f 0c00 	mov.w	ip, #0
 8007450:	f858 2b04 	ldr.w	r2, [r8], #4
 8007454:	f8d0 e000 	ldr.w	lr, [r0]
 8007458:	b293      	uxth	r3, r2
 800745a:	ebac 0303 	sub.w	r3, ip, r3
 800745e:	0c12      	lsrs	r2, r2, #16
 8007460:	fa13 f38e 	uxtah	r3, r3, lr
 8007464:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007468:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800746c:	b29b      	uxth	r3, r3
 800746e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007472:	45c1      	cmp	r9, r8
 8007474:	f840 3b04 	str.w	r3, [r0], #4
 8007478:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800747c:	d2e8      	bcs.n	8007450 <quorem+0xb0>
 800747e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007482:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007486:	b922      	cbnz	r2, 8007492 <quorem+0xf2>
 8007488:	3b04      	subs	r3, #4
 800748a:	429d      	cmp	r5, r3
 800748c:	461a      	mov	r2, r3
 800748e:	d30a      	bcc.n	80074a6 <quorem+0x106>
 8007490:	613c      	str	r4, [r7, #16]
 8007492:	4630      	mov	r0, r6
 8007494:	b003      	add	sp, #12
 8007496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800749a:	6812      	ldr	r2, [r2, #0]
 800749c:	3b04      	subs	r3, #4
 800749e:	2a00      	cmp	r2, #0
 80074a0:	d1cc      	bne.n	800743c <quorem+0x9c>
 80074a2:	3c01      	subs	r4, #1
 80074a4:	e7c7      	b.n	8007436 <quorem+0x96>
 80074a6:	6812      	ldr	r2, [r2, #0]
 80074a8:	3b04      	subs	r3, #4
 80074aa:	2a00      	cmp	r2, #0
 80074ac:	d1f0      	bne.n	8007490 <quorem+0xf0>
 80074ae:	3c01      	subs	r4, #1
 80074b0:	e7eb      	b.n	800748a <quorem+0xea>
 80074b2:	2000      	movs	r0, #0
 80074b4:	e7ee      	b.n	8007494 <quorem+0xf4>
	...

080074b8 <_dtoa_r>:
 80074b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074bc:	ed2d 8b02 	vpush	{d8}
 80074c0:	ec57 6b10 	vmov	r6, r7, d0
 80074c4:	b095      	sub	sp, #84	; 0x54
 80074c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80074c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80074cc:	9105      	str	r1, [sp, #20]
 80074ce:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80074d2:	4604      	mov	r4, r0
 80074d4:	9209      	str	r2, [sp, #36]	; 0x24
 80074d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80074d8:	b975      	cbnz	r5, 80074f8 <_dtoa_r+0x40>
 80074da:	2010      	movs	r0, #16
 80074dc:	f000 fddc 	bl	8008098 <malloc>
 80074e0:	4602      	mov	r2, r0
 80074e2:	6260      	str	r0, [r4, #36]	; 0x24
 80074e4:	b920      	cbnz	r0, 80074f0 <_dtoa_r+0x38>
 80074e6:	4bb2      	ldr	r3, [pc, #712]	; (80077b0 <_dtoa_r+0x2f8>)
 80074e8:	21ea      	movs	r1, #234	; 0xea
 80074ea:	48b2      	ldr	r0, [pc, #712]	; (80077b4 <_dtoa_r+0x2fc>)
 80074ec:	f001 fb8e 	bl	8008c0c <__assert_func>
 80074f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80074f4:	6005      	str	r5, [r0, #0]
 80074f6:	60c5      	str	r5, [r0, #12]
 80074f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074fa:	6819      	ldr	r1, [r3, #0]
 80074fc:	b151      	cbz	r1, 8007514 <_dtoa_r+0x5c>
 80074fe:	685a      	ldr	r2, [r3, #4]
 8007500:	604a      	str	r2, [r1, #4]
 8007502:	2301      	movs	r3, #1
 8007504:	4093      	lsls	r3, r2
 8007506:	608b      	str	r3, [r1, #8]
 8007508:	4620      	mov	r0, r4
 800750a:	f000 fe1b 	bl	8008144 <_Bfree>
 800750e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007510:	2200      	movs	r2, #0
 8007512:	601a      	str	r2, [r3, #0]
 8007514:	1e3b      	subs	r3, r7, #0
 8007516:	bfb9      	ittee	lt
 8007518:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800751c:	9303      	strlt	r3, [sp, #12]
 800751e:	2300      	movge	r3, #0
 8007520:	f8c8 3000 	strge.w	r3, [r8]
 8007524:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007528:	4ba3      	ldr	r3, [pc, #652]	; (80077b8 <_dtoa_r+0x300>)
 800752a:	bfbc      	itt	lt
 800752c:	2201      	movlt	r2, #1
 800752e:	f8c8 2000 	strlt.w	r2, [r8]
 8007532:	ea33 0309 	bics.w	r3, r3, r9
 8007536:	d11b      	bne.n	8007570 <_dtoa_r+0xb8>
 8007538:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800753a:	f242 730f 	movw	r3, #9999	; 0x270f
 800753e:	6013      	str	r3, [r2, #0]
 8007540:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007544:	4333      	orrs	r3, r6
 8007546:	f000 857a 	beq.w	800803e <_dtoa_r+0xb86>
 800754a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800754c:	b963      	cbnz	r3, 8007568 <_dtoa_r+0xb0>
 800754e:	4b9b      	ldr	r3, [pc, #620]	; (80077bc <_dtoa_r+0x304>)
 8007550:	e024      	b.n	800759c <_dtoa_r+0xe4>
 8007552:	4b9b      	ldr	r3, [pc, #620]	; (80077c0 <_dtoa_r+0x308>)
 8007554:	9300      	str	r3, [sp, #0]
 8007556:	3308      	adds	r3, #8
 8007558:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800755a:	6013      	str	r3, [r2, #0]
 800755c:	9800      	ldr	r0, [sp, #0]
 800755e:	b015      	add	sp, #84	; 0x54
 8007560:	ecbd 8b02 	vpop	{d8}
 8007564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007568:	4b94      	ldr	r3, [pc, #592]	; (80077bc <_dtoa_r+0x304>)
 800756a:	9300      	str	r3, [sp, #0]
 800756c:	3303      	adds	r3, #3
 800756e:	e7f3      	b.n	8007558 <_dtoa_r+0xa0>
 8007570:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007574:	2200      	movs	r2, #0
 8007576:	ec51 0b17 	vmov	r0, r1, d7
 800757a:	2300      	movs	r3, #0
 800757c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007580:	f7f9 faaa 	bl	8000ad8 <__aeabi_dcmpeq>
 8007584:	4680      	mov	r8, r0
 8007586:	b158      	cbz	r0, 80075a0 <_dtoa_r+0xe8>
 8007588:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800758a:	2301      	movs	r3, #1
 800758c:	6013      	str	r3, [r2, #0]
 800758e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007590:	2b00      	cmp	r3, #0
 8007592:	f000 8551 	beq.w	8008038 <_dtoa_r+0xb80>
 8007596:	488b      	ldr	r0, [pc, #556]	; (80077c4 <_dtoa_r+0x30c>)
 8007598:	6018      	str	r0, [r3, #0]
 800759a:	1e43      	subs	r3, r0, #1
 800759c:	9300      	str	r3, [sp, #0]
 800759e:	e7dd      	b.n	800755c <_dtoa_r+0xa4>
 80075a0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80075a4:	aa12      	add	r2, sp, #72	; 0x48
 80075a6:	a913      	add	r1, sp, #76	; 0x4c
 80075a8:	4620      	mov	r0, r4
 80075aa:	f001 f8ad 	bl	8008708 <__d2b>
 80075ae:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80075b2:	4683      	mov	fp, r0
 80075b4:	2d00      	cmp	r5, #0
 80075b6:	d07c      	beq.n	80076b2 <_dtoa_r+0x1fa>
 80075b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075ba:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80075be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80075c2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80075c6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80075ca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80075ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80075d2:	4b7d      	ldr	r3, [pc, #500]	; (80077c8 <_dtoa_r+0x310>)
 80075d4:	2200      	movs	r2, #0
 80075d6:	4630      	mov	r0, r6
 80075d8:	4639      	mov	r1, r7
 80075da:	f7f8 fe5d 	bl	8000298 <__aeabi_dsub>
 80075de:	a36e      	add	r3, pc, #440	; (adr r3, 8007798 <_dtoa_r+0x2e0>)
 80075e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e4:	f7f9 f810 	bl	8000608 <__aeabi_dmul>
 80075e8:	a36d      	add	r3, pc, #436	; (adr r3, 80077a0 <_dtoa_r+0x2e8>)
 80075ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ee:	f7f8 fe55 	bl	800029c <__adddf3>
 80075f2:	4606      	mov	r6, r0
 80075f4:	4628      	mov	r0, r5
 80075f6:	460f      	mov	r7, r1
 80075f8:	f7f8 ff9c 	bl	8000534 <__aeabi_i2d>
 80075fc:	a36a      	add	r3, pc, #424	; (adr r3, 80077a8 <_dtoa_r+0x2f0>)
 80075fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007602:	f7f9 f801 	bl	8000608 <__aeabi_dmul>
 8007606:	4602      	mov	r2, r0
 8007608:	460b      	mov	r3, r1
 800760a:	4630      	mov	r0, r6
 800760c:	4639      	mov	r1, r7
 800760e:	f7f8 fe45 	bl	800029c <__adddf3>
 8007612:	4606      	mov	r6, r0
 8007614:	460f      	mov	r7, r1
 8007616:	f7f9 faa7 	bl	8000b68 <__aeabi_d2iz>
 800761a:	2200      	movs	r2, #0
 800761c:	4682      	mov	sl, r0
 800761e:	2300      	movs	r3, #0
 8007620:	4630      	mov	r0, r6
 8007622:	4639      	mov	r1, r7
 8007624:	f7f9 fa62 	bl	8000aec <__aeabi_dcmplt>
 8007628:	b148      	cbz	r0, 800763e <_dtoa_r+0x186>
 800762a:	4650      	mov	r0, sl
 800762c:	f7f8 ff82 	bl	8000534 <__aeabi_i2d>
 8007630:	4632      	mov	r2, r6
 8007632:	463b      	mov	r3, r7
 8007634:	f7f9 fa50 	bl	8000ad8 <__aeabi_dcmpeq>
 8007638:	b908      	cbnz	r0, 800763e <_dtoa_r+0x186>
 800763a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800763e:	f1ba 0f16 	cmp.w	sl, #22
 8007642:	d854      	bhi.n	80076ee <_dtoa_r+0x236>
 8007644:	4b61      	ldr	r3, [pc, #388]	; (80077cc <_dtoa_r+0x314>)
 8007646:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800764a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007652:	f7f9 fa4b 	bl	8000aec <__aeabi_dcmplt>
 8007656:	2800      	cmp	r0, #0
 8007658:	d04b      	beq.n	80076f2 <_dtoa_r+0x23a>
 800765a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800765e:	2300      	movs	r3, #0
 8007660:	930e      	str	r3, [sp, #56]	; 0x38
 8007662:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007664:	1b5d      	subs	r5, r3, r5
 8007666:	1e6b      	subs	r3, r5, #1
 8007668:	9304      	str	r3, [sp, #16]
 800766a:	bf43      	ittte	mi
 800766c:	2300      	movmi	r3, #0
 800766e:	f1c5 0801 	rsbmi	r8, r5, #1
 8007672:	9304      	strmi	r3, [sp, #16]
 8007674:	f04f 0800 	movpl.w	r8, #0
 8007678:	f1ba 0f00 	cmp.w	sl, #0
 800767c:	db3b      	blt.n	80076f6 <_dtoa_r+0x23e>
 800767e:	9b04      	ldr	r3, [sp, #16]
 8007680:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007684:	4453      	add	r3, sl
 8007686:	9304      	str	r3, [sp, #16]
 8007688:	2300      	movs	r3, #0
 800768a:	9306      	str	r3, [sp, #24]
 800768c:	9b05      	ldr	r3, [sp, #20]
 800768e:	2b09      	cmp	r3, #9
 8007690:	d869      	bhi.n	8007766 <_dtoa_r+0x2ae>
 8007692:	2b05      	cmp	r3, #5
 8007694:	bfc4      	itt	gt
 8007696:	3b04      	subgt	r3, #4
 8007698:	9305      	strgt	r3, [sp, #20]
 800769a:	9b05      	ldr	r3, [sp, #20]
 800769c:	f1a3 0302 	sub.w	r3, r3, #2
 80076a0:	bfcc      	ite	gt
 80076a2:	2500      	movgt	r5, #0
 80076a4:	2501      	movle	r5, #1
 80076a6:	2b03      	cmp	r3, #3
 80076a8:	d869      	bhi.n	800777e <_dtoa_r+0x2c6>
 80076aa:	e8df f003 	tbb	[pc, r3]
 80076ae:	4e2c      	.short	0x4e2c
 80076b0:	5a4c      	.short	0x5a4c
 80076b2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80076b6:	441d      	add	r5, r3
 80076b8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80076bc:	2b20      	cmp	r3, #32
 80076be:	bfc1      	itttt	gt
 80076c0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80076c4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80076c8:	fa09 f303 	lslgt.w	r3, r9, r3
 80076cc:	fa26 f000 	lsrgt.w	r0, r6, r0
 80076d0:	bfda      	itte	le
 80076d2:	f1c3 0320 	rsble	r3, r3, #32
 80076d6:	fa06 f003 	lslle.w	r0, r6, r3
 80076da:	4318      	orrgt	r0, r3
 80076dc:	f7f8 ff1a 	bl	8000514 <__aeabi_ui2d>
 80076e0:	2301      	movs	r3, #1
 80076e2:	4606      	mov	r6, r0
 80076e4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80076e8:	3d01      	subs	r5, #1
 80076ea:	9310      	str	r3, [sp, #64]	; 0x40
 80076ec:	e771      	b.n	80075d2 <_dtoa_r+0x11a>
 80076ee:	2301      	movs	r3, #1
 80076f0:	e7b6      	b.n	8007660 <_dtoa_r+0x1a8>
 80076f2:	900e      	str	r0, [sp, #56]	; 0x38
 80076f4:	e7b5      	b.n	8007662 <_dtoa_r+0x1aa>
 80076f6:	f1ca 0300 	rsb	r3, sl, #0
 80076fa:	9306      	str	r3, [sp, #24]
 80076fc:	2300      	movs	r3, #0
 80076fe:	eba8 080a 	sub.w	r8, r8, sl
 8007702:	930d      	str	r3, [sp, #52]	; 0x34
 8007704:	e7c2      	b.n	800768c <_dtoa_r+0x1d4>
 8007706:	2300      	movs	r3, #0
 8007708:	9308      	str	r3, [sp, #32]
 800770a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800770c:	2b00      	cmp	r3, #0
 800770e:	dc39      	bgt.n	8007784 <_dtoa_r+0x2cc>
 8007710:	f04f 0901 	mov.w	r9, #1
 8007714:	f8cd 9004 	str.w	r9, [sp, #4]
 8007718:	464b      	mov	r3, r9
 800771a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800771e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007720:	2200      	movs	r2, #0
 8007722:	6042      	str	r2, [r0, #4]
 8007724:	2204      	movs	r2, #4
 8007726:	f102 0614 	add.w	r6, r2, #20
 800772a:	429e      	cmp	r6, r3
 800772c:	6841      	ldr	r1, [r0, #4]
 800772e:	d92f      	bls.n	8007790 <_dtoa_r+0x2d8>
 8007730:	4620      	mov	r0, r4
 8007732:	f000 fcc7 	bl	80080c4 <_Balloc>
 8007736:	9000      	str	r0, [sp, #0]
 8007738:	2800      	cmp	r0, #0
 800773a:	d14b      	bne.n	80077d4 <_dtoa_r+0x31c>
 800773c:	4b24      	ldr	r3, [pc, #144]	; (80077d0 <_dtoa_r+0x318>)
 800773e:	4602      	mov	r2, r0
 8007740:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007744:	e6d1      	b.n	80074ea <_dtoa_r+0x32>
 8007746:	2301      	movs	r3, #1
 8007748:	e7de      	b.n	8007708 <_dtoa_r+0x250>
 800774a:	2300      	movs	r3, #0
 800774c:	9308      	str	r3, [sp, #32]
 800774e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007750:	eb0a 0903 	add.w	r9, sl, r3
 8007754:	f109 0301 	add.w	r3, r9, #1
 8007758:	2b01      	cmp	r3, #1
 800775a:	9301      	str	r3, [sp, #4]
 800775c:	bfb8      	it	lt
 800775e:	2301      	movlt	r3, #1
 8007760:	e7dd      	b.n	800771e <_dtoa_r+0x266>
 8007762:	2301      	movs	r3, #1
 8007764:	e7f2      	b.n	800774c <_dtoa_r+0x294>
 8007766:	2501      	movs	r5, #1
 8007768:	2300      	movs	r3, #0
 800776a:	9305      	str	r3, [sp, #20]
 800776c:	9508      	str	r5, [sp, #32]
 800776e:	f04f 39ff 	mov.w	r9, #4294967295
 8007772:	2200      	movs	r2, #0
 8007774:	f8cd 9004 	str.w	r9, [sp, #4]
 8007778:	2312      	movs	r3, #18
 800777a:	9209      	str	r2, [sp, #36]	; 0x24
 800777c:	e7cf      	b.n	800771e <_dtoa_r+0x266>
 800777e:	2301      	movs	r3, #1
 8007780:	9308      	str	r3, [sp, #32]
 8007782:	e7f4      	b.n	800776e <_dtoa_r+0x2b6>
 8007784:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007788:	f8cd 9004 	str.w	r9, [sp, #4]
 800778c:	464b      	mov	r3, r9
 800778e:	e7c6      	b.n	800771e <_dtoa_r+0x266>
 8007790:	3101      	adds	r1, #1
 8007792:	6041      	str	r1, [r0, #4]
 8007794:	0052      	lsls	r2, r2, #1
 8007796:	e7c6      	b.n	8007726 <_dtoa_r+0x26e>
 8007798:	636f4361 	.word	0x636f4361
 800779c:	3fd287a7 	.word	0x3fd287a7
 80077a0:	8b60c8b3 	.word	0x8b60c8b3
 80077a4:	3fc68a28 	.word	0x3fc68a28
 80077a8:	509f79fb 	.word	0x509f79fb
 80077ac:	3fd34413 	.word	0x3fd34413
 80077b0:	0800a029 	.word	0x0800a029
 80077b4:	0800a040 	.word	0x0800a040
 80077b8:	7ff00000 	.word	0x7ff00000
 80077bc:	0800a025 	.word	0x0800a025
 80077c0:	0800a01c 	.word	0x0800a01c
 80077c4:	08009ff9 	.word	0x08009ff9
 80077c8:	3ff80000 	.word	0x3ff80000
 80077cc:	0800a138 	.word	0x0800a138
 80077d0:	0800a09f 	.word	0x0800a09f
 80077d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077d6:	9a00      	ldr	r2, [sp, #0]
 80077d8:	601a      	str	r2, [r3, #0]
 80077da:	9b01      	ldr	r3, [sp, #4]
 80077dc:	2b0e      	cmp	r3, #14
 80077de:	f200 80ad 	bhi.w	800793c <_dtoa_r+0x484>
 80077e2:	2d00      	cmp	r5, #0
 80077e4:	f000 80aa 	beq.w	800793c <_dtoa_r+0x484>
 80077e8:	f1ba 0f00 	cmp.w	sl, #0
 80077ec:	dd36      	ble.n	800785c <_dtoa_r+0x3a4>
 80077ee:	4ac3      	ldr	r2, [pc, #780]	; (8007afc <_dtoa_r+0x644>)
 80077f0:	f00a 030f 	and.w	r3, sl, #15
 80077f4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80077f8:	ed93 7b00 	vldr	d7, [r3]
 80077fc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007800:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007804:	eeb0 8a47 	vmov.f32	s16, s14
 8007808:	eef0 8a67 	vmov.f32	s17, s15
 800780c:	d016      	beq.n	800783c <_dtoa_r+0x384>
 800780e:	4bbc      	ldr	r3, [pc, #752]	; (8007b00 <_dtoa_r+0x648>)
 8007810:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007814:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007818:	f7f9 f820 	bl	800085c <__aeabi_ddiv>
 800781c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007820:	f007 070f 	and.w	r7, r7, #15
 8007824:	2503      	movs	r5, #3
 8007826:	4eb6      	ldr	r6, [pc, #728]	; (8007b00 <_dtoa_r+0x648>)
 8007828:	b957      	cbnz	r7, 8007840 <_dtoa_r+0x388>
 800782a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800782e:	ec53 2b18 	vmov	r2, r3, d8
 8007832:	f7f9 f813 	bl	800085c <__aeabi_ddiv>
 8007836:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800783a:	e029      	b.n	8007890 <_dtoa_r+0x3d8>
 800783c:	2502      	movs	r5, #2
 800783e:	e7f2      	b.n	8007826 <_dtoa_r+0x36e>
 8007840:	07f9      	lsls	r1, r7, #31
 8007842:	d508      	bpl.n	8007856 <_dtoa_r+0x39e>
 8007844:	ec51 0b18 	vmov	r0, r1, d8
 8007848:	e9d6 2300 	ldrd	r2, r3, [r6]
 800784c:	f7f8 fedc 	bl	8000608 <__aeabi_dmul>
 8007850:	ec41 0b18 	vmov	d8, r0, r1
 8007854:	3501      	adds	r5, #1
 8007856:	107f      	asrs	r7, r7, #1
 8007858:	3608      	adds	r6, #8
 800785a:	e7e5      	b.n	8007828 <_dtoa_r+0x370>
 800785c:	f000 80a6 	beq.w	80079ac <_dtoa_r+0x4f4>
 8007860:	f1ca 0600 	rsb	r6, sl, #0
 8007864:	4ba5      	ldr	r3, [pc, #660]	; (8007afc <_dtoa_r+0x644>)
 8007866:	4fa6      	ldr	r7, [pc, #664]	; (8007b00 <_dtoa_r+0x648>)
 8007868:	f006 020f 	and.w	r2, r6, #15
 800786c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007874:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007878:	f7f8 fec6 	bl	8000608 <__aeabi_dmul>
 800787c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007880:	1136      	asrs	r6, r6, #4
 8007882:	2300      	movs	r3, #0
 8007884:	2502      	movs	r5, #2
 8007886:	2e00      	cmp	r6, #0
 8007888:	f040 8085 	bne.w	8007996 <_dtoa_r+0x4de>
 800788c:	2b00      	cmp	r3, #0
 800788e:	d1d2      	bne.n	8007836 <_dtoa_r+0x37e>
 8007890:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007892:	2b00      	cmp	r3, #0
 8007894:	f000 808c 	beq.w	80079b0 <_dtoa_r+0x4f8>
 8007898:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800789c:	4b99      	ldr	r3, [pc, #612]	; (8007b04 <_dtoa_r+0x64c>)
 800789e:	2200      	movs	r2, #0
 80078a0:	4630      	mov	r0, r6
 80078a2:	4639      	mov	r1, r7
 80078a4:	f7f9 f922 	bl	8000aec <__aeabi_dcmplt>
 80078a8:	2800      	cmp	r0, #0
 80078aa:	f000 8081 	beq.w	80079b0 <_dtoa_r+0x4f8>
 80078ae:	9b01      	ldr	r3, [sp, #4]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d07d      	beq.n	80079b0 <_dtoa_r+0x4f8>
 80078b4:	f1b9 0f00 	cmp.w	r9, #0
 80078b8:	dd3c      	ble.n	8007934 <_dtoa_r+0x47c>
 80078ba:	f10a 33ff 	add.w	r3, sl, #4294967295
 80078be:	9307      	str	r3, [sp, #28]
 80078c0:	2200      	movs	r2, #0
 80078c2:	4b91      	ldr	r3, [pc, #580]	; (8007b08 <_dtoa_r+0x650>)
 80078c4:	4630      	mov	r0, r6
 80078c6:	4639      	mov	r1, r7
 80078c8:	f7f8 fe9e 	bl	8000608 <__aeabi_dmul>
 80078cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078d0:	3501      	adds	r5, #1
 80078d2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80078d6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80078da:	4628      	mov	r0, r5
 80078dc:	f7f8 fe2a 	bl	8000534 <__aeabi_i2d>
 80078e0:	4632      	mov	r2, r6
 80078e2:	463b      	mov	r3, r7
 80078e4:	f7f8 fe90 	bl	8000608 <__aeabi_dmul>
 80078e8:	4b88      	ldr	r3, [pc, #544]	; (8007b0c <_dtoa_r+0x654>)
 80078ea:	2200      	movs	r2, #0
 80078ec:	f7f8 fcd6 	bl	800029c <__adddf3>
 80078f0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80078f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078f8:	9303      	str	r3, [sp, #12]
 80078fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d15c      	bne.n	80079ba <_dtoa_r+0x502>
 8007900:	4b83      	ldr	r3, [pc, #524]	; (8007b10 <_dtoa_r+0x658>)
 8007902:	2200      	movs	r2, #0
 8007904:	4630      	mov	r0, r6
 8007906:	4639      	mov	r1, r7
 8007908:	f7f8 fcc6 	bl	8000298 <__aeabi_dsub>
 800790c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007910:	4606      	mov	r6, r0
 8007912:	460f      	mov	r7, r1
 8007914:	f7f9 f908 	bl	8000b28 <__aeabi_dcmpgt>
 8007918:	2800      	cmp	r0, #0
 800791a:	f040 8296 	bne.w	8007e4a <_dtoa_r+0x992>
 800791e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007922:	4630      	mov	r0, r6
 8007924:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007928:	4639      	mov	r1, r7
 800792a:	f7f9 f8df 	bl	8000aec <__aeabi_dcmplt>
 800792e:	2800      	cmp	r0, #0
 8007930:	f040 8288 	bne.w	8007e44 <_dtoa_r+0x98c>
 8007934:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007938:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800793c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800793e:	2b00      	cmp	r3, #0
 8007940:	f2c0 8158 	blt.w	8007bf4 <_dtoa_r+0x73c>
 8007944:	f1ba 0f0e 	cmp.w	sl, #14
 8007948:	f300 8154 	bgt.w	8007bf4 <_dtoa_r+0x73c>
 800794c:	4b6b      	ldr	r3, [pc, #428]	; (8007afc <_dtoa_r+0x644>)
 800794e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007952:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007958:	2b00      	cmp	r3, #0
 800795a:	f280 80e3 	bge.w	8007b24 <_dtoa_r+0x66c>
 800795e:	9b01      	ldr	r3, [sp, #4]
 8007960:	2b00      	cmp	r3, #0
 8007962:	f300 80df 	bgt.w	8007b24 <_dtoa_r+0x66c>
 8007966:	f040 826d 	bne.w	8007e44 <_dtoa_r+0x98c>
 800796a:	4b69      	ldr	r3, [pc, #420]	; (8007b10 <_dtoa_r+0x658>)
 800796c:	2200      	movs	r2, #0
 800796e:	4640      	mov	r0, r8
 8007970:	4649      	mov	r1, r9
 8007972:	f7f8 fe49 	bl	8000608 <__aeabi_dmul>
 8007976:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800797a:	f7f9 f8cb 	bl	8000b14 <__aeabi_dcmpge>
 800797e:	9e01      	ldr	r6, [sp, #4]
 8007980:	4637      	mov	r7, r6
 8007982:	2800      	cmp	r0, #0
 8007984:	f040 8243 	bne.w	8007e0e <_dtoa_r+0x956>
 8007988:	9d00      	ldr	r5, [sp, #0]
 800798a:	2331      	movs	r3, #49	; 0x31
 800798c:	f805 3b01 	strb.w	r3, [r5], #1
 8007990:	f10a 0a01 	add.w	sl, sl, #1
 8007994:	e23f      	b.n	8007e16 <_dtoa_r+0x95e>
 8007996:	07f2      	lsls	r2, r6, #31
 8007998:	d505      	bpl.n	80079a6 <_dtoa_r+0x4ee>
 800799a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800799e:	f7f8 fe33 	bl	8000608 <__aeabi_dmul>
 80079a2:	3501      	adds	r5, #1
 80079a4:	2301      	movs	r3, #1
 80079a6:	1076      	asrs	r6, r6, #1
 80079a8:	3708      	adds	r7, #8
 80079aa:	e76c      	b.n	8007886 <_dtoa_r+0x3ce>
 80079ac:	2502      	movs	r5, #2
 80079ae:	e76f      	b.n	8007890 <_dtoa_r+0x3d8>
 80079b0:	9b01      	ldr	r3, [sp, #4]
 80079b2:	f8cd a01c 	str.w	sl, [sp, #28]
 80079b6:	930c      	str	r3, [sp, #48]	; 0x30
 80079b8:	e78d      	b.n	80078d6 <_dtoa_r+0x41e>
 80079ba:	9900      	ldr	r1, [sp, #0]
 80079bc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80079be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80079c0:	4b4e      	ldr	r3, [pc, #312]	; (8007afc <_dtoa_r+0x644>)
 80079c2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80079c6:	4401      	add	r1, r0
 80079c8:	9102      	str	r1, [sp, #8]
 80079ca:	9908      	ldr	r1, [sp, #32]
 80079cc:	eeb0 8a47 	vmov.f32	s16, s14
 80079d0:	eef0 8a67 	vmov.f32	s17, s15
 80079d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80079dc:	2900      	cmp	r1, #0
 80079de:	d045      	beq.n	8007a6c <_dtoa_r+0x5b4>
 80079e0:	494c      	ldr	r1, [pc, #304]	; (8007b14 <_dtoa_r+0x65c>)
 80079e2:	2000      	movs	r0, #0
 80079e4:	f7f8 ff3a 	bl	800085c <__aeabi_ddiv>
 80079e8:	ec53 2b18 	vmov	r2, r3, d8
 80079ec:	f7f8 fc54 	bl	8000298 <__aeabi_dsub>
 80079f0:	9d00      	ldr	r5, [sp, #0]
 80079f2:	ec41 0b18 	vmov	d8, r0, r1
 80079f6:	4639      	mov	r1, r7
 80079f8:	4630      	mov	r0, r6
 80079fa:	f7f9 f8b5 	bl	8000b68 <__aeabi_d2iz>
 80079fe:	900c      	str	r0, [sp, #48]	; 0x30
 8007a00:	f7f8 fd98 	bl	8000534 <__aeabi_i2d>
 8007a04:	4602      	mov	r2, r0
 8007a06:	460b      	mov	r3, r1
 8007a08:	4630      	mov	r0, r6
 8007a0a:	4639      	mov	r1, r7
 8007a0c:	f7f8 fc44 	bl	8000298 <__aeabi_dsub>
 8007a10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a12:	3330      	adds	r3, #48	; 0x30
 8007a14:	f805 3b01 	strb.w	r3, [r5], #1
 8007a18:	ec53 2b18 	vmov	r2, r3, d8
 8007a1c:	4606      	mov	r6, r0
 8007a1e:	460f      	mov	r7, r1
 8007a20:	f7f9 f864 	bl	8000aec <__aeabi_dcmplt>
 8007a24:	2800      	cmp	r0, #0
 8007a26:	d165      	bne.n	8007af4 <_dtoa_r+0x63c>
 8007a28:	4632      	mov	r2, r6
 8007a2a:	463b      	mov	r3, r7
 8007a2c:	4935      	ldr	r1, [pc, #212]	; (8007b04 <_dtoa_r+0x64c>)
 8007a2e:	2000      	movs	r0, #0
 8007a30:	f7f8 fc32 	bl	8000298 <__aeabi_dsub>
 8007a34:	ec53 2b18 	vmov	r2, r3, d8
 8007a38:	f7f9 f858 	bl	8000aec <__aeabi_dcmplt>
 8007a3c:	2800      	cmp	r0, #0
 8007a3e:	f040 80b9 	bne.w	8007bb4 <_dtoa_r+0x6fc>
 8007a42:	9b02      	ldr	r3, [sp, #8]
 8007a44:	429d      	cmp	r5, r3
 8007a46:	f43f af75 	beq.w	8007934 <_dtoa_r+0x47c>
 8007a4a:	4b2f      	ldr	r3, [pc, #188]	; (8007b08 <_dtoa_r+0x650>)
 8007a4c:	ec51 0b18 	vmov	r0, r1, d8
 8007a50:	2200      	movs	r2, #0
 8007a52:	f7f8 fdd9 	bl	8000608 <__aeabi_dmul>
 8007a56:	4b2c      	ldr	r3, [pc, #176]	; (8007b08 <_dtoa_r+0x650>)
 8007a58:	ec41 0b18 	vmov	d8, r0, r1
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	4630      	mov	r0, r6
 8007a60:	4639      	mov	r1, r7
 8007a62:	f7f8 fdd1 	bl	8000608 <__aeabi_dmul>
 8007a66:	4606      	mov	r6, r0
 8007a68:	460f      	mov	r7, r1
 8007a6a:	e7c4      	b.n	80079f6 <_dtoa_r+0x53e>
 8007a6c:	ec51 0b17 	vmov	r0, r1, d7
 8007a70:	f7f8 fdca 	bl	8000608 <__aeabi_dmul>
 8007a74:	9b02      	ldr	r3, [sp, #8]
 8007a76:	9d00      	ldr	r5, [sp, #0]
 8007a78:	930c      	str	r3, [sp, #48]	; 0x30
 8007a7a:	ec41 0b18 	vmov	d8, r0, r1
 8007a7e:	4639      	mov	r1, r7
 8007a80:	4630      	mov	r0, r6
 8007a82:	f7f9 f871 	bl	8000b68 <__aeabi_d2iz>
 8007a86:	9011      	str	r0, [sp, #68]	; 0x44
 8007a88:	f7f8 fd54 	bl	8000534 <__aeabi_i2d>
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	460b      	mov	r3, r1
 8007a90:	4630      	mov	r0, r6
 8007a92:	4639      	mov	r1, r7
 8007a94:	f7f8 fc00 	bl	8000298 <__aeabi_dsub>
 8007a98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007a9a:	3330      	adds	r3, #48	; 0x30
 8007a9c:	f805 3b01 	strb.w	r3, [r5], #1
 8007aa0:	9b02      	ldr	r3, [sp, #8]
 8007aa2:	429d      	cmp	r5, r3
 8007aa4:	4606      	mov	r6, r0
 8007aa6:	460f      	mov	r7, r1
 8007aa8:	f04f 0200 	mov.w	r2, #0
 8007aac:	d134      	bne.n	8007b18 <_dtoa_r+0x660>
 8007aae:	4b19      	ldr	r3, [pc, #100]	; (8007b14 <_dtoa_r+0x65c>)
 8007ab0:	ec51 0b18 	vmov	r0, r1, d8
 8007ab4:	f7f8 fbf2 	bl	800029c <__adddf3>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	460b      	mov	r3, r1
 8007abc:	4630      	mov	r0, r6
 8007abe:	4639      	mov	r1, r7
 8007ac0:	f7f9 f832 	bl	8000b28 <__aeabi_dcmpgt>
 8007ac4:	2800      	cmp	r0, #0
 8007ac6:	d175      	bne.n	8007bb4 <_dtoa_r+0x6fc>
 8007ac8:	ec53 2b18 	vmov	r2, r3, d8
 8007acc:	4911      	ldr	r1, [pc, #68]	; (8007b14 <_dtoa_r+0x65c>)
 8007ace:	2000      	movs	r0, #0
 8007ad0:	f7f8 fbe2 	bl	8000298 <__aeabi_dsub>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	4630      	mov	r0, r6
 8007ada:	4639      	mov	r1, r7
 8007adc:	f7f9 f806 	bl	8000aec <__aeabi_dcmplt>
 8007ae0:	2800      	cmp	r0, #0
 8007ae2:	f43f af27 	beq.w	8007934 <_dtoa_r+0x47c>
 8007ae6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007ae8:	1e6b      	subs	r3, r5, #1
 8007aea:	930c      	str	r3, [sp, #48]	; 0x30
 8007aec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007af0:	2b30      	cmp	r3, #48	; 0x30
 8007af2:	d0f8      	beq.n	8007ae6 <_dtoa_r+0x62e>
 8007af4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007af8:	e04a      	b.n	8007b90 <_dtoa_r+0x6d8>
 8007afa:	bf00      	nop
 8007afc:	0800a138 	.word	0x0800a138
 8007b00:	0800a110 	.word	0x0800a110
 8007b04:	3ff00000 	.word	0x3ff00000
 8007b08:	40240000 	.word	0x40240000
 8007b0c:	401c0000 	.word	0x401c0000
 8007b10:	40140000 	.word	0x40140000
 8007b14:	3fe00000 	.word	0x3fe00000
 8007b18:	4baf      	ldr	r3, [pc, #700]	; (8007dd8 <_dtoa_r+0x920>)
 8007b1a:	f7f8 fd75 	bl	8000608 <__aeabi_dmul>
 8007b1e:	4606      	mov	r6, r0
 8007b20:	460f      	mov	r7, r1
 8007b22:	e7ac      	b.n	8007a7e <_dtoa_r+0x5c6>
 8007b24:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007b28:	9d00      	ldr	r5, [sp, #0]
 8007b2a:	4642      	mov	r2, r8
 8007b2c:	464b      	mov	r3, r9
 8007b2e:	4630      	mov	r0, r6
 8007b30:	4639      	mov	r1, r7
 8007b32:	f7f8 fe93 	bl	800085c <__aeabi_ddiv>
 8007b36:	f7f9 f817 	bl	8000b68 <__aeabi_d2iz>
 8007b3a:	9002      	str	r0, [sp, #8]
 8007b3c:	f7f8 fcfa 	bl	8000534 <__aeabi_i2d>
 8007b40:	4642      	mov	r2, r8
 8007b42:	464b      	mov	r3, r9
 8007b44:	f7f8 fd60 	bl	8000608 <__aeabi_dmul>
 8007b48:	4602      	mov	r2, r0
 8007b4a:	460b      	mov	r3, r1
 8007b4c:	4630      	mov	r0, r6
 8007b4e:	4639      	mov	r1, r7
 8007b50:	f7f8 fba2 	bl	8000298 <__aeabi_dsub>
 8007b54:	9e02      	ldr	r6, [sp, #8]
 8007b56:	9f01      	ldr	r7, [sp, #4]
 8007b58:	3630      	adds	r6, #48	; 0x30
 8007b5a:	f805 6b01 	strb.w	r6, [r5], #1
 8007b5e:	9e00      	ldr	r6, [sp, #0]
 8007b60:	1bae      	subs	r6, r5, r6
 8007b62:	42b7      	cmp	r7, r6
 8007b64:	4602      	mov	r2, r0
 8007b66:	460b      	mov	r3, r1
 8007b68:	d137      	bne.n	8007bda <_dtoa_r+0x722>
 8007b6a:	f7f8 fb97 	bl	800029c <__adddf3>
 8007b6e:	4642      	mov	r2, r8
 8007b70:	464b      	mov	r3, r9
 8007b72:	4606      	mov	r6, r0
 8007b74:	460f      	mov	r7, r1
 8007b76:	f7f8 ffd7 	bl	8000b28 <__aeabi_dcmpgt>
 8007b7a:	b9c8      	cbnz	r0, 8007bb0 <_dtoa_r+0x6f8>
 8007b7c:	4642      	mov	r2, r8
 8007b7e:	464b      	mov	r3, r9
 8007b80:	4630      	mov	r0, r6
 8007b82:	4639      	mov	r1, r7
 8007b84:	f7f8 ffa8 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b88:	b110      	cbz	r0, 8007b90 <_dtoa_r+0x6d8>
 8007b8a:	9b02      	ldr	r3, [sp, #8]
 8007b8c:	07d9      	lsls	r1, r3, #31
 8007b8e:	d40f      	bmi.n	8007bb0 <_dtoa_r+0x6f8>
 8007b90:	4620      	mov	r0, r4
 8007b92:	4659      	mov	r1, fp
 8007b94:	f000 fad6 	bl	8008144 <_Bfree>
 8007b98:	2300      	movs	r3, #0
 8007b9a:	702b      	strb	r3, [r5, #0]
 8007b9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b9e:	f10a 0001 	add.w	r0, sl, #1
 8007ba2:	6018      	str	r0, [r3, #0]
 8007ba4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	f43f acd8 	beq.w	800755c <_dtoa_r+0xa4>
 8007bac:	601d      	str	r5, [r3, #0]
 8007bae:	e4d5      	b.n	800755c <_dtoa_r+0xa4>
 8007bb0:	f8cd a01c 	str.w	sl, [sp, #28]
 8007bb4:	462b      	mov	r3, r5
 8007bb6:	461d      	mov	r5, r3
 8007bb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007bbc:	2a39      	cmp	r2, #57	; 0x39
 8007bbe:	d108      	bne.n	8007bd2 <_dtoa_r+0x71a>
 8007bc0:	9a00      	ldr	r2, [sp, #0]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d1f7      	bne.n	8007bb6 <_dtoa_r+0x6fe>
 8007bc6:	9a07      	ldr	r2, [sp, #28]
 8007bc8:	9900      	ldr	r1, [sp, #0]
 8007bca:	3201      	adds	r2, #1
 8007bcc:	9207      	str	r2, [sp, #28]
 8007bce:	2230      	movs	r2, #48	; 0x30
 8007bd0:	700a      	strb	r2, [r1, #0]
 8007bd2:	781a      	ldrb	r2, [r3, #0]
 8007bd4:	3201      	adds	r2, #1
 8007bd6:	701a      	strb	r2, [r3, #0]
 8007bd8:	e78c      	b.n	8007af4 <_dtoa_r+0x63c>
 8007bda:	4b7f      	ldr	r3, [pc, #508]	; (8007dd8 <_dtoa_r+0x920>)
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f7f8 fd13 	bl	8000608 <__aeabi_dmul>
 8007be2:	2200      	movs	r2, #0
 8007be4:	2300      	movs	r3, #0
 8007be6:	4606      	mov	r6, r0
 8007be8:	460f      	mov	r7, r1
 8007bea:	f7f8 ff75 	bl	8000ad8 <__aeabi_dcmpeq>
 8007bee:	2800      	cmp	r0, #0
 8007bf0:	d09b      	beq.n	8007b2a <_dtoa_r+0x672>
 8007bf2:	e7cd      	b.n	8007b90 <_dtoa_r+0x6d8>
 8007bf4:	9a08      	ldr	r2, [sp, #32]
 8007bf6:	2a00      	cmp	r2, #0
 8007bf8:	f000 80c4 	beq.w	8007d84 <_dtoa_r+0x8cc>
 8007bfc:	9a05      	ldr	r2, [sp, #20]
 8007bfe:	2a01      	cmp	r2, #1
 8007c00:	f300 80a8 	bgt.w	8007d54 <_dtoa_r+0x89c>
 8007c04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007c06:	2a00      	cmp	r2, #0
 8007c08:	f000 80a0 	beq.w	8007d4c <_dtoa_r+0x894>
 8007c0c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007c10:	9e06      	ldr	r6, [sp, #24]
 8007c12:	4645      	mov	r5, r8
 8007c14:	9a04      	ldr	r2, [sp, #16]
 8007c16:	2101      	movs	r1, #1
 8007c18:	441a      	add	r2, r3
 8007c1a:	4620      	mov	r0, r4
 8007c1c:	4498      	add	r8, r3
 8007c1e:	9204      	str	r2, [sp, #16]
 8007c20:	f000 fb4c 	bl	80082bc <__i2b>
 8007c24:	4607      	mov	r7, r0
 8007c26:	2d00      	cmp	r5, #0
 8007c28:	dd0b      	ble.n	8007c42 <_dtoa_r+0x78a>
 8007c2a:	9b04      	ldr	r3, [sp, #16]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	dd08      	ble.n	8007c42 <_dtoa_r+0x78a>
 8007c30:	42ab      	cmp	r3, r5
 8007c32:	9a04      	ldr	r2, [sp, #16]
 8007c34:	bfa8      	it	ge
 8007c36:	462b      	movge	r3, r5
 8007c38:	eba8 0803 	sub.w	r8, r8, r3
 8007c3c:	1aed      	subs	r5, r5, r3
 8007c3e:	1ad3      	subs	r3, r2, r3
 8007c40:	9304      	str	r3, [sp, #16]
 8007c42:	9b06      	ldr	r3, [sp, #24]
 8007c44:	b1fb      	cbz	r3, 8007c86 <_dtoa_r+0x7ce>
 8007c46:	9b08      	ldr	r3, [sp, #32]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	f000 809f 	beq.w	8007d8c <_dtoa_r+0x8d4>
 8007c4e:	2e00      	cmp	r6, #0
 8007c50:	dd11      	ble.n	8007c76 <_dtoa_r+0x7be>
 8007c52:	4639      	mov	r1, r7
 8007c54:	4632      	mov	r2, r6
 8007c56:	4620      	mov	r0, r4
 8007c58:	f000 fbec 	bl	8008434 <__pow5mult>
 8007c5c:	465a      	mov	r2, fp
 8007c5e:	4601      	mov	r1, r0
 8007c60:	4607      	mov	r7, r0
 8007c62:	4620      	mov	r0, r4
 8007c64:	f000 fb40 	bl	80082e8 <__multiply>
 8007c68:	4659      	mov	r1, fp
 8007c6a:	9007      	str	r0, [sp, #28]
 8007c6c:	4620      	mov	r0, r4
 8007c6e:	f000 fa69 	bl	8008144 <_Bfree>
 8007c72:	9b07      	ldr	r3, [sp, #28]
 8007c74:	469b      	mov	fp, r3
 8007c76:	9b06      	ldr	r3, [sp, #24]
 8007c78:	1b9a      	subs	r2, r3, r6
 8007c7a:	d004      	beq.n	8007c86 <_dtoa_r+0x7ce>
 8007c7c:	4659      	mov	r1, fp
 8007c7e:	4620      	mov	r0, r4
 8007c80:	f000 fbd8 	bl	8008434 <__pow5mult>
 8007c84:	4683      	mov	fp, r0
 8007c86:	2101      	movs	r1, #1
 8007c88:	4620      	mov	r0, r4
 8007c8a:	f000 fb17 	bl	80082bc <__i2b>
 8007c8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	4606      	mov	r6, r0
 8007c94:	dd7c      	ble.n	8007d90 <_dtoa_r+0x8d8>
 8007c96:	461a      	mov	r2, r3
 8007c98:	4601      	mov	r1, r0
 8007c9a:	4620      	mov	r0, r4
 8007c9c:	f000 fbca 	bl	8008434 <__pow5mult>
 8007ca0:	9b05      	ldr	r3, [sp, #20]
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	4606      	mov	r6, r0
 8007ca6:	dd76      	ble.n	8007d96 <_dtoa_r+0x8de>
 8007ca8:	2300      	movs	r3, #0
 8007caa:	9306      	str	r3, [sp, #24]
 8007cac:	6933      	ldr	r3, [r6, #16]
 8007cae:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007cb2:	6918      	ldr	r0, [r3, #16]
 8007cb4:	f000 fab2 	bl	800821c <__hi0bits>
 8007cb8:	f1c0 0020 	rsb	r0, r0, #32
 8007cbc:	9b04      	ldr	r3, [sp, #16]
 8007cbe:	4418      	add	r0, r3
 8007cc0:	f010 001f 	ands.w	r0, r0, #31
 8007cc4:	f000 8086 	beq.w	8007dd4 <_dtoa_r+0x91c>
 8007cc8:	f1c0 0320 	rsb	r3, r0, #32
 8007ccc:	2b04      	cmp	r3, #4
 8007cce:	dd7f      	ble.n	8007dd0 <_dtoa_r+0x918>
 8007cd0:	f1c0 001c 	rsb	r0, r0, #28
 8007cd4:	9b04      	ldr	r3, [sp, #16]
 8007cd6:	4403      	add	r3, r0
 8007cd8:	4480      	add	r8, r0
 8007cda:	4405      	add	r5, r0
 8007cdc:	9304      	str	r3, [sp, #16]
 8007cde:	f1b8 0f00 	cmp.w	r8, #0
 8007ce2:	dd05      	ble.n	8007cf0 <_dtoa_r+0x838>
 8007ce4:	4659      	mov	r1, fp
 8007ce6:	4642      	mov	r2, r8
 8007ce8:	4620      	mov	r0, r4
 8007cea:	f000 fbfd 	bl	80084e8 <__lshift>
 8007cee:	4683      	mov	fp, r0
 8007cf0:	9b04      	ldr	r3, [sp, #16]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	dd05      	ble.n	8007d02 <_dtoa_r+0x84a>
 8007cf6:	4631      	mov	r1, r6
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	4620      	mov	r0, r4
 8007cfc:	f000 fbf4 	bl	80084e8 <__lshift>
 8007d00:	4606      	mov	r6, r0
 8007d02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d069      	beq.n	8007ddc <_dtoa_r+0x924>
 8007d08:	4631      	mov	r1, r6
 8007d0a:	4658      	mov	r0, fp
 8007d0c:	f000 fc58 	bl	80085c0 <__mcmp>
 8007d10:	2800      	cmp	r0, #0
 8007d12:	da63      	bge.n	8007ddc <_dtoa_r+0x924>
 8007d14:	2300      	movs	r3, #0
 8007d16:	4659      	mov	r1, fp
 8007d18:	220a      	movs	r2, #10
 8007d1a:	4620      	mov	r0, r4
 8007d1c:	f000 fa34 	bl	8008188 <__multadd>
 8007d20:	9b08      	ldr	r3, [sp, #32]
 8007d22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d26:	4683      	mov	fp, r0
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	f000 818f 	beq.w	800804c <_dtoa_r+0xb94>
 8007d2e:	4639      	mov	r1, r7
 8007d30:	2300      	movs	r3, #0
 8007d32:	220a      	movs	r2, #10
 8007d34:	4620      	mov	r0, r4
 8007d36:	f000 fa27 	bl	8008188 <__multadd>
 8007d3a:	f1b9 0f00 	cmp.w	r9, #0
 8007d3e:	4607      	mov	r7, r0
 8007d40:	f300 808e 	bgt.w	8007e60 <_dtoa_r+0x9a8>
 8007d44:	9b05      	ldr	r3, [sp, #20]
 8007d46:	2b02      	cmp	r3, #2
 8007d48:	dc50      	bgt.n	8007dec <_dtoa_r+0x934>
 8007d4a:	e089      	b.n	8007e60 <_dtoa_r+0x9a8>
 8007d4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007d4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007d52:	e75d      	b.n	8007c10 <_dtoa_r+0x758>
 8007d54:	9b01      	ldr	r3, [sp, #4]
 8007d56:	1e5e      	subs	r6, r3, #1
 8007d58:	9b06      	ldr	r3, [sp, #24]
 8007d5a:	42b3      	cmp	r3, r6
 8007d5c:	bfbf      	itttt	lt
 8007d5e:	9b06      	ldrlt	r3, [sp, #24]
 8007d60:	9606      	strlt	r6, [sp, #24]
 8007d62:	1af2      	sublt	r2, r6, r3
 8007d64:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007d66:	bfb6      	itet	lt
 8007d68:	189b      	addlt	r3, r3, r2
 8007d6a:	1b9e      	subge	r6, r3, r6
 8007d6c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8007d6e:	9b01      	ldr	r3, [sp, #4]
 8007d70:	bfb8      	it	lt
 8007d72:	2600      	movlt	r6, #0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	bfb5      	itete	lt
 8007d78:	eba8 0503 	sublt.w	r5, r8, r3
 8007d7c:	9b01      	ldrge	r3, [sp, #4]
 8007d7e:	2300      	movlt	r3, #0
 8007d80:	4645      	movge	r5, r8
 8007d82:	e747      	b.n	8007c14 <_dtoa_r+0x75c>
 8007d84:	9e06      	ldr	r6, [sp, #24]
 8007d86:	9f08      	ldr	r7, [sp, #32]
 8007d88:	4645      	mov	r5, r8
 8007d8a:	e74c      	b.n	8007c26 <_dtoa_r+0x76e>
 8007d8c:	9a06      	ldr	r2, [sp, #24]
 8007d8e:	e775      	b.n	8007c7c <_dtoa_r+0x7c4>
 8007d90:	9b05      	ldr	r3, [sp, #20]
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	dc18      	bgt.n	8007dc8 <_dtoa_r+0x910>
 8007d96:	9b02      	ldr	r3, [sp, #8]
 8007d98:	b9b3      	cbnz	r3, 8007dc8 <_dtoa_r+0x910>
 8007d9a:	9b03      	ldr	r3, [sp, #12]
 8007d9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007da0:	b9a3      	cbnz	r3, 8007dcc <_dtoa_r+0x914>
 8007da2:	9b03      	ldr	r3, [sp, #12]
 8007da4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007da8:	0d1b      	lsrs	r3, r3, #20
 8007daa:	051b      	lsls	r3, r3, #20
 8007dac:	b12b      	cbz	r3, 8007dba <_dtoa_r+0x902>
 8007dae:	9b04      	ldr	r3, [sp, #16]
 8007db0:	3301      	adds	r3, #1
 8007db2:	9304      	str	r3, [sp, #16]
 8007db4:	f108 0801 	add.w	r8, r8, #1
 8007db8:	2301      	movs	r3, #1
 8007dba:	9306      	str	r3, [sp, #24]
 8007dbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	f47f af74 	bne.w	8007cac <_dtoa_r+0x7f4>
 8007dc4:	2001      	movs	r0, #1
 8007dc6:	e779      	b.n	8007cbc <_dtoa_r+0x804>
 8007dc8:	2300      	movs	r3, #0
 8007dca:	e7f6      	b.n	8007dba <_dtoa_r+0x902>
 8007dcc:	9b02      	ldr	r3, [sp, #8]
 8007dce:	e7f4      	b.n	8007dba <_dtoa_r+0x902>
 8007dd0:	d085      	beq.n	8007cde <_dtoa_r+0x826>
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	301c      	adds	r0, #28
 8007dd6:	e77d      	b.n	8007cd4 <_dtoa_r+0x81c>
 8007dd8:	40240000 	.word	0x40240000
 8007ddc:	9b01      	ldr	r3, [sp, #4]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	dc38      	bgt.n	8007e54 <_dtoa_r+0x99c>
 8007de2:	9b05      	ldr	r3, [sp, #20]
 8007de4:	2b02      	cmp	r3, #2
 8007de6:	dd35      	ble.n	8007e54 <_dtoa_r+0x99c>
 8007de8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007dec:	f1b9 0f00 	cmp.w	r9, #0
 8007df0:	d10d      	bne.n	8007e0e <_dtoa_r+0x956>
 8007df2:	4631      	mov	r1, r6
 8007df4:	464b      	mov	r3, r9
 8007df6:	2205      	movs	r2, #5
 8007df8:	4620      	mov	r0, r4
 8007dfa:	f000 f9c5 	bl	8008188 <__multadd>
 8007dfe:	4601      	mov	r1, r0
 8007e00:	4606      	mov	r6, r0
 8007e02:	4658      	mov	r0, fp
 8007e04:	f000 fbdc 	bl	80085c0 <__mcmp>
 8007e08:	2800      	cmp	r0, #0
 8007e0a:	f73f adbd 	bgt.w	8007988 <_dtoa_r+0x4d0>
 8007e0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e10:	9d00      	ldr	r5, [sp, #0]
 8007e12:	ea6f 0a03 	mvn.w	sl, r3
 8007e16:	f04f 0800 	mov.w	r8, #0
 8007e1a:	4631      	mov	r1, r6
 8007e1c:	4620      	mov	r0, r4
 8007e1e:	f000 f991 	bl	8008144 <_Bfree>
 8007e22:	2f00      	cmp	r7, #0
 8007e24:	f43f aeb4 	beq.w	8007b90 <_dtoa_r+0x6d8>
 8007e28:	f1b8 0f00 	cmp.w	r8, #0
 8007e2c:	d005      	beq.n	8007e3a <_dtoa_r+0x982>
 8007e2e:	45b8      	cmp	r8, r7
 8007e30:	d003      	beq.n	8007e3a <_dtoa_r+0x982>
 8007e32:	4641      	mov	r1, r8
 8007e34:	4620      	mov	r0, r4
 8007e36:	f000 f985 	bl	8008144 <_Bfree>
 8007e3a:	4639      	mov	r1, r7
 8007e3c:	4620      	mov	r0, r4
 8007e3e:	f000 f981 	bl	8008144 <_Bfree>
 8007e42:	e6a5      	b.n	8007b90 <_dtoa_r+0x6d8>
 8007e44:	2600      	movs	r6, #0
 8007e46:	4637      	mov	r7, r6
 8007e48:	e7e1      	b.n	8007e0e <_dtoa_r+0x956>
 8007e4a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007e4c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007e50:	4637      	mov	r7, r6
 8007e52:	e599      	b.n	8007988 <_dtoa_r+0x4d0>
 8007e54:	9b08      	ldr	r3, [sp, #32]
 8007e56:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	f000 80fd 	beq.w	800805a <_dtoa_r+0xba2>
 8007e60:	2d00      	cmp	r5, #0
 8007e62:	dd05      	ble.n	8007e70 <_dtoa_r+0x9b8>
 8007e64:	4639      	mov	r1, r7
 8007e66:	462a      	mov	r2, r5
 8007e68:	4620      	mov	r0, r4
 8007e6a:	f000 fb3d 	bl	80084e8 <__lshift>
 8007e6e:	4607      	mov	r7, r0
 8007e70:	9b06      	ldr	r3, [sp, #24]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d05c      	beq.n	8007f30 <_dtoa_r+0xa78>
 8007e76:	6879      	ldr	r1, [r7, #4]
 8007e78:	4620      	mov	r0, r4
 8007e7a:	f000 f923 	bl	80080c4 <_Balloc>
 8007e7e:	4605      	mov	r5, r0
 8007e80:	b928      	cbnz	r0, 8007e8e <_dtoa_r+0x9d6>
 8007e82:	4b80      	ldr	r3, [pc, #512]	; (8008084 <_dtoa_r+0xbcc>)
 8007e84:	4602      	mov	r2, r0
 8007e86:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007e8a:	f7ff bb2e 	b.w	80074ea <_dtoa_r+0x32>
 8007e8e:	693a      	ldr	r2, [r7, #16]
 8007e90:	3202      	adds	r2, #2
 8007e92:	0092      	lsls	r2, r2, #2
 8007e94:	f107 010c 	add.w	r1, r7, #12
 8007e98:	300c      	adds	r0, #12
 8007e9a:	f000 f905 	bl	80080a8 <memcpy>
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	4629      	mov	r1, r5
 8007ea2:	4620      	mov	r0, r4
 8007ea4:	f000 fb20 	bl	80084e8 <__lshift>
 8007ea8:	9b00      	ldr	r3, [sp, #0]
 8007eaa:	3301      	adds	r3, #1
 8007eac:	9301      	str	r3, [sp, #4]
 8007eae:	9b00      	ldr	r3, [sp, #0]
 8007eb0:	444b      	add	r3, r9
 8007eb2:	9307      	str	r3, [sp, #28]
 8007eb4:	9b02      	ldr	r3, [sp, #8]
 8007eb6:	f003 0301 	and.w	r3, r3, #1
 8007eba:	46b8      	mov	r8, r7
 8007ebc:	9306      	str	r3, [sp, #24]
 8007ebe:	4607      	mov	r7, r0
 8007ec0:	9b01      	ldr	r3, [sp, #4]
 8007ec2:	4631      	mov	r1, r6
 8007ec4:	3b01      	subs	r3, #1
 8007ec6:	4658      	mov	r0, fp
 8007ec8:	9302      	str	r3, [sp, #8]
 8007eca:	f7ff fa69 	bl	80073a0 <quorem>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	3330      	adds	r3, #48	; 0x30
 8007ed2:	9004      	str	r0, [sp, #16]
 8007ed4:	4641      	mov	r1, r8
 8007ed6:	4658      	mov	r0, fp
 8007ed8:	9308      	str	r3, [sp, #32]
 8007eda:	f000 fb71 	bl	80085c0 <__mcmp>
 8007ede:	463a      	mov	r2, r7
 8007ee0:	4681      	mov	r9, r0
 8007ee2:	4631      	mov	r1, r6
 8007ee4:	4620      	mov	r0, r4
 8007ee6:	f000 fb87 	bl	80085f8 <__mdiff>
 8007eea:	68c2      	ldr	r2, [r0, #12]
 8007eec:	9b08      	ldr	r3, [sp, #32]
 8007eee:	4605      	mov	r5, r0
 8007ef0:	bb02      	cbnz	r2, 8007f34 <_dtoa_r+0xa7c>
 8007ef2:	4601      	mov	r1, r0
 8007ef4:	4658      	mov	r0, fp
 8007ef6:	f000 fb63 	bl	80085c0 <__mcmp>
 8007efa:	9b08      	ldr	r3, [sp, #32]
 8007efc:	4602      	mov	r2, r0
 8007efe:	4629      	mov	r1, r5
 8007f00:	4620      	mov	r0, r4
 8007f02:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007f06:	f000 f91d 	bl	8008144 <_Bfree>
 8007f0a:	9b05      	ldr	r3, [sp, #20]
 8007f0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f0e:	9d01      	ldr	r5, [sp, #4]
 8007f10:	ea43 0102 	orr.w	r1, r3, r2
 8007f14:	9b06      	ldr	r3, [sp, #24]
 8007f16:	430b      	orrs	r3, r1
 8007f18:	9b08      	ldr	r3, [sp, #32]
 8007f1a:	d10d      	bne.n	8007f38 <_dtoa_r+0xa80>
 8007f1c:	2b39      	cmp	r3, #57	; 0x39
 8007f1e:	d029      	beq.n	8007f74 <_dtoa_r+0xabc>
 8007f20:	f1b9 0f00 	cmp.w	r9, #0
 8007f24:	dd01      	ble.n	8007f2a <_dtoa_r+0xa72>
 8007f26:	9b04      	ldr	r3, [sp, #16]
 8007f28:	3331      	adds	r3, #49	; 0x31
 8007f2a:	9a02      	ldr	r2, [sp, #8]
 8007f2c:	7013      	strb	r3, [r2, #0]
 8007f2e:	e774      	b.n	8007e1a <_dtoa_r+0x962>
 8007f30:	4638      	mov	r0, r7
 8007f32:	e7b9      	b.n	8007ea8 <_dtoa_r+0x9f0>
 8007f34:	2201      	movs	r2, #1
 8007f36:	e7e2      	b.n	8007efe <_dtoa_r+0xa46>
 8007f38:	f1b9 0f00 	cmp.w	r9, #0
 8007f3c:	db06      	blt.n	8007f4c <_dtoa_r+0xa94>
 8007f3e:	9905      	ldr	r1, [sp, #20]
 8007f40:	ea41 0909 	orr.w	r9, r1, r9
 8007f44:	9906      	ldr	r1, [sp, #24]
 8007f46:	ea59 0101 	orrs.w	r1, r9, r1
 8007f4a:	d120      	bne.n	8007f8e <_dtoa_r+0xad6>
 8007f4c:	2a00      	cmp	r2, #0
 8007f4e:	ddec      	ble.n	8007f2a <_dtoa_r+0xa72>
 8007f50:	4659      	mov	r1, fp
 8007f52:	2201      	movs	r2, #1
 8007f54:	4620      	mov	r0, r4
 8007f56:	9301      	str	r3, [sp, #4]
 8007f58:	f000 fac6 	bl	80084e8 <__lshift>
 8007f5c:	4631      	mov	r1, r6
 8007f5e:	4683      	mov	fp, r0
 8007f60:	f000 fb2e 	bl	80085c0 <__mcmp>
 8007f64:	2800      	cmp	r0, #0
 8007f66:	9b01      	ldr	r3, [sp, #4]
 8007f68:	dc02      	bgt.n	8007f70 <_dtoa_r+0xab8>
 8007f6a:	d1de      	bne.n	8007f2a <_dtoa_r+0xa72>
 8007f6c:	07da      	lsls	r2, r3, #31
 8007f6e:	d5dc      	bpl.n	8007f2a <_dtoa_r+0xa72>
 8007f70:	2b39      	cmp	r3, #57	; 0x39
 8007f72:	d1d8      	bne.n	8007f26 <_dtoa_r+0xa6e>
 8007f74:	9a02      	ldr	r2, [sp, #8]
 8007f76:	2339      	movs	r3, #57	; 0x39
 8007f78:	7013      	strb	r3, [r2, #0]
 8007f7a:	462b      	mov	r3, r5
 8007f7c:	461d      	mov	r5, r3
 8007f7e:	3b01      	subs	r3, #1
 8007f80:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007f84:	2a39      	cmp	r2, #57	; 0x39
 8007f86:	d050      	beq.n	800802a <_dtoa_r+0xb72>
 8007f88:	3201      	adds	r2, #1
 8007f8a:	701a      	strb	r2, [r3, #0]
 8007f8c:	e745      	b.n	8007e1a <_dtoa_r+0x962>
 8007f8e:	2a00      	cmp	r2, #0
 8007f90:	dd03      	ble.n	8007f9a <_dtoa_r+0xae2>
 8007f92:	2b39      	cmp	r3, #57	; 0x39
 8007f94:	d0ee      	beq.n	8007f74 <_dtoa_r+0xabc>
 8007f96:	3301      	adds	r3, #1
 8007f98:	e7c7      	b.n	8007f2a <_dtoa_r+0xa72>
 8007f9a:	9a01      	ldr	r2, [sp, #4]
 8007f9c:	9907      	ldr	r1, [sp, #28]
 8007f9e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007fa2:	428a      	cmp	r2, r1
 8007fa4:	d02a      	beq.n	8007ffc <_dtoa_r+0xb44>
 8007fa6:	4659      	mov	r1, fp
 8007fa8:	2300      	movs	r3, #0
 8007faa:	220a      	movs	r2, #10
 8007fac:	4620      	mov	r0, r4
 8007fae:	f000 f8eb 	bl	8008188 <__multadd>
 8007fb2:	45b8      	cmp	r8, r7
 8007fb4:	4683      	mov	fp, r0
 8007fb6:	f04f 0300 	mov.w	r3, #0
 8007fba:	f04f 020a 	mov.w	r2, #10
 8007fbe:	4641      	mov	r1, r8
 8007fc0:	4620      	mov	r0, r4
 8007fc2:	d107      	bne.n	8007fd4 <_dtoa_r+0xb1c>
 8007fc4:	f000 f8e0 	bl	8008188 <__multadd>
 8007fc8:	4680      	mov	r8, r0
 8007fca:	4607      	mov	r7, r0
 8007fcc:	9b01      	ldr	r3, [sp, #4]
 8007fce:	3301      	adds	r3, #1
 8007fd0:	9301      	str	r3, [sp, #4]
 8007fd2:	e775      	b.n	8007ec0 <_dtoa_r+0xa08>
 8007fd4:	f000 f8d8 	bl	8008188 <__multadd>
 8007fd8:	4639      	mov	r1, r7
 8007fda:	4680      	mov	r8, r0
 8007fdc:	2300      	movs	r3, #0
 8007fde:	220a      	movs	r2, #10
 8007fe0:	4620      	mov	r0, r4
 8007fe2:	f000 f8d1 	bl	8008188 <__multadd>
 8007fe6:	4607      	mov	r7, r0
 8007fe8:	e7f0      	b.n	8007fcc <_dtoa_r+0xb14>
 8007fea:	f1b9 0f00 	cmp.w	r9, #0
 8007fee:	9a00      	ldr	r2, [sp, #0]
 8007ff0:	bfcc      	ite	gt
 8007ff2:	464d      	movgt	r5, r9
 8007ff4:	2501      	movle	r5, #1
 8007ff6:	4415      	add	r5, r2
 8007ff8:	f04f 0800 	mov.w	r8, #0
 8007ffc:	4659      	mov	r1, fp
 8007ffe:	2201      	movs	r2, #1
 8008000:	4620      	mov	r0, r4
 8008002:	9301      	str	r3, [sp, #4]
 8008004:	f000 fa70 	bl	80084e8 <__lshift>
 8008008:	4631      	mov	r1, r6
 800800a:	4683      	mov	fp, r0
 800800c:	f000 fad8 	bl	80085c0 <__mcmp>
 8008010:	2800      	cmp	r0, #0
 8008012:	dcb2      	bgt.n	8007f7a <_dtoa_r+0xac2>
 8008014:	d102      	bne.n	800801c <_dtoa_r+0xb64>
 8008016:	9b01      	ldr	r3, [sp, #4]
 8008018:	07db      	lsls	r3, r3, #31
 800801a:	d4ae      	bmi.n	8007f7a <_dtoa_r+0xac2>
 800801c:	462b      	mov	r3, r5
 800801e:	461d      	mov	r5, r3
 8008020:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008024:	2a30      	cmp	r2, #48	; 0x30
 8008026:	d0fa      	beq.n	800801e <_dtoa_r+0xb66>
 8008028:	e6f7      	b.n	8007e1a <_dtoa_r+0x962>
 800802a:	9a00      	ldr	r2, [sp, #0]
 800802c:	429a      	cmp	r2, r3
 800802e:	d1a5      	bne.n	8007f7c <_dtoa_r+0xac4>
 8008030:	f10a 0a01 	add.w	sl, sl, #1
 8008034:	2331      	movs	r3, #49	; 0x31
 8008036:	e779      	b.n	8007f2c <_dtoa_r+0xa74>
 8008038:	4b13      	ldr	r3, [pc, #76]	; (8008088 <_dtoa_r+0xbd0>)
 800803a:	f7ff baaf 	b.w	800759c <_dtoa_r+0xe4>
 800803e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008040:	2b00      	cmp	r3, #0
 8008042:	f47f aa86 	bne.w	8007552 <_dtoa_r+0x9a>
 8008046:	4b11      	ldr	r3, [pc, #68]	; (800808c <_dtoa_r+0xbd4>)
 8008048:	f7ff baa8 	b.w	800759c <_dtoa_r+0xe4>
 800804c:	f1b9 0f00 	cmp.w	r9, #0
 8008050:	dc03      	bgt.n	800805a <_dtoa_r+0xba2>
 8008052:	9b05      	ldr	r3, [sp, #20]
 8008054:	2b02      	cmp	r3, #2
 8008056:	f73f aec9 	bgt.w	8007dec <_dtoa_r+0x934>
 800805a:	9d00      	ldr	r5, [sp, #0]
 800805c:	4631      	mov	r1, r6
 800805e:	4658      	mov	r0, fp
 8008060:	f7ff f99e 	bl	80073a0 <quorem>
 8008064:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008068:	f805 3b01 	strb.w	r3, [r5], #1
 800806c:	9a00      	ldr	r2, [sp, #0]
 800806e:	1aaa      	subs	r2, r5, r2
 8008070:	4591      	cmp	r9, r2
 8008072:	ddba      	ble.n	8007fea <_dtoa_r+0xb32>
 8008074:	4659      	mov	r1, fp
 8008076:	2300      	movs	r3, #0
 8008078:	220a      	movs	r2, #10
 800807a:	4620      	mov	r0, r4
 800807c:	f000 f884 	bl	8008188 <__multadd>
 8008080:	4683      	mov	fp, r0
 8008082:	e7eb      	b.n	800805c <_dtoa_r+0xba4>
 8008084:	0800a09f 	.word	0x0800a09f
 8008088:	08009ff8 	.word	0x08009ff8
 800808c:	0800a01c 	.word	0x0800a01c

08008090 <_localeconv_r>:
 8008090:	4800      	ldr	r0, [pc, #0]	; (8008094 <_localeconv_r+0x4>)
 8008092:	4770      	bx	lr
 8008094:	20000160 	.word	0x20000160

08008098 <malloc>:
 8008098:	4b02      	ldr	r3, [pc, #8]	; (80080a4 <malloc+0xc>)
 800809a:	4601      	mov	r1, r0
 800809c:	6818      	ldr	r0, [r3, #0]
 800809e:	f000 bbef 	b.w	8008880 <_malloc_r>
 80080a2:	bf00      	nop
 80080a4:	2000000c 	.word	0x2000000c

080080a8 <memcpy>:
 80080a8:	440a      	add	r2, r1
 80080aa:	4291      	cmp	r1, r2
 80080ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80080b0:	d100      	bne.n	80080b4 <memcpy+0xc>
 80080b2:	4770      	bx	lr
 80080b4:	b510      	push	{r4, lr}
 80080b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080be:	4291      	cmp	r1, r2
 80080c0:	d1f9      	bne.n	80080b6 <memcpy+0xe>
 80080c2:	bd10      	pop	{r4, pc}

080080c4 <_Balloc>:
 80080c4:	b570      	push	{r4, r5, r6, lr}
 80080c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80080c8:	4604      	mov	r4, r0
 80080ca:	460d      	mov	r5, r1
 80080cc:	b976      	cbnz	r6, 80080ec <_Balloc+0x28>
 80080ce:	2010      	movs	r0, #16
 80080d0:	f7ff ffe2 	bl	8008098 <malloc>
 80080d4:	4602      	mov	r2, r0
 80080d6:	6260      	str	r0, [r4, #36]	; 0x24
 80080d8:	b920      	cbnz	r0, 80080e4 <_Balloc+0x20>
 80080da:	4b18      	ldr	r3, [pc, #96]	; (800813c <_Balloc+0x78>)
 80080dc:	4818      	ldr	r0, [pc, #96]	; (8008140 <_Balloc+0x7c>)
 80080de:	2166      	movs	r1, #102	; 0x66
 80080e0:	f000 fd94 	bl	8008c0c <__assert_func>
 80080e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080e8:	6006      	str	r6, [r0, #0]
 80080ea:	60c6      	str	r6, [r0, #12]
 80080ec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80080ee:	68f3      	ldr	r3, [r6, #12]
 80080f0:	b183      	cbz	r3, 8008114 <_Balloc+0x50>
 80080f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080f4:	68db      	ldr	r3, [r3, #12]
 80080f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80080fa:	b9b8      	cbnz	r0, 800812c <_Balloc+0x68>
 80080fc:	2101      	movs	r1, #1
 80080fe:	fa01 f605 	lsl.w	r6, r1, r5
 8008102:	1d72      	adds	r2, r6, #5
 8008104:	0092      	lsls	r2, r2, #2
 8008106:	4620      	mov	r0, r4
 8008108:	f000 fb5a 	bl	80087c0 <_calloc_r>
 800810c:	b160      	cbz	r0, 8008128 <_Balloc+0x64>
 800810e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008112:	e00e      	b.n	8008132 <_Balloc+0x6e>
 8008114:	2221      	movs	r2, #33	; 0x21
 8008116:	2104      	movs	r1, #4
 8008118:	4620      	mov	r0, r4
 800811a:	f000 fb51 	bl	80087c0 <_calloc_r>
 800811e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008120:	60f0      	str	r0, [r6, #12]
 8008122:	68db      	ldr	r3, [r3, #12]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d1e4      	bne.n	80080f2 <_Balloc+0x2e>
 8008128:	2000      	movs	r0, #0
 800812a:	bd70      	pop	{r4, r5, r6, pc}
 800812c:	6802      	ldr	r2, [r0, #0]
 800812e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008132:	2300      	movs	r3, #0
 8008134:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008138:	e7f7      	b.n	800812a <_Balloc+0x66>
 800813a:	bf00      	nop
 800813c:	0800a029 	.word	0x0800a029
 8008140:	0800a0b0 	.word	0x0800a0b0

08008144 <_Bfree>:
 8008144:	b570      	push	{r4, r5, r6, lr}
 8008146:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008148:	4605      	mov	r5, r0
 800814a:	460c      	mov	r4, r1
 800814c:	b976      	cbnz	r6, 800816c <_Bfree+0x28>
 800814e:	2010      	movs	r0, #16
 8008150:	f7ff ffa2 	bl	8008098 <malloc>
 8008154:	4602      	mov	r2, r0
 8008156:	6268      	str	r0, [r5, #36]	; 0x24
 8008158:	b920      	cbnz	r0, 8008164 <_Bfree+0x20>
 800815a:	4b09      	ldr	r3, [pc, #36]	; (8008180 <_Bfree+0x3c>)
 800815c:	4809      	ldr	r0, [pc, #36]	; (8008184 <_Bfree+0x40>)
 800815e:	218a      	movs	r1, #138	; 0x8a
 8008160:	f000 fd54 	bl	8008c0c <__assert_func>
 8008164:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008168:	6006      	str	r6, [r0, #0]
 800816a:	60c6      	str	r6, [r0, #12]
 800816c:	b13c      	cbz	r4, 800817e <_Bfree+0x3a>
 800816e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008170:	6862      	ldr	r2, [r4, #4]
 8008172:	68db      	ldr	r3, [r3, #12]
 8008174:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008178:	6021      	str	r1, [r4, #0]
 800817a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800817e:	bd70      	pop	{r4, r5, r6, pc}
 8008180:	0800a029 	.word	0x0800a029
 8008184:	0800a0b0 	.word	0x0800a0b0

08008188 <__multadd>:
 8008188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800818c:	690e      	ldr	r6, [r1, #16]
 800818e:	4607      	mov	r7, r0
 8008190:	4698      	mov	r8, r3
 8008192:	460c      	mov	r4, r1
 8008194:	f101 0014 	add.w	r0, r1, #20
 8008198:	2300      	movs	r3, #0
 800819a:	6805      	ldr	r5, [r0, #0]
 800819c:	b2a9      	uxth	r1, r5
 800819e:	fb02 8101 	mla	r1, r2, r1, r8
 80081a2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80081a6:	0c2d      	lsrs	r5, r5, #16
 80081a8:	fb02 c505 	mla	r5, r2, r5, ip
 80081ac:	b289      	uxth	r1, r1
 80081ae:	3301      	adds	r3, #1
 80081b0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80081b4:	429e      	cmp	r6, r3
 80081b6:	f840 1b04 	str.w	r1, [r0], #4
 80081ba:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80081be:	dcec      	bgt.n	800819a <__multadd+0x12>
 80081c0:	f1b8 0f00 	cmp.w	r8, #0
 80081c4:	d022      	beq.n	800820c <__multadd+0x84>
 80081c6:	68a3      	ldr	r3, [r4, #8]
 80081c8:	42b3      	cmp	r3, r6
 80081ca:	dc19      	bgt.n	8008200 <__multadd+0x78>
 80081cc:	6861      	ldr	r1, [r4, #4]
 80081ce:	4638      	mov	r0, r7
 80081d0:	3101      	adds	r1, #1
 80081d2:	f7ff ff77 	bl	80080c4 <_Balloc>
 80081d6:	4605      	mov	r5, r0
 80081d8:	b928      	cbnz	r0, 80081e6 <__multadd+0x5e>
 80081da:	4602      	mov	r2, r0
 80081dc:	4b0d      	ldr	r3, [pc, #52]	; (8008214 <__multadd+0x8c>)
 80081de:	480e      	ldr	r0, [pc, #56]	; (8008218 <__multadd+0x90>)
 80081e0:	21b5      	movs	r1, #181	; 0xb5
 80081e2:	f000 fd13 	bl	8008c0c <__assert_func>
 80081e6:	6922      	ldr	r2, [r4, #16]
 80081e8:	3202      	adds	r2, #2
 80081ea:	f104 010c 	add.w	r1, r4, #12
 80081ee:	0092      	lsls	r2, r2, #2
 80081f0:	300c      	adds	r0, #12
 80081f2:	f7ff ff59 	bl	80080a8 <memcpy>
 80081f6:	4621      	mov	r1, r4
 80081f8:	4638      	mov	r0, r7
 80081fa:	f7ff ffa3 	bl	8008144 <_Bfree>
 80081fe:	462c      	mov	r4, r5
 8008200:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008204:	3601      	adds	r6, #1
 8008206:	f8c3 8014 	str.w	r8, [r3, #20]
 800820a:	6126      	str	r6, [r4, #16]
 800820c:	4620      	mov	r0, r4
 800820e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008212:	bf00      	nop
 8008214:	0800a09f 	.word	0x0800a09f
 8008218:	0800a0b0 	.word	0x0800a0b0

0800821c <__hi0bits>:
 800821c:	0c03      	lsrs	r3, r0, #16
 800821e:	041b      	lsls	r3, r3, #16
 8008220:	b9d3      	cbnz	r3, 8008258 <__hi0bits+0x3c>
 8008222:	0400      	lsls	r0, r0, #16
 8008224:	2310      	movs	r3, #16
 8008226:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800822a:	bf04      	itt	eq
 800822c:	0200      	lsleq	r0, r0, #8
 800822e:	3308      	addeq	r3, #8
 8008230:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008234:	bf04      	itt	eq
 8008236:	0100      	lsleq	r0, r0, #4
 8008238:	3304      	addeq	r3, #4
 800823a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800823e:	bf04      	itt	eq
 8008240:	0080      	lsleq	r0, r0, #2
 8008242:	3302      	addeq	r3, #2
 8008244:	2800      	cmp	r0, #0
 8008246:	db05      	blt.n	8008254 <__hi0bits+0x38>
 8008248:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800824c:	f103 0301 	add.w	r3, r3, #1
 8008250:	bf08      	it	eq
 8008252:	2320      	moveq	r3, #32
 8008254:	4618      	mov	r0, r3
 8008256:	4770      	bx	lr
 8008258:	2300      	movs	r3, #0
 800825a:	e7e4      	b.n	8008226 <__hi0bits+0xa>

0800825c <__lo0bits>:
 800825c:	6803      	ldr	r3, [r0, #0]
 800825e:	f013 0207 	ands.w	r2, r3, #7
 8008262:	4601      	mov	r1, r0
 8008264:	d00b      	beq.n	800827e <__lo0bits+0x22>
 8008266:	07da      	lsls	r2, r3, #31
 8008268:	d424      	bmi.n	80082b4 <__lo0bits+0x58>
 800826a:	0798      	lsls	r0, r3, #30
 800826c:	bf49      	itett	mi
 800826e:	085b      	lsrmi	r3, r3, #1
 8008270:	089b      	lsrpl	r3, r3, #2
 8008272:	2001      	movmi	r0, #1
 8008274:	600b      	strmi	r3, [r1, #0]
 8008276:	bf5c      	itt	pl
 8008278:	600b      	strpl	r3, [r1, #0]
 800827a:	2002      	movpl	r0, #2
 800827c:	4770      	bx	lr
 800827e:	b298      	uxth	r0, r3
 8008280:	b9b0      	cbnz	r0, 80082b0 <__lo0bits+0x54>
 8008282:	0c1b      	lsrs	r3, r3, #16
 8008284:	2010      	movs	r0, #16
 8008286:	f013 0fff 	tst.w	r3, #255	; 0xff
 800828a:	bf04      	itt	eq
 800828c:	0a1b      	lsreq	r3, r3, #8
 800828e:	3008      	addeq	r0, #8
 8008290:	071a      	lsls	r2, r3, #28
 8008292:	bf04      	itt	eq
 8008294:	091b      	lsreq	r3, r3, #4
 8008296:	3004      	addeq	r0, #4
 8008298:	079a      	lsls	r2, r3, #30
 800829a:	bf04      	itt	eq
 800829c:	089b      	lsreq	r3, r3, #2
 800829e:	3002      	addeq	r0, #2
 80082a0:	07da      	lsls	r2, r3, #31
 80082a2:	d403      	bmi.n	80082ac <__lo0bits+0x50>
 80082a4:	085b      	lsrs	r3, r3, #1
 80082a6:	f100 0001 	add.w	r0, r0, #1
 80082aa:	d005      	beq.n	80082b8 <__lo0bits+0x5c>
 80082ac:	600b      	str	r3, [r1, #0]
 80082ae:	4770      	bx	lr
 80082b0:	4610      	mov	r0, r2
 80082b2:	e7e8      	b.n	8008286 <__lo0bits+0x2a>
 80082b4:	2000      	movs	r0, #0
 80082b6:	4770      	bx	lr
 80082b8:	2020      	movs	r0, #32
 80082ba:	4770      	bx	lr

080082bc <__i2b>:
 80082bc:	b510      	push	{r4, lr}
 80082be:	460c      	mov	r4, r1
 80082c0:	2101      	movs	r1, #1
 80082c2:	f7ff feff 	bl	80080c4 <_Balloc>
 80082c6:	4602      	mov	r2, r0
 80082c8:	b928      	cbnz	r0, 80082d6 <__i2b+0x1a>
 80082ca:	4b05      	ldr	r3, [pc, #20]	; (80082e0 <__i2b+0x24>)
 80082cc:	4805      	ldr	r0, [pc, #20]	; (80082e4 <__i2b+0x28>)
 80082ce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80082d2:	f000 fc9b 	bl	8008c0c <__assert_func>
 80082d6:	2301      	movs	r3, #1
 80082d8:	6144      	str	r4, [r0, #20]
 80082da:	6103      	str	r3, [r0, #16]
 80082dc:	bd10      	pop	{r4, pc}
 80082de:	bf00      	nop
 80082e0:	0800a09f 	.word	0x0800a09f
 80082e4:	0800a0b0 	.word	0x0800a0b0

080082e8 <__multiply>:
 80082e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ec:	4614      	mov	r4, r2
 80082ee:	690a      	ldr	r2, [r1, #16]
 80082f0:	6923      	ldr	r3, [r4, #16]
 80082f2:	429a      	cmp	r2, r3
 80082f4:	bfb8      	it	lt
 80082f6:	460b      	movlt	r3, r1
 80082f8:	460d      	mov	r5, r1
 80082fa:	bfbc      	itt	lt
 80082fc:	4625      	movlt	r5, r4
 80082fe:	461c      	movlt	r4, r3
 8008300:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008304:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008308:	68ab      	ldr	r3, [r5, #8]
 800830a:	6869      	ldr	r1, [r5, #4]
 800830c:	eb0a 0709 	add.w	r7, sl, r9
 8008310:	42bb      	cmp	r3, r7
 8008312:	b085      	sub	sp, #20
 8008314:	bfb8      	it	lt
 8008316:	3101      	addlt	r1, #1
 8008318:	f7ff fed4 	bl	80080c4 <_Balloc>
 800831c:	b930      	cbnz	r0, 800832c <__multiply+0x44>
 800831e:	4602      	mov	r2, r0
 8008320:	4b42      	ldr	r3, [pc, #264]	; (800842c <__multiply+0x144>)
 8008322:	4843      	ldr	r0, [pc, #268]	; (8008430 <__multiply+0x148>)
 8008324:	f240 115d 	movw	r1, #349	; 0x15d
 8008328:	f000 fc70 	bl	8008c0c <__assert_func>
 800832c:	f100 0614 	add.w	r6, r0, #20
 8008330:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008334:	4633      	mov	r3, r6
 8008336:	2200      	movs	r2, #0
 8008338:	4543      	cmp	r3, r8
 800833a:	d31e      	bcc.n	800837a <__multiply+0x92>
 800833c:	f105 0c14 	add.w	ip, r5, #20
 8008340:	f104 0314 	add.w	r3, r4, #20
 8008344:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008348:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800834c:	9202      	str	r2, [sp, #8]
 800834e:	ebac 0205 	sub.w	r2, ip, r5
 8008352:	3a15      	subs	r2, #21
 8008354:	f022 0203 	bic.w	r2, r2, #3
 8008358:	3204      	adds	r2, #4
 800835a:	f105 0115 	add.w	r1, r5, #21
 800835e:	458c      	cmp	ip, r1
 8008360:	bf38      	it	cc
 8008362:	2204      	movcc	r2, #4
 8008364:	9201      	str	r2, [sp, #4]
 8008366:	9a02      	ldr	r2, [sp, #8]
 8008368:	9303      	str	r3, [sp, #12]
 800836a:	429a      	cmp	r2, r3
 800836c:	d808      	bhi.n	8008380 <__multiply+0x98>
 800836e:	2f00      	cmp	r7, #0
 8008370:	dc55      	bgt.n	800841e <__multiply+0x136>
 8008372:	6107      	str	r7, [r0, #16]
 8008374:	b005      	add	sp, #20
 8008376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800837a:	f843 2b04 	str.w	r2, [r3], #4
 800837e:	e7db      	b.n	8008338 <__multiply+0x50>
 8008380:	f8b3 a000 	ldrh.w	sl, [r3]
 8008384:	f1ba 0f00 	cmp.w	sl, #0
 8008388:	d020      	beq.n	80083cc <__multiply+0xe4>
 800838a:	f105 0e14 	add.w	lr, r5, #20
 800838e:	46b1      	mov	r9, r6
 8008390:	2200      	movs	r2, #0
 8008392:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008396:	f8d9 b000 	ldr.w	fp, [r9]
 800839a:	b2a1      	uxth	r1, r4
 800839c:	fa1f fb8b 	uxth.w	fp, fp
 80083a0:	fb0a b101 	mla	r1, sl, r1, fp
 80083a4:	4411      	add	r1, r2
 80083a6:	f8d9 2000 	ldr.w	r2, [r9]
 80083aa:	0c24      	lsrs	r4, r4, #16
 80083ac:	0c12      	lsrs	r2, r2, #16
 80083ae:	fb0a 2404 	mla	r4, sl, r4, r2
 80083b2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80083b6:	b289      	uxth	r1, r1
 80083b8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80083bc:	45f4      	cmp	ip, lr
 80083be:	f849 1b04 	str.w	r1, [r9], #4
 80083c2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80083c6:	d8e4      	bhi.n	8008392 <__multiply+0xaa>
 80083c8:	9901      	ldr	r1, [sp, #4]
 80083ca:	5072      	str	r2, [r6, r1]
 80083cc:	9a03      	ldr	r2, [sp, #12]
 80083ce:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80083d2:	3304      	adds	r3, #4
 80083d4:	f1b9 0f00 	cmp.w	r9, #0
 80083d8:	d01f      	beq.n	800841a <__multiply+0x132>
 80083da:	6834      	ldr	r4, [r6, #0]
 80083dc:	f105 0114 	add.w	r1, r5, #20
 80083e0:	46b6      	mov	lr, r6
 80083e2:	f04f 0a00 	mov.w	sl, #0
 80083e6:	880a      	ldrh	r2, [r1, #0]
 80083e8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80083ec:	fb09 b202 	mla	r2, r9, r2, fp
 80083f0:	4492      	add	sl, r2
 80083f2:	b2a4      	uxth	r4, r4
 80083f4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80083f8:	f84e 4b04 	str.w	r4, [lr], #4
 80083fc:	f851 4b04 	ldr.w	r4, [r1], #4
 8008400:	f8be 2000 	ldrh.w	r2, [lr]
 8008404:	0c24      	lsrs	r4, r4, #16
 8008406:	fb09 2404 	mla	r4, r9, r4, r2
 800840a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800840e:	458c      	cmp	ip, r1
 8008410:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008414:	d8e7      	bhi.n	80083e6 <__multiply+0xfe>
 8008416:	9a01      	ldr	r2, [sp, #4]
 8008418:	50b4      	str	r4, [r6, r2]
 800841a:	3604      	adds	r6, #4
 800841c:	e7a3      	b.n	8008366 <__multiply+0x7e>
 800841e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008422:	2b00      	cmp	r3, #0
 8008424:	d1a5      	bne.n	8008372 <__multiply+0x8a>
 8008426:	3f01      	subs	r7, #1
 8008428:	e7a1      	b.n	800836e <__multiply+0x86>
 800842a:	bf00      	nop
 800842c:	0800a09f 	.word	0x0800a09f
 8008430:	0800a0b0 	.word	0x0800a0b0

08008434 <__pow5mult>:
 8008434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008438:	4615      	mov	r5, r2
 800843a:	f012 0203 	ands.w	r2, r2, #3
 800843e:	4606      	mov	r6, r0
 8008440:	460f      	mov	r7, r1
 8008442:	d007      	beq.n	8008454 <__pow5mult+0x20>
 8008444:	4c25      	ldr	r4, [pc, #148]	; (80084dc <__pow5mult+0xa8>)
 8008446:	3a01      	subs	r2, #1
 8008448:	2300      	movs	r3, #0
 800844a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800844e:	f7ff fe9b 	bl	8008188 <__multadd>
 8008452:	4607      	mov	r7, r0
 8008454:	10ad      	asrs	r5, r5, #2
 8008456:	d03d      	beq.n	80084d4 <__pow5mult+0xa0>
 8008458:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800845a:	b97c      	cbnz	r4, 800847c <__pow5mult+0x48>
 800845c:	2010      	movs	r0, #16
 800845e:	f7ff fe1b 	bl	8008098 <malloc>
 8008462:	4602      	mov	r2, r0
 8008464:	6270      	str	r0, [r6, #36]	; 0x24
 8008466:	b928      	cbnz	r0, 8008474 <__pow5mult+0x40>
 8008468:	4b1d      	ldr	r3, [pc, #116]	; (80084e0 <__pow5mult+0xac>)
 800846a:	481e      	ldr	r0, [pc, #120]	; (80084e4 <__pow5mult+0xb0>)
 800846c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008470:	f000 fbcc 	bl	8008c0c <__assert_func>
 8008474:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008478:	6004      	str	r4, [r0, #0]
 800847a:	60c4      	str	r4, [r0, #12]
 800847c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008480:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008484:	b94c      	cbnz	r4, 800849a <__pow5mult+0x66>
 8008486:	f240 2171 	movw	r1, #625	; 0x271
 800848a:	4630      	mov	r0, r6
 800848c:	f7ff ff16 	bl	80082bc <__i2b>
 8008490:	2300      	movs	r3, #0
 8008492:	f8c8 0008 	str.w	r0, [r8, #8]
 8008496:	4604      	mov	r4, r0
 8008498:	6003      	str	r3, [r0, #0]
 800849a:	f04f 0900 	mov.w	r9, #0
 800849e:	07eb      	lsls	r3, r5, #31
 80084a0:	d50a      	bpl.n	80084b8 <__pow5mult+0x84>
 80084a2:	4639      	mov	r1, r7
 80084a4:	4622      	mov	r2, r4
 80084a6:	4630      	mov	r0, r6
 80084a8:	f7ff ff1e 	bl	80082e8 <__multiply>
 80084ac:	4639      	mov	r1, r7
 80084ae:	4680      	mov	r8, r0
 80084b0:	4630      	mov	r0, r6
 80084b2:	f7ff fe47 	bl	8008144 <_Bfree>
 80084b6:	4647      	mov	r7, r8
 80084b8:	106d      	asrs	r5, r5, #1
 80084ba:	d00b      	beq.n	80084d4 <__pow5mult+0xa0>
 80084bc:	6820      	ldr	r0, [r4, #0]
 80084be:	b938      	cbnz	r0, 80084d0 <__pow5mult+0x9c>
 80084c0:	4622      	mov	r2, r4
 80084c2:	4621      	mov	r1, r4
 80084c4:	4630      	mov	r0, r6
 80084c6:	f7ff ff0f 	bl	80082e8 <__multiply>
 80084ca:	6020      	str	r0, [r4, #0]
 80084cc:	f8c0 9000 	str.w	r9, [r0]
 80084d0:	4604      	mov	r4, r0
 80084d2:	e7e4      	b.n	800849e <__pow5mult+0x6a>
 80084d4:	4638      	mov	r0, r7
 80084d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084da:	bf00      	nop
 80084dc:	0800a200 	.word	0x0800a200
 80084e0:	0800a029 	.word	0x0800a029
 80084e4:	0800a0b0 	.word	0x0800a0b0

080084e8 <__lshift>:
 80084e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084ec:	460c      	mov	r4, r1
 80084ee:	6849      	ldr	r1, [r1, #4]
 80084f0:	6923      	ldr	r3, [r4, #16]
 80084f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80084f6:	68a3      	ldr	r3, [r4, #8]
 80084f8:	4607      	mov	r7, r0
 80084fa:	4691      	mov	r9, r2
 80084fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008500:	f108 0601 	add.w	r6, r8, #1
 8008504:	42b3      	cmp	r3, r6
 8008506:	db0b      	blt.n	8008520 <__lshift+0x38>
 8008508:	4638      	mov	r0, r7
 800850a:	f7ff fddb 	bl	80080c4 <_Balloc>
 800850e:	4605      	mov	r5, r0
 8008510:	b948      	cbnz	r0, 8008526 <__lshift+0x3e>
 8008512:	4602      	mov	r2, r0
 8008514:	4b28      	ldr	r3, [pc, #160]	; (80085b8 <__lshift+0xd0>)
 8008516:	4829      	ldr	r0, [pc, #164]	; (80085bc <__lshift+0xd4>)
 8008518:	f240 11d9 	movw	r1, #473	; 0x1d9
 800851c:	f000 fb76 	bl	8008c0c <__assert_func>
 8008520:	3101      	adds	r1, #1
 8008522:	005b      	lsls	r3, r3, #1
 8008524:	e7ee      	b.n	8008504 <__lshift+0x1c>
 8008526:	2300      	movs	r3, #0
 8008528:	f100 0114 	add.w	r1, r0, #20
 800852c:	f100 0210 	add.w	r2, r0, #16
 8008530:	4618      	mov	r0, r3
 8008532:	4553      	cmp	r3, sl
 8008534:	db33      	blt.n	800859e <__lshift+0xb6>
 8008536:	6920      	ldr	r0, [r4, #16]
 8008538:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800853c:	f104 0314 	add.w	r3, r4, #20
 8008540:	f019 091f 	ands.w	r9, r9, #31
 8008544:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008548:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800854c:	d02b      	beq.n	80085a6 <__lshift+0xbe>
 800854e:	f1c9 0e20 	rsb	lr, r9, #32
 8008552:	468a      	mov	sl, r1
 8008554:	2200      	movs	r2, #0
 8008556:	6818      	ldr	r0, [r3, #0]
 8008558:	fa00 f009 	lsl.w	r0, r0, r9
 800855c:	4302      	orrs	r2, r0
 800855e:	f84a 2b04 	str.w	r2, [sl], #4
 8008562:	f853 2b04 	ldr.w	r2, [r3], #4
 8008566:	459c      	cmp	ip, r3
 8008568:	fa22 f20e 	lsr.w	r2, r2, lr
 800856c:	d8f3      	bhi.n	8008556 <__lshift+0x6e>
 800856e:	ebac 0304 	sub.w	r3, ip, r4
 8008572:	3b15      	subs	r3, #21
 8008574:	f023 0303 	bic.w	r3, r3, #3
 8008578:	3304      	adds	r3, #4
 800857a:	f104 0015 	add.w	r0, r4, #21
 800857e:	4584      	cmp	ip, r0
 8008580:	bf38      	it	cc
 8008582:	2304      	movcc	r3, #4
 8008584:	50ca      	str	r2, [r1, r3]
 8008586:	b10a      	cbz	r2, 800858c <__lshift+0xa4>
 8008588:	f108 0602 	add.w	r6, r8, #2
 800858c:	3e01      	subs	r6, #1
 800858e:	4638      	mov	r0, r7
 8008590:	612e      	str	r6, [r5, #16]
 8008592:	4621      	mov	r1, r4
 8008594:	f7ff fdd6 	bl	8008144 <_Bfree>
 8008598:	4628      	mov	r0, r5
 800859a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800859e:	f842 0f04 	str.w	r0, [r2, #4]!
 80085a2:	3301      	adds	r3, #1
 80085a4:	e7c5      	b.n	8008532 <__lshift+0x4a>
 80085a6:	3904      	subs	r1, #4
 80085a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80085ac:	f841 2f04 	str.w	r2, [r1, #4]!
 80085b0:	459c      	cmp	ip, r3
 80085b2:	d8f9      	bhi.n	80085a8 <__lshift+0xc0>
 80085b4:	e7ea      	b.n	800858c <__lshift+0xa4>
 80085b6:	bf00      	nop
 80085b8:	0800a09f 	.word	0x0800a09f
 80085bc:	0800a0b0 	.word	0x0800a0b0

080085c0 <__mcmp>:
 80085c0:	b530      	push	{r4, r5, lr}
 80085c2:	6902      	ldr	r2, [r0, #16]
 80085c4:	690c      	ldr	r4, [r1, #16]
 80085c6:	1b12      	subs	r2, r2, r4
 80085c8:	d10e      	bne.n	80085e8 <__mcmp+0x28>
 80085ca:	f100 0314 	add.w	r3, r0, #20
 80085ce:	3114      	adds	r1, #20
 80085d0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80085d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80085d8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80085dc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80085e0:	42a5      	cmp	r5, r4
 80085e2:	d003      	beq.n	80085ec <__mcmp+0x2c>
 80085e4:	d305      	bcc.n	80085f2 <__mcmp+0x32>
 80085e6:	2201      	movs	r2, #1
 80085e8:	4610      	mov	r0, r2
 80085ea:	bd30      	pop	{r4, r5, pc}
 80085ec:	4283      	cmp	r3, r0
 80085ee:	d3f3      	bcc.n	80085d8 <__mcmp+0x18>
 80085f0:	e7fa      	b.n	80085e8 <__mcmp+0x28>
 80085f2:	f04f 32ff 	mov.w	r2, #4294967295
 80085f6:	e7f7      	b.n	80085e8 <__mcmp+0x28>

080085f8 <__mdiff>:
 80085f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085fc:	460c      	mov	r4, r1
 80085fe:	4606      	mov	r6, r0
 8008600:	4611      	mov	r1, r2
 8008602:	4620      	mov	r0, r4
 8008604:	4617      	mov	r7, r2
 8008606:	f7ff ffdb 	bl	80085c0 <__mcmp>
 800860a:	1e05      	subs	r5, r0, #0
 800860c:	d110      	bne.n	8008630 <__mdiff+0x38>
 800860e:	4629      	mov	r1, r5
 8008610:	4630      	mov	r0, r6
 8008612:	f7ff fd57 	bl	80080c4 <_Balloc>
 8008616:	b930      	cbnz	r0, 8008626 <__mdiff+0x2e>
 8008618:	4b39      	ldr	r3, [pc, #228]	; (8008700 <__mdiff+0x108>)
 800861a:	4602      	mov	r2, r0
 800861c:	f240 2132 	movw	r1, #562	; 0x232
 8008620:	4838      	ldr	r0, [pc, #224]	; (8008704 <__mdiff+0x10c>)
 8008622:	f000 faf3 	bl	8008c0c <__assert_func>
 8008626:	2301      	movs	r3, #1
 8008628:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800862c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008630:	bfa4      	itt	ge
 8008632:	463b      	movge	r3, r7
 8008634:	4627      	movge	r7, r4
 8008636:	4630      	mov	r0, r6
 8008638:	6879      	ldr	r1, [r7, #4]
 800863a:	bfa6      	itte	ge
 800863c:	461c      	movge	r4, r3
 800863e:	2500      	movge	r5, #0
 8008640:	2501      	movlt	r5, #1
 8008642:	f7ff fd3f 	bl	80080c4 <_Balloc>
 8008646:	b920      	cbnz	r0, 8008652 <__mdiff+0x5a>
 8008648:	4b2d      	ldr	r3, [pc, #180]	; (8008700 <__mdiff+0x108>)
 800864a:	4602      	mov	r2, r0
 800864c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008650:	e7e6      	b.n	8008620 <__mdiff+0x28>
 8008652:	693e      	ldr	r6, [r7, #16]
 8008654:	60c5      	str	r5, [r0, #12]
 8008656:	6925      	ldr	r5, [r4, #16]
 8008658:	f107 0114 	add.w	r1, r7, #20
 800865c:	f104 0914 	add.w	r9, r4, #20
 8008660:	f100 0e14 	add.w	lr, r0, #20
 8008664:	f107 0210 	add.w	r2, r7, #16
 8008668:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800866c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008670:	46f2      	mov	sl, lr
 8008672:	2700      	movs	r7, #0
 8008674:	f859 3b04 	ldr.w	r3, [r9], #4
 8008678:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800867c:	fa1f f883 	uxth.w	r8, r3
 8008680:	fa17 f78b 	uxtah	r7, r7, fp
 8008684:	0c1b      	lsrs	r3, r3, #16
 8008686:	eba7 0808 	sub.w	r8, r7, r8
 800868a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800868e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008692:	fa1f f888 	uxth.w	r8, r8
 8008696:	141f      	asrs	r7, r3, #16
 8008698:	454d      	cmp	r5, r9
 800869a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800869e:	f84a 3b04 	str.w	r3, [sl], #4
 80086a2:	d8e7      	bhi.n	8008674 <__mdiff+0x7c>
 80086a4:	1b2b      	subs	r3, r5, r4
 80086a6:	3b15      	subs	r3, #21
 80086a8:	f023 0303 	bic.w	r3, r3, #3
 80086ac:	3304      	adds	r3, #4
 80086ae:	3415      	adds	r4, #21
 80086b0:	42a5      	cmp	r5, r4
 80086b2:	bf38      	it	cc
 80086b4:	2304      	movcc	r3, #4
 80086b6:	4419      	add	r1, r3
 80086b8:	4473      	add	r3, lr
 80086ba:	469e      	mov	lr, r3
 80086bc:	460d      	mov	r5, r1
 80086be:	4565      	cmp	r5, ip
 80086c0:	d30e      	bcc.n	80086e0 <__mdiff+0xe8>
 80086c2:	f10c 0203 	add.w	r2, ip, #3
 80086c6:	1a52      	subs	r2, r2, r1
 80086c8:	f022 0203 	bic.w	r2, r2, #3
 80086cc:	3903      	subs	r1, #3
 80086ce:	458c      	cmp	ip, r1
 80086d0:	bf38      	it	cc
 80086d2:	2200      	movcc	r2, #0
 80086d4:	441a      	add	r2, r3
 80086d6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80086da:	b17b      	cbz	r3, 80086fc <__mdiff+0x104>
 80086dc:	6106      	str	r6, [r0, #16]
 80086de:	e7a5      	b.n	800862c <__mdiff+0x34>
 80086e0:	f855 8b04 	ldr.w	r8, [r5], #4
 80086e4:	fa17 f488 	uxtah	r4, r7, r8
 80086e8:	1422      	asrs	r2, r4, #16
 80086ea:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80086ee:	b2a4      	uxth	r4, r4
 80086f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80086f4:	f84e 4b04 	str.w	r4, [lr], #4
 80086f8:	1417      	asrs	r7, r2, #16
 80086fa:	e7e0      	b.n	80086be <__mdiff+0xc6>
 80086fc:	3e01      	subs	r6, #1
 80086fe:	e7ea      	b.n	80086d6 <__mdiff+0xde>
 8008700:	0800a09f 	.word	0x0800a09f
 8008704:	0800a0b0 	.word	0x0800a0b0

08008708 <__d2b>:
 8008708:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800870c:	4689      	mov	r9, r1
 800870e:	2101      	movs	r1, #1
 8008710:	ec57 6b10 	vmov	r6, r7, d0
 8008714:	4690      	mov	r8, r2
 8008716:	f7ff fcd5 	bl	80080c4 <_Balloc>
 800871a:	4604      	mov	r4, r0
 800871c:	b930      	cbnz	r0, 800872c <__d2b+0x24>
 800871e:	4602      	mov	r2, r0
 8008720:	4b25      	ldr	r3, [pc, #148]	; (80087b8 <__d2b+0xb0>)
 8008722:	4826      	ldr	r0, [pc, #152]	; (80087bc <__d2b+0xb4>)
 8008724:	f240 310a 	movw	r1, #778	; 0x30a
 8008728:	f000 fa70 	bl	8008c0c <__assert_func>
 800872c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008730:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008734:	bb35      	cbnz	r5, 8008784 <__d2b+0x7c>
 8008736:	2e00      	cmp	r6, #0
 8008738:	9301      	str	r3, [sp, #4]
 800873a:	d028      	beq.n	800878e <__d2b+0x86>
 800873c:	4668      	mov	r0, sp
 800873e:	9600      	str	r6, [sp, #0]
 8008740:	f7ff fd8c 	bl	800825c <__lo0bits>
 8008744:	9900      	ldr	r1, [sp, #0]
 8008746:	b300      	cbz	r0, 800878a <__d2b+0x82>
 8008748:	9a01      	ldr	r2, [sp, #4]
 800874a:	f1c0 0320 	rsb	r3, r0, #32
 800874e:	fa02 f303 	lsl.w	r3, r2, r3
 8008752:	430b      	orrs	r3, r1
 8008754:	40c2      	lsrs	r2, r0
 8008756:	6163      	str	r3, [r4, #20]
 8008758:	9201      	str	r2, [sp, #4]
 800875a:	9b01      	ldr	r3, [sp, #4]
 800875c:	61a3      	str	r3, [r4, #24]
 800875e:	2b00      	cmp	r3, #0
 8008760:	bf14      	ite	ne
 8008762:	2202      	movne	r2, #2
 8008764:	2201      	moveq	r2, #1
 8008766:	6122      	str	r2, [r4, #16]
 8008768:	b1d5      	cbz	r5, 80087a0 <__d2b+0x98>
 800876a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800876e:	4405      	add	r5, r0
 8008770:	f8c9 5000 	str.w	r5, [r9]
 8008774:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008778:	f8c8 0000 	str.w	r0, [r8]
 800877c:	4620      	mov	r0, r4
 800877e:	b003      	add	sp, #12
 8008780:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008784:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008788:	e7d5      	b.n	8008736 <__d2b+0x2e>
 800878a:	6161      	str	r1, [r4, #20]
 800878c:	e7e5      	b.n	800875a <__d2b+0x52>
 800878e:	a801      	add	r0, sp, #4
 8008790:	f7ff fd64 	bl	800825c <__lo0bits>
 8008794:	9b01      	ldr	r3, [sp, #4]
 8008796:	6163      	str	r3, [r4, #20]
 8008798:	2201      	movs	r2, #1
 800879a:	6122      	str	r2, [r4, #16]
 800879c:	3020      	adds	r0, #32
 800879e:	e7e3      	b.n	8008768 <__d2b+0x60>
 80087a0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80087a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80087a8:	f8c9 0000 	str.w	r0, [r9]
 80087ac:	6918      	ldr	r0, [r3, #16]
 80087ae:	f7ff fd35 	bl	800821c <__hi0bits>
 80087b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80087b6:	e7df      	b.n	8008778 <__d2b+0x70>
 80087b8:	0800a09f 	.word	0x0800a09f
 80087bc:	0800a0b0 	.word	0x0800a0b0

080087c0 <_calloc_r>:
 80087c0:	b513      	push	{r0, r1, r4, lr}
 80087c2:	434a      	muls	r2, r1
 80087c4:	4611      	mov	r1, r2
 80087c6:	9201      	str	r2, [sp, #4]
 80087c8:	f000 f85a 	bl	8008880 <_malloc_r>
 80087cc:	4604      	mov	r4, r0
 80087ce:	b118      	cbz	r0, 80087d8 <_calloc_r+0x18>
 80087d0:	9a01      	ldr	r2, [sp, #4]
 80087d2:	2100      	movs	r1, #0
 80087d4:	f7fe f952 	bl	8006a7c <memset>
 80087d8:	4620      	mov	r0, r4
 80087da:	b002      	add	sp, #8
 80087dc:	bd10      	pop	{r4, pc}
	...

080087e0 <_free_r>:
 80087e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80087e2:	2900      	cmp	r1, #0
 80087e4:	d048      	beq.n	8008878 <_free_r+0x98>
 80087e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087ea:	9001      	str	r0, [sp, #4]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	f1a1 0404 	sub.w	r4, r1, #4
 80087f2:	bfb8      	it	lt
 80087f4:	18e4      	addlt	r4, r4, r3
 80087f6:	f000 fa65 	bl	8008cc4 <__malloc_lock>
 80087fa:	4a20      	ldr	r2, [pc, #128]	; (800887c <_free_r+0x9c>)
 80087fc:	9801      	ldr	r0, [sp, #4]
 80087fe:	6813      	ldr	r3, [r2, #0]
 8008800:	4615      	mov	r5, r2
 8008802:	b933      	cbnz	r3, 8008812 <_free_r+0x32>
 8008804:	6063      	str	r3, [r4, #4]
 8008806:	6014      	str	r4, [r2, #0]
 8008808:	b003      	add	sp, #12
 800880a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800880e:	f000 ba5f 	b.w	8008cd0 <__malloc_unlock>
 8008812:	42a3      	cmp	r3, r4
 8008814:	d90b      	bls.n	800882e <_free_r+0x4e>
 8008816:	6821      	ldr	r1, [r4, #0]
 8008818:	1862      	adds	r2, r4, r1
 800881a:	4293      	cmp	r3, r2
 800881c:	bf04      	itt	eq
 800881e:	681a      	ldreq	r2, [r3, #0]
 8008820:	685b      	ldreq	r3, [r3, #4]
 8008822:	6063      	str	r3, [r4, #4]
 8008824:	bf04      	itt	eq
 8008826:	1852      	addeq	r2, r2, r1
 8008828:	6022      	streq	r2, [r4, #0]
 800882a:	602c      	str	r4, [r5, #0]
 800882c:	e7ec      	b.n	8008808 <_free_r+0x28>
 800882e:	461a      	mov	r2, r3
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	b10b      	cbz	r3, 8008838 <_free_r+0x58>
 8008834:	42a3      	cmp	r3, r4
 8008836:	d9fa      	bls.n	800882e <_free_r+0x4e>
 8008838:	6811      	ldr	r1, [r2, #0]
 800883a:	1855      	adds	r5, r2, r1
 800883c:	42a5      	cmp	r5, r4
 800883e:	d10b      	bne.n	8008858 <_free_r+0x78>
 8008840:	6824      	ldr	r4, [r4, #0]
 8008842:	4421      	add	r1, r4
 8008844:	1854      	adds	r4, r2, r1
 8008846:	42a3      	cmp	r3, r4
 8008848:	6011      	str	r1, [r2, #0]
 800884a:	d1dd      	bne.n	8008808 <_free_r+0x28>
 800884c:	681c      	ldr	r4, [r3, #0]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	6053      	str	r3, [r2, #4]
 8008852:	4421      	add	r1, r4
 8008854:	6011      	str	r1, [r2, #0]
 8008856:	e7d7      	b.n	8008808 <_free_r+0x28>
 8008858:	d902      	bls.n	8008860 <_free_r+0x80>
 800885a:	230c      	movs	r3, #12
 800885c:	6003      	str	r3, [r0, #0]
 800885e:	e7d3      	b.n	8008808 <_free_r+0x28>
 8008860:	6825      	ldr	r5, [r4, #0]
 8008862:	1961      	adds	r1, r4, r5
 8008864:	428b      	cmp	r3, r1
 8008866:	bf04      	itt	eq
 8008868:	6819      	ldreq	r1, [r3, #0]
 800886a:	685b      	ldreq	r3, [r3, #4]
 800886c:	6063      	str	r3, [r4, #4]
 800886e:	bf04      	itt	eq
 8008870:	1949      	addeq	r1, r1, r5
 8008872:	6021      	streq	r1, [r4, #0]
 8008874:	6054      	str	r4, [r2, #4]
 8008876:	e7c7      	b.n	8008808 <_free_r+0x28>
 8008878:	b003      	add	sp, #12
 800887a:	bd30      	pop	{r4, r5, pc}
 800887c:	20000248 	.word	0x20000248

08008880 <_malloc_r>:
 8008880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008882:	1ccd      	adds	r5, r1, #3
 8008884:	f025 0503 	bic.w	r5, r5, #3
 8008888:	3508      	adds	r5, #8
 800888a:	2d0c      	cmp	r5, #12
 800888c:	bf38      	it	cc
 800888e:	250c      	movcc	r5, #12
 8008890:	2d00      	cmp	r5, #0
 8008892:	4606      	mov	r6, r0
 8008894:	db01      	blt.n	800889a <_malloc_r+0x1a>
 8008896:	42a9      	cmp	r1, r5
 8008898:	d903      	bls.n	80088a2 <_malloc_r+0x22>
 800889a:	230c      	movs	r3, #12
 800889c:	6033      	str	r3, [r6, #0]
 800889e:	2000      	movs	r0, #0
 80088a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088a2:	f000 fa0f 	bl	8008cc4 <__malloc_lock>
 80088a6:	4921      	ldr	r1, [pc, #132]	; (800892c <_malloc_r+0xac>)
 80088a8:	680a      	ldr	r2, [r1, #0]
 80088aa:	4614      	mov	r4, r2
 80088ac:	b99c      	cbnz	r4, 80088d6 <_malloc_r+0x56>
 80088ae:	4f20      	ldr	r7, [pc, #128]	; (8008930 <_malloc_r+0xb0>)
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	b923      	cbnz	r3, 80088be <_malloc_r+0x3e>
 80088b4:	4621      	mov	r1, r4
 80088b6:	4630      	mov	r0, r6
 80088b8:	f000 f998 	bl	8008bec <_sbrk_r>
 80088bc:	6038      	str	r0, [r7, #0]
 80088be:	4629      	mov	r1, r5
 80088c0:	4630      	mov	r0, r6
 80088c2:	f000 f993 	bl	8008bec <_sbrk_r>
 80088c6:	1c43      	adds	r3, r0, #1
 80088c8:	d123      	bne.n	8008912 <_malloc_r+0x92>
 80088ca:	230c      	movs	r3, #12
 80088cc:	6033      	str	r3, [r6, #0]
 80088ce:	4630      	mov	r0, r6
 80088d0:	f000 f9fe 	bl	8008cd0 <__malloc_unlock>
 80088d4:	e7e3      	b.n	800889e <_malloc_r+0x1e>
 80088d6:	6823      	ldr	r3, [r4, #0]
 80088d8:	1b5b      	subs	r3, r3, r5
 80088da:	d417      	bmi.n	800890c <_malloc_r+0x8c>
 80088dc:	2b0b      	cmp	r3, #11
 80088de:	d903      	bls.n	80088e8 <_malloc_r+0x68>
 80088e0:	6023      	str	r3, [r4, #0]
 80088e2:	441c      	add	r4, r3
 80088e4:	6025      	str	r5, [r4, #0]
 80088e6:	e004      	b.n	80088f2 <_malloc_r+0x72>
 80088e8:	6863      	ldr	r3, [r4, #4]
 80088ea:	42a2      	cmp	r2, r4
 80088ec:	bf0c      	ite	eq
 80088ee:	600b      	streq	r3, [r1, #0]
 80088f0:	6053      	strne	r3, [r2, #4]
 80088f2:	4630      	mov	r0, r6
 80088f4:	f000 f9ec 	bl	8008cd0 <__malloc_unlock>
 80088f8:	f104 000b 	add.w	r0, r4, #11
 80088fc:	1d23      	adds	r3, r4, #4
 80088fe:	f020 0007 	bic.w	r0, r0, #7
 8008902:	1ac2      	subs	r2, r0, r3
 8008904:	d0cc      	beq.n	80088a0 <_malloc_r+0x20>
 8008906:	1a1b      	subs	r3, r3, r0
 8008908:	50a3      	str	r3, [r4, r2]
 800890a:	e7c9      	b.n	80088a0 <_malloc_r+0x20>
 800890c:	4622      	mov	r2, r4
 800890e:	6864      	ldr	r4, [r4, #4]
 8008910:	e7cc      	b.n	80088ac <_malloc_r+0x2c>
 8008912:	1cc4      	adds	r4, r0, #3
 8008914:	f024 0403 	bic.w	r4, r4, #3
 8008918:	42a0      	cmp	r0, r4
 800891a:	d0e3      	beq.n	80088e4 <_malloc_r+0x64>
 800891c:	1a21      	subs	r1, r4, r0
 800891e:	4630      	mov	r0, r6
 8008920:	f000 f964 	bl	8008bec <_sbrk_r>
 8008924:	3001      	adds	r0, #1
 8008926:	d1dd      	bne.n	80088e4 <_malloc_r+0x64>
 8008928:	e7cf      	b.n	80088ca <_malloc_r+0x4a>
 800892a:	bf00      	nop
 800892c:	20000248 	.word	0x20000248
 8008930:	2000024c 	.word	0x2000024c

08008934 <__ssputs_r>:
 8008934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008938:	688e      	ldr	r6, [r1, #8]
 800893a:	429e      	cmp	r6, r3
 800893c:	4682      	mov	sl, r0
 800893e:	460c      	mov	r4, r1
 8008940:	4690      	mov	r8, r2
 8008942:	461f      	mov	r7, r3
 8008944:	d838      	bhi.n	80089b8 <__ssputs_r+0x84>
 8008946:	898a      	ldrh	r2, [r1, #12]
 8008948:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800894c:	d032      	beq.n	80089b4 <__ssputs_r+0x80>
 800894e:	6825      	ldr	r5, [r4, #0]
 8008950:	6909      	ldr	r1, [r1, #16]
 8008952:	eba5 0901 	sub.w	r9, r5, r1
 8008956:	6965      	ldr	r5, [r4, #20]
 8008958:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800895c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008960:	3301      	adds	r3, #1
 8008962:	444b      	add	r3, r9
 8008964:	106d      	asrs	r5, r5, #1
 8008966:	429d      	cmp	r5, r3
 8008968:	bf38      	it	cc
 800896a:	461d      	movcc	r5, r3
 800896c:	0553      	lsls	r3, r2, #21
 800896e:	d531      	bpl.n	80089d4 <__ssputs_r+0xa0>
 8008970:	4629      	mov	r1, r5
 8008972:	f7ff ff85 	bl	8008880 <_malloc_r>
 8008976:	4606      	mov	r6, r0
 8008978:	b950      	cbnz	r0, 8008990 <__ssputs_r+0x5c>
 800897a:	230c      	movs	r3, #12
 800897c:	f8ca 3000 	str.w	r3, [sl]
 8008980:	89a3      	ldrh	r3, [r4, #12]
 8008982:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008986:	81a3      	strh	r3, [r4, #12]
 8008988:	f04f 30ff 	mov.w	r0, #4294967295
 800898c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008990:	6921      	ldr	r1, [r4, #16]
 8008992:	464a      	mov	r2, r9
 8008994:	f7ff fb88 	bl	80080a8 <memcpy>
 8008998:	89a3      	ldrh	r3, [r4, #12]
 800899a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800899e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089a2:	81a3      	strh	r3, [r4, #12]
 80089a4:	6126      	str	r6, [r4, #16]
 80089a6:	6165      	str	r5, [r4, #20]
 80089a8:	444e      	add	r6, r9
 80089aa:	eba5 0509 	sub.w	r5, r5, r9
 80089ae:	6026      	str	r6, [r4, #0]
 80089b0:	60a5      	str	r5, [r4, #8]
 80089b2:	463e      	mov	r6, r7
 80089b4:	42be      	cmp	r6, r7
 80089b6:	d900      	bls.n	80089ba <__ssputs_r+0x86>
 80089b8:	463e      	mov	r6, r7
 80089ba:	4632      	mov	r2, r6
 80089bc:	6820      	ldr	r0, [r4, #0]
 80089be:	4641      	mov	r1, r8
 80089c0:	f000 f966 	bl	8008c90 <memmove>
 80089c4:	68a3      	ldr	r3, [r4, #8]
 80089c6:	6822      	ldr	r2, [r4, #0]
 80089c8:	1b9b      	subs	r3, r3, r6
 80089ca:	4432      	add	r2, r6
 80089cc:	60a3      	str	r3, [r4, #8]
 80089ce:	6022      	str	r2, [r4, #0]
 80089d0:	2000      	movs	r0, #0
 80089d2:	e7db      	b.n	800898c <__ssputs_r+0x58>
 80089d4:	462a      	mov	r2, r5
 80089d6:	f000 f981 	bl	8008cdc <_realloc_r>
 80089da:	4606      	mov	r6, r0
 80089dc:	2800      	cmp	r0, #0
 80089de:	d1e1      	bne.n	80089a4 <__ssputs_r+0x70>
 80089e0:	6921      	ldr	r1, [r4, #16]
 80089e2:	4650      	mov	r0, sl
 80089e4:	f7ff fefc 	bl	80087e0 <_free_r>
 80089e8:	e7c7      	b.n	800897a <__ssputs_r+0x46>
	...

080089ec <_svfiprintf_r>:
 80089ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089f0:	4698      	mov	r8, r3
 80089f2:	898b      	ldrh	r3, [r1, #12]
 80089f4:	061b      	lsls	r3, r3, #24
 80089f6:	b09d      	sub	sp, #116	; 0x74
 80089f8:	4607      	mov	r7, r0
 80089fa:	460d      	mov	r5, r1
 80089fc:	4614      	mov	r4, r2
 80089fe:	d50e      	bpl.n	8008a1e <_svfiprintf_r+0x32>
 8008a00:	690b      	ldr	r3, [r1, #16]
 8008a02:	b963      	cbnz	r3, 8008a1e <_svfiprintf_r+0x32>
 8008a04:	2140      	movs	r1, #64	; 0x40
 8008a06:	f7ff ff3b 	bl	8008880 <_malloc_r>
 8008a0a:	6028      	str	r0, [r5, #0]
 8008a0c:	6128      	str	r0, [r5, #16]
 8008a0e:	b920      	cbnz	r0, 8008a1a <_svfiprintf_r+0x2e>
 8008a10:	230c      	movs	r3, #12
 8008a12:	603b      	str	r3, [r7, #0]
 8008a14:	f04f 30ff 	mov.w	r0, #4294967295
 8008a18:	e0d1      	b.n	8008bbe <_svfiprintf_r+0x1d2>
 8008a1a:	2340      	movs	r3, #64	; 0x40
 8008a1c:	616b      	str	r3, [r5, #20]
 8008a1e:	2300      	movs	r3, #0
 8008a20:	9309      	str	r3, [sp, #36]	; 0x24
 8008a22:	2320      	movs	r3, #32
 8008a24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a28:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a2c:	2330      	movs	r3, #48	; 0x30
 8008a2e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008bd8 <_svfiprintf_r+0x1ec>
 8008a32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a36:	f04f 0901 	mov.w	r9, #1
 8008a3a:	4623      	mov	r3, r4
 8008a3c:	469a      	mov	sl, r3
 8008a3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a42:	b10a      	cbz	r2, 8008a48 <_svfiprintf_r+0x5c>
 8008a44:	2a25      	cmp	r2, #37	; 0x25
 8008a46:	d1f9      	bne.n	8008a3c <_svfiprintf_r+0x50>
 8008a48:	ebba 0b04 	subs.w	fp, sl, r4
 8008a4c:	d00b      	beq.n	8008a66 <_svfiprintf_r+0x7a>
 8008a4e:	465b      	mov	r3, fp
 8008a50:	4622      	mov	r2, r4
 8008a52:	4629      	mov	r1, r5
 8008a54:	4638      	mov	r0, r7
 8008a56:	f7ff ff6d 	bl	8008934 <__ssputs_r>
 8008a5a:	3001      	adds	r0, #1
 8008a5c:	f000 80aa 	beq.w	8008bb4 <_svfiprintf_r+0x1c8>
 8008a60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a62:	445a      	add	r2, fp
 8008a64:	9209      	str	r2, [sp, #36]	; 0x24
 8008a66:	f89a 3000 	ldrb.w	r3, [sl]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	f000 80a2 	beq.w	8008bb4 <_svfiprintf_r+0x1c8>
 8008a70:	2300      	movs	r3, #0
 8008a72:	f04f 32ff 	mov.w	r2, #4294967295
 8008a76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a7a:	f10a 0a01 	add.w	sl, sl, #1
 8008a7e:	9304      	str	r3, [sp, #16]
 8008a80:	9307      	str	r3, [sp, #28]
 8008a82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a86:	931a      	str	r3, [sp, #104]	; 0x68
 8008a88:	4654      	mov	r4, sl
 8008a8a:	2205      	movs	r2, #5
 8008a8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a90:	4851      	ldr	r0, [pc, #324]	; (8008bd8 <_svfiprintf_r+0x1ec>)
 8008a92:	f7f7 fbad 	bl	80001f0 <memchr>
 8008a96:	9a04      	ldr	r2, [sp, #16]
 8008a98:	b9d8      	cbnz	r0, 8008ad2 <_svfiprintf_r+0xe6>
 8008a9a:	06d0      	lsls	r0, r2, #27
 8008a9c:	bf44      	itt	mi
 8008a9e:	2320      	movmi	r3, #32
 8008aa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008aa4:	0711      	lsls	r1, r2, #28
 8008aa6:	bf44      	itt	mi
 8008aa8:	232b      	movmi	r3, #43	; 0x2b
 8008aaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008aae:	f89a 3000 	ldrb.w	r3, [sl]
 8008ab2:	2b2a      	cmp	r3, #42	; 0x2a
 8008ab4:	d015      	beq.n	8008ae2 <_svfiprintf_r+0xf6>
 8008ab6:	9a07      	ldr	r2, [sp, #28]
 8008ab8:	4654      	mov	r4, sl
 8008aba:	2000      	movs	r0, #0
 8008abc:	f04f 0c0a 	mov.w	ip, #10
 8008ac0:	4621      	mov	r1, r4
 8008ac2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ac6:	3b30      	subs	r3, #48	; 0x30
 8008ac8:	2b09      	cmp	r3, #9
 8008aca:	d94e      	bls.n	8008b6a <_svfiprintf_r+0x17e>
 8008acc:	b1b0      	cbz	r0, 8008afc <_svfiprintf_r+0x110>
 8008ace:	9207      	str	r2, [sp, #28]
 8008ad0:	e014      	b.n	8008afc <_svfiprintf_r+0x110>
 8008ad2:	eba0 0308 	sub.w	r3, r0, r8
 8008ad6:	fa09 f303 	lsl.w	r3, r9, r3
 8008ada:	4313      	orrs	r3, r2
 8008adc:	9304      	str	r3, [sp, #16]
 8008ade:	46a2      	mov	sl, r4
 8008ae0:	e7d2      	b.n	8008a88 <_svfiprintf_r+0x9c>
 8008ae2:	9b03      	ldr	r3, [sp, #12]
 8008ae4:	1d19      	adds	r1, r3, #4
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	9103      	str	r1, [sp, #12]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	bfbb      	ittet	lt
 8008aee:	425b      	neglt	r3, r3
 8008af0:	f042 0202 	orrlt.w	r2, r2, #2
 8008af4:	9307      	strge	r3, [sp, #28]
 8008af6:	9307      	strlt	r3, [sp, #28]
 8008af8:	bfb8      	it	lt
 8008afa:	9204      	strlt	r2, [sp, #16]
 8008afc:	7823      	ldrb	r3, [r4, #0]
 8008afe:	2b2e      	cmp	r3, #46	; 0x2e
 8008b00:	d10c      	bne.n	8008b1c <_svfiprintf_r+0x130>
 8008b02:	7863      	ldrb	r3, [r4, #1]
 8008b04:	2b2a      	cmp	r3, #42	; 0x2a
 8008b06:	d135      	bne.n	8008b74 <_svfiprintf_r+0x188>
 8008b08:	9b03      	ldr	r3, [sp, #12]
 8008b0a:	1d1a      	adds	r2, r3, #4
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	9203      	str	r2, [sp, #12]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	bfb8      	it	lt
 8008b14:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b18:	3402      	adds	r4, #2
 8008b1a:	9305      	str	r3, [sp, #20]
 8008b1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008be8 <_svfiprintf_r+0x1fc>
 8008b20:	7821      	ldrb	r1, [r4, #0]
 8008b22:	2203      	movs	r2, #3
 8008b24:	4650      	mov	r0, sl
 8008b26:	f7f7 fb63 	bl	80001f0 <memchr>
 8008b2a:	b140      	cbz	r0, 8008b3e <_svfiprintf_r+0x152>
 8008b2c:	2340      	movs	r3, #64	; 0x40
 8008b2e:	eba0 000a 	sub.w	r0, r0, sl
 8008b32:	fa03 f000 	lsl.w	r0, r3, r0
 8008b36:	9b04      	ldr	r3, [sp, #16]
 8008b38:	4303      	orrs	r3, r0
 8008b3a:	3401      	adds	r4, #1
 8008b3c:	9304      	str	r3, [sp, #16]
 8008b3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b42:	4826      	ldr	r0, [pc, #152]	; (8008bdc <_svfiprintf_r+0x1f0>)
 8008b44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b48:	2206      	movs	r2, #6
 8008b4a:	f7f7 fb51 	bl	80001f0 <memchr>
 8008b4e:	2800      	cmp	r0, #0
 8008b50:	d038      	beq.n	8008bc4 <_svfiprintf_r+0x1d8>
 8008b52:	4b23      	ldr	r3, [pc, #140]	; (8008be0 <_svfiprintf_r+0x1f4>)
 8008b54:	bb1b      	cbnz	r3, 8008b9e <_svfiprintf_r+0x1b2>
 8008b56:	9b03      	ldr	r3, [sp, #12]
 8008b58:	3307      	adds	r3, #7
 8008b5a:	f023 0307 	bic.w	r3, r3, #7
 8008b5e:	3308      	adds	r3, #8
 8008b60:	9303      	str	r3, [sp, #12]
 8008b62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b64:	4433      	add	r3, r6
 8008b66:	9309      	str	r3, [sp, #36]	; 0x24
 8008b68:	e767      	b.n	8008a3a <_svfiprintf_r+0x4e>
 8008b6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b6e:	460c      	mov	r4, r1
 8008b70:	2001      	movs	r0, #1
 8008b72:	e7a5      	b.n	8008ac0 <_svfiprintf_r+0xd4>
 8008b74:	2300      	movs	r3, #0
 8008b76:	3401      	adds	r4, #1
 8008b78:	9305      	str	r3, [sp, #20]
 8008b7a:	4619      	mov	r1, r3
 8008b7c:	f04f 0c0a 	mov.w	ip, #10
 8008b80:	4620      	mov	r0, r4
 8008b82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b86:	3a30      	subs	r2, #48	; 0x30
 8008b88:	2a09      	cmp	r2, #9
 8008b8a:	d903      	bls.n	8008b94 <_svfiprintf_r+0x1a8>
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d0c5      	beq.n	8008b1c <_svfiprintf_r+0x130>
 8008b90:	9105      	str	r1, [sp, #20]
 8008b92:	e7c3      	b.n	8008b1c <_svfiprintf_r+0x130>
 8008b94:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b98:	4604      	mov	r4, r0
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	e7f0      	b.n	8008b80 <_svfiprintf_r+0x194>
 8008b9e:	ab03      	add	r3, sp, #12
 8008ba0:	9300      	str	r3, [sp, #0]
 8008ba2:	462a      	mov	r2, r5
 8008ba4:	4b0f      	ldr	r3, [pc, #60]	; (8008be4 <_svfiprintf_r+0x1f8>)
 8008ba6:	a904      	add	r1, sp, #16
 8008ba8:	4638      	mov	r0, r7
 8008baa:	f7fe f80f 	bl	8006bcc <_printf_float>
 8008bae:	1c42      	adds	r2, r0, #1
 8008bb0:	4606      	mov	r6, r0
 8008bb2:	d1d6      	bne.n	8008b62 <_svfiprintf_r+0x176>
 8008bb4:	89ab      	ldrh	r3, [r5, #12]
 8008bb6:	065b      	lsls	r3, r3, #25
 8008bb8:	f53f af2c 	bmi.w	8008a14 <_svfiprintf_r+0x28>
 8008bbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008bbe:	b01d      	add	sp, #116	; 0x74
 8008bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bc4:	ab03      	add	r3, sp, #12
 8008bc6:	9300      	str	r3, [sp, #0]
 8008bc8:	462a      	mov	r2, r5
 8008bca:	4b06      	ldr	r3, [pc, #24]	; (8008be4 <_svfiprintf_r+0x1f8>)
 8008bcc:	a904      	add	r1, sp, #16
 8008bce:	4638      	mov	r0, r7
 8008bd0:	f7fe faa0 	bl	8007114 <_printf_i>
 8008bd4:	e7eb      	b.n	8008bae <_svfiprintf_r+0x1c2>
 8008bd6:	bf00      	nop
 8008bd8:	0800a20c 	.word	0x0800a20c
 8008bdc:	0800a216 	.word	0x0800a216
 8008be0:	08006bcd 	.word	0x08006bcd
 8008be4:	08008935 	.word	0x08008935
 8008be8:	0800a212 	.word	0x0800a212

08008bec <_sbrk_r>:
 8008bec:	b538      	push	{r3, r4, r5, lr}
 8008bee:	4d06      	ldr	r5, [pc, #24]	; (8008c08 <_sbrk_r+0x1c>)
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	4604      	mov	r4, r0
 8008bf4:	4608      	mov	r0, r1
 8008bf6:	602b      	str	r3, [r5, #0]
 8008bf8:	f7f9 fcac 	bl	8002554 <_sbrk>
 8008bfc:	1c43      	adds	r3, r0, #1
 8008bfe:	d102      	bne.n	8008c06 <_sbrk_r+0x1a>
 8008c00:	682b      	ldr	r3, [r5, #0]
 8008c02:	b103      	cbz	r3, 8008c06 <_sbrk_r+0x1a>
 8008c04:	6023      	str	r3, [r4, #0]
 8008c06:	bd38      	pop	{r3, r4, r5, pc}
 8008c08:	200004f4 	.word	0x200004f4

08008c0c <__assert_func>:
 8008c0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008c0e:	4614      	mov	r4, r2
 8008c10:	461a      	mov	r2, r3
 8008c12:	4b09      	ldr	r3, [pc, #36]	; (8008c38 <__assert_func+0x2c>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4605      	mov	r5, r0
 8008c18:	68d8      	ldr	r0, [r3, #12]
 8008c1a:	b14c      	cbz	r4, 8008c30 <__assert_func+0x24>
 8008c1c:	4b07      	ldr	r3, [pc, #28]	; (8008c3c <__assert_func+0x30>)
 8008c1e:	9100      	str	r1, [sp, #0]
 8008c20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008c24:	4906      	ldr	r1, [pc, #24]	; (8008c40 <__assert_func+0x34>)
 8008c26:	462b      	mov	r3, r5
 8008c28:	f000 f80e 	bl	8008c48 <fiprintf>
 8008c2c:	f000 faa4 	bl	8009178 <abort>
 8008c30:	4b04      	ldr	r3, [pc, #16]	; (8008c44 <__assert_func+0x38>)
 8008c32:	461c      	mov	r4, r3
 8008c34:	e7f3      	b.n	8008c1e <__assert_func+0x12>
 8008c36:	bf00      	nop
 8008c38:	2000000c 	.word	0x2000000c
 8008c3c:	0800a21d 	.word	0x0800a21d
 8008c40:	0800a22a 	.word	0x0800a22a
 8008c44:	0800a258 	.word	0x0800a258

08008c48 <fiprintf>:
 8008c48:	b40e      	push	{r1, r2, r3}
 8008c4a:	b503      	push	{r0, r1, lr}
 8008c4c:	4601      	mov	r1, r0
 8008c4e:	ab03      	add	r3, sp, #12
 8008c50:	4805      	ldr	r0, [pc, #20]	; (8008c68 <fiprintf+0x20>)
 8008c52:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c56:	6800      	ldr	r0, [r0, #0]
 8008c58:	9301      	str	r3, [sp, #4]
 8008c5a:	f000 f88f 	bl	8008d7c <_vfiprintf_r>
 8008c5e:	b002      	add	sp, #8
 8008c60:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c64:	b003      	add	sp, #12
 8008c66:	4770      	bx	lr
 8008c68:	2000000c 	.word	0x2000000c

08008c6c <__ascii_mbtowc>:
 8008c6c:	b082      	sub	sp, #8
 8008c6e:	b901      	cbnz	r1, 8008c72 <__ascii_mbtowc+0x6>
 8008c70:	a901      	add	r1, sp, #4
 8008c72:	b142      	cbz	r2, 8008c86 <__ascii_mbtowc+0x1a>
 8008c74:	b14b      	cbz	r3, 8008c8a <__ascii_mbtowc+0x1e>
 8008c76:	7813      	ldrb	r3, [r2, #0]
 8008c78:	600b      	str	r3, [r1, #0]
 8008c7a:	7812      	ldrb	r2, [r2, #0]
 8008c7c:	1e10      	subs	r0, r2, #0
 8008c7e:	bf18      	it	ne
 8008c80:	2001      	movne	r0, #1
 8008c82:	b002      	add	sp, #8
 8008c84:	4770      	bx	lr
 8008c86:	4610      	mov	r0, r2
 8008c88:	e7fb      	b.n	8008c82 <__ascii_mbtowc+0x16>
 8008c8a:	f06f 0001 	mvn.w	r0, #1
 8008c8e:	e7f8      	b.n	8008c82 <__ascii_mbtowc+0x16>

08008c90 <memmove>:
 8008c90:	4288      	cmp	r0, r1
 8008c92:	b510      	push	{r4, lr}
 8008c94:	eb01 0402 	add.w	r4, r1, r2
 8008c98:	d902      	bls.n	8008ca0 <memmove+0x10>
 8008c9a:	4284      	cmp	r4, r0
 8008c9c:	4623      	mov	r3, r4
 8008c9e:	d807      	bhi.n	8008cb0 <memmove+0x20>
 8008ca0:	1e43      	subs	r3, r0, #1
 8008ca2:	42a1      	cmp	r1, r4
 8008ca4:	d008      	beq.n	8008cb8 <memmove+0x28>
 8008ca6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008caa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008cae:	e7f8      	b.n	8008ca2 <memmove+0x12>
 8008cb0:	4402      	add	r2, r0
 8008cb2:	4601      	mov	r1, r0
 8008cb4:	428a      	cmp	r2, r1
 8008cb6:	d100      	bne.n	8008cba <memmove+0x2a>
 8008cb8:	bd10      	pop	{r4, pc}
 8008cba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008cbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008cc2:	e7f7      	b.n	8008cb4 <memmove+0x24>

08008cc4 <__malloc_lock>:
 8008cc4:	4801      	ldr	r0, [pc, #4]	; (8008ccc <__malloc_lock+0x8>)
 8008cc6:	f000 bc17 	b.w	80094f8 <__retarget_lock_acquire_recursive>
 8008cca:	bf00      	nop
 8008ccc:	200004fc 	.word	0x200004fc

08008cd0 <__malloc_unlock>:
 8008cd0:	4801      	ldr	r0, [pc, #4]	; (8008cd8 <__malloc_unlock+0x8>)
 8008cd2:	f000 bc12 	b.w	80094fa <__retarget_lock_release_recursive>
 8008cd6:	bf00      	nop
 8008cd8:	200004fc 	.word	0x200004fc

08008cdc <_realloc_r>:
 8008cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cde:	4607      	mov	r7, r0
 8008ce0:	4614      	mov	r4, r2
 8008ce2:	460e      	mov	r6, r1
 8008ce4:	b921      	cbnz	r1, 8008cf0 <_realloc_r+0x14>
 8008ce6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008cea:	4611      	mov	r1, r2
 8008cec:	f7ff bdc8 	b.w	8008880 <_malloc_r>
 8008cf0:	b922      	cbnz	r2, 8008cfc <_realloc_r+0x20>
 8008cf2:	f7ff fd75 	bl	80087e0 <_free_r>
 8008cf6:	4625      	mov	r5, r4
 8008cf8:	4628      	mov	r0, r5
 8008cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cfc:	f000 fc62 	bl	80095c4 <_malloc_usable_size_r>
 8008d00:	42a0      	cmp	r0, r4
 8008d02:	d20f      	bcs.n	8008d24 <_realloc_r+0x48>
 8008d04:	4621      	mov	r1, r4
 8008d06:	4638      	mov	r0, r7
 8008d08:	f7ff fdba 	bl	8008880 <_malloc_r>
 8008d0c:	4605      	mov	r5, r0
 8008d0e:	2800      	cmp	r0, #0
 8008d10:	d0f2      	beq.n	8008cf8 <_realloc_r+0x1c>
 8008d12:	4631      	mov	r1, r6
 8008d14:	4622      	mov	r2, r4
 8008d16:	f7ff f9c7 	bl	80080a8 <memcpy>
 8008d1a:	4631      	mov	r1, r6
 8008d1c:	4638      	mov	r0, r7
 8008d1e:	f7ff fd5f 	bl	80087e0 <_free_r>
 8008d22:	e7e9      	b.n	8008cf8 <_realloc_r+0x1c>
 8008d24:	4635      	mov	r5, r6
 8008d26:	e7e7      	b.n	8008cf8 <_realloc_r+0x1c>

08008d28 <__sfputc_r>:
 8008d28:	6893      	ldr	r3, [r2, #8]
 8008d2a:	3b01      	subs	r3, #1
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	b410      	push	{r4}
 8008d30:	6093      	str	r3, [r2, #8]
 8008d32:	da08      	bge.n	8008d46 <__sfputc_r+0x1e>
 8008d34:	6994      	ldr	r4, [r2, #24]
 8008d36:	42a3      	cmp	r3, r4
 8008d38:	db01      	blt.n	8008d3e <__sfputc_r+0x16>
 8008d3a:	290a      	cmp	r1, #10
 8008d3c:	d103      	bne.n	8008d46 <__sfputc_r+0x1e>
 8008d3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d42:	f000 b94b 	b.w	8008fdc <__swbuf_r>
 8008d46:	6813      	ldr	r3, [r2, #0]
 8008d48:	1c58      	adds	r0, r3, #1
 8008d4a:	6010      	str	r0, [r2, #0]
 8008d4c:	7019      	strb	r1, [r3, #0]
 8008d4e:	4608      	mov	r0, r1
 8008d50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d54:	4770      	bx	lr

08008d56 <__sfputs_r>:
 8008d56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d58:	4606      	mov	r6, r0
 8008d5a:	460f      	mov	r7, r1
 8008d5c:	4614      	mov	r4, r2
 8008d5e:	18d5      	adds	r5, r2, r3
 8008d60:	42ac      	cmp	r4, r5
 8008d62:	d101      	bne.n	8008d68 <__sfputs_r+0x12>
 8008d64:	2000      	movs	r0, #0
 8008d66:	e007      	b.n	8008d78 <__sfputs_r+0x22>
 8008d68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d6c:	463a      	mov	r2, r7
 8008d6e:	4630      	mov	r0, r6
 8008d70:	f7ff ffda 	bl	8008d28 <__sfputc_r>
 8008d74:	1c43      	adds	r3, r0, #1
 8008d76:	d1f3      	bne.n	8008d60 <__sfputs_r+0xa>
 8008d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008d7c <_vfiprintf_r>:
 8008d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d80:	460d      	mov	r5, r1
 8008d82:	b09d      	sub	sp, #116	; 0x74
 8008d84:	4614      	mov	r4, r2
 8008d86:	4698      	mov	r8, r3
 8008d88:	4606      	mov	r6, r0
 8008d8a:	b118      	cbz	r0, 8008d94 <_vfiprintf_r+0x18>
 8008d8c:	6983      	ldr	r3, [r0, #24]
 8008d8e:	b90b      	cbnz	r3, 8008d94 <_vfiprintf_r+0x18>
 8008d90:	f000 fb14 	bl	80093bc <__sinit>
 8008d94:	4b89      	ldr	r3, [pc, #548]	; (8008fbc <_vfiprintf_r+0x240>)
 8008d96:	429d      	cmp	r5, r3
 8008d98:	d11b      	bne.n	8008dd2 <_vfiprintf_r+0x56>
 8008d9a:	6875      	ldr	r5, [r6, #4]
 8008d9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d9e:	07d9      	lsls	r1, r3, #31
 8008da0:	d405      	bmi.n	8008dae <_vfiprintf_r+0x32>
 8008da2:	89ab      	ldrh	r3, [r5, #12]
 8008da4:	059a      	lsls	r2, r3, #22
 8008da6:	d402      	bmi.n	8008dae <_vfiprintf_r+0x32>
 8008da8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008daa:	f000 fba5 	bl	80094f8 <__retarget_lock_acquire_recursive>
 8008dae:	89ab      	ldrh	r3, [r5, #12]
 8008db0:	071b      	lsls	r3, r3, #28
 8008db2:	d501      	bpl.n	8008db8 <_vfiprintf_r+0x3c>
 8008db4:	692b      	ldr	r3, [r5, #16]
 8008db6:	b9eb      	cbnz	r3, 8008df4 <_vfiprintf_r+0x78>
 8008db8:	4629      	mov	r1, r5
 8008dba:	4630      	mov	r0, r6
 8008dbc:	f000 f96e 	bl	800909c <__swsetup_r>
 8008dc0:	b1c0      	cbz	r0, 8008df4 <_vfiprintf_r+0x78>
 8008dc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008dc4:	07dc      	lsls	r4, r3, #31
 8008dc6:	d50e      	bpl.n	8008de6 <_vfiprintf_r+0x6a>
 8008dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8008dcc:	b01d      	add	sp, #116	; 0x74
 8008dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dd2:	4b7b      	ldr	r3, [pc, #492]	; (8008fc0 <_vfiprintf_r+0x244>)
 8008dd4:	429d      	cmp	r5, r3
 8008dd6:	d101      	bne.n	8008ddc <_vfiprintf_r+0x60>
 8008dd8:	68b5      	ldr	r5, [r6, #8]
 8008dda:	e7df      	b.n	8008d9c <_vfiprintf_r+0x20>
 8008ddc:	4b79      	ldr	r3, [pc, #484]	; (8008fc4 <_vfiprintf_r+0x248>)
 8008dde:	429d      	cmp	r5, r3
 8008de0:	bf08      	it	eq
 8008de2:	68f5      	ldreq	r5, [r6, #12]
 8008de4:	e7da      	b.n	8008d9c <_vfiprintf_r+0x20>
 8008de6:	89ab      	ldrh	r3, [r5, #12]
 8008de8:	0598      	lsls	r0, r3, #22
 8008dea:	d4ed      	bmi.n	8008dc8 <_vfiprintf_r+0x4c>
 8008dec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008dee:	f000 fb84 	bl	80094fa <__retarget_lock_release_recursive>
 8008df2:	e7e9      	b.n	8008dc8 <_vfiprintf_r+0x4c>
 8008df4:	2300      	movs	r3, #0
 8008df6:	9309      	str	r3, [sp, #36]	; 0x24
 8008df8:	2320      	movs	r3, #32
 8008dfa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008dfe:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e02:	2330      	movs	r3, #48	; 0x30
 8008e04:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008fc8 <_vfiprintf_r+0x24c>
 8008e08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e0c:	f04f 0901 	mov.w	r9, #1
 8008e10:	4623      	mov	r3, r4
 8008e12:	469a      	mov	sl, r3
 8008e14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e18:	b10a      	cbz	r2, 8008e1e <_vfiprintf_r+0xa2>
 8008e1a:	2a25      	cmp	r2, #37	; 0x25
 8008e1c:	d1f9      	bne.n	8008e12 <_vfiprintf_r+0x96>
 8008e1e:	ebba 0b04 	subs.w	fp, sl, r4
 8008e22:	d00b      	beq.n	8008e3c <_vfiprintf_r+0xc0>
 8008e24:	465b      	mov	r3, fp
 8008e26:	4622      	mov	r2, r4
 8008e28:	4629      	mov	r1, r5
 8008e2a:	4630      	mov	r0, r6
 8008e2c:	f7ff ff93 	bl	8008d56 <__sfputs_r>
 8008e30:	3001      	adds	r0, #1
 8008e32:	f000 80aa 	beq.w	8008f8a <_vfiprintf_r+0x20e>
 8008e36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e38:	445a      	add	r2, fp
 8008e3a:	9209      	str	r2, [sp, #36]	; 0x24
 8008e3c:	f89a 3000 	ldrb.w	r3, [sl]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	f000 80a2 	beq.w	8008f8a <_vfiprintf_r+0x20e>
 8008e46:	2300      	movs	r3, #0
 8008e48:	f04f 32ff 	mov.w	r2, #4294967295
 8008e4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e50:	f10a 0a01 	add.w	sl, sl, #1
 8008e54:	9304      	str	r3, [sp, #16]
 8008e56:	9307      	str	r3, [sp, #28]
 8008e58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e5c:	931a      	str	r3, [sp, #104]	; 0x68
 8008e5e:	4654      	mov	r4, sl
 8008e60:	2205      	movs	r2, #5
 8008e62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e66:	4858      	ldr	r0, [pc, #352]	; (8008fc8 <_vfiprintf_r+0x24c>)
 8008e68:	f7f7 f9c2 	bl	80001f0 <memchr>
 8008e6c:	9a04      	ldr	r2, [sp, #16]
 8008e6e:	b9d8      	cbnz	r0, 8008ea8 <_vfiprintf_r+0x12c>
 8008e70:	06d1      	lsls	r1, r2, #27
 8008e72:	bf44      	itt	mi
 8008e74:	2320      	movmi	r3, #32
 8008e76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e7a:	0713      	lsls	r3, r2, #28
 8008e7c:	bf44      	itt	mi
 8008e7e:	232b      	movmi	r3, #43	; 0x2b
 8008e80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e84:	f89a 3000 	ldrb.w	r3, [sl]
 8008e88:	2b2a      	cmp	r3, #42	; 0x2a
 8008e8a:	d015      	beq.n	8008eb8 <_vfiprintf_r+0x13c>
 8008e8c:	9a07      	ldr	r2, [sp, #28]
 8008e8e:	4654      	mov	r4, sl
 8008e90:	2000      	movs	r0, #0
 8008e92:	f04f 0c0a 	mov.w	ip, #10
 8008e96:	4621      	mov	r1, r4
 8008e98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e9c:	3b30      	subs	r3, #48	; 0x30
 8008e9e:	2b09      	cmp	r3, #9
 8008ea0:	d94e      	bls.n	8008f40 <_vfiprintf_r+0x1c4>
 8008ea2:	b1b0      	cbz	r0, 8008ed2 <_vfiprintf_r+0x156>
 8008ea4:	9207      	str	r2, [sp, #28]
 8008ea6:	e014      	b.n	8008ed2 <_vfiprintf_r+0x156>
 8008ea8:	eba0 0308 	sub.w	r3, r0, r8
 8008eac:	fa09 f303 	lsl.w	r3, r9, r3
 8008eb0:	4313      	orrs	r3, r2
 8008eb2:	9304      	str	r3, [sp, #16]
 8008eb4:	46a2      	mov	sl, r4
 8008eb6:	e7d2      	b.n	8008e5e <_vfiprintf_r+0xe2>
 8008eb8:	9b03      	ldr	r3, [sp, #12]
 8008eba:	1d19      	adds	r1, r3, #4
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	9103      	str	r1, [sp, #12]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	bfbb      	ittet	lt
 8008ec4:	425b      	neglt	r3, r3
 8008ec6:	f042 0202 	orrlt.w	r2, r2, #2
 8008eca:	9307      	strge	r3, [sp, #28]
 8008ecc:	9307      	strlt	r3, [sp, #28]
 8008ece:	bfb8      	it	lt
 8008ed0:	9204      	strlt	r2, [sp, #16]
 8008ed2:	7823      	ldrb	r3, [r4, #0]
 8008ed4:	2b2e      	cmp	r3, #46	; 0x2e
 8008ed6:	d10c      	bne.n	8008ef2 <_vfiprintf_r+0x176>
 8008ed8:	7863      	ldrb	r3, [r4, #1]
 8008eda:	2b2a      	cmp	r3, #42	; 0x2a
 8008edc:	d135      	bne.n	8008f4a <_vfiprintf_r+0x1ce>
 8008ede:	9b03      	ldr	r3, [sp, #12]
 8008ee0:	1d1a      	adds	r2, r3, #4
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	9203      	str	r2, [sp, #12]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	bfb8      	it	lt
 8008eea:	f04f 33ff 	movlt.w	r3, #4294967295
 8008eee:	3402      	adds	r4, #2
 8008ef0:	9305      	str	r3, [sp, #20]
 8008ef2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008fd8 <_vfiprintf_r+0x25c>
 8008ef6:	7821      	ldrb	r1, [r4, #0]
 8008ef8:	2203      	movs	r2, #3
 8008efa:	4650      	mov	r0, sl
 8008efc:	f7f7 f978 	bl	80001f0 <memchr>
 8008f00:	b140      	cbz	r0, 8008f14 <_vfiprintf_r+0x198>
 8008f02:	2340      	movs	r3, #64	; 0x40
 8008f04:	eba0 000a 	sub.w	r0, r0, sl
 8008f08:	fa03 f000 	lsl.w	r0, r3, r0
 8008f0c:	9b04      	ldr	r3, [sp, #16]
 8008f0e:	4303      	orrs	r3, r0
 8008f10:	3401      	adds	r4, #1
 8008f12:	9304      	str	r3, [sp, #16]
 8008f14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f18:	482c      	ldr	r0, [pc, #176]	; (8008fcc <_vfiprintf_r+0x250>)
 8008f1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f1e:	2206      	movs	r2, #6
 8008f20:	f7f7 f966 	bl	80001f0 <memchr>
 8008f24:	2800      	cmp	r0, #0
 8008f26:	d03f      	beq.n	8008fa8 <_vfiprintf_r+0x22c>
 8008f28:	4b29      	ldr	r3, [pc, #164]	; (8008fd0 <_vfiprintf_r+0x254>)
 8008f2a:	bb1b      	cbnz	r3, 8008f74 <_vfiprintf_r+0x1f8>
 8008f2c:	9b03      	ldr	r3, [sp, #12]
 8008f2e:	3307      	adds	r3, #7
 8008f30:	f023 0307 	bic.w	r3, r3, #7
 8008f34:	3308      	adds	r3, #8
 8008f36:	9303      	str	r3, [sp, #12]
 8008f38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f3a:	443b      	add	r3, r7
 8008f3c:	9309      	str	r3, [sp, #36]	; 0x24
 8008f3e:	e767      	b.n	8008e10 <_vfiprintf_r+0x94>
 8008f40:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f44:	460c      	mov	r4, r1
 8008f46:	2001      	movs	r0, #1
 8008f48:	e7a5      	b.n	8008e96 <_vfiprintf_r+0x11a>
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	3401      	adds	r4, #1
 8008f4e:	9305      	str	r3, [sp, #20]
 8008f50:	4619      	mov	r1, r3
 8008f52:	f04f 0c0a 	mov.w	ip, #10
 8008f56:	4620      	mov	r0, r4
 8008f58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f5c:	3a30      	subs	r2, #48	; 0x30
 8008f5e:	2a09      	cmp	r2, #9
 8008f60:	d903      	bls.n	8008f6a <_vfiprintf_r+0x1ee>
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d0c5      	beq.n	8008ef2 <_vfiprintf_r+0x176>
 8008f66:	9105      	str	r1, [sp, #20]
 8008f68:	e7c3      	b.n	8008ef2 <_vfiprintf_r+0x176>
 8008f6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f6e:	4604      	mov	r4, r0
 8008f70:	2301      	movs	r3, #1
 8008f72:	e7f0      	b.n	8008f56 <_vfiprintf_r+0x1da>
 8008f74:	ab03      	add	r3, sp, #12
 8008f76:	9300      	str	r3, [sp, #0]
 8008f78:	462a      	mov	r2, r5
 8008f7a:	4b16      	ldr	r3, [pc, #88]	; (8008fd4 <_vfiprintf_r+0x258>)
 8008f7c:	a904      	add	r1, sp, #16
 8008f7e:	4630      	mov	r0, r6
 8008f80:	f7fd fe24 	bl	8006bcc <_printf_float>
 8008f84:	4607      	mov	r7, r0
 8008f86:	1c78      	adds	r0, r7, #1
 8008f88:	d1d6      	bne.n	8008f38 <_vfiprintf_r+0x1bc>
 8008f8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f8c:	07d9      	lsls	r1, r3, #31
 8008f8e:	d405      	bmi.n	8008f9c <_vfiprintf_r+0x220>
 8008f90:	89ab      	ldrh	r3, [r5, #12]
 8008f92:	059a      	lsls	r2, r3, #22
 8008f94:	d402      	bmi.n	8008f9c <_vfiprintf_r+0x220>
 8008f96:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f98:	f000 faaf 	bl	80094fa <__retarget_lock_release_recursive>
 8008f9c:	89ab      	ldrh	r3, [r5, #12]
 8008f9e:	065b      	lsls	r3, r3, #25
 8008fa0:	f53f af12 	bmi.w	8008dc8 <_vfiprintf_r+0x4c>
 8008fa4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008fa6:	e711      	b.n	8008dcc <_vfiprintf_r+0x50>
 8008fa8:	ab03      	add	r3, sp, #12
 8008faa:	9300      	str	r3, [sp, #0]
 8008fac:	462a      	mov	r2, r5
 8008fae:	4b09      	ldr	r3, [pc, #36]	; (8008fd4 <_vfiprintf_r+0x258>)
 8008fb0:	a904      	add	r1, sp, #16
 8008fb2:	4630      	mov	r0, r6
 8008fb4:	f7fe f8ae 	bl	8007114 <_printf_i>
 8008fb8:	e7e4      	b.n	8008f84 <_vfiprintf_r+0x208>
 8008fba:	bf00      	nop
 8008fbc:	0800a384 	.word	0x0800a384
 8008fc0:	0800a3a4 	.word	0x0800a3a4
 8008fc4:	0800a364 	.word	0x0800a364
 8008fc8:	0800a20c 	.word	0x0800a20c
 8008fcc:	0800a216 	.word	0x0800a216
 8008fd0:	08006bcd 	.word	0x08006bcd
 8008fd4:	08008d57 	.word	0x08008d57
 8008fd8:	0800a212 	.word	0x0800a212

08008fdc <__swbuf_r>:
 8008fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fde:	460e      	mov	r6, r1
 8008fe0:	4614      	mov	r4, r2
 8008fe2:	4605      	mov	r5, r0
 8008fe4:	b118      	cbz	r0, 8008fee <__swbuf_r+0x12>
 8008fe6:	6983      	ldr	r3, [r0, #24]
 8008fe8:	b90b      	cbnz	r3, 8008fee <__swbuf_r+0x12>
 8008fea:	f000 f9e7 	bl	80093bc <__sinit>
 8008fee:	4b21      	ldr	r3, [pc, #132]	; (8009074 <__swbuf_r+0x98>)
 8008ff0:	429c      	cmp	r4, r3
 8008ff2:	d12b      	bne.n	800904c <__swbuf_r+0x70>
 8008ff4:	686c      	ldr	r4, [r5, #4]
 8008ff6:	69a3      	ldr	r3, [r4, #24]
 8008ff8:	60a3      	str	r3, [r4, #8]
 8008ffa:	89a3      	ldrh	r3, [r4, #12]
 8008ffc:	071a      	lsls	r2, r3, #28
 8008ffe:	d52f      	bpl.n	8009060 <__swbuf_r+0x84>
 8009000:	6923      	ldr	r3, [r4, #16]
 8009002:	b36b      	cbz	r3, 8009060 <__swbuf_r+0x84>
 8009004:	6923      	ldr	r3, [r4, #16]
 8009006:	6820      	ldr	r0, [r4, #0]
 8009008:	1ac0      	subs	r0, r0, r3
 800900a:	6963      	ldr	r3, [r4, #20]
 800900c:	b2f6      	uxtb	r6, r6
 800900e:	4283      	cmp	r3, r0
 8009010:	4637      	mov	r7, r6
 8009012:	dc04      	bgt.n	800901e <__swbuf_r+0x42>
 8009014:	4621      	mov	r1, r4
 8009016:	4628      	mov	r0, r5
 8009018:	f000 f93c 	bl	8009294 <_fflush_r>
 800901c:	bb30      	cbnz	r0, 800906c <__swbuf_r+0x90>
 800901e:	68a3      	ldr	r3, [r4, #8]
 8009020:	3b01      	subs	r3, #1
 8009022:	60a3      	str	r3, [r4, #8]
 8009024:	6823      	ldr	r3, [r4, #0]
 8009026:	1c5a      	adds	r2, r3, #1
 8009028:	6022      	str	r2, [r4, #0]
 800902a:	701e      	strb	r6, [r3, #0]
 800902c:	6963      	ldr	r3, [r4, #20]
 800902e:	3001      	adds	r0, #1
 8009030:	4283      	cmp	r3, r0
 8009032:	d004      	beq.n	800903e <__swbuf_r+0x62>
 8009034:	89a3      	ldrh	r3, [r4, #12]
 8009036:	07db      	lsls	r3, r3, #31
 8009038:	d506      	bpl.n	8009048 <__swbuf_r+0x6c>
 800903a:	2e0a      	cmp	r6, #10
 800903c:	d104      	bne.n	8009048 <__swbuf_r+0x6c>
 800903e:	4621      	mov	r1, r4
 8009040:	4628      	mov	r0, r5
 8009042:	f000 f927 	bl	8009294 <_fflush_r>
 8009046:	b988      	cbnz	r0, 800906c <__swbuf_r+0x90>
 8009048:	4638      	mov	r0, r7
 800904a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800904c:	4b0a      	ldr	r3, [pc, #40]	; (8009078 <__swbuf_r+0x9c>)
 800904e:	429c      	cmp	r4, r3
 8009050:	d101      	bne.n	8009056 <__swbuf_r+0x7a>
 8009052:	68ac      	ldr	r4, [r5, #8]
 8009054:	e7cf      	b.n	8008ff6 <__swbuf_r+0x1a>
 8009056:	4b09      	ldr	r3, [pc, #36]	; (800907c <__swbuf_r+0xa0>)
 8009058:	429c      	cmp	r4, r3
 800905a:	bf08      	it	eq
 800905c:	68ec      	ldreq	r4, [r5, #12]
 800905e:	e7ca      	b.n	8008ff6 <__swbuf_r+0x1a>
 8009060:	4621      	mov	r1, r4
 8009062:	4628      	mov	r0, r5
 8009064:	f000 f81a 	bl	800909c <__swsetup_r>
 8009068:	2800      	cmp	r0, #0
 800906a:	d0cb      	beq.n	8009004 <__swbuf_r+0x28>
 800906c:	f04f 37ff 	mov.w	r7, #4294967295
 8009070:	e7ea      	b.n	8009048 <__swbuf_r+0x6c>
 8009072:	bf00      	nop
 8009074:	0800a384 	.word	0x0800a384
 8009078:	0800a3a4 	.word	0x0800a3a4
 800907c:	0800a364 	.word	0x0800a364

08009080 <__ascii_wctomb>:
 8009080:	b149      	cbz	r1, 8009096 <__ascii_wctomb+0x16>
 8009082:	2aff      	cmp	r2, #255	; 0xff
 8009084:	bf85      	ittet	hi
 8009086:	238a      	movhi	r3, #138	; 0x8a
 8009088:	6003      	strhi	r3, [r0, #0]
 800908a:	700a      	strbls	r2, [r1, #0]
 800908c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009090:	bf98      	it	ls
 8009092:	2001      	movls	r0, #1
 8009094:	4770      	bx	lr
 8009096:	4608      	mov	r0, r1
 8009098:	4770      	bx	lr
	...

0800909c <__swsetup_r>:
 800909c:	4b32      	ldr	r3, [pc, #200]	; (8009168 <__swsetup_r+0xcc>)
 800909e:	b570      	push	{r4, r5, r6, lr}
 80090a0:	681d      	ldr	r5, [r3, #0]
 80090a2:	4606      	mov	r6, r0
 80090a4:	460c      	mov	r4, r1
 80090a6:	b125      	cbz	r5, 80090b2 <__swsetup_r+0x16>
 80090a8:	69ab      	ldr	r3, [r5, #24]
 80090aa:	b913      	cbnz	r3, 80090b2 <__swsetup_r+0x16>
 80090ac:	4628      	mov	r0, r5
 80090ae:	f000 f985 	bl	80093bc <__sinit>
 80090b2:	4b2e      	ldr	r3, [pc, #184]	; (800916c <__swsetup_r+0xd0>)
 80090b4:	429c      	cmp	r4, r3
 80090b6:	d10f      	bne.n	80090d8 <__swsetup_r+0x3c>
 80090b8:	686c      	ldr	r4, [r5, #4]
 80090ba:	89a3      	ldrh	r3, [r4, #12]
 80090bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80090c0:	0719      	lsls	r1, r3, #28
 80090c2:	d42c      	bmi.n	800911e <__swsetup_r+0x82>
 80090c4:	06dd      	lsls	r5, r3, #27
 80090c6:	d411      	bmi.n	80090ec <__swsetup_r+0x50>
 80090c8:	2309      	movs	r3, #9
 80090ca:	6033      	str	r3, [r6, #0]
 80090cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80090d0:	81a3      	strh	r3, [r4, #12]
 80090d2:	f04f 30ff 	mov.w	r0, #4294967295
 80090d6:	e03e      	b.n	8009156 <__swsetup_r+0xba>
 80090d8:	4b25      	ldr	r3, [pc, #148]	; (8009170 <__swsetup_r+0xd4>)
 80090da:	429c      	cmp	r4, r3
 80090dc:	d101      	bne.n	80090e2 <__swsetup_r+0x46>
 80090de:	68ac      	ldr	r4, [r5, #8]
 80090e0:	e7eb      	b.n	80090ba <__swsetup_r+0x1e>
 80090e2:	4b24      	ldr	r3, [pc, #144]	; (8009174 <__swsetup_r+0xd8>)
 80090e4:	429c      	cmp	r4, r3
 80090e6:	bf08      	it	eq
 80090e8:	68ec      	ldreq	r4, [r5, #12]
 80090ea:	e7e6      	b.n	80090ba <__swsetup_r+0x1e>
 80090ec:	0758      	lsls	r0, r3, #29
 80090ee:	d512      	bpl.n	8009116 <__swsetup_r+0x7a>
 80090f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090f2:	b141      	cbz	r1, 8009106 <__swsetup_r+0x6a>
 80090f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090f8:	4299      	cmp	r1, r3
 80090fa:	d002      	beq.n	8009102 <__swsetup_r+0x66>
 80090fc:	4630      	mov	r0, r6
 80090fe:	f7ff fb6f 	bl	80087e0 <_free_r>
 8009102:	2300      	movs	r3, #0
 8009104:	6363      	str	r3, [r4, #52]	; 0x34
 8009106:	89a3      	ldrh	r3, [r4, #12]
 8009108:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800910c:	81a3      	strh	r3, [r4, #12]
 800910e:	2300      	movs	r3, #0
 8009110:	6063      	str	r3, [r4, #4]
 8009112:	6923      	ldr	r3, [r4, #16]
 8009114:	6023      	str	r3, [r4, #0]
 8009116:	89a3      	ldrh	r3, [r4, #12]
 8009118:	f043 0308 	orr.w	r3, r3, #8
 800911c:	81a3      	strh	r3, [r4, #12]
 800911e:	6923      	ldr	r3, [r4, #16]
 8009120:	b94b      	cbnz	r3, 8009136 <__swsetup_r+0x9a>
 8009122:	89a3      	ldrh	r3, [r4, #12]
 8009124:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800912c:	d003      	beq.n	8009136 <__swsetup_r+0x9a>
 800912e:	4621      	mov	r1, r4
 8009130:	4630      	mov	r0, r6
 8009132:	f000 fa07 	bl	8009544 <__smakebuf_r>
 8009136:	89a0      	ldrh	r0, [r4, #12]
 8009138:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800913c:	f010 0301 	ands.w	r3, r0, #1
 8009140:	d00a      	beq.n	8009158 <__swsetup_r+0xbc>
 8009142:	2300      	movs	r3, #0
 8009144:	60a3      	str	r3, [r4, #8]
 8009146:	6963      	ldr	r3, [r4, #20]
 8009148:	425b      	negs	r3, r3
 800914a:	61a3      	str	r3, [r4, #24]
 800914c:	6923      	ldr	r3, [r4, #16]
 800914e:	b943      	cbnz	r3, 8009162 <__swsetup_r+0xc6>
 8009150:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009154:	d1ba      	bne.n	80090cc <__swsetup_r+0x30>
 8009156:	bd70      	pop	{r4, r5, r6, pc}
 8009158:	0781      	lsls	r1, r0, #30
 800915a:	bf58      	it	pl
 800915c:	6963      	ldrpl	r3, [r4, #20]
 800915e:	60a3      	str	r3, [r4, #8]
 8009160:	e7f4      	b.n	800914c <__swsetup_r+0xb0>
 8009162:	2000      	movs	r0, #0
 8009164:	e7f7      	b.n	8009156 <__swsetup_r+0xba>
 8009166:	bf00      	nop
 8009168:	2000000c 	.word	0x2000000c
 800916c:	0800a384 	.word	0x0800a384
 8009170:	0800a3a4 	.word	0x0800a3a4
 8009174:	0800a364 	.word	0x0800a364

08009178 <abort>:
 8009178:	b508      	push	{r3, lr}
 800917a:	2006      	movs	r0, #6
 800917c:	f000 fa52 	bl	8009624 <raise>
 8009180:	2001      	movs	r0, #1
 8009182:	f7f9 f970 	bl	8002466 <_exit>
	...

08009188 <__sflush_r>:
 8009188:	898a      	ldrh	r2, [r1, #12]
 800918a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800918e:	4605      	mov	r5, r0
 8009190:	0710      	lsls	r0, r2, #28
 8009192:	460c      	mov	r4, r1
 8009194:	d458      	bmi.n	8009248 <__sflush_r+0xc0>
 8009196:	684b      	ldr	r3, [r1, #4]
 8009198:	2b00      	cmp	r3, #0
 800919a:	dc05      	bgt.n	80091a8 <__sflush_r+0x20>
 800919c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800919e:	2b00      	cmp	r3, #0
 80091a0:	dc02      	bgt.n	80091a8 <__sflush_r+0x20>
 80091a2:	2000      	movs	r0, #0
 80091a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80091aa:	2e00      	cmp	r6, #0
 80091ac:	d0f9      	beq.n	80091a2 <__sflush_r+0x1a>
 80091ae:	2300      	movs	r3, #0
 80091b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80091b4:	682f      	ldr	r7, [r5, #0]
 80091b6:	602b      	str	r3, [r5, #0]
 80091b8:	d032      	beq.n	8009220 <__sflush_r+0x98>
 80091ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80091bc:	89a3      	ldrh	r3, [r4, #12]
 80091be:	075a      	lsls	r2, r3, #29
 80091c0:	d505      	bpl.n	80091ce <__sflush_r+0x46>
 80091c2:	6863      	ldr	r3, [r4, #4]
 80091c4:	1ac0      	subs	r0, r0, r3
 80091c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80091c8:	b10b      	cbz	r3, 80091ce <__sflush_r+0x46>
 80091ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80091cc:	1ac0      	subs	r0, r0, r3
 80091ce:	2300      	movs	r3, #0
 80091d0:	4602      	mov	r2, r0
 80091d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80091d4:	6a21      	ldr	r1, [r4, #32]
 80091d6:	4628      	mov	r0, r5
 80091d8:	47b0      	blx	r6
 80091da:	1c43      	adds	r3, r0, #1
 80091dc:	89a3      	ldrh	r3, [r4, #12]
 80091de:	d106      	bne.n	80091ee <__sflush_r+0x66>
 80091e0:	6829      	ldr	r1, [r5, #0]
 80091e2:	291d      	cmp	r1, #29
 80091e4:	d82c      	bhi.n	8009240 <__sflush_r+0xb8>
 80091e6:	4a2a      	ldr	r2, [pc, #168]	; (8009290 <__sflush_r+0x108>)
 80091e8:	40ca      	lsrs	r2, r1
 80091ea:	07d6      	lsls	r6, r2, #31
 80091ec:	d528      	bpl.n	8009240 <__sflush_r+0xb8>
 80091ee:	2200      	movs	r2, #0
 80091f0:	6062      	str	r2, [r4, #4]
 80091f2:	04d9      	lsls	r1, r3, #19
 80091f4:	6922      	ldr	r2, [r4, #16]
 80091f6:	6022      	str	r2, [r4, #0]
 80091f8:	d504      	bpl.n	8009204 <__sflush_r+0x7c>
 80091fa:	1c42      	adds	r2, r0, #1
 80091fc:	d101      	bne.n	8009202 <__sflush_r+0x7a>
 80091fe:	682b      	ldr	r3, [r5, #0]
 8009200:	b903      	cbnz	r3, 8009204 <__sflush_r+0x7c>
 8009202:	6560      	str	r0, [r4, #84]	; 0x54
 8009204:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009206:	602f      	str	r7, [r5, #0]
 8009208:	2900      	cmp	r1, #0
 800920a:	d0ca      	beq.n	80091a2 <__sflush_r+0x1a>
 800920c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009210:	4299      	cmp	r1, r3
 8009212:	d002      	beq.n	800921a <__sflush_r+0x92>
 8009214:	4628      	mov	r0, r5
 8009216:	f7ff fae3 	bl	80087e0 <_free_r>
 800921a:	2000      	movs	r0, #0
 800921c:	6360      	str	r0, [r4, #52]	; 0x34
 800921e:	e7c1      	b.n	80091a4 <__sflush_r+0x1c>
 8009220:	6a21      	ldr	r1, [r4, #32]
 8009222:	2301      	movs	r3, #1
 8009224:	4628      	mov	r0, r5
 8009226:	47b0      	blx	r6
 8009228:	1c41      	adds	r1, r0, #1
 800922a:	d1c7      	bne.n	80091bc <__sflush_r+0x34>
 800922c:	682b      	ldr	r3, [r5, #0]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d0c4      	beq.n	80091bc <__sflush_r+0x34>
 8009232:	2b1d      	cmp	r3, #29
 8009234:	d001      	beq.n	800923a <__sflush_r+0xb2>
 8009236:	2b16      	cmp	r3, #22
 8009238:	d101      	bne.n	800923e <__sflush_r+0xb6>
 800923a:	602f      	str	r7, [r5, #0]
 800923c:	e7b1      	b.n	80091a2 <__sflush_r+0x1a>
 800923e:	89a3      	ldrh	r3, [r4, #12]
 8009240:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009244:	81a3      	strh	r3, [r4, #12]
 8009246:	e7ad      	b.n	80091a4 <__sflush_r+0x1c>
 8009248:	690f      	ldr	r7, [r1, #16]
 800924a:	2f00      	cmp	r7, #0
 800924c:	d0a9      	beq.n	80091a2 <__sflush_r+0x1a>
 800924e:	0793      	lsls	r3, r2, #30
 8009250:	680e      	ldr	r6, [r1, #0]
 8009252:	bf08      	it	eq
 8009254:	694b      	ldreq	r3, [r1, #20]
 8009256:	600f      	str	r7, [r1, #0]
 8009258:	bf18      	it	ne
 800925a:	2300      	movne	r3, #0
 800925c:	eba6 0807 	sub.w	r8, r6, r7
 8009260:	608b      	str	r3, [r1, #8]
 8009262:	f1b8 0f00 	cmp.w	r8, #0
 8009266:	dd9c      	ble.n	80091a2 <__sflush_r+0x1a>
 8009268:	6a21      	ldr	r1, [r4, #32]
 800926a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800926c:	4643      	mov	r3, r8
 800926e:	463a      	mov	r2, r7
 8009270:	4628      	mov	r0, r5
 8009272:	47b0      	blx	r6
 8009274:	2800      	cmp	r0, #0
 8009276:	dc06      	bgt.n	8009286 <__sflush_r+0xfe>
 8009278:	89a3      	ldrh	r3, [r4, #12]
 800927a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800927e:	81a3      	strh	r3, [r4, #12]
 8009280:	f04f 30ff 	mov.w	r0, #4294967295
 8009284:	e78e      	b.n	80091a4 <__sflush_r+0x1c>
 8009286:	4407      	add	r7, r0
 8009288:	eba8 0800 	sub.w	r8, r8, r0
 800928c:	e7e9      	b.n	8009262 <__sflush_r+0xda>
 800928e:	bf00      	nop
 8009290:	20400001 	.word	0x20400001

08009294 <_fflush_r>:
 8009294:	b538      	push	{r3, r4, r5, lr}
 8009296:	690b      	ldr	r3, [r1, #16]
 8009298:	4605      	mov	r5, r0
 800929a:	460c      	mov	r4, r1
 800929c:	b913      	cbnz	r3, 80092a4 <_fflush_r+0x10>
 800929e:	2500      	movs	r5, #0
 80092a0:	4628      	mov	r0, r5
 80092a2:	bd38      	pop	{r3, r4, r5, pc}
 80092a4:	b118      	cbz	r0, 80092ae <_fflush_r+0x1a>
 80092a6:	6983      	ldr	r3, [r0, #24]
 80092a8:	b90b      	cbnz	r3, 80092ae <_fflush_r+0x1a>
 80092aa:	f000 f887 	bl	80093bc <__sinit>
 80092ae:	4b14      	ldr	r3, [pc, #80]	; (8009300 <_fflush_r+0x6c>)
 80092b0:	429c      	cmp	r4, r3
 80092b2:	d11b      	bne.n	80092ec <_fflush_r+0x58>
 80092b4:	686c      	ldr	r4, [r5, #4]
 80092b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d0ef      	beq.n	800929e <_fflush_r+0xa>
 80092be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80092c0:	07d0      	lsls	r0, r2, #31
 80092c2:	d404      	bmi.n	80092ce <_fflush_r+0x3a>
 80092c4:	0599      	lsls	r1, r3, #22
 80092c6:	d402      	bmi.n	80092ce <_fflush_r+0x3a>
 80092c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092ca:	f000 f915 	bl	80094f8 <__retarget_lock_acquire_recursive>
 80092ce:	4628      	mov	r0, r5
 80092d0:	4621      	mov	r1, r4
 80092d2:	f7ff ff59 	bl	8009188 <__sflush_r>
 80092d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80092d8:	07da      	lsls	r2, r3, #31
 80092da:	4605      	mov	r5, r0
 80092dc:	d4e0      	bmi.n	80092a0 <_fflush_r+0xc>
 80092de:	89a3      	ldrh	r3, [r4, #12]
 80092e0:	059b      	lsls	r3, r3, #22
 80092e2:	d4dd      	bmi.n	80092a0 <_fflush_r+0xc>
 80092e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092e6:	f000 f908 	bl	80094fa <__retarget_lock_release_recursive>
 80092ea:	e7d9      	b.n	80092a0 <_fflush_r+0xc>
 80092ec:	4b05      	ldr	r3, [pc, #20]	; (8009304 <_fflush_r+0x70>)
 80092ee:	429c      	cmp	r4, r3
 80092f0:	d101      	bne.n	80092f6 <_fflush_r+0x62>
 80092f2:	68ac      	ldr	r4, [r5, #8]
 80092f4:	e7df      	b.n	80092b6 <_fflush_r+0x22>
 80092f6:	4b04      	ldr	r3, [pc, #16]	; (8009308 <_fflush_r+0x74>)
 80092f8:	429c      	cmp	r4, r3
 80092fa:	bf08      	it	eq
 80092fc:	68ec      	ldreq	r4, [r5, #12]
 80092fe:	e7da      	b.n	80092b6 <_fflush_r+0x22>
 8009300:	0800a384 	.word	0x0800a384
 8009304:	0800a3a4 	.word	0x0800a3a4
 8009308:	0800a364 	.word	0x0800a364

0800930c <std>:
 800930c:	2300      	movs	r3, #0
 800930e:	b510      	push	{r4, lr}
 8009310:	4604      	mov	r4, r0
 8009312:	e9c0 3300 	strd	r3, r3, [r0]
 8009316:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800931a:	6083      	str	r3, [r0, #8]
 800931c:	8181      	strh	r1, [r0, #12]
 800931e:	6643      	str	r3, [r0, #100]	; 0x64
 8009320:	81c2      	strh	r2, [r0, #14]
 8009322:	6183      	str	r3, [r0, #24]
 8009324:	4619      	mov	r1, r3
 8009326:	2208      	movs	r2, #8
 8009328:	305c      	adds	r0, #92	; 0x5c
 800932a:	f7fd fba7 	bl	8006a7c <memset>
 800932e:	4b05      	ldr	r3, [pc, #20]	; (8009344 <std+0x38>)
 8009330:	6263      	str	r3, [r4, #36]	; 0x24
 8009332:	4b05      	ldr	r3, [pc, #20]	; (8009348 <std+0x3c>)
 8009334:	62a3      	str	r3, [r4, #40]	; 0x28
 8009336:	4b05      	ldr	r3, [pc, #20]	; (800934c <std+0x40>)
 8009338:	62e3      	str	r3, [r4, #44]	; 0x2c
 800933a:	4b05      	ldr	r3, [pc, #20]	; (8009350 <std+0x44>)
 800933c:	6224      	str	r4, [r4, #32]
 800933e:	6323      	str	r3, [r4, #48]	; 0x30
 8009340:	bd10      	pop	{r4, pc}
 8009342:	bf00      	nop
 8009344:	0800965d 	.word	0x0800965d
 8009348:	0800967f 	.word	0x0800967f
 800934c:	080096b7 	.word	0x080096b7
 8009350:	080096db 	.word	0x080096db

08009354 <_cleanup_r>:
 8009354:	4901      	ldr	r1, [pc, #4]	; (800935c <_cleanup_r+0x8>)
 8009356:	f000 b8af 	b.w	80094b8 <_fwalk_reent>
 800935a:	bf00      	nop
 800935c:	08009295 	.word	0x08009295

08009360 <__sfmoreglue>:
 8009360:	b570      	push	{r4, r5, r6, lr}
 8009362:	1e4a      	subs	r2, r1, #1
 8009364:	2568      	movs	r5, #104	; 0x68
 8009366:	4355      	muls	r5, r2
 8009368:	460e      	mov	r6, r1
 800936a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800936e:	f7ff fa87 	bl	8008880 <_malloc_r>
 8009372:	4604      	mov	r4, r0
 8009374:	b140      	cbz	r0, 8009388 <__sfmoreglue+0x28>
 8009376:	2100      	movs	r1, #0
 8009378:	e9c0 1600 	strd	r1, r6, [r0]
 800937c:	300c      	adds	r0, #12
 800937e:	60a0      	str	r0, [r4, #8]
 8009380:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009384:	f7fd fb7a 	bl	8006a7c <memset>
 8009388:	4620      	mov	r0, r4
 800938a:	bd70      	pop	{r4, r5, r6, pc}

0800938c <__sfp_lock_acquire>:
 800938c:	4801      	ldr	r0, [pc, #4]	; (8009394 <__sfp_lock_acquire+0x8>)
 800938e:	f000 b8b3 	b.w	80094f8 <__retarget_lock_acquire_recursive>
 8009392:	bf00      	nop
 8009394:	20000500 	.word	0x20000500

08009398 <__sfp_lock_release>:
 8009398:	4801      	ldr	r0, [pc, #4]	; (80093a0 <__sfp_lock_release+0x8>)
 800939a:	f000 b8ae 	b.w	80094fa <__retarget_lock_release_recursive>
 800939e:	bf00      	nop
 80093a0:	20000500 	.word	0x20000500

080093a4 <__sinit_lock_acquire>:
 80093a4:	4801      	ldr	r0, [pc, #4]	; (80093ac <__sinit_lock_acquire+0x8>)
 80093a6:	f000 b8a7 	b.w	80094f8 <__retarget_lock_acquire_recursive>
 80093aa:	bf00      	nop
 80093ac:	200004fb 	.word	0x200004fb

080093b0 <__sinit_lock_release>:
 80093b0:	4801      	ldr	r0, [pc, #4]	; (80093b8 <__sinit_lock_release+0x8>)
 80093b2:	f000 b8a2 	b.w	80094fa <__retarget_lock_release_recursive>
 80093b6:	bf00      	nop
 80093b8:	200004fb 	.word	0x200004fb

080093bc <__sinit>:
 80093bc:	b510      	push	{r4, lr}
 80093be:	4604      	mov	r4, r0
 80093c0:	f7ff fff0 	bl	80093a4 <__sinit_lock_acquire>
 80093c4:	69a3      	ldr	r3, [r4, #24]
 80093c6:	b11b      	cbz	r3, 80093d0 <__sinit+0x14>
 80093c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093cc:	f7ff bff0 	b.w	80093b0 <__sinit_lock_release>
 80093d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80093d4:	6523      	str	r3, [r4, #80]	; 0x50
 80093d6:	4b13      	ldr	r3, [pc, #76]	; (8009424 <__sinit+0x68>)
 80093d8:	4a13      	ldr	r2, [pc, #76]	; (8009428 <__sinit+0x6c>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80093de:	42a3      	cmp	r3, r4
 80093e0:	bf04      	itt	eq
 80093e2:	2301      	moveq	r3, #1
 80093e4:	61a3      	streq	r3, [r4, #24]
 80093e6:	4620      	mov	r0, r4
 80093e8:	f000 f820 	bl	800942c <__sfp>
 80093ec:	6060      	str	r0, [r4, #4]
 80093ee:	4620      	mov	r0, r4
 80093f0:	f000 f81c 	bl	800942c <__sfp>
 80093f4:	60a0      	str	r0, [r4, #8]
 80093f6:	4620      	mov	r0, r4
 80093f8:	f000 f818 	bl	800942c <__sfp>
 80093fc:	2200      	movs	r2, #0
 80093fe:	60e0      	str	r0, [r4, #12]
 8009400:	2104      	movs	r1, #4
 8009402:	6860      	ldr	r0, [r4, #4]
 8009404:	f7ff ff82 	bl	800930c <std>
 8009408:	68a0      	ldr	r0, [r4, #8]
 800940a:	2201      	movs	r2, #1
 800940c:	2109      	movs	r1, #9
 800940e:	f7ff ff7d 	bl	800930c <std>
 8009412:	68e0      	ldr	r0, [r4, #12]
 8009414:	2202      	movs	r2, #2
 8009416:	2112      	movs	r1, #18
 8009418:	f7ff ff78 	bl	800930c <std>
 800941c:	2301      	movs	r3, #1
 800941e:	61a3      	str	r3, [r4, #24]
 8009420:	e7d2      	b.n	80093c8 <__sinit+0xc>
 8009422:	bf00      	nop
 8009424:	08009fe4 	.word	0x08009fe4
 8009428:	08009355 	.word	0x08009355

0800942c <__sfp>:
 800942c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800942e:	4607      	mov	r7, r0
 8009430:	f7ff ffac 	bl	800938c <__sfp_lock_acquire>
 8009434:	4b1e      	ldr	r3, [pc, #120]	; (80094b0 <__sfp+0x84>)
 8009436:	681e      	ldr	r6, [r3, #0]
 8009438:	69b3      	ldr	r3, [r6, #24]
 800943a:	b913      	cbnz	r3, 8009442 <__sfp+0x16>
 800943c:	4630      	mov	r0, r6
 800943e:	f7ff ffbd 	bl	80093bc <__sinit>
 8009442:	3648      	adds	r6, #72	; 0x48
 8009444:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009448:	3b01      	subs	r3, #1
 800944a:	d503      	bpl.n	8009454 <__sfp+0x28>
 800944c:	6833      	ldr	r3, [r6, #0]
 800944e:	b30b      	cbz	r3, 8009494 <__sfp+0x68>
 8009450:	6836      	ldr	r6, [r6, #0]
 8009452:	e7f7      	b.n	8009444 <__sfp+0x18>
 8009454:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009458:	b9d5      	cbnz	r5, 8009490 <__sfp+0x64>
 800945a:	4b16      	ldr	r3, [pc, #88]	; (80094b4 <__sfp+0x88>)
 800945c:	60e3      	str	r3, [r4, #12]
 800945e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009462:	6665      	str	r5, [r4, #100]	; 0x64
 8009464:	f000 f847 	bl	80094f6 <__retarget_lock_init_recursive>
 8009468:	f7ff ff96 	bl	8009398 <__sfp_lock_release>
 800946c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009470:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009474:	6025      	str	r5, [r4, #0]
 8009476:	61a5      	str	r5, [r4, #24]
 8009478:	2208      	movs	r2, #8
 800947a:	4629      	mov	r1, r5
 800947c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009480:	f7fd fafc 	bl	8006a7c <memset>
 8009484:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009488:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800948c:	4620      	mov	r0, r4
 800948e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009490:	3468      	adds	r4, #104	; 0x68
 8009492:	e7d9      	b.n	8009448 <__sfp+0x1c>
 8009494:	2104      	movs	r1, #4
 8009496:	4638      	mov	r0, r7
 8009498:	f7ff ff62 	bl	8009360 <__sfmoreglue>
 800949c:	4604      	mov	r4, r0
 800949e:	6030      	str	r0, [r6, #0]
 80094a0:	2800      	cmp	r0, #0
 80094a2:	d1d5      	bne.n	8009450 <__sfp+0x24>
 80094a4:	f7ff ff78 	bl	8009398 <__sfp_lock_release>
 80094a8:	230c      	movs	r3, #12
 80094aa:	603b      	str	r3, [r7, #0]
 80094ac:	e7ee      	b.n	800948c <__sfp+0x60>
 80094ae:	bf00      	nop
 80094b0:	08009fe4 	.word	0x08009fe4
 80094b4:	ffff0001 	.word	0xffff0001

080094b8 <_fwalk_reent>:
 80094b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094bc:	4606      	mov	r6, r0
 80094be:	4688      	mov	r8, r1
 80094c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80094c4:	2700      	movs	r7, #0
 80094c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80094ca:	f1b9 0901 	subs.w	r9, r9, #1
 80094ce:	d505      	bpl.n	80094dc <_fwalk_reent+0x24>
 80094d0:	6824      	ldr	r4, [r4, #0]
 80094d2:	2c00      	cmp	r4, #0
 80094d4:	d1f7      	bne.n	80094c6 <_fwalk_reent+0xe>
 80094d6:	4638      	mov	r0, r7
 80094d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094dc:	89ab      	ldrh	r3, [r5, #12]
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d907      	bls.n	80094f2 <_fwalk_reent+0x3a>
 80094e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80094e6:	3301      	adds	r3, #1
 80094e8:	d003      	beq.n	80094f2 <_fwalk_reent+0x3a>
 80094ea:	4629      	mov	r1, r5
 80094ec:	4630      	mov	r0, r6
 80094ee:	47c0      	blx	r8
 80094f0:	4307      	orrs	r7, r0
 80094f2:	3568      	adds	r5, #104	; 0x68
 80094f4:	e7e9      	b.n	80094ca <_fwalk_reent+0x12>

080094f6 <__retarget_lock_init_recursive>:
 80094f6:	4770      	bx	lr

080094f8 <__retarget_lock_acquire_recursive>:
 80094f8:	4770      	bx	lr

080094fa <__retarget_lock_release_recursive>:
 80094fa:	4770      	bx	lr

080094fc <__swhatbuf_r>:
 80094fc:	b570      	push	{r4, r5, r6, lr}
 80094fe:	460e      	mov	r6, r1
 8009500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009504:	2900      	cmp	r1, #0
 8009506:	b096      	sub	sp, #88	; 0x58
 8009508:	4614      	mov	r4, r2
 800950a:	461d      	mov	r5, r3
 800950c:	da07      	bge.n	800951e <__swhatbuf_r+0x22>
 800950e:	2300      	movs	r3, #0
 8009510:	602b      	str	r3, [r5, #0]
 8009512:	89b3      	ldrh	r3, [r6, #12]
 8009514:	061a      	lsls	r2, r3, #24
 8009516:	d410      	bmi.n	800953a <__swhatbuf_r+0x3e>
 8009518:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800951c:	e00e      	b.n	800953c <__swhatbuf_r+0x40>
 800951e:	466a      	mov	r2, sp
 8009520:	f000 f902 	bl	8009728 <_fstat_r>
 8009524:	2800      	cmp	r0, #0
 8009526:	dbf2      	blt.n	800950e <__swhatbuf_r+0x12>
 8009528:	9a01      	ldr	r2, [sp, #4]
 800952a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800952e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009532:	425a      	negs	r2, r3
 8009534:	415a      	adcs	r2, r3
 8009536:	602a      	str	r2, [r5, #0]
 8009538:	e7ee      	b.n	8009518 <__swhatbuf_r+0x1c>
 800953a:	2340      	movs	r3, #64	; 0x40
 800953c:	2000      	movs	r0, #0
 800953e:	6023      	str	r3, [r4, #0]
 8009540:	b016      	add	sp, #88	; 0x58
 8009542:	bd70      	pop	{r4, r5, r6, pc}

08009544 <__smakebuf_r>:
 8009544:	898b      	ldrh	r3, [r1, #12]
 8009546:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009548:	079d      	lsls	r5, r3, #30
 800954a:	4606      	mov	r6, r0
 800954c:	460c      	mov	r4, r1
 800954e:	d507      	bpl.n	8009560 <__smakebuf_r+0x1c>
 8009550:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009554:	6023      	str	r3, [r4, #0]
 8009556:	6123      	str	r3, [r4, #16]
 8009558:	2301      	movs	r3, #1
 800955a:	6163      	str	r3, [r4, #20]
 800955c:	b002      	add	sp, #8
 800955e:	bd70      	pop	{r4, r5, r6, pc}
 8009560:	ab01      	add	r3, sp, #4
 8009562:	466a      	mov	r2, sp
 8009564:	f7ff ffca 	bl	80094fc <__swhatbuf_r>
 8009568:	9900      	ldr	r1, [sp, #0]
 800956a:	4605      	mov	r5, r0
 800956c:	4630      	mov	r0, r6
 800956e:	f7ff f987 	bl	8008880 <_malloc_r>
 8009572:	b948      	cbnz	r0, 8009588 <__smakebuf_r+0x44>
 8009574:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009578:	059a      	lsls	r2, r3, #22
 800957a:	d4ef      	bmi.n	800955c <__smakebuf_r+0x18>
 800957c:	f023 0303 	bic.w	r3, r3, #3
 8009580:	f043 0302 	orr.w	r3, r3, #2
 8009584:	81a3      	strh	r3, [r4, #12]
 8009586:	e7e3      	b.n	8009550 <__smakebuf_r+0xc>
 8009588:	4b0d      	ldr	r3, [pc, #52]	; (80095c0 <__smakebuf_r+0x7c>)
 800958a:	62b3      	str	r3, [r6, #40]	; 0x28
 800958c:	89a3      	ldrh	r3, [r4, #12]
 800958e:	6020      	str	r0, [r4, #0]
 8009590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009594:	81a3      	strh	r3, [r4, #12]
 8009596:	9b00      	ldr	r3, [sp, #0]
 8009598:	6163      	str	r3, [r4, #20]
 800959a:	9b01      	ldr	r3, [sp, #4]
 800959c:	6120      	str	r0, [r4, #16]
 800959e:	b15b      	cbz	r3, 80095b8 <__smakebuf_r+0x74>
 80095a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095a4:	4630      	mov	r0, r6
 80095a6:	f000 f8d1 	bl	800974c <_isatty_r>
 80095aa:	b128      	cbz	r0, 80095b8 <__smakebuf_r+0x74>
 80095ac:	89a3      	ldrh	r3, [r4, #12]
 80095ae:	f023 0303 	bic.w	r3, r3, #3
 80095b2:	f043 0301 	orr.w	r3, r3, #1
 80095b6:	81a3      	strh	r3, [r4, #12]
 80095b8:	89a0      	ldrh	r0, [r4, #12]
 80095ba:	4305      	orrs	r5, r0
 80095bc:	81a5      	strh	r5, [r4, #12]
 80095be:	e7cd      	b.n	800955c <__smakebuf_r+0x18>
 80095c0:	08009355 	.word	0x08009355

080095c4 <_malloc_usable_size_r>:
 80095c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095c8:	1f18      	subs	r0, r3, #4
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	bfbc      	itt	lt
 80095ce:	580b      	ldrlt	r3, [r1, r0]
 80095d0:	18c0      	addlt	r0, r0, r3
 80095d2:	4770      	bx	lr

080095d4 <_raise_r>:
 80095d4:	291f      	cmp	r1, #31
 80095d6:	b538      	push	{r3, r4, r5, lr}
 80095d8:	4604      	mov	r4, r0
 80095da:	460d      	mov	r5, r1
 80095dc:	d904      	bls.n	80095e8 <_raise_r+0x14>
 80095de:	2316      	movs	r3, #22
 80095e0:	6003      	str	r3, [r0, #0]
 80095e2:	f04f 30ff 	mov.w	r0, #4294967295
 80095e6:	bd38      	pop	{r3, r4, r5, pc}
 80095e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80095ea:	b112      	cbz	r2, 80095f2 <_raise_r+0x1e>
 80095ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80095f0:	b94b      	cbnz	r3, 8009606 <_raise_r+0x32>
 80095f2:	4620      	mov	r0, r4
 80095f4:	f000 f830 	bl	8009658 <_getpid_r>
 80095f8:	462a      	mov	r2, r5
 80095fa:	4601      	mov	r1, r0
 80095fc:	4620      	mov	r0, r4
 80095fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009602:	f000 b817 	b.w	8009634 <_kill_r>
 8009606:	2b01      	cmp	r3, #1
 8009608:	d00a      	beq.n	8009620 <_raise_r+0x4c>
 800960a:	1c59      	adds	r1, r3, #1
 800960c:	d103      	bne.n	8009616 <_raise_r+0x42>
 800960e:	2316      	movs	r3, #22
 8009610:	6003      	str	r3, [r0, #0]
 8009612:	2001      	movs	r0, #1
 8009614:	e7e7      	b.n	80095e6 <_raise_r+0x12>
 8009616:	2400      	movs	r4, #0
 8009618:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800961c:	4628      	mov	r0, r5
 800961e:	4798      	blx	r3
 8009620:	2000      	movs	r0, #0
 8009622:	e7e0      	b.n	80095e6 <_raise_r+0x12>

08009624 <raise>:
 8009624:	4b02      	ldr	r3, [pc, #8]	; (8009630 <raise+0xc>)
 8009626:	4601      	mov	r1, r0
 8009628:	6818      	ldr	r0, [r3, #0]
 800962a:	f7ff bfd3 	b.w	80095d4 <_raise_r>
 800962e:	bf00      	nop
 8009630:	2000000c 	.word	0x2000000c

08009634 <_kill_r>:
 8009634:	b538      	push	{r3, r4, r5, lr}
 8009636:	4d07      	ldr	r5, [pc, #28]	; (8009654 <_kill_r+0x20>)
 8009638:	2300      	movs	r3, #0
 800963a:	4604      	mov	r4, r0
 800963c:	4608      	mov	r0, r1
 800963e:	4611      	mov	r1, r2
 8009640:	602b      	str	r3, [r5, #0]
 8009642:	f7f8 ff00 	bl	8002446 <_kill>
 8009646:	1c43      	adds	r3, r0, #1
 8009648:	d102      	bne.n	8009650 <_kill_r+0x1c>
 800964a:	682b      	ldr	r3, [r5, #0]
 800964c:	b103      	cbz	r3, 8009650 <_kill_r+0x1c>
 800964e:	6023      	str	r3, [r4, #0]
 8009650:	bd38      	pop	{r3, r4, r5, pc}
 8009652:	bf00      	nop
 8009654:	200004f4 	.word	0x200004f4

08009658 <_getpid_r>:
 8009658:	f7f8 beed 	b.w	8002436 <_getpid>

0800965c <__sread>:
 800965c:	b510      	push	{r4, lr}
 800965e:	460c      	mov	r4, r1
 8009660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009664:	f000 f894 	bl	8009790 <_read_r>
 8009668:	2800      	cmp	r0, #0
 800966a:	bfab      	itete	ge
 800966c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800966e:	89a3      	ldrhlt	r3, [r4, #12]
 8009670:	181b      	addge	r3, r3, r0
 8009672:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009676:	bfac      	ite	ge
 8009678:	6563      	strge	r3, [r4, #84]	; 0x54
 800967a:	81a3      	strhlt	r3, [r4, #12]
 800967c:	bd10      	pop	{r4, pc}

0800967e <__swrite>:
 800967e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009682:	461f      	mov	r7, r3
 8009684:	898b      	ldrh	r3, [r1, #12]
 8009686:	05db      	lsls	r3, r3, #23
 8009688:	4605      	mov	r5, r0
 800968a:	460c      	mov	r4, r1
 800968c:	4616      	mov	r6, r2
 800968e:	d505      	bpl.n	800969c <__swrite+0x1e>
 8009690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009694:	2302      	movs	r3, #2
 8009696:	2200      	movs	r2, #0
 8009698:	f000 f868 	bl	800976c <_lseek_r>
 800969c:	89a3      	ldrh	r3, [r4, #12]
 800969e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80096a6:	81a3      	strh	r3, [r4, #12]
 80096a8:	4632      	mov	r2, r6
 80096aa:	463b      	mov	r3, r7
 80096ac:	4628      	mov	r0, r5
 80096ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096b2:	f000 b817 	b.w	80096e4 <_write_r>

080096b6 <__sseek>:
 80096b6:	b510      	push	{r4, lr}
 80096b8:	460c      	mov	r4, r1
 80096ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096be:	f000 f855 	bl	800976c <_lseek_r>
 80096c2:	1c43      	adds	r3, r0, #1
 80096c4:	89a3      	ldrh	r3, [r4, #12]
 80096c6:	bf15      	itete	ne
 80096c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80096ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80096ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80096d2:	81a3      	strheq	r3, [r4, #12]
 80096d4:	bf18      	it	ne
 80096d6:	81a3      	strhne	r3, [r4, #12]
 80096d8:	bd10      	pop	{r4, pc}

080096da <__sclose>:
 80096da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096de:	f000 b813 	b.w	8009708 <_close_r>
	...

080096e4 <_write_r>:
 80096e4:	b538      	push	{r3, r4, r5, lr}
 80096e6:	4d07      	ldr	r5, [pc, #28]	; (8009704 <_write_r+0x20>)
 80096e8:	4604      	mov	r4, r0
 80096ea:	4608      	mov	r0, r1
 80096ec:	4611      	mov	r1, r2
 80096ee:	2200      	movs	r2, #0
 80096f0:	602a      	str	r2, [r5, #0]
 80096f2:	461a      	mov	r2, r3
 80096f4:	f7f8 fede 	bl	80024b4 <_write>
 80096f8:	1c43      	adds	r3, r0, #1
 80096fa:	d102      	bne.n	8009702 <_write_r+0x1e>
 80096fc:	682b      	ldr	r3, [r5, #0]
 80096fe:	b103      	cbz	r3, 8009702 <_write_r+0x1e>
 8009700:	6023      	str	r3, [r4, #0]
 8009702:	bd38      	pop	{r3, r4, r5, pc}
 8009704:	200004f4 	.word	0x200004f4

08009708 <_close_r>:
 8009708:	b538      	push	{r3, r4, r5, lr}
 800970a:	4d06      	ldr	r5, [pc, #24]	; (8009724 <_close_r+0x1c>)
 800970c:	2300      	movs	r3, #0
 800970e:	4604      	mov	r4, r0
 8009710:	4608      	mov	r0, r1
 8009712:	602b      	str	r3, [r5, #0]
 8009714:	f7f8 feea 	bl	80024ec <_close>
 8009718:	1c43      	adds	r3, r0, #1
 800971a:	d102      	bne.n	8009722 <_close_r+0x1a>
 800971c:	682b      	ldr	r3, [r5, #0]
 800971e:	b103      	cbz	r3, 8009722 <_close_r+0x1a>
 8009720:	6023      	str	r3, [r4, #0]
 8009722:	bd38      	pop	{r3, r4, r5, pc}
 8009724:	200004f4 	.word	0x200004f4

08009728 <_fstat_r>:
 8009728:	b538      	push	{r3, r4, r5, lr}
 800972a:	4d07      	ldr	r5, [pc, #28]	; (8009748 <_fstat_r+0x20>)
 800972c:	2300      	movs	r3, #0
 800972e:	4604      	mov	r4, r0
 8009730:	4608      	mov	r0, r1
 8009732:	4611      	mov	r1, r2
 8009734:	602b      	str	r3, [r5, #0]
 8009736:	f7f8 fee5 	bl	8002504 <_fstat>
 800973a:	1c43      	adds	r3, r0, #1
 800973c:	d102      	bne.n	8009744 <_fstat_r+0x1c>
 800973e:	682b      	ldr	r3, [r5, #0]
 8009740:	b103      	cbz	r3, 8009744 <_fstat_r+0x1c>
 8009742:	6023      	str	r3, [r4, #0]
 8009744:	bd38      	pop	{r3, r4, r5, pc}
 8009746:	bf00      	nop
 8009748:	200004f4 	.word	0x200004f4

0800974c <_isatty_r>:
 800974c:	b538      	push	{r3, r4, r5, lr}
 800974e:	4d06      	ldr	r5, [pc, #24]	; (8009768 <_isatty_r+0x1c>)
 8009750:	2300      	movs	r3, #0
 8009752:	4604      	mov	r4, r0
 8009754:	4608      	mov	r0, r1
 8009756:	602b      	str	r3, [r5, #0]
 8009758:	f7f8 fee4 	bl	8002524 <_isatty>
 800975c:	1c43      	adds	r3, r0, #1
 800975e:	d102      	bne.n	8009766 <_isatty_r+0x1a>
 8009760:	682b      	ldr	r3, [r5, #0]
 8009762:	b103      	cbz	r3, 8009766 <_isatty_r+0x1a>
 8009764:	6023      	str	r3, [r4, #0]
 8009766:	bd38      	pop	{r3, r4, r5, pc}
 8009768:	200004f4 	.word	0x200004f4

0800976c <_lseek_r>:
 800976c:	b538      	push	{r3, r4, r5, lr}
 800976e:	4d07      	ldr	r5, [pc, #28]	; (800978c <_lseek_r+0x20>)
 8009770:	4604      	mov	r4, r0
 8009772:	4608      	mov	r0, r1
 8009774:	4611      	mov	r1, r2
 8009776:	2200      	movs	r2, #0
 8009778:	602a      	str	r2, [r5, #0]
 800977a:	461a      	mov	r2, r3
 800977c:	f7f8 fedd 	bl	800253a <_lseek>
 8009780:	1c43      	adds	r3, r0, #1
 8009782:	d102      	bne.n	800978a <_lseek_r+0x1e>
 8009784:	682b      	ldr	r3, [r5, #0]
 8009786:	b103      	cbz	r3, 800978a <_lseek_r+0x1e>
 8009788:	6023      	str	r3, [r4, #0]
 800978a:	bd38      	pop	{r3, r4, r5, pc}
 800978c:	200004f4 	.word	0x200004f4

08009790 <_read_r>:
 8009790:	b538      	push	{r3, r4, r5, lr}
 8009792:	4d07      	ldr	r5, [pc, #28]	; (80097b0 <_read_r+0x20>)
 8009794:	4604      	mov	r4, r0
 8009796:	4608      	mov	r0, r1
 8009798:	4611      	mov	r1, r2
 800979a:	2200      	movs	r2, #0
 800979c:	602a      	str	r2, [r5, #0]
 800979e:	461a      	mov	r2, r3
 80097a0:	f7f8 fe6b 	bl	800247a <_read>
 80097a4:	1c43      	adds	r3, r0, #1
 80097a6:	d102      	bne.n	80097ae <_read_r+0x1e>
 80097a8:	682b      	ldr	r3, [r5, #0]
 80097aa:	b103      	cbz	r3, 80097ae <_read_r+0x1e>
 80097ac:	6023      	str	r3, [r4, #0]
 80097ae:	bd38      	pop	{r3, r4, r5, pc}
 80097b0:	200004f4 	.word	0x200004f4

080097b4 <asin>:
 80097b4:	b538      	push	{r3, r4, r5, lr}
 80097b6:	ed2d 8b02 	vpush	{d8}
 80097ba:	ec55 4b10 	vmov	r4, r5, d0
 80097be:	f000 f867 	bl	8009890 <__ieee754_asin>
 80097c2:	4b16      	ldr	r3, [pc, #88]	; (800981c <asin+0x68>)
 80097c4:	eeb0 8a40 	vmov.f32	s16, s0
 80097c8:	eef0 8a60 	vmov.f32	s17, s1
 80097cc:	f993 3000 	ldrsb.w	r3, [r3]
 80097d0:	3301      	adds	r3, #1
 80097d2:	d01c      	beq.n	800980e <asin+0x5a>
 80097d4:	4622      	mov	r2, r4
 80097d6:	462b      	mov	r3, r5
 80097d8:	4620      	mov	r0, r4
 80097da:	4629      	mov	r1, r5
 80097dc:	f7f7 f9ae 	bl	8000b3c <__aeabi_dcmpun>
 80097e0:	b9a8      	cbnz	r0, 800980e <asin+0x5a>
 80097e2:	ec45 4b10 	vmov	d0, r4, r5
 80097e6:	f000 fb1b 	bl	8009e20 <fabs>
 80097ea:	4b0d      	ldr	r3, [pc, #52]	; (8009820 <asin+0x6c>)
 80097ec:	ec51 0b10 	vmov	r0, r1, d0
 80097f0:	2200      	movs	r2, #0
 80097f2:	f7f7 f999 	bl	8000b28 <__aeabi_dcmpgt>
 80097f6:	b150      	cbz	r0, 800980e <asin+0x5a>
 80097f8:	f7fd f916 	bl	8006a28 <__errno>
 80097fc:	ecbd 8b02 	vpop	{d8}
 8009800:	2321      	movs	r3, #33	; 0x21
 8009802:	6003      	str	r3, [r0, #0]
 8009804:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009808:	4806      	ldr	r0, [pc, #24]	; (8009824 <asin+0x70>)
 800980a:	f000 bb15 	b.w	8009e38 <nan>
 800980e:	eeb0 0a48 	vmov.f32	s0, s16
 8009812:	eef0 0a68 	vmov.f32	s1, s17
 8009816:	ecbd 8b02 	vpop	{d8}
 800981a:	bd38      	pop	{r3, r4, r5, pc}
 800981c:	200001dc 	.word	0x200001dc
 8009820:	3ff00000 	.word	0x3ff00000
 8009824:	0800a258 	.word	0x0800a258

08009828 <sqrt>:
 8009828:	b538      	push	{r3, r4, r5, lr}
 800982a:	ed2d 8b02 	vpush	{d8}
 800982e:	ec55 4b10 	vmov	r4, r5, d0
 8009832:	f000 fa41 	bl	8009cb8 <__ieee754_sqrt>
 8009836:	4b15      	ldr	r3, [pc, #84]	; (800988c <sqrt+0x64>)
 8009838:	eeb0 8a40 	vmov.f32	s16, s0
 800983c:	eef0 8a60 	vmov.f32	s17, s1
 8009840:	f993 3000 	ldrsb.w	r3, [r3]
 8009844:	3301      	adds	r3, #1
 8009846:	d019      	beq.n	800987c <sqrt+0x54>
 8009848:	4622      	mov	r2, r4
 800984a:	462b      	mov	r3, r5
 800984c:	4620      	mov	r0, r4
 800984e:	4629      	mov	r1, r5
 8009850:	f7f7 f974 	bl	8000b3c <__aeabi_dcmpun>
 8009854:	b990      	cbnz	r0, 800987c <sqrt+0x54>
 8009856:	2200      	movs	r2, #0
 8009858:	2300      	movs	r3, #0
 800985a:	4620      	mov	r0, r4
 800985c:	4629      	mov	r1, r5
 800985e:	f7f7 f945 	bl	8000aec <__aeabi_dcmplt>
 8009862:	b158      	cbz	r0, 800987c <sqrt+0x54>
 8009864:	f7fd f8e0 	bl	8006a28 <__errno>
 8009868:	2321      	movs	r3, #33	; 0x21
 800986a:	6003      	str	r3, [r0, #0]
 800986c:	2200      	movs	r2, #0
 800986e:	2300      	movs	r3, #0
 8009870:	4610      	mov	r0, r2
 8009872:	4619      	mov	r1, r3
 8009874:	f7f6 fff2 	bl	800085c <__aeabi_ddiv>
 8009878:	ec41 0b18 	vmov	d8, r0, r1
 800987c:	eeb0 0a48 	vmov.f32	s0, s16
 8009880:	eef0 0a68 	vmov.f32	s1, s17
 8009884:	ecbd 8b02 	vpop	{d8}
 8009888:	bd38      	pop	{r3, r4, r5, pc}
 800988a:	bf00      	nop
 800988c:	200001dc 	.word	0x200001dc

08009890 <__ieee754_asin>:
 8009890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009894:	ed2d 8b04 	vpush	{d8-d9}
 8009898:	ec55 4b10 	vmov	r4, r5, d0
 800989c:	4bcc      	ldr	r3, [pc, #816]	; (8009bd0 <__ieee754_asin+0x340>)
 800989e:	b083      	sub	sp, #12
 80098a0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80098a4:	4598      	cmp	r8, r3
 80098a6:	9501      	str	r5, [sp, #4]
 80098a8:	dd35      	ble.n	8009916 <__ieee754_asin+0x86>
 80098aa:	ee10 3a10 	vmov	r3, s0
 80098ae:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 80098b2:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 80098b6:	ea58 0303 	orrs.w	r3, r8, r3
 80098ba:	d117      	bne.n	80098ec <__ieee754_asin+0x5c>
 80098bc:	a3aa      	add	r3, pc, #680	; (adr r3, 8009b68 <__ieee754_asin+0x2d8>)
 80098be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c2:	ee10 0a10 	vmov	r0, s0
 80098c6:	4629      	mov	r1, r5
 80098c8:	f7f6 fe9e 	bl	8000608 <__aeabi_dmul>
 80098cc:	a3a8      	add	r3, pc, #672	; (adr r3, 8009b70 <__ieee754_asin+0x2e0>)
 80098ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d2:	4606      	mov	r6, r0
 80098d4:	460f      	mov	r7, r1
 80098d6:	4620      	mov	r0, r4
 80098d8:	4629      	mov	r1, r5
 80098da:	f7f6 fe95 	bl	8000608 <__aeabi_dmul>
 80098de:	4602      	mov	r2, r0
 80098e0:	460b      	mov	r3, r1
 80098e2:	4630      	mov	r0, r6
 80098e4:	4639      	mov	r1, r7
 80098e6:	f7f6 fcd9 	bl	800029c <__adddf3>
 80098ea:	e00b      	b.n	8009904 <__ieee754_asin+0x74>
 80098ec:	ee10 2a10 	vmov	r2, s0
 80098f0:	462b      	mov	r3, r5
 80098f2:	ee10 0a10 	vmov	r0, s0
 80098f6:	4629      	mov	r1, r5
 80098f8:	f7f6 fcce 	bl	8000298 <__aeabi_dsub>
 80098fc:	4602      	mov	r2, r0
 80098fe:	460b      	mov	r3, r1
 8009900:	f7f6 ffac 	bl	800085c <__aeabi_ddiv>
 8009904:	4604      	mov	r4, r0
 8009906:	460d      	mov	r5, r1
 8009908:	ec45 4b10 	vmov	d0, r4, r5
 800990c:	b003      	add	sp, #12
 800990e:	ecbd 8b04 	vpop	{d8-d9}
 8009912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009916:	4baf      	ldr	r3, [pc, #700]	; (8009bd4 <__ieee754_asin+0x344>)
 8009918:	4598      	cmp	r8, r3
 800991a:	dc11      	bgt.n	8009940 <__ieee754_asin+0xb0>
 800991c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8009920:	f280 80ae 	bge.w	8009a80 <__ieee754_asin+0x1f0>
 8009924:	a394      	add	r3, pc, #592	; (adr r3, 8009b78 <__ieee754_asin+0x2e8>)
 8009926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992a:	ee10 0a10 	vmov	r0, s0
 800992e:	4629      	mov	r1, r5
 8009930:	f7f6 fcb4 	bl	800029c <__adddf3>
 8009934:	4ba8      	ldr	r3, [pc, #672]	; (8009bd8 <__ieee754_asin+0x348>)
 8009936:	2200      	movs	r2, #0
 8009938:	f7f7 f8f6 	bl	8000b28 <__aeabi_dcmpgt>
 800993c:	2800      	cmp	r0, #0
 800993e:	d1e3      	bne.n	8009908 <__ieee754_asin+0x78>
 8009940:	ec45 4b10 	vmov	d0, r4, r5
 8009944:	f000 fa6c 	bl	8009e20 <fabs>
 8009948:	49a3      	ldr	r1, [pc, #652]	; (8009bd8 <__ieee754_asin+0x348>)
 800994a:	ec53 2b10 	vmov	r2, r3, d0
 800994e:	2000      	movs	r0, #0
 8009950:	f7f6 fca2 	bl	8000298 <__aeabi_dsub>
 8009954:	4ba1      	ldr	r3, [pc, #644]	; (8009bdc <__ieee754_asin+0x34c>)
 8009956:	2200      	movs	r2, #0
 8009958:	f7f6 fe56 	bl	8000608 <__aeabi_dmul>
 800995c:	a388      	add	r3, pc, #544	; (adr r3, 8009b80 <__ieee754_asin+0x2f0>)
 800995e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009962:	4604      	mov	r4, r0
 8009964:	460d      	mov	r5, r1
 8009966:	f7f6 fe4f 	bl	8000608 <__aeabi_dmul>
 800996a:	a387      	add	r3, pc, #540	; (adr r3, 8009b88 <__ieee754_asin+0x2f8>)
 800996c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009970:	f7f6 fc94 	bl	800029c <__adddf3>
 8009974:	4622      	mov	r2, r4
 8009976:	462b      	mov	r3, r5
 8009978:	f7f6 fe46 	bl	8000608 <__aeabi_dmul>
 800997c:	a384      	add	r3, pc, #528	; (adr r3, 8009b90 <__ieee754_asin+0x300>)
 800997e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009982:	f7f6 fc89 	bl	8000298 <__aeabi_dsub>
 8009986:	4622      	mov	r2, r4
 8009988:	462b      	mov	r3, r5
 800998a:	f7f6 fe3d 	bl	8000608 <__aeabi_dmul>
 800998e:	a382      	add	r3, pc, #520	; (adr r3, 8009b98 <__ieee754_asin+0x308>)
 8009990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009994:	f7f6 fc82 	bl	800029c <__adddf3>
 8009998:	4622      	mov	r2, r4
 800999a:	462b      	mov	r3, r5
 800999c:	f7f6 fe34 	bl	8000608 <__aeabi_dmul>
 80099a0:	a37f      	add	r3, pc, #508	; (adr r3, 8009ba0 <__ieee754_asin+0x310>)
 80099a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a6:	f7f6 fc77 	bl	8000298 <__aeabi_dsub>
 80099aa:	4622      	mov	r2, r4
 80099ac:	462b      	mov	r3, r5
 80099ae:	f7f6 fe2b 	bl	8000608 <__aeabi_dmul>
 80099b2:	a37d      	add	r3, pc, #500	; (adr r3, 8009ba8 <__ieee754_asin+0x318>)
 80099b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b8:	f7f6 fc70 	bl	800029c <__adddf3>
 80099bc:	4622      	mov	r2, r4
 80099be:	462b      	mov	r3, r5
 80099c0:	f7f6 fe22 	bl	8000608 <__aeabi_dmul>
 80099c4:	a37a      	add	r3, pc, #488	; (adr r3, 8009bb0 <__ieee754_asin+0x320>)
 80099c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ca:	ec41 0b18 	vmov	d8, r0, r1
 80099ce:	4620      	mov	r0, r4
 80099d0:	4629      	mov	r1, r5
 80099d2:	f7f6 fe19 	bl	8000608 <__aeabi_dmul>
 80099d6:	a378      	add	r3, pc, #480	; (adr r3, 8009bb8 <__ieee754_asin+0x328>)
 80099d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099dc:	f7f6 fc5c 	bl	8000298 <__aeabi_dsub>
 80099e0:	4622      	mov	r2, r4
 80099e2:	462b      	mov	r3, r5
 80099e4:	f7f6 fe10 	bl	8000608 <__aeabi_dmul>
 80099e8:	a375      	add	r3, pc, #468	; (adr r3, 8009bc0 <__ieee754_asin+0x330>)
 80099ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ee:	f7f6 fc55 	bl	800029c <__adddf3>
 80099f2:	4622      	mov	r2, r4
 80099f4:	462b      	mov	r3, r5
 80099f6:	f7f6 fe07 	bl	8000608 <__aeabi_dmul>
 80099fa:	a373      	add	r3, pc, #460	; (adr r3, 8009bc8 <__ieee754_asin+0x338>)
 80099fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a00:	f7f6 fc4a 	bl	8000298 <__aeabi_dsub>
 8009a04:	4622      	mov	r2, r4
 8009a06:	462b      	mov	r3, r5
 8009a08:	f7f6 fdfe 	bl	8000608 <__aeabi_dmul>
 8009a0c:	4b72      	ldr	r3, [pc, #456]	; (8009bd8 <__ieee754_asin+0x348>)
 8009a0e:	2200      	movs	r2, #0
 8009a10:	f7f6 fc44 	bl	800029c <__adddf3>
 8009a14:	ec45 4b10 	vmov	d0, r4, r5
 8009a18:	4606      	mov	r6, r0
 8009a1a:	460f      	mov	r7, r1
 8009a1c:	f000 f94c 	bl	8009cb8 <__ieee754_sqrt>
 8009a20:	4b6f      	ldr	r3, [pc, #444]	; (8009be0 <__ieee754_asin+0x350>)
 8009a22:	4598      	cmp	r8, r3
 8009a24:	ec5b ab10 	vmov	sl, fp, d0
 8009a28:	f340 80dc 	ble.w	8009be4 <__ieee754_asin+0x354>
 8009a2c:	4632      	mov	r2, r6
 8009a2e:	463b      	mov	r3, r7
 8009a30:	ec51 0b18 	vmov	r0, r1, d8
 8009a34:	f7f6 ff12 	bl	800085c <__aeabi_ddiv>
 8009a38:	4652      	mov	r2, sl
 8009a3a:	465b      	mov	r3, fp
 8009a3c:	f7f6 fde4 	bl	8000608 <__aeabi_dmul>
 8009a40:	4652      	mov	r2, sl
 8009a42:	465b      	mov	r3, fp
 8009a44:	f7f6 fc2a 	bl	800029c <__adddf3>
 8009a48:	4602      	mov	r2, r0
 8009a4a:	460b      	mov	r3, r1
 8009a4c:	f7f6 fc26 	bl	800029c <__adddf3>
 8009a50:	a347      	add	r3, pc, #284	; (adr r3, 8009b70 <__ieee754_asin+0x2e0>)
 8009a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a56:	f7f6 fc1f 	bl	8000298 <__aeabi_dsub>
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	460b      	mov	r3, r1
 8009a5e:	a142      	add	r1, pc, #264	; (adr r1, 8009b68 <__ieee754_asin+0x2d8>)
 8009a60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a64:	f7f6 fc18 	bl	8000298 <__aeabi_dsub>
 8009a68:	9b01      	ldr	r3, [sp, #4]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	bfdc      	itt	le
 8009a6e:	4602      	movle	r2, r0
 8009a70:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8009a74:	4604      	mov	r4, r0
 8009a76:	460d      	mov	r5, r1
 8009a78:	bfdc      	itt	le
 8009a7a:	4614      	movle	r4, r2
 8009a7c:	461d      	movle	r5, r3
 8009a7e:	e743      	b.n	8009908 <__ieee754_asin+0x78>
 8009a80:	ee10 2a10 	vmov	r2, s0
 8009a84:	ee10 0a10 	vmov	r0, s0
 8009a88:	462b      	mov	r3, r5
 8009a8a:	4629      	mov	r1, r5
 8009a8c:	f7f6 fdbc 	bl	8000608 <__aeabi_dmul>
 8009a90:	a33b      	add	r3, pc, #236	; (adr r3, 8009b80 <__ieee754_asin+0x2f0>)
 8009a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a96:	4606      	mov	r6, r0
 8009a98:	460f      	mov	r7, r1
 8009a9a:	f7f6 fdb5 	bl	8000608 <__aeabi_dmul>
 8009a9e:	a33a      	add	r3, pc, #232	; (adr r3, 8009b88 <__ieee754_asin+0x2f8>)
 8009aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa4:	f7f6 fbfa 	bl	800029c <__adddf3>
 8009aa8:	4632      	mov	r2, r6
 8009aaa:	463b      	mov	r3, r7
 8009aac:	f7f6 fdac 	bl	8000608 <__aeabi_dmul>
 8009ab0:	a337      	add	r3, pc, #220	; (adr r3, 8009b90 <__ieee754_asin+0x300>)
 8009ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab6:	f7f6 fbef 	bl	8000298 <__aeabi_dsub>
 8009aba:	4632      	mov	r2, r6
 8009abc:	463b      	mov	r3, r7
 8009abe:	f7f6 fda3 	bl	8000608 <__aeabi_dmul>
 8009ac2:	a335      	add	r3, pc, #212	; (adr r3, 8009b98 <__ieee754_asin+0x308>)
 8009ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac8:	f7f6 fbe8 	bl	800029c <__adddf3>
 8009acc:	4632      	mov	r2, r6
 8009ace:	463b      	mov	r3, r7
 8009ad0:	f7f6 fd9a 	bl	8000608 <__aeabi_dmul>
 8009ad4:	a332      	add	r3, pc, #200	; (adr r3, 8009ba0 <__ieee754_asin+0x310>)
 8009ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ada:	f7f6 fbdd 	bl	8000298 <__aeabi_dsub>
 8009ade:	4632      	mov	r2, r6
 8009ae0:	463b      	mov	r3, r7
 8009ae2:	f7f6 fd91 	bl	8000608 <__aeabi_dmul>
 8009ae6:	a330      	add	r3, pc, #192	; (adr r3, 8009ba8 <__ieee754_asin+0x318>)
 8009ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aec:	f7f6 fbd6 	bl	800029c <__adddf3>
 8009af0:	4632      	mov	r2, r6
 8009af2:	463b      	mov	r3, r7
 8009af4:	f7f6 fd88 	bl	8000608 <__aeabi_dmul>
 8009af8:	a32d      	add	r3, pc, #180	; (adr r3, 8009bb0 <__ieee754_asin+0x320>)
 8009afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009afe:	4680      	mov	r8, r0
 8009b00:	4689      	mov	r9, r1
 8009b02:	4630      	mov	r0, r6
 8009b04:	4639      	mov	r1, r7
 8009b06:	f7f6 fd7f 	bl	8000608 <__aeabi_dmul>
 8009b0a:	a32b      	add	r3, pc, #172	; (adr r3, 8009bb8 <__ieee754_asin+0x328>)
 8009b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b10:	f7f6 fbc2 	bl	8000298 <__aeabi_dsub>
 8009b14:	4632      	mov	r2, r6
 8009b16:	463b      	mov	r3, r7
 8009b18:	f7f6 fd76 	bl	8000608 <__aeabi_dmul>
 8009b1c:	a328      	add	r3, pc, #160	; (adr r3, 8009bc0 <__ieee754_asin+0x330>)
 8009b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b22:	f7f6 fbbb 	bl	800029c <__adddf3>
 8009b26:	4632      	mov	r2, r6
 8009b28:	463b      	mov	r3, r7
 8009b2a:	f7f6 fd6d 	bl	8000608 <__aeabi_dmul>
 8009b2e:	a326      	add	r3, pc, #152	; (adr r3, 8009bc8 <__ieee754_asin+0x338>)
 8009b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b34:	f7f6 fbb0 	bl	8000298 <__aeabi_dsub>
 8009b38:	4632      	mov	r2, r6
 8009b3a:	463b      	mov	r3, r7
 8009b3c:	f7f6 fd64 	bl	8000608 <__aeabi_dmul>
 8009b40:	4b25      	ldr	r3, [pc, #148]	; (8009bd8 <__ieee754_asin+0x348>)
 8009b42:	2200      	movs	r2, #0
 8009b44:	f7f6 fbaa 	bl	800029c <__adddf3>
 8009b48:	4602      	mov	r2, r0
 8009b4a:	460b      	mov	r3, r1
 8009b4c:	4640      	mov	r0, r8
 8009b4e:	4649      	mov	r1, r9
 8009b50:	f7f6 fe84 	bl	800085c <__aeabi_ddiv>
 8009b54:	4622      	mov	r2, r4
 8009b56:	462b      	mov	r3, r5
 8009b58:	f7f6 fd56 	bl	8000608 <__aeabi_dmul>
 8009b5c:	4602      	mov	r2, r0
 8009b5e:	460b      	mov	r3, r1
 8009b60:	4620      	mov	r0, r4
 8009b62:	4629      	mov	r1, r5
 8009b64:	e6bf      	b.n	80098e6 <__ieee754_asin+0x56>
 8009b66:	bf00      	nop
 8009b68:	54442d18 	.word	0x54442d18
 8009b6c:	3ff921fb 	.word	0x3ff921fb
 8009b70:	33145c07 	.word	0x33145c07
 8009b74:	3c91a626 	.word	0x3c91a626
 8009b78:	8800759c 	.word	0x8800759c
 8009b7c:	7e37e43c 	.word	0x7e37e43c
 8009b80:	0dfdf709 	.word	0x0dfdf709
 8009b84:	3f023de1 	.word	0x3f023de1
 8009b88:	7501b288 	.word	0x7501b288
 8009b8c:	3f49efe0 	.word	0x3f49efe0
 8009b90:	b5688f3b 	.word	0xb5688f3b
 8009b94:	3fa48228 	.word	0x3fa48228
 8009b98:	0e884455 	.word	0x0e884455
 8009b9c:	3fc9c155 	.word	0x3fc9c155
 8009ba0:	03eb6f7d 	.word	0x03eb6f7d
 8009ba4:	3fd4d612 	.word	0x3fd4d612
 8009ba8:	55555555 	.word	0x55555555
 8009bac:	3fc55555 	.word	0x3fc55555
 8009bb0:	b12e9282 	.word	0xb12e9282
 8009bb4:	3fb3b8c5 	.word	0x3fb3b8c5
 8009bb8:	1b8d0159 	.word	0x1b8d0159
 8009bbc:	3fe6066c 	.word	0x3fe6066c
 8009bc0:	9c598ac8 	.word	0x9c598ac8
 8009bc4:	40002ae5 	.word	0x40002ae5
 8009bc8:	1c8a2d4b 	.word	0x1c8a2d4b
 8009bcc:	40033a27 	.word	0x40033a27
 8009bd0:	3fefffff 	.word	0x3fefffff
 8009bd4:	3fdfffff 	.word	0x3fdfffff
 8009bd8:	3ff00000 	.word	0x3ff00000
 8009bdc:	3fe00000 	.word	0x3fe00000
 8009be0:	3fef3332 	.word	0x3fef3332
 8009be4:	ee10 2a10 	vmov	r2, s0
 8009be8:	ee10 0a10 	vmov	r0, s0
 8009bec:	465b      	mov	r3, fp
 8009bee:	4659      	mov	r1, fp
 8009bf0:	f7f6 fb54 	bl	800029c <__adddf3>
 8009bf4:	4632      	mov	r2, r6
 8009bf6:	463b      	mov	r3, r7
 8009bf8:	ec41 0b19 	vmov	d9, r0, r1
 8009bfc:	ec51 0b18 	vmov	r0, r1, d8
 8009c00:	f7f6 fe2c 	bl	800085c <__aeabi_ddiv>
 8009c04:	4602      	mov	r2, r0
 8009c06:	460b      	mov	r3, r1
 8009c08:	ec51 0b19 	vmov	r0, r1, d9
 8009c0c:	f7f6 fcfc 	bl	8000608 <__aeabi_dmul>
 8009c10:	f04f 0800 	mov.w	r8, #0
 8009c14:	4606      	mov	r6, r0
 8009c16:	460f      	mov	r7, r1
 8009c18:	4642      	mov	r2, r8
 8009c1a:	465b      	mov	r3, fp
 8009c1c:	4640      	mov	r0, r8
 8009c1e:	4659      	mov	r1, fp
 8009c20:	f7f6 fcf2 	bl	8000608 <__aeabi_dmul>
 8009c24:	4602      	mov	r2, r0
 8009c26:	460b      	mov	r3, r1
 8009c28:	4620      	mov	r0, r4
 8009c2a:	4629      	mov	r1, r5
 8009c2c:	f7f6 fb34 	bl	8000298 <__aeabi_dsub>
 8009c30:	4642      	mov	r2, r8
 8009c32:	4604      	mov	r4, r0
 8009c34:	460d      	mov	r5, r1
 8009c36:	465b      	mov	r3, fp
 8009c38:	4650      	mov	r0, sl
 8009c3a:	4659      	mov	r1, fp
 8009c3c:	f7f6 fb2e 	bl	800029c <__adddf3>
 8009c40:	4602      	mov	r2, r0
 8009c42:	460b      	mov	r3, r1
 8009c44:	4620      	mov	r0, r4
 8009c46:	4629      	mov	r1, r5
 8009c48:	f7f6 fe08 	bl	800085c <__aeabi_ddiv>
 8009c4c:	4602      	mov	r2, r0
 8009c4e:	460b      	mov	r3, r1
 8009c50:	f7f6 fb24 	bl	800029c <__adddf3>
 8009c54:	4602      	mov	r2, r0
 8009c56:	460b      	mov	r3, r1
 8009c58:	a113      	add	r1, pc, #76	; (adr r1, 8009ca8 <__ieee754_asin+0x418>)
 8009c5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c5e:	f7f6 fb1b 	bl	8000298 <__aeabi_dsub>
 8009c62:	4602      	mov	r2, r0
 8009c64:	460b      	mov	r3, r1
 8009c66:	4630      	mov	r0, r6
 8009c68:	4639      	mov	r1, r7
 8009c6a:	f7f6 fb15 	bl	8000298 <__aeabi_dsub>
 8009c6e:	4642      	mov	r2, r8
 8009c70:	4604      	mov	r4, r0
 8009c72:	460d      	mov	r5, r1
 8009c74:	465b      	mov	r3, fp
 8009c76:	4640      	mov	r0, r8
 8009c78:	4659      	mov	r1, fp
 8009c7a:	f7f6 fb0f 	bl	800029c <__adddf3>
 8009c7e:	4602      	mov	r2, r0
 8009c80:	460b      	mov	r3, r1
 8009c82:	a10b      	add	r1, pc, #44	; (adr r1, 8009cb0 <__ieee754_asin+0x420>)
 8009c84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c88:	f7f6 fb06 	bl	8000298 <__aeabi_dsub>
 8009c8c:	4602      	mov	r2, r0
 8009c8e:	460b      	mov	r3, r1
 8009c90:	4620      	mov	r0, r4
 8009c92:	4629      	mov	r1, r5
 8009c94:	f7f6 fb00 	bl	8000298 <__aeabi_dsub>
 8009c98:	4602      	mov	r2, r0
 8009c9a:	460b      	mov	r3, r1
 8009c9c:	a104      	add	r1, pc, #16	; (adr r1, 8009cb0 <__ieee754_asin+0x420>)
 8009c9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ca2:	e6df      	b.n	8009a64 <__ieee754_asin+0x1d4>
 8009ca4:	f3af 8000 	nop.w
 8009ca8:	33145c07 	.word	0x33145c07
 8009cac:	3c91a626 	.word	0x3c91a626
 8009cb0:	54442d18 	.word	0x54442d18
 8009cb4:	3fe921fb 	.word	0x3fe921fb

08009cb8 <__ieee754_sqrt>:
 8009cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cbc:	ec55 4b10 	vmov	r4, r5, d0
 8009cc0:	4e56      	ldr	r6, [pc, #344]	; (8009e1c <__ieee754_sqrt+0x164>)
 8009cc2:	43ae      	bics	r6, r5
 8009cc4:	ee10 0a10 	vmov	r0, s0
 8009cc8:	ee10 3a10 	vmov	r3, s0
 8009ccc:	4629      	mov	r1, r5
 8009cce:	462a      	mov	r2, r5
 8009cd0:	d110      	bne.n	8009cf4 <__ieee754_sqrt+0x3c>
 8009cd2:	ee10 2a10 	vmov	r2, s0
 8009cd6:	462b      	mov	r3, r5
 8009cd8:	f7f6 fc96 	bl	8000608 <__aeabi_dmul>
 8009cdc:	4602      	mov	r2, r0
 8009cde:	460b      	mov	r3, r1
 8009ce0:	4620      	mov	r0, r4
 8009ce2:	4629      	mov	r1, r5
 8009ce4:	f7f6 fada 	bl	800029c <__adddf3>
 8009ce8:	4604      	mov	r4, r0
 8009cea:	460d      	mov	r5, r1
 8009cec:	ec45 4b10 	vmov	d0, r4, r5
 8009cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cf4:	2d00      	cmp	r5, #0
 8009cf6:	dc10      	bgt.n	8009d1a <__ieee754_sqrt+0x62>
 8009cf8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009cfc:	4330      	orrs	r0, r6
 8009cfe:	d0f5      	beq.n	8009cec <__ieee754_sqrt+0x34>
 8009d00:	b15d      	cbz	r5, 8009d1a <__ieee754_sqrt+0x62>
 8009d02:	ee10 2a10 	vmov	r2, s0
 8009d06:	462b      	mov	r3, r5
 8009d08:	ee10 0a10 	vmov	r0, s0
 8009d0c:	f7f6 fac4 	bl	8000298 <__aeabi_dsub>
 8009d10:	4602      	mov	r2, r0
 8009d12:	460b      	mov	r3, r1
 8009d14:	f7f6 fda2 	bl	800085c <__aeabi_ddiv>
 8009d18:	e7e6      	b.n	8009ce8 <__ieee754_sqrt+0x30>
 8009d1a:	1509      	asrs	r1, r1, #20
 8009d1c:	d076      	beq.n	8009e0c <__ieee754_sqrt+0x154>
 8009d1e:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8009d22:	07ce      	lsls	r6, r1, #31
 8009d24:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8009d28:	bf5e      	ittt	pl
 8009d2a:	0fda      	lsrpl	r2, r3, #31
 8009d2c:	005b      	lslpl	r3, r3, #1
 8009d2e:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8009d32:	0fda      	lsrs	r2, r3, #31
 8009d34:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8009d38:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8009d3c:	2000      	movs	r0, #0
 8009d3e:	106d      	asrs	r5, r5, #1
 8009d40:	005b      	lsls	r3, r3, #1
 8009d42:	f04f 0e16 	mov.w	lr, #22
 8009d46:	4684      	mov	ip, r0
 8009d48:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009d4c:	eb0c 0401 	add.w	r4, ip, r1
 8009d50:	4294      	cmp	r4, r2
 8009d52:	bfde      	ittt	le
 8009d54:	1b12      	suble	r2, r2, r4
 8009d56:	eb04 0c01 	addle.w	ip, r4, r1
 8009d5a:	1840      	addle	r0, r0, r1
 8009d5c:	0052      	lsls	r2, r2, #1
 8009d5e:	f1be 0e01 	subs.w	lr, lr, #1
 8009d62:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8009d66:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009d6a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009d6e:	d1ed      	bne.n	8009d4c <__ieee754_sqrt+0x94>
 8009d70:	4671      	mov	r1, lr
 8009d72:	2720      	movs	r7, #32
 8009d74:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009d78:	4562      	cmp	r2, ip
 8009d7a:	eb04 060e 	add.w	r6, r4, lr
 8009d7e:	dc02      	bgt.n	8009d86 <__ieee754_sqrt+0xce>
 8009d80:	d113      	bne.n	8009daa <__ieee754_sqrt+0xf2>
 8009d82:	429e      	cmp	r6, r3
 8009d84:	d811      	bhi.n	8009daa <__ieee754_sqrt+0xf2>
 8009d86:	2e00      	cmp	r6, #0
 8009d88:	eb06 0e04 	add.w	lr, r6, r4
 8009d8c:	da43      	bge.n	8009e16 <__ieee754_sqrt+0x15e>
 8009d8e:	f1be 0f00 	cmp.w	lr, #0
 8009d92:	db40      	blt.n	8009e16 <__ieee754_sqrt+0x15e>
 8009d94:	f10c 0801 	add.w	r8, ip, #1
 8009d98:	eba2 020c 	sub.w	r2, r2, ip
 8009d9c:	429e      	cmp	r6, r3
 8009d9e:	bf88      	it	hi
 8009da0:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8009da4:	1b9b      	subs	r3, r3, r6
 8009da6:	4421      	add	r1, r4
 8009da8:	46c4      	mov	ip, r8
 8009daa:	0052      	lsls	r2, r2, #1
 8009dac:	3f01      	subs	r7, #1
 8009dae:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8009db2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009db6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009dba:	d1dd      	bne.n	8009d78 <__ieee754_sqrt+0xc0>
 8009dbc:	4313      	orrs	r3, r2
 8009dbe:	d006      	beq.n	8009dce <__ieee754_sqrt+0x116>
 8009dc0:	1c4c      	adds	r4, r1, #1
 8009dc2:	bf13      	iteet	ne
 8009dc4:	3101      	addne	r1, #1
 8009dc6:	3001      	addeq	r0, #1
 8009dc8:	4639      	moveq	r1, r7
 8009dca:	f021 0101 	bicne.w	r1, r1, #1
 8009dce:	1043      	asrs	r3, r0, #1
 8009dd0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009dd4:	0849      	lsrs	r1, r1, #1
 8009dd6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009dda:	07c2      	lsls	r2, r0, #31
 8009ddc:	bf48      	it	mi
 8009dde:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8009de2:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8009de6:	460c      	mov	r4, r1
 8009de8:	463d      	mov	r5, r7
 8009dea:	e77f      	b.n	8009cec <__ieee754_sqrt+0x34>
 8009dec:	0ada      	lsrs	r2, r3, #11
 8009dee:	3815      	subs	r0, #21
 8009df0:	055b      	lsls	r3, r3, #21
 8009df2:	2a00      	cmp	r2, #0
 8009df4:	d0fa      	beq.n	8009dec <__ieee754_sqrt+0x134>
 8009df6:	02d7      	lsls	r7, r2, #11
 8009df8:	d50a      	bpl.n	8009e10 <__ieee754_sqrt+0x158>
 8009dfa:	f1c1 0420 	rsb	r4, r1, #32
 8009dfe:	fa23 f404 	lsr.w	r4, r3, r4
 8009e02:	1e4d      	subs	r5, r1, #1
 8009e04:	408b      	lsls	r3, r1
 8009e06:	4322      	orrs	r2, r4
 8009e08:	1b41      	subs	r1, r0, r5
 8009e0a:	e788      	b.n	8009d1e <__ieee754_sqrt+0x66>
 8009e0c:	4608      	mov	r0, r1
 8009e0e:	e7f0      	b.n	8009df2 <__ieee754_sqrt+0x13a>
 8009e10:	0052      	lsls	r2, r2, #1
 8009e12:	3101      	adds	r1, #1
 8009e14:	e7ef      	b.n	8009df6 <__ieee754_sqrt+0x13e>
 8009e16:	46e0      	mov	r8, ip
 8009e18:	e7be      	b.n	8009d98 <__ieee754_sqrt+0xe0>
 8009e1a:	bf00      	nop
 8009e1c:	7ff00000 	.word	0x7ff00000

08009e20 <fabs>:
 8009e20:	ec51 0b10 	vmov	r0, r1, d0
 8009e24:	ee10 2a10 	vmov	r2, s0
 8009e28:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009e2c:	ec43 2b10 	vmov	d0, r2, r3
 8009e30:	4770      	bx	lr
 8009e32:	0000      	movs	r0, r0
 8009e34:	0000      	movs	r0, r0
	...

08009e38 <nan>:
 8009e38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009e40 <nan+0x8>
 8009e3c:	4770      	bx	lr
 8009e3e:	bf00      	nop
 8009e40:	00000000 	.word	0x00000000
 8009e44:	7ff80000 	.word	0x7ff80000

08009e48 <_init>:
 8009e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e4a:	bf00      	nop
 8009e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e4e:	bc08      	pop	{r3}
 8009e50:	469e      	mov	lr, r3
 8009e52:	4770      	bx	lr

08009e54 <_fini>:
 8009e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e56:	bf00      	nop
 8009e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e5a:	bc08      	pop	{r3}
 8009e5c:	469e      	mov	lr, r3
 8009e5e:	4770      	bx	lr
