
STM_quadcopter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e9c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000474  08009040  08009040  00019040  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094b4  080094b4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080094b4  080094b4  000194b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080094bc  080094bc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094bc  080094bc  000194bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094c0  080094c0  000194c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080094c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b4c  200001e0  080096a0  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000d2c  080096a0  00020d2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016bb3  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dec  00000000  00000000  00036dbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001118  00000000  00000000  00039bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001008  00000000  00000000  0003acc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000189f1  00000000  00000000  0003bcd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000173a6  00000000  00000000  000546c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091bf1  00000000  00000000  0006ba67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fd658  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058b0  00000000  00000000  000fd6ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009024 	.word	0x08009024

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08009024 	.word	0x08009024

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96e 	b.w	8000eec <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468c      	mov	ip, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 8083 	bne.w	8000d3e <__udivmoddi4+0x116>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d947      	bls.n	8000cce <__udivmoddi4+0xa6>
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	b142      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	f1c2 0020 	rsb	r0, r2, #32
 8000c48:	fa24 f000 	lsr.w	r0, r4, r0
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	4097      	lsls	r7, r2
 8000c50:	ea40 0c01 	orr.w	ip, r0, r1
 8000c54:	4094      	lsls	r4, r2
 8000c56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c5a:	0c23      	lsrs	r3, r4, #16
 8000c5c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c60:	fa1f fe87 	uxth.w	lr, r7
 8000c64:	fb08 c116 	mls	r1, r8, r6, ip
 8000c68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x60>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7a:	f080 8119 	bcs.w	8000eb0 <__udivmoddi4+0x288>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 8116 	bls.w	8000eb0 <__udivmoddi4+0x288>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c90:	fb08 3310 	mls	r3, r8, r0, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c9c:	45a6      	cmp	lr, r4
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x8c>
 8000ca0:	193c      	adds	r4, r7, r4
 8000ca2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ca6:	f080 8105 	bcs.w	8000eb4 <__udivmoddi4+0x28c>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f240 8102 	bls.w	8000eb4 <__udivmoddi4+0x28c>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	443c      	add	r4, r7
 8000cb4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cb8:	eba4 040e 	sub.w	r4, r4, lr
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	b11d      	cbz	r5, 8000cc8 <__udivmoddi4+0xa0>
 8000cc0:	40d4      	lsrs	r4, r2
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xaa>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f282 	clz	r2, r2
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d150      	bne.n	8000d7c <__udivmoddi4+0x154>
 8000cda:	1bcb      	subs	r3, r1, r7
 8000cdc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	2601      	movs	r6, #1
 8000ce6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cea:	0c21      	lsrs	r1, r4, #16
 8000cec:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0xe4>
 8000cfc:	1879      	adds	r1, r7, r1
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0xe2>
 8000d04:	428b      	cmp	r3, r1
 8000d06:	f200 80e9 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1ac9      	subs	r1, r1, r3
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d18:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x10c>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x10a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80d9 	bhi.w	8000ee4 <__udivmoddi4+0x2bc>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e7bf      	b.n	8000cbe <__udivmoddi4+0x96>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0x12e>
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	f000 80b1 	beq.w	8000eaa <__udivmoddi4+0x282>
 8000d48:	2600      	movs	r6, #0
 8000d4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4e:	4630      	mov	r0, r6
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f683 	clz	r6, r3
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	d14a      	bne.n	8000df4 <__udivmoddi4+0x1cc>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0x140>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80b8 	bhi.w	8000ed8 <__udivmoddi4+0x2b0>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	468c      	mov	ip, r1
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	d0a8      	beq.n	8000cc8 <__udivmoddi4+0xa0>
 8000d76:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d7a:	e7a5      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000d7c:	f1c2 0320 	rsb	r3, r2, #32
 8000d80:	fa20 f603 	lsr.w	r6, r0, r3
 8000d84:	4097      	lsls	r7, r2
 8000d86:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8e:	40d9      	lsrs	r1, r3
 8000d90:	4330      	orrs	r0, r6
 8000d92:	0c03      	lsrs	r3, r0, #16
 8000d94:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d98:	fa1f f887 	uxth.w	r8, r7
 8000d9c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb06 f108 	mul.w	r1, r6, r8
 8000da8:	4299      	cmp	r1, r3
 8000daa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x19c>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000db6:	f080 808d 	bcs.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 808a 	bls.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b281      	uxth	r1, r0
 8000dc8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dcc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd4:	fb00 f308 	mul.w	r3, r0, r8
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x1c4>
 8000ddc:	1879      	adds	r1, r7, r1
 8000dde:	f100 3cff 	add.w	ip, r0, #4294967295
 8000de2:	d273      	bcs.n	8000ecc <__udivmoddi4+0x2a4>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d971      	bls.n	8000ecc <__udivmoddi4+0x2a4>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4439      	add	r1, r7
 8000dec:	1acb      	subs	r3, r1, r3
 8000dee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000df2:	e778      	b.n	8000ce6 <__udivmoddi4+0xbe>
 8000df4:	f1c6 0c20 	rsb	ip, r6, #32
 8000df8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dfc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e00:	431c      	orrs	r4, r3
 8000e02:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e06:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e0e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e12:	431f      	orrs	r7, r3
 8000e14:	0c3b      	lsrs	r3, r7, #16
 8000e16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1a:	fa1f f884 	uxth.w	r8, r4
 8000e1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e26:	fb09 fa08 	mul.w	sl, r9, r8
 8000e2a:	458a      	cmp	sl, r1
 8000e2c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e30:	fa00 f306 	lsl.w	r3, r0, r6
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x220>
 8000e36:	1861      	adds	r1, r4, r1
 8000e38:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e3c:	d248      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e3e:	458a      	cmp	sl, r1
 8000e40:	d946      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4421      	add	r1, r4
 8000e48:	eba1 010a 	sub.w	r1, r1, sl
 8000e4c:	b2bf      	uxth	r7, r7
 8000e4e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e52:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e56:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e5a:	fb00 f808 	mul.w	r8, r0, r8
 8000e5e:	45b8      	cmp	r8, r7
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x24a>
 8000e62:	19e7      	adds	r7, r4, r7
 8000e64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e68:	d22e      	bcs.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6a:	45b8      	cmp	r8, r7
 8000e6c:	d92c      	bls.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4427      	add	r7, r4
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	eba7 0708 	sub.w	r7, r7, r8
 8000e7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7e:	454f      	cmp	r7, r9
 8000e80:	46c6      	mov	lr, r8
 8000e82:	4649      	mov	r1, r9
 8000e84:	d31a      	bcc.n	8000ebc <__udivmoddi4+0x294>
 8000e86:	d017      	beq.n	8000eb8 <__udivmoddi4+0x290>
 8000e88:	b15d      	cbz	r5, 8000ea2 <__udivmoddi4+0x27a>
 8000e8a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e8e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e92:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e96:	40f2      	lsrs	r2, r6
 8000e98:	ea4c 0202 	orr.w	r2, ip, r2
 8000e9c:	40f7      	lsrs	r7, r6
 8000e9e:	e9c5 2700 	strd	r2, r7, [r5]
 8000ea2:	2600      	movs	r6, #0
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e70b      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0x60>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6fd      	b.n	8000cb4 <__udivmoddi4+0x8c>
 8000eb8:	4543      	cmp	r3, r8
 8000eba:	d2e5      	bcs.n	8000e88 <__udivmoddi4+0x260>
 8000ebc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7df      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e7d2      	b.n	8000e72 <__udivmoddi4+0x24a>
 8000ecc:	4660      	mov	r0, ip
 8000ece:	e78d      	b.n	8000dec <__udivmoddi4+0x1c4>
 8000ed0:	4681      	mov	r9, r0
 8000ed2:	e7b9      	b.n	8000e48 <__udivmoddi4+0x220>
 8000ed4:	4666      	mov	r6, ip
 8000ed6:	e775      	b.n	8000dc4 <__udivmoddi4+0x19c>
 8000ed8:	4630      	mov	r0, r6
 8000eda:	e74a      	b.n	8000d72 <__udivmoddi4+0x14a>
 8000edc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee0:	4439      	add	r1, r7
 8000ee2:	e713      	b.n	8000d0c <__udivmoddi4+0xe4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	443c      	add	r4, r7
 8000ee8:	e724      	b.n	8000d34 <__udivmoddi4+0x10c>
 8000eea:	bf00      	nop

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <ESC_setSpeed>:
char cmd_rx[1];


// FUNCTIONS *****************************

void ESC_setSpeed(ESC_STATUS * ESC_speed, double gx, double gy, double gz){
 8000ef0:	b590      	push	{r4, r7, lr}
 8000ef2:	b08b      	sub	sp, #44	; 0x2c
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	61f8      	str	r0, [r7, #28]
 8000ef8:	ed87 0b04 	vstr	d0, [r7, #16]
 8000efc:	ed87 1b02 	vstr	d1, [r7, #8]
 8000f00:	ed87 2b00 	vstr	d2, [r7]

	  if(ESC_speed->FL > 1000){
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	885b      	ldrh	r3, [r3, #2]
 8000f08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f0c:	d904      	bls.n	8000f18 <ESC_setSpeed+0x28>
		  ESC_speed->FL = 1000;
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f14:	805a      	strh	r2, [r3, #2]
 8000f16:	e00b      	b.n	8000f30 <ESC_setSpeed+0x40>
	  }else if(ESC_speed->FL <= 0 || ESC_speed->FL > 1000){
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	885b      	ldrh	r3, [r3, #2]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d004      	beq.n	8000f2a <ESC_setSpeed+0x3a>
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	885b      	ldrh	r3, [r3, #2]
 8000f24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f28:	d902      	bls.n	8000f30 <ESC_setSpeed+0x40>
		  ESC_speed->FL = 0;
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	805a      	strh	r2, [r3, #2]
	  }

	  if(ESC_speed->FR > 1000){
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	881b      	ldrh	r3, [r3, #0]
 8000f34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f38:	d904      	bls.n	8000f44 <ESC_setSpeed+0x54>
		  ESC_speed->FR = 1000;
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f40:	801a      	strh	r2, [r3, #0]
 8000f42:	e00b      	b.n	8000f5c <ESC_setSpeed+0x6c>
	  }else if(ESC_speed->FR <= 0 || ESC_speed->FR >1000){
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	881b      	ldrh	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d004      	beq.n	8000f56 <ESC_setSpeed+0x66>
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	881b      	ldrh	r3, [r3, #0]
 8000f50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f54:	d902      	bls.n	8000f5c <ESC_setSpeed+0x6c>
		  ESC_speed->FR = 0;
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	801a      	strh	r2, [r3, #0]
	  }

	  if(ESC_speed->RR > 1000){
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	889b      	ldrh	r3, [r3, #4]
 8000f60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f64:	d904      	bls.n	8000f70 <ESC_setSpeed+0x80>
		  ESC_speed->RR = 1000;
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f6c:	809a      	strh	r2, [r3, #4]
 8000f6e:	e00b      	b.n	8000f88 <ESC_setSpeed+0x98>
	  }else if(ESC_speed->RR <= 0 || ESC_speed->RR >1000){
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	889b      	ldrh	r3, [r3, #4]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d004      	beq.n	8000f82 <ESC_setSpeed+0x92>
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	889b      	ldrh	r3, [r3, #4]
 8000f7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f80:	d902      	bls.n	8000f88 <ESC_setSpeed+0x98>
		  ESC_speed->RR = 0;
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	2200      	movs	r2, #0
 8000f86:	809a      	strh	r2, [r3, #4]
	  }

	  if(ESC_speed->RL > 1000){
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	88db      	ldrh	r3, [r3, #6]
 8000f8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f90:	d904      	bls.n	8000f9c <ESC_setSpeed+0xac>
		  ESC_speed->RL = 1000;
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f98:	80da      	strh	r2, [r3, #6]
 8000f9a:	e00b      	b.n	8000fb4 <ESC_setSpeed+0xc4>
	  }else if(ESC_speed->RL <= 0 || ESC_speed->RL >1000){
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	88db      	ldrh	r3, [r3, #6]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d004      	beq.n	8000fae <ESC_setSpeed+0xbe>
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	88db      	ldrh	r3, [r3, #6]
 8000fa8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fac:	d902      	bls.n	8000fb4 <ESC_setSpeed+0xc4>
		  ESC_speed->RL = 0;
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	80da      	strh	r2, [r3, #6]
	  }


	double variation = gx*0.7;
 8000fb4:	a323      	add	r3, pc, #140	; (adr r3, 8001044 <ESC_setSpeed+0x154>)
 8000fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000fbe:	f7ff fb23 	bl	8000608 <__aeabi_dmul>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	e9c7 2308 	strd	r2, r3, [r7, #32]

	TIM3->CCR1 = ESC_speed->FR + 1000 + variation;
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	881b      	ldrh	r3, [r3, #0]
 8000fce:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff faae 	bl	8000534 <__aeabi_i2d>
 8000fd8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000fdc:	f7ff f95e 	bl	800029c <__adddf3>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	4c16      	ldr	r4, [pc, #88]	; (8001040 <ESC_setSpeed+0x150>)
 8000fe6:	4610      	mov	r0, r2
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f7ff fde5 	bl	8000bb8 <__aeabi_d2uiz>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	6363      	str	r3, [r4, #52]	; 0x34
	TIM3->CCR2 = ESC_speed->FL + 1000 + variation;
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	885b      	ldrh	r3, [r3, #2]
 8000ff6:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fa9a 	bl	8000534 <__aeabi_i2d>
 8001000:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001004:	f7ff f94a 	bl	800029c <__adddf3>
 8001008:	4602      	mov	r2, r0
 800100a:	460b      	mov	r3, r1
 800100c:	4c0c      	ldr	r4, [pc, #48]	; (8001040 <ESC_setSpeed+0x150>)
 800100e:	4610      	mov	r0, r2
 8001010:	4619      	mov	r1, r3
 8001012:	f7ff fdd1 	bl	8000bb8 <__aeabi_d2uiz>
 8001016:	4603      	mov	r3, r0
 8001018:	63a3      	str	r3, [r4, #56]	; 0x38
	TIM3->CCR3 = ESC_speed->RR + 1000;
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	889b      	ldrh	r3, [r3, #4]
 800101e:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8001022:	4b07      	ldr	r3, [pc, #28]	; (8001040 <ESC_setSpeed+0x150>)
 8001024:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM3->CCR4 = ESC_speed->RL + 1000;
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	88db      	ldrh	r3, [r3, #6]
 800102a:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 800102e:	4b04      	ldr	r3, [pc, #16]	; (8001040 <ESC_setSpeed+0x150>)
 8001030:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001032:	bf00      	nop
 8001034:	372c      	adds	r7, #44	; 0x2c
 8001036:	46bd      	mov	sp, r7
 8001038:	bd90      	pop	{r4, r7, pc}
 800103a:	bf00      	nop
 800103c:	f3af 8000 	nop.w
 8001040:	40000400 	.word	0x40000400
 8001044:	66666666 	.word	0x66666666
 8001048:	3fe66666 	.word	0x3fe66666

0800104c <CMD_transform>:




void CMD_transform(ESC_STATUS * ESC_speed, char cmd){
 800104c:	b480      	push	{r7}
 800104e:	b089      	sub	sp, #36	; 0x24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	460b      	mov	r3, r1
 8001056:	70fb      	strb	r3, [r7, #3]

	int deltaFR = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	61fb      	str	r3, [r7, #28]
	int deltaFL = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	61bb      	str	r3, [r7, #24]
	int deltaRR = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
	int deltaRL = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	613b      	str	r3, [r7, #16]
	int dummy = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	60fb      	str	r3, [r7, #12]
	int delta = 10;
 800106c:	230a      	movs	r3, #10
 800106e:	60bb      	str	r3, [r7, #8]

	if(cmd == 'W'){	// forward
 8001070:	78fb      	ldrb	r3, [r7, #3]
 8001072:	2b57      	cmp	r3, #87	; 0x57
 8001074:	d110      	bne.n	8001098 <CMD_transform+0x4c>
		deltaFR -= delta;
 8001076:	69fa      	ldr	r2, [r7, #28]
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	61fb      	str	r3, [r7, #28]
		deltaFL -= delta;
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	61bb      	str	r3, [r7, #24]
		deltaRR += delta;
 8001086:	697a      	ldr	r2, [r7, #20]
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	4413      	add	r3, r2
 800108c:	617b      	str	r3, [r7, #20]
		deltaRL += delta;
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	4413      	add	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
 8001096:	e09b      	b.n	80011d0 <CMD_transform+0x184>

	}else if(cmd == 'A'){ // left
 8001098:	78fb      	ldrb	r3, [r7, #3]
 800109a:	2b41      	cmp	r3, #65	; 0x41
 800109c:	d110      	bne.n	80010c0 <CMD_transform+0x74>
		deltaFR += delta;
 800109e:	69fa      	ldr	r2, [r7, #28]
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	4413      	add	r3, r2
 80010a4:	61fb      	str	r3, [r7, #28]
		deltaFL -= delta;
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	61bb      	str	r3, [r7, #24]
		deltaRR += delta;
 80010ae:	697a      	ldr	r2, [r7, #20]
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	4413      	add	r3, r2
 80010b4:	617b      	str	r3, [r7, #20]
		deltaRL -= delta;
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	613b      	str	r3, [r7, #16]
 80010be:	e087      	b.n	80011d0 <CMD_transform+0x184>

	}else if(cmd == 'S'){ // back
 80010c0:	78fb      	ldrb	r3, [r7, #3]
 80010c2:	2b53      	cmp	r3, #83	; 0x53
 80010c4:	d110      	bne.n	80010e8 <CMD_transform+0x9c>
		deltaFR += delta;
 80010c6:	69fa      	ldr	r2, [r7, #28]
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	4413      	add	r3, r2
 80010cc:	61fb      	str	r3, [r7, #28]
		deltaFL += delta;
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	4413      	add	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
		deltaRR -= delta;
 80010d6:	697a      	ldr	r2, [r7, #20]
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	617b      	str	r3, [r7, #20]
		deltaRL -= delta;
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	613b      	str	r3, [r7, #16]
 80010e6:	e073      	b.n	80011d0 <CMD_transform+0x184>

	}else if(cmd == 'D'){ // right
 80010e8:	78fb      	ldrb	r3, [r7, #3]
 80010ea:	2b44      	cmp	r3, #68	; 0x44
 80010ec:	d110      	bne.n	8001110 <CMD_transform+0xc4>
		deltaFR -= delta;
 80010ee:	69fa      	ldr	r2, [r7, #28]
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	61fb      	str	r3, [r7, #28]
		deltaFL += delta;
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	4413      	add	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
		deltaRR -= delta;
 80010fe:	697a      	ldr	r2, [r7, #20]
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	617b      	str	r3, [r7, #20]
		deltaRL += delta;
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	4413      	add	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
 800110e:	e05f      	b.n	80011d0 <CMD_transform+0x184>

	}else if(cmd == 'I'){ // up
 8001110:	78fb      	ldrb	r3, [r7, #3]
 8001112:	2b49      	cmp	r3, #73	; 0x49
 8001114:	d110      	bne.n	8001138 <CMD_transform+0xec>
		deltaFR += delta;
 8001116:	69fa      	ldr	r2, [r7, #28]
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	4413      	add	r3, r2
 800111c:	61fb      	str	r3, [r7, #28]
		deltaFL += delta;
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	4413      	add	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
		deltaRR += delta;
 8001126:	697a      	ldr	r2, [r7, #20]
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	4413      	add	r3, r2
 800112c:	617b      	str	r3, [r7, #20]
		deltaRL += delta;
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	4413      	add	r3, r2
 8001134:	613b      	str	r3, [r7, #16]
 8001136:	e04b      	b.n	80011d0 <CMD_transform+0x184>

	}else if(cmd == 'J'){ // rotate left
 8001138:	78fb      	ldrb	r3, [r7, #3]
 800113a:	2b4a      	cmp	r3, #74	; 0x4a
 800113c:	d110      	bne.n	8001160 <CMD_transform+0x114>
		deltaFR += delta;
 800113e:	69fa      	ldr	r2, [r7, #28]
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	4413      	add	r3, r2
 8001144:	61fb      	str	r3, [r7, #28]
		deltaFL -= delta;
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	61bb      	str	r3, [r7, #24]
		deltaRR -= delta;
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	617b      	str	r3, [r7, #20]
		deltaRL += delta;
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	4413      	add	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
 800115e:	e037      	b.n	80011d0 <CMD_transform+0x184>

	}else if(cmd == 'K'){ // down
 8001160:	78fb      	ldrb	r3, [r7, #3]
 8001162:	2b4b      	cmp	r3, #75	; 0x4b
 8001164:	d110      	bne.n	8001188 <CMD_transform+0x13c>
		deltaFR -= delta;
 8001166:	69fa      	ldr	r2, [r7, #28]
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	61fb      	str	r3, [r7, #28]
		deltaFL -= delta;
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	61bb      	str	r3, [r7, #24]
		deltaRR -= delta;
 8001176:	697a      	ldr	r2, [r7, #20]
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	617b      	str	r3, [r7, #20]
		deltaRL -= delta;
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	613b      	str	r3, [r7, #16]
 8001186:	e023      	b.n	80011d0 <CMD_transform+0x184>

	}else if(cmd == 'L'){ // rotate right
 8001188:	78fb      	ldrb	r3, [r7, #3]
 800118a:	2b4c      	cmp	r3, #76	; 0x4c
 800118c:	d110      	bne.n	80011b0 <CMD_transform+0x164>
		deltaFR -= delta;
 800118e:	69fa      	ldr	r2, [r7, #28]
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	61fb      	str	r3, [r7, #28]
		deltaFL += delta;
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	4413      	add	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
		deltaRR += delta;
 800119e:	697a      	ldr	r2, [r7, #20]
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	4413      	add	r3, r2
 80011a4:	617b      	str	r3, [r7, #20]
		deltaRL -= delta;
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	e00f      	b.n	80011d0 <CMD_transform+0x184>

	}else if(cmd == 'X'){ // ?
 80011b0:	78fb      	ldrb	r3, [r7, #3]
 80011b2:	2b58      	cmp	r3, #88	; 0x58
 80011b4:	d10c      	bne.n	80011d0 <CMD_transform+0x184>
		ESC_speed->FR = 0;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2200      	movs	r2, #0
 80011ba:	801a      	strh	r2, [r3, #0]
		ESC_speed->FL = 0;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2200      	movs	r2, #0
 80011c0:	805a      	strh	r2, [r3, #2]
		ESC_speed->RR = 0;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	809a      	strh	r2, [r3, #4]
		ESC_speed->RL = 0;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2200      	movs	r2, #0
 80011cc:	80da      	strh	r2, [r3, #6]
		return;
 80011ce:	e047      	b.n	8001260 <CMD_transform+0x214>

	}else if(cmd == 'C'){ // ?

	}

	if(ESC_speed->FR==0 && deltaFR<0){
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d105      	bne.n	80011e4 <CMD_transform+0x198>
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	da02      	bge.n	80011e4 <CMD_transform+0x198>
		dummy = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	e007      	b.n	80011f4 <CMD_transform+0x1a8>
	}else{
		ESC_speed->FR += deltaFR;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	881a      	ldrh	r2, [r3, #0]
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	4413      	add	r3, r2
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	801a      	strh	r2, [r3, #0]
	}
	if(ESC_speed->FL==0 && deltaFL<0){
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	885b      	ldrh	r3, [r3, #2]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d105      	bne.n	8001208 <CMD_transform+0x1bc>
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	da02      	bge.n	8001208 <CMD_transform+0x1bc>
		dummy = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	e007      	b.n	8001218 <CMD_transform+0x1cc>
	}else{
		ESC_speed->FL += deltaFL;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	885a      	ldrh	r2, [r3, #2]
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	b29b      	uxth	r3, r3
 8001210:	4413      	add	r3, r2
 8001212:	b29a      	uxth	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	805a      	strh	r2, [r3, #2]
	}
	if(ESC_speed->RR==0 && deltaRR<0){
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	889b      	ldrh	r3, [r3, #4]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d105      	bne.n	800122c <CMD_transform+0x1e0>
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	2b00      	cmp	r3, #0
 8001224:	da02      	bge.n	800122c <CMD_transform+0x1e0>
		dummy = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	e007      	b.n	800123c <CMD_transform+0x1f0>
	}else{
		ESC_speed->RR += deltaRR;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	889a      	ldrh	r2, [r3, #4]
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	b29b      	uxth	r3, r3
 8001234:	4413      	add	r3, r2
 8001236:	b29a      	uxth	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	809a      	strh	r2, [r3, #4]
	}
	if(ESC_speed->RL==0 && deltaRL<0){
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	88db      	ldrh	r3, [r3, #6]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d105      	bne.n	8001250 <CMD_transform+0x204>
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	2b00      	cmp	r3, #0
 8001248:	da02      	bge.n	8001250 <CMD_transform+0x204>
		dummy = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	e007      	b.n	8001260 <CMD_transform+0x214>
	}else{
		ESC_speed->RL += deltaRL;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	88da      	ldrh	r2, [r3, #6]
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	b29b      	uxth	r3, r3
 8001258:	4413      	add	r3, r2
 800125a:	b29a      	uxth	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	80da      	strh	r2, [r3, #6]
	}


}
 8001260:	3724      	adds	r7, #36	; 0x24
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
	...

0800126c <MPU6050_Init>:

double avrg_gX = 0;
double avrg_gY = 0;
double avrg_gZ = 0;

void MPU6050_Init(void){
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af04      	add	r7, sp, #16
	uint8_t check;
	check = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	71fb      	strb	r3, [r7, #7]

	uint8_t data;

	// Reads from address if device is connected
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 500);
 8001276:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800127a:	9302      	str	r3, [sp, #8]
 800127c:	2301      	movs	r3, #1
 800127e:	9301      	str	r3, [sp, #4]
 8001280:	1dfb      	adds	r3, r7, #7
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	2301      	movs	r3, #1
 8001286:	2275      	movs	r2, #117	; 0x75
 8001288:	21d0      	movs	r1, #208	; 0xd0
 800128a:	4836      	ldr	r0, [pc, #216]	; (8001364 <MPU6050_Init+0xf8>)
 800128c:	f001 fe68 	bl	8002f60 <HAL_I2C_Mem_Read>
	start_time = HAL_GetTick();
 8001290:	f001 f8c2 	bl	8002418 <HAL_GetTick>
 8001294:	4603      	mov	r3, r0
 8001296:	461a      	mov	r2, r3
 8001298:	4b33      	ldr	r3, [pc, #204]	; (8001368 <MPU6050_Init+0xfc>)
 800129a:	601a      	str	r2, [r3, #0]

	if(check == 104){
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	2b68      	cmp	r3, #104	; 0x68
 80012a0:	d159      	bne.n	8001356 <MPU6050_Init+0xea>
		msgLen = sprintf(msgDebug, "MPU6050 initialized");
 80012a2:	4932      	ldr	r1, [pc, #200]	; (800136c <MPU6050_Init+0x100>)
 80012a4:	4832      	ldr	r0, [pc, #200]	; (8001370 <MPU6050_Init+0x104>)
 80012a6:	f005 fc93 	bl	8006bd0 <siprintf>
 80012aa:	4603      	mov	r3, r0
 80012ac:	4a31      	ldr	r2, [pc, #196]	; (8001374 <MPU6050_Init+0x108>)
 80012ae:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen , 50);
 80012b0:	4b30      	ldr	r3, [pc, #192]	; (8001374 <MPU6050_Init+0x108>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	2332      	movs	r3, #50	; 0x32
 80012b8:	492d      	ldr	r1, [pc, #180]	; (8001370 <MPU6050_Init+0x104>)
 80012ba:	482f      	ldr	r0, [pc, #188]	; (8001378 <MPU6050_Init+0x10c>)
 80012bc:	f004 f871 	bl	80053a2 <HAL_UART_Transmit>

		// exit SLEEP mode  and set clock to 8 MHz
		data=0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, 500);
 80012c4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012c8:	9302      	str	r3, [sp, #8]
 80012ca:	2301      	movs	r3, #1
 80012cc:	9301      	str	r3, [sp, #4]
 80012ce:	1dbb      	adds	r3, r7, #6
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	2301      	movs	r3, #1
 80012d4:	226b      	movs	r2, #107	; 0x6b
 80012d6:	21d0      	movs	r1, #208	; 0xd0
 80012d8:	4822      	ldr	r0, [pc, #136]	; (8001364 <MPU6050_Init+0xf8>)
 80012da:	f001 fd47 	bl	8002d6c <HAL_I2C_Mem_Write>

		// sample frequency = 8 kHZ / (data +1)
		data = 0X07;
 80012de:	2307      	movs	r3, #7
 80012e0:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, 500);
 80012e2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012e6:	9302      	str	r3, [sp, #8]
 80012e8:	2301      	movs	r3, #1
 80012ea:	9301      	str	r3, [sp, #4]
 80012ec:	1dbb      	adds	r3, r7, #6
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	2301      	movs	r3, #1
 80012f2:	2219      	movs	r2, #25
 80012f4:	21d0      	movs	r1, #208	; 0xd0
 80012f6:	481b      	ldr	r0, [pc, #108]	; (8001364 <MPU6050_Init+0xf8>)
 80012f8:	f001 fd38 	bl	8002d6c <HAL_I2C_Mem_Write>

		// set the MPU digital low pass filter to 250 Hz
		data = 0X01;
 80012fc:	2301      	movs	r3, #1
 80012fe:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, CONFIG, 1, &data, 1, 500);
 8001300:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001304:	9302      	str	r3, [sp, #8]
 8001306:	2301      	movs	r3, #1
 8001308:	9301      	str	r3, [sp, #4]
 800130a:	1dbb      	adds	r3, r7, #6
 800130c:	9300      	str	r3, [sp, #0]
 800130e:	2301      	movs	r3, #1
 8001310:	221a      	movs	r2, #26
 8001312:	21d0      	movs	r1, #208	; 0xd0
 8001314:	4813      	ldr	r0, [pc, #76]	; (8001364 <MPU6050_Init+0xf8>)
 8001316:	f001 fd29 	bl	8002d6c <HAL_I2C_Mem_Write>

		// Set up the IMU config
		// set up the IMU to AFS_SEL 0 and full scale +- 2g
		// if set to 1 set the IMU to auto test
		data = 0x02;
 800131a:	2302      	movs	r3, #2
 800131c:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, 500);
 800131e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001322:	9302      	str	r3, [sp, #8]
 8001324:	2301      	movs	r3, #1
 8001326:	9301      	str	r3, [sp, #4]
 8001328:	1dbb      	adds	r3, r7, #6
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	2301      	movs	r3, #1
 800132e:	221c      	movs	r2, #28
 8001330:	21d0      	movs	r1, #208	; 0xd0
 8001332:	480c      	ldr	r0, [pc, #48]	; (8001364 <MPU6050_Init+0xf8>)
 8001334:	f001 fd1a 	bl	8002d6c <HAL_I2C_Mem_Write>


		// Set up the GYRO config - pag 14
		// set up the GYRO to AFS_SEL 0 and full scale +- 500°
		data = 0x01;
 8001338:	2301      	movs	r3, #1
 800133a:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, 500);
 800133c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001340:	9302      	str	r3, [sp, #8]
 8001342:	2301      	movs	r3, #1
 8001344:	9301      	str	r3, [sp, #4]
 8001346:	1dbb      	adds	r3, r7, #6
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	2301      	movs	r3, #1
 800134c:	221b      	movs	r2, #27
 800134e:	21d0      	movs	r1, #208	; 0xd0
 8001350:	4804      	ldr	r0, [pc, #16]	; (8001364 <MPU6050_Init+0xf8>)
 8001352:	f001 fd0b 	bl	8002d6c <HAL_I2C_Mem_Write>
	}
	MPU_STATE = 1;
 8001356:	4b09      	ldr	r3, [pc, #36]	; (800137c <MPU6050_Init+0x110>)
 8001358:	2201      	movs	r2, #1
 800135a:	701a      	strb	r2, [r3, #0]
}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000bac 	.word	0x20000bac
 8001368:	20000238 	.word	0x20000238
 800136c:	08009040 	.word	0x08009040
 8001370:	2000027c 	.word	0x2000027c
 8001374:	20000350 	.word	0x20000350
 8001378:	20000cd4 	.word	0x20000cd4
 800137c:	200001fc 	.word	0x200001fc

08001380 <MPU6050_ReadGyro>:
	ay = acc_Y_raw/4096;
	az = acc_Z_raw/4096; //16384
}


void MPU6050_ReadGyro(void){
 8001380:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001384:	b084      	sub	sp, #16
 8001386:	af04      	add	r7, sp, #16

	if(MPU_STATE == 0) return;
 8001388:	4b9b      	ldr	r3, [pc, #620]	; (80015f8 <MPU6050_ReadGyro+0x278>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	f000 8125 	beq.w	80015dc <MPU6050_ReadGyro+0x25c>

	millis = HAL_GetTick()-start_time;
 8001392:	f001 f841 	bl	8002418 <HAL_GetTick>
 8001396:	4603      	mov	r3, r0
 8001398:	4a98      	ldr	r2, [pc, #608]	; (80015fc <MPU6050_ReadGyro+0x27c>)
 800139a:	6812      	ldr	r2, [r2, #0]
 800139c:	1a9b      	subs	r3, r3, r2
 800139e:	461a      	mov	r2, r3
 80013a0:	4b97      	ldr	r3, [pc, #604]	; (8001600 <MPU6050_ReadGyro+0x280>)
 80013a2:	601a      	str	r2, [r3, #0]

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, rec_data2, 6, 500);
 80013a4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80013a8:	9302      	str	r3, [sp, #8]
 80013aa:	2306      	movs	r3, #6
 80013ac:	9301      	str	r3, [sp, #4]
 80013ae:	4b95      	ldr	r3, [pc, #596]	; (8001604 <MPU6050_ReadGyro+0x284>)
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	2301      	movs	r3, #1
 80013b4:	2243      	movs	r2, #67	; 0x43
 80013b6:	21d0      	movs	r1, #208	; 0xd0
 80013b8:	4893      	ldr	r0, [pc, #588]	; (8001608 <MPU6050_ReadGyro+0x288>)
 80013ba:	f001 fdd1 	bl	8002f60 <HAL_I2C_Mem_Read>

	gyro_X_raw = (int16_t)(rec_data2[0] << 8 | rec_data2[1]);
 80013be:	4b91      	ldr	r3, [pc, #580]	; (8001604 <MPU6050_ReadGyro+0x284>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	021b      	lsls	r3, r3, #8
 80013c4:	b21a      	sxth	r2, r3
 80013c6:	4b8f      	ldr	r3, [pc, #572]	; (8001604 <MPU6050_ReadGyro+0x284>)
 80013c8:	785b      	ldrb	r3, [r3, #1]
 80013ca:	b21b      	sxth	r3, r3
 80013cc:	4313      	orrs	r3, r2
 80013ce:	b21a      	sxth	r2, r3
 80013d0:	4b8e      	ldr	r3, [pc, #568]	; (800160c <MPU6050_ReadGyro+0x28c>)
 80013d2:	801a      	strh	r2, [r3, #0]
	gyro_Y_raw = (int16_t)(rec_data2[2] << 8 | rec_data2[3]);
 80013d4:	4b8b      	ldr	r3, [pc, #556]	; (8001604 <MPU6050_ReadGyro+0x284>)
 80013d6:	789b      	ldrb	r3, [r3, #2]
 80013d8:	021b      	lsls	r3, r3, #8
 80013da:	b21a      	sxth	r2, r3
 80013dc:	4b89      	ldr	r3, [pc, #548]	; (8001604 <MPU6050_ReadGyro+0x284>)
 80013de:	78db      	ldrb	r3, [r3, #3]
 80013e0:	b21b      	sxth	r3, r3
 80013e2:	4313      	orrs	r3, r2
 80013e4:	b21a      	sxth	r2, r3
 80013e6:	4b8a      	ldr	r3, [pc, #552]	; (8001610 <MPU6050_ReadGyro+0x290>)
 80013e8:	801a      	strh	r2, [r3, #0]
	gyro_Z_raw = (int16_t)(rec_data2[4] << 8 | rec_data2[5]);
 80013ea:	4b86      	ldr	r3, [pc, #536]	; (8001604 <MPU6050_ReadGyro+0x284>)
 80013ec:	791b      	ldrb	r3, [r3, #4]
 80013ee:	021b      	lsls	r3, r3, #8
 80013f0:	b21a      	sxth	r2, r3
 80013f2:	4b84      	ldr	r3, [pc, #528]	; (8001604 <MPU6050_ReadGyro+0x284>)
 80013f4:	795b      	ldrb	r3, [r3, #5]
 80013f6:	b21b      	sxth	r3, r3
 80013f8:	4313      	orrs	r3, r2
 80013fa:	b21a      	sxth	r2, r3
 80013fc:	4b85      	ldr	r3, [pc, #532]	; (8001614 <MPU6050_ReadGyro+0x294>)
 80013fe:	801a      	strh	r2, [r3, #0]

	gyro_X_scaled = gyro_X_raw/65.5;
 8001400:	4b82      	ldr	r3, [pc, #520]	; (800160c <MPU6050_ReadGyro+0x28c>)
 8001402:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff f894 	bl	8000534 <__aeabi_i2d>
 800140c:	a376      	add	r3, pc, #472	; (adr r3, 80015e8 <MPU6050_ReadGyro+0x268>)
 800140e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001412:	f7ff fa23 	bl	800085c <__aeabi_ddiv>
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	497f      	ldr	r1, [pc, #508]	; (8001618 <MPU6050_ReadGyro+0x298>)
 800141c:	e9c1 2300 	strd	r2, r3, [r1]
	gyro_Y_scaled = gyro_Y_raw/65.5;
 8001420:	4b7b      	ldr	r3, [pc, #492]	; (8001610 <MPU6050_ReadGyro+0x290>)
 8001422:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff f884 	bl	8000534 <__aeabi_i2d>
 800142c:	a36e      	add	r3, pc, #440	; (adr r3, 80015e8 <MPU6050_ReadGyro+0x268>)
 800142e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001432:	f7ff fa13 	bl	800085c <__aeabi_ddiv>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	4978      	ldr	r1, [pc, #480]	; (800161c <MPU6050_ReadGyro+0x29c>)
 800143c:	e9c1 2300 	strd	r2, r3, [r1]
	gyro_Z_scaled = gyro_Z_raw/65.5;
 8001440:	4b74      	ldr	r3, [pc, #464]	; (8001614 <MPU6050_ReadGyro+0x294>)
 8001442:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff f874 	bl	8000534 <__aeabi_i2d>
 800144c:	a366      	add	r3, pc, #408	; (adr r3, 80015e8 <MPU6050_ReadGyro+0x268>)
 800144e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001452:	f7ff fa03 	bl	800085c <__aeabi_ddiv>
 8001456:	4602      	mov	r2, r0
 8001458:	460b      	mov	r3, r1
 800145a:	4971      	ldr	r1, [pc, #452]	; (8001620 <MPU6050_ReadGyro+0x2a0>)
 800145c:	e9c1 2300 	strd	r2, r3, [r1]



	if(iter<1000){
 8001460:	4b70      	ldr	r3, [pc, #448]	; (8001624 <MPU6050_ReadGyro+0x2a4>)
 8001462:	881b      	ldrh	r3, [r3, #0]
 8001464:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001468:	d22d      	bcs.n	80014c6 <MPU6050_ReadGyro+0x146>
		iter += 1;
 800146a:	4b6e      	ldr	r3, [pc, #440]	; (8001624 <MPU6050_ReadGyro+0x2a4>)
 800146c:	881b      	ldrh	r3, [r3, #0]
 800146e:	3301      	adds	r3, #1
 8001470:	b29a      	uxth	r2, r3
 8001472:	4b6c      	ldr	r3, [pc, #432]	; (8001624 <MPU6050_ReadGyro+0x2a4>)
 8001474:	801a      	strh	r2, [r3, #0]

		avrg_gX = gyro_X_scaled+avrg_gX;
 8001476:	4b68      	ldr	r3, [pc, #416]	; (8001618 <MPU6050_ReadGyro+0x298>)
 8001478:	e9d3 0100 	ldrd	r0, r1, [r3]
 800147c:	4b6a      	ldr	r3, [pc, #424]	; (8001628 <MPU6050_ReadGyro+0x2a8>)
 800147e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001482:	f7fe ff0b 	bl	800029c <__adddf3>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	4967      	ldr	r1, [pc, #412]	; (8001628 <MPU6050_ReadGyro+0x2a8>)
 800148c:	e9c1 2300 	strd	r2, r3, [r1]
		avrg_gY = gyro_Y_scaled+avrg_gY;
 8001490:	4b62      	ldr	r3, [pc, #392]	; (800161c <MPU6050_ReadGyro+0x29c>)
 8001492:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001496:	4b65      	ldr	r3, [pc, #404]	; (800162c <MPU6050_ReadGyro+0x2ac>)
 8001498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149c:	f7fe fefe 	bl	800029c <__adddf3>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	4961      	ldr	r1, [pc, #388]	; (800162c <MPU6050_ReadGyro+0x2ac>)
 80014a6:	e9c1 2300 	strd	r2, r3, [r1]
		avrg_gZ = gyro_Z_scaled+avrg_gZ;
 80014aa:	4b5d      	ldr	r3, [pc, #372]	; (8001620 <MPU6050_ReadGyro+0x2a0>)
 80014ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014b0:	4b5f      	ldr	r3, [pc, #380]	; (8001630 <MPU6050_ReadGyro+0x2b0>)
 80014b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b6:	f7fe fef1 	bl	800029c <__adddf3>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	495c      	ldr	r1, [pc, #368]	; (8001630 <MPU6050_ReadGyro+0x2b0>)
 80014c0:	e9c1 2300 	strd	r2, r3, [r1]
 80014c4:	e08b      	b.n	80015de <MPU6050_ReadGyro+0x25e>
	}else{
		// Integrate de noised angular rate by the sampling time
		angle_x += (gyro_X_scaled-avrg_gX/iter)*0.004;
 80014c6:	4b54      	ldr	r3, [pc, #336]	; (8001618 <MPU6050_ReadGyro+0x298>)
 80014c8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80014cc:	4b56      	ldr	r3, [pc, #344]	; (8001628 <MPU6050_ReadGyro+0x2a8>)
 80014ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 80014d2:	4b54      	ldr	r3, [pc, #336]	; (8001624 <MPU6050_ReadGyro+0x2a4>)
 80014d4:	881b      	ldrh	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff f82c 	bl	8000534 <__aeabi_i2d>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	4640      	mov	r0, r8
 80014e2:	4649      	mov	r1, r9
 80014e4:	f7ff f9ba 	bl	800085c <__aeabi_ddiv>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	4620      	mov	r0, r4
 80014ee:	4629      	mov	r1, r5
 80014f0:	f7fe fed2 	bl	8000298 <__aeabi_dsub>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	4610      	mov	r0, r2
 80014fa:	4619      	mov	r1, r3
 80014fc:	a33c      	add	r3, pc, #240	; (adr r3, 80015f0 <MPU6050_ReadGyro+0x270>)
 80014fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001502:	f7ff f881 	bl	8000608 <__aeabi_dmul>
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
 800150a:	4610      	mov	r0, r2
 800150c:	4619      	mov	r1, r3
 800150e:	4b49      	ldr	r3, [pc, #292]	; (8001634 <MPU6050_ReadGyro+0x2b4>)
 8001510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001514:	f7fe fec2 	bl	800029c <__adddf3>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	4945      	ldr	r1, [pc, #276]	; (8001634 <MPU6050_ReadGyro+0x2b4>)
 800151e:	e9c1 2300 	strd	r2, r3, [r1]
		angle_y += (gyro_Y_scaled-avrg_gY/iter)*0.004;
 8001522:	4b3e      	ldr	r3, [pc, #248]	; (800161c <MPU6050_ReadGyro+0x29c>)
 8001524:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001528:	4b40      	ldr	r3, [pc, #256]	; (800162c <MPU6050_ReadGyro+0x2ac>)
 800152a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800152e:	4b3d      	ldr	r3, [pc, #244]	; (8001624 <MPU6050_ReadGyro+0x2a4>)
 8001530:	881b      	ldrh	r3, [r3, #0]
 8001532:	4618      	mov	r0, r3
 8001534:	f7fe fffe 	bl	8000534 <__aeabi_i2d>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	4640      	mov	r0, r8
 800153e:	4649      	mov	r1, r9
 8001540:	f7ff f98c 	bl	800085c <__aeabi_ddiv>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	4620      	mov	r0, r4
 800154a:	4629      	mov	r1, r5
 800154c:	f7fe fea4 	bl	8000298 <__aeabi_dsub>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	4610      	mov	r0, r2
 8001556:	4619      	mov	r1, r3
 8001558:	a325      	add	r3, pc, #148	; (adr r3, 80015f0 <MPU6050_ReadGyro+0x270>)
 800155a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155e:	f7ff f853 	bl	8000608 <__aeabi_dmul>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	4610      	mov	r0, r2
 8001568:	4619      	mov	r1, r3
 800156a:	4b33      	ldr	r3, [pc, #204]	; (8001638 <MPU6050_ReadGyro+0x2b8>)
 800156c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001570:	f7fe fe94 	bl	800029c <__adddf3>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	492f      	ldr	r1, [pc, #188]	; (8001638 <MPU6050_ReadGyro+0x2b8>)
 800157a:	e9c1 2300 	strd	r2, r3, [r1]
		angle_z += (gyro_Z_scaled-avrg_gZ/iter)*0.004;
 800157e:	4b28      	ldr	r3, [pc, #160]	; (8001620 <MPU6050_ReadGyro+0x2a0>)
 8001580:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001584:	4b2a      	ldr	r3, [pc, #168]	; (8001630 <MPU6050_ReadGyro+0x2b0>)
 8001586:	e9d3 8900 	ldrd	r8, r9, [r3]
 800158a:	4b26      	ldr	r3, [pc, #152]	; (8001624 <MPU6050_ReadGyro+0x2a4>)
 800158c:	881b      	ldrh	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f7fe ffd0 	bl	8000534 <__aeabi_i2d>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	4640      	mov	r0, r8
 800159a:	4649      	mov	r1, r9
 800159c:	f7ff f95e 	bl	800085c <__aeabi_ddiv>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	4620      	mov	r0, r4
 80015a6:	4629      	mov	r1, r5
 80015a8:	f7fe fe76 	bl	8000298 <__aeabi_dsub>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	4610      	mov	r0, r2
 80015b2:	4619      	mov	r1, r3
 80015b4:	a30e      	add	r3, pc, #56	; (adr r3, 80015f0 <MPU6050_ReadGyro+0x270>)
 80015b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ba:	f7ff f825 	bl	8000608 <__aeabi_dmul>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	4610      	mov	r0, r2
 80015c4:	4619      	mov	r1, r3
 80015c6:	4b1d      	ldr	r3, [pc, #116]	; (800163c <MPU6050_ReadGyro+0x2bc>)
 80015c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015cc:	f7fe fe66 	bl	800029c <__adddf3>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	4919      	ldr	r1, [pc, #100]	; (800163c <MPU6050_ReadGyro+0x2bc>)
 80015d6:	e9c1 2300 	strd	r2, r3, [r1]
 80015da:	e000      	b.n	80015de <MPU6050_ReadGyro+0x25e>
	if(MPU_STATE == 0) return;
 80015dc:	bf00      	nop
	}
	*/



}
 80015de:	46bd      	mov	sp, r7
 80015e0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80015e4:	f3af 8000 	nop.w
 80015e8:	00000000 	.word	0x00000000
 80015ec:	40506000 	.word	0x40506000
 80015f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80015f4:	3f70624d 	.word	0x3f70624d
 80015f8:	200001fc 	.word	0x200001fc
 80015fc:	20000238 	.word	0x20000238
 8001600:	20000230 	.word	0x20000230
 8001604:	20000260 	.word	0x20000260
 8001608:	20000bac 	.word	0x20000bac
 800160c:	20000b38 	.word	0x20000b38
 8001610:	20000278 	.word	0x20000278
 8001614:	2000027a 	.word	0x2000027a
 8001618:	20000b28 	.word	0x20000b28
 800161c:	20000268 	.word	0x20000268
 8001620:	200002e0 	.word	0x200002e0
 8001624:	20000234 	.word	0x20000234
 8001628:	20000200 	.word	0x20000200
 800162c:	20000208 	.word	0x20000208
 8001630:	20000210 	.word	0x20000210
 8001634:	20000218 	.word	0x20000218
 8001638:	20000220 	.word	0x20000220
 800163c:	20000228 	.word	0x20000228

08001640 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08a      	sub	sp, #40	; 0x28
 8001644:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001646:	f107 0314 	add.w	r3, r7, #20
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
 8001652:	60da      	str	r2, [r3, #12]
 8001654:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	613b      	str	r3, [r7, #16]
 800165a:	4b3b      	ldr	r3, [pc, #236]	; (8001748 <MX_GPIO_Init+0x108>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	4a3a      	ldr	r2, [pc, #232]	; (8001748 <MX_GPIO_Init+0x108>)
 8001660:	f043 0304 	orr.w	r3, r3, #4
 8001664:	6313      	str	r3, [r2, #48]	; 0x30
 8001666:	4b38      	ldr	r3, [pc, #224]	; (8001748 <MX_GPIO_Init+0x108>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	f003 0304 	and.w	r3, r3, #4
 800166e:	613b      	str	r3, [r7, #16]
 8001670:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	4b34      	ldr	r3, [pc, #208]	; (8001748 <MX_GPIO_Init+0x108>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	4a33      	ldr	r2, [pc, #204]	; (8001748 <MX_GPIO_Init+0x108>)
 800167c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001680:	6313      	str	r3, [r2, #48]	; 0x30
 8001682:	4b31      	ldr	r3, [pc, #196]	; (8001748 <MX_GPIO_Init+0x108>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	60bb      	str	r3, [r7, #8]
 8001692:	4b2d      	ldr	r3, [pc, #180]	; (8001748 <MX_GPIO_Init+0x108>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	4a2c      	ldr	r2, [pc, #176]	; (8001748 <MX_GPIO_Init+0x108>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	6313      	str	r3, [r2, #48]	; 0x30
 800169e:	4b2a      	ldr	r3, [pc, #168]	; (8001748 <MX_GPIO_Init+0x108>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	60bb      	str	r3, [r7, #8]
 80016a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	607b      	str	r3, [r7, #4]
 80016ae:	4b26      	ldr	r3, [pc, #152]	; (8001748 <MX_GPIO_Init+0x108>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	4a25      	ldr	r2, [pc, #148]	; (8001748 <MX_GPIO_Init+0x108>)
 80016b4:	f043 0302 	orr.w	r3, r3, #2
 80016b8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ba:	4b23      	ldr	r3, [pc, #140]	; (8001748 <MX_GPIO_Init+0x108>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	607b      	str	r3, [r7, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2120      	movs	r1, #32
 80016ca:	4820      	ldr	r0, [pc, #128]	; (800174c <MX_GPIO_Init+0x10c>)
 80016cc:	f001 f9d8 	bl	8002a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80016d0:	2200      	movs	r2, #0
 80016d2:	2101      	movs	r1, #1
 80016d4:	481e      	ldr	r0, [pc, #120]	; (8001750 <MX_GPIO_Init+0x110>)
 80016d6:	f001 f9d3 	bl	8002a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016e0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80016e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016ea:	f107 0314 	add.w	r3, r7, #20
 80016ee:	4619      	mov	r1, r3
 80016f0:	4818      	ldr	r0, [pc, #96]	; (8001754 <MX_GPIO_Init+0x114>)
 80016f2:	f001 f841 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80016f6:	2320      	movs	r3, #32
 80016f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fa:	2301      	movs	r3, #1
 80016fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001702:	2300      	movs	r3, #0
 8001704:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001706:	f107 0314 	add.w	r3, r7, #20
 800170a:	4619      	mov	r1, r3
 800170c:	480f      	ldr	r0, [pc, #60]	; (800174c <MX_GPIO_Init+0x10c>)
 800170e:	f001 f833 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001712:	2301      	movs	r3, #1
 8001714:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001716:	2301      	movs	r3, #1
 8001718:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171e:	2300      	movs	r3, #0
 8001720:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001722:	f107 0314 	add.w	r3, r7, #20
 8001726:	4619      	mov	r1, r3
 8001728:	4809      	ldr	r0, [pc, #36]	; (8001750 <MX_GPIO_Init+0x110>)
 800172a:	f001 f825 	bl	8002778 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800172e:	2200      	movs	r2, #0
 8001730:	2100      	movs	r1, #0
 8001732:	2028      	movs	r0, #40	; 0x28
 8001734:	f000 ff57 	bl	80025e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001738:	2028      	movs	r0, #40	; 0x28
 800173a:	f000 ff70 	bl	800261e <HAL_NVIC_EnableIRQ>

}
 800173e:	bf00      	nop
 8001740:	3728      	adds	r7, #40	; 0x28
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40023800 	.word	0x40023800
 800174c:	40020000 	.word	0x40020000
 8001750:	40020400 	.word	0x40020400
 8001754:	40020800 	.word	0x40020800

08001758 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800175c:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <MX_I2C1_Init+0x50>)
 800175e:	4a13      	ldr	r2, [pc, #76]	; (80017ac <MX_I2C1_Init+0x54>)
 8001760:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001762:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <MX_I2C1_Init+0x50>)
 8001764:	4a12      	ldr	r2, [pc, #72]	; (80017b0 <MX_I2C1_Init+0x58>)
 8001766:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001768:	4b0f      	ldr	r3, [pc, #60]	; (80017a8 <MX_I2C1_Init+0x50>)
 800176a:	2200      	movs	r2, #0
 800176c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800176e:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <MX_I2C1_Init+0x50>)
 8001770:	2200      	movs	r2, #0
 8001772:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001774:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <MX_I2C1_Init+0x50>)
 8001776:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800177a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800177c:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <MX_I2C1_Init+0x50>)
 800177e:	2200      	movs	r2, #0
 8001780:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001782:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <MX_I2C1_Init+0x50>)
 8001784:	2200      	movs	r2, #0
 8001786:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001788:	4b07      	ldr	r3, [pc, #28]	; (80017a8 <MX_I2C1_Init+0x50>)
 800178a:	2200      	movs	r2, #0
 800178c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800178e:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <MX_I2C1_Init+0x50>)
 8001790:	2200      	movs	r2, #0
 8001792:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001794:	4804      	ldr	r0, [pc, #16]	; (80017a8 <MX_I2C1_Init+0x50>)
 8001796:	f001 f9a5 	bl	8002ae4 <HAL_I2C_Init>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017a0:	f000 f9f0 	bl	8001b84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	20000bac 	.word	0x20000bac
 80017ac:	40005400 	.word	0x40005400
 80017b0:	000186a0 	.word	0x000186a0

080017b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08a      	sub	sp, #40	; 0x28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a19      	ldr	r2, [pc, #100]	; (8001838 <HAL_I2C_MspInit+0x84>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d12b      	bne.n	800182e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	613b      	str	r3, [r7, #16]
 80017da:	4b18      	ldr	r3, [pc, #96]	; (800183c <HAL_I2C_MspInit+0x88>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	4a17      	ldr	r2, [pc, #92]	; (800183c <HAL_I2C_MspInit+0x88>)
 80017e0:	f043 0302 	orr.w	r3, r3, #2
 80017e4:	6313      	str	r3, [r2, #48]	; 0x30
 80017e6:	4b15      	ldr	r3, [pc, #84]	; (800183c <HAL_I2C_MspInit+0x88>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	613b      	str	r3, [r7, #16]
 80017f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017f2:	23c0      	movs	r3, #192	; 0xc0
 80017f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017f6:	2312      	movs	r3, #18
 80017f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017fa:	2301      	movs	r3, #1
 80017fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fe:	2303      	movs	r3, #3
 8001800:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001802:	2304      	movs	r3, #4
 8001804:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001806:	f107 0314 	add.w	r3, r7, #20
 800180a:	4619      	mov	r1, r3
 800180c:	480c      	ldr	r0, [pc, #48]	; (8001840 <HAL_I2C_MspInit+0x8c>)
 800180e:	f000 ffb3 	bl	8002778 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	4b09      	ldr	r3, [pc, #36]	; (800183c <HAL_I2C_MspInit+0x88>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	4a08      	ldr	r2, [pc, #32]	; (800183c <HAL_I2C_MspInit+0x88>)
 800181c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001820:	6413      	str	r3, [r2, #64]	; 0x40
 8001822:	4b06      	ldr	r3, [pc, #24]	; (800183c <HAL_I2C_MspInit+0x88>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800182e:	bf00      	nop
 8001830:	3728      	adds	r7, #40	; 0x28
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40005400 	.word	0x40005400
 800183c:	40023800 	.word	0x40023800
 8001840:	40020400 	.word	0x40020400
 8001844:	00000000 	.word	0x00000000

08001848 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001848:	b5b0      	push	{r4, r5, r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800184e:	f000 fd7d 	bl	800234c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001852:	f000 f8e9 	bl	8001a28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001856:	f7ff fef3 	bl	8001640 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800185a:	f000 fc73 	bl	8002144 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 800185e:	f000 fc9b 	bl	8002198 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 8001862:	f000 fafb 	bl	8001e5c <MX_TIM3_Init>
  MX_I2C1_Init();
 8001866:	f7ff ff77 	bl	8001758 <MX_I2C1_Init>
  MX_TIM10_Init();
 800186a:	f000 fb8f 	bl	8001f8c <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */


  // Start timer interrupt that enables the GYRO reading 250 Hz
  HAL_TIM_Base_Start_IT(&htim10);
 800186e:	485e      	ldr	r0, [pc, #376]	; (80019e8 <main+0x1a0>)
 8001870:	f002 fdd6 	bl	8004420 <HAL_TIM_Base_Start_IT>

  //PRINTF("\n\r BEGINNING OF THE CODE \n\n\r");

  // Start the counter for the PWM signal
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001874:	2100      	movs	r1, #0
 8001876:	485d      	ldr	r0, [pc, #372]	; (80019ec <main+0x1a4>)
 8001878:	f002 fe8e 	bl	8004598 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800187c:	2104      	movs	r1, #4
 800187e:	485b      	ldr	r0, [pc, #364]	; (80019ec <main+0x1a4>)
 8001880:	f002 fe8a 	bl	8004598 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001884:	2108      	movs	r1, #8
 8001886:	4859      	ldr	r0, [pc, #356]	; (80019ec <main+0x1a4>)
 8001888:	f002 fe86 	bl	8004598 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800188c:	210c      	movs	r1, #12
 800188e:	4857      	ldr	r0, [pc, #348]	; (80019ec <main+0x1a4>)
 8001890:	f002 fe82 	bl	8004598 <HAL_TIM_PWM_Start>

  HAL_UART_Receive_IT(&huart6, (uint8_t*)cmd_rx, 1);
 8001894:	2201      	movs	r2, #1
 8001896:	4956      	ldr	r1, [pc, #344]	; (80019f0 <main+0x1a8>)
 8001898:	4856      	ldr	r0, [pc, #344]	; (80019f4 <main+0x1ac>)
 800189a:	f003 fe14 	bl	80054c6 <HAL_UART_Receive_IT>


  while(BLUE_BUTTON==0){
 800189e:	e003      	b.n	80018a8 <main+0x60>
	  if(BLUE_BUTTON==1){
 80018a0:	4b55      	ldr	r3, [pc, #340]	; (80019f8 <main+0x1b0>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d004      	beq.n	80018b2 <main+0x6a>
  while(BLUE_BUTTON==0){
 80018a8:	4b53      	ldr	r3, [pc, #332]	; (80019f8 <main+0x1b0>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d0f7      	beq.n	80018a0 <main+0x58>
 80018b0:	e000      	b.n	80018b4 <main+0x6c>
		  break;
 80018b2:	bf00      	nop
	  }
  }

  MPU6050_Init();
 80018b4:	f7ff fcda 	bl	800126c <MPU6050_Init>

  ESC_STATUS ESC_speed;

  ESC_speed.FR = 0;
 80018b8:	2300      	movs	r3, #0
 80018ba:	803b      	strh	r3, [r7, #0]
  ESC_speed.FL = 0;
 80018bc:	2300      	movs	r3, #0
 80018be:	807b      	strh	r3, [r7, #2]
  ESC_speed.RR = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	80bb      	strh	r3, [r7, #4]
  ESC_speed.RL = 0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	80fb      	strh	r3, [r7, #6]

  // Set PWM to 0 for the ESC (1 ms)
  TIM3->CCR1 = ESC_speed.FR + 1000;
 80018c8:	883b      	ldrh	r3, [r7, #0]
 80018ca:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 80018ce:	4b4b      	ldr	r3, [pc, #300]	; (80019fc <main+0x1b4>)
 80018d0:	635a      	str	r2, [r3, #52]	; 0x34
  TIM3->CCR2 = ESC_speed.FL + 1000;
 80018d2:	887b      	ldrh	r3, [r7, #2]
 80018d4:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 80018d8:	4b48      	ldr	r3, [pc, #288]	; (80019fc <main+0x1b4>)
 80018da:	639a      	str	r2, [r3, #56]	; 0x38
  TIM3->CCR3 = ESC_speed.RR + 1000;
 80018dc:	88bb      	ldrh	r3, [r7, #4]
 80018de:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 80018e2:	4b46      	ldr	r3, [pc, #280]	; (80019fc <main+0x1b4>)
 80018e4:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM3->CCR4 = ESC_speed.RL + 1000;
 80018e6:	88fb      	ldrh	r3, [r7, #6]
 80018e8:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 80018ec:	4b43      	ldr	r3, [pc, #268]	; (80019fc <main+0x1b4>)
 80018ee:	641a      	str	r2, [r3, #64]	; 0x40
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  msgLen = sprintf(msgDebug, "%f,%f,%f\n\r", angle_x, angle_y, angle_z);
 80018f0:	4b43      	ldr	r3, [pc, #268]	; (8001a00 <main+0x1b8>)
 80018f2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80018f6:	4b43      	ldr	r3, [pc, #268]	; (8001a04 <main+0x1bc>)
 80018f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fc:	4942      	ldr	r1, [pc, #264]	; (8001a08 <main+0x1c0>)
 80018fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001902:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001906:	e9cd 2300 	strd	r2, r3, [sp]
 800190a:	4622      	mov	r2, r4
 800190c:	462b      	mov	r3, r5
 800190e:	493f      	ldr	r1, [pc, #252]	; (8001a0c <main+0x1c4>)
 8001910:	483f      	ldr	r0, [pc, #252]	; (8001a10 <main+0x1c8>)
 8001912:	f005 f95d 	bl	8006bd0 <siprintf>
 8001916:	4603      	mov	r3, r0
 8001918:	4a3e      	ldr	r2, [pc, #248]	; (8001a14 <main+0x1cc>)
 800191a:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
 800191c:	4b3d      	ldr	r3, [pc, #244]	; (8001a14 <main+0x1cc>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	b29a      	uxth	r2, r3
 8001922:	2364      	movs	r3, #100	; 0x64
 8001924:	493a      	ldr	r1, [pc, #232]	; (8001a10 <main+0x1c8>)
 8001926:	483c      	ldr	r0, [pc, #240]	; (8001a18 <main+0x1d0>)
 8001928:	f003 fd3b 	bl	80053a2 <HAL_UART_Transmit>

	  //HAL_Delay(250);



	  ESC_setSpeed(&ESC_speed, angle_x, angle_y, angle_z);
 800192c:	4b34      	ldr	r3, [pc, #208]	; (8001a00 <main+0x1b8>)
 800192e:	ed93 7b00 	vldr	d7, [r3]
 8001932:	4b34      	ldr	r3, [pc, #208]	; (8001a04 <main+0x1bc>)
 8001934:	ed93 6b00 	vldr	d6, [r3]
 8001938:	4b33      	ldr	r3, [pc, #204]	; (8001a08 <main+0x1c0>)
 800193a:	ed93 5b00 	vldr	d5, [r3]
 800193e:	463b      	mov	r3, r7
 8001940:	eeb0 2a45 	vmov.f32	s4, s10
 8001944:	eef0 2a65 	vmov.f32	s5, s11
 8001948:	eeb0 1a46 	vmov.f32	s2, s12
 800194c:	eef0 1a66 	vmov.f32	s3, s13
 8001950:	eeb0 0a47 	vmov.f32	s0, s14
 8001954:	eef0 0a67 	vmov.f32	s1, s15
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff fac9 	bl	8000ef0 <ESC_setSpeed>




	  if(BLUETOOTH_FLAG == 1){
 800195e:	4b2f      	ldr	r3, [pc, #188]	; (8001a1c <main+0x1d4>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d1c4      	bne.n	80018f0 <main+0xa8>

		  //HAL_UART_Transmit(&huart2, (uint8_t*)cmd_rx, 1, 1000);

		  CMD_transform(&ESC_speed, cmd_rx[0]);
 8001966:	4b22      	ldr	r3, [pc, #136]	; (80019f0 <main+0x1a8>)
 8001968:	781a      	ldrb	r2, [r3, #0]
 800196a:	463b      	mov	r3, r7
 800196c:	4611      	mov	r1, r2
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff fb6c 	bl	800104c <CMD_transform>
		  ESC_setSpeed(&ESC_speed, 0, 0, 0);
 8001974:	463b      	mov	r3, r7
 8001976:	ed9f 2b1a 	vldr	d2, [pc, #104]	; 80019e0 <main+0x198>
 800197a:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80019e0 <main+0x198>
 800197e:	ed9f 0b18 	vldr	d0, [pc, #96]	; 80019e0 <main+0x198>
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff fab4 	bl	8000ef0 <ESC_setSpeed>

		  msgLen = sprintf(msgDebug, "\n\r BLUETOOTH MSG");
 8001988:	4925      	ldr	r1, [pc, #148]	; (8001a20 <main+0x1d8>)
 800198a:	4821      	ldr	r0, [pc, #132]	; (8001a10 <main+0x1c8>)
 800198c:	f005 f920 	bl	8006bd0 <siprintf>
 8001990:	4603      	mov	r3, r0
 8001992:	4a20      	ldr	r2, [pc, #128]	; (8001a14 <main+0x1cc>)
 8001994:	6013      	str	r3, [r2, #0]
		  HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 10);
 8001996:	4b1f      	ldr	r3, [pc, #124]	; (8001a14 <main+0x1cc>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	b29a      	uxth	r2, r3
 800199c:	230a      	movs	r3, #10
 800199e:	491c      	ldr	r1, [pc, #112]	; (8001a10 <main+0x1c8>)
 80019a0:	481d      	ldr	r0, [pc, #116]	; (8001a18 <main+0x1d0>)
 80019a2:	f003 fcfe 	bl	80053a2 <HAL_UART_Transmit>
		  msgLen = sprintf(msgDebug, "\n\r   FRONTT LEFT %d  -  FRONT RIGHT %d  -  REAR LEFT %d - REAR RIGHT %d", ESC_speed.FL, ESC_speed.FR, ESC_speed.RL, ESC_speed.RR);
 80019a6:	887b      	ldrh	r3, [r7, #2]
 80019a8:	4619      	mov	r1, r3
 80019aa:	883b      	ldrh	r3, [r7, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	88fb      	ldrh	r3, [r7, #6]
 80019b0:	88ba      	ldrh	r2, [r7, #4]
 80019b2:	9201      	str	r2, [sp, #4]
 80019b4:	9300      	str	r3, [sp, #0]
 80019b6:	4603      	mov	r3, r0
 80019b8:	460a      	mov	r2, r1
 80019ba:	491a      	ldr	r1, [pc, #104]	; (8001a24 <main+0x1dc>)
 80019bc:	4814      	ldr	r0, [pc, #80]	; (8001a10 <main+0x1c8>)
 80019be:	f005 f907 	bl	8006bd0 <siprintf>
 80019c2:	4603      	mov	r3, r0
 80019c4:	4a13      	ldr	r2, [pc, #76]	; (8001a14 <main+0x1cc>)
 80019c6:	6013      	str	r3, [r2, #0]
		  HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 10);
 80019c8:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <main+0x1cc>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	230a      	movs	r3, #10
 80019d0:	490f      	ldr	r1, [pc, #60]	; (8001a10 <main+0x1c8>)
 80019d2:	4811      	ldr	r0, [pc, #68]	; (8001a18 <main+0x1d0>)
 80019d4:	f003 fce5 	bl	80053a2 <HAL_UART_Transmit>

		  BLUETOOTH_FLAG = 0;
 80019d8:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <main+0x1d4>)
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
	  msgLen = sprintf(msgDebug, "%f,%f,%f\n\r", angle_x, angle_y, angle_z);
 80019de:	e787      	b.n	80018f0 <main+0xa8>
	...
 80019e8:	20000c00 	.word	0x20000c00
 80019ec:	20000c48 	.word	0x20000c48
 80019f0:	20000250 	.word	0x20000250
 80019f4:	20000c90 	.word	0x20000c90
 80019f8:	2000023c 	.word	0x2000023c
 80019fc:	40000400 	.word	0x40000400
 8001a00:	20000218 	.word	0x20000218
 8001a04:	20000220 	.word	0x20000220
 8001a08:	20000228 	.word	0x20000228
 8001a0c:	08009054 	.word	0x08009054
 8001a10:	2000027c 	.word	0x2000027c
 8001a14:	20000350 	.word	0x20000350
 8001a18:	20000cd4 	.word	0x20000cd4
 8001a1c:	20000240 	.word	0x20000240
 8001a20:	08009060 	.word	0x08009060
 8001a24:	08009074 	.word	0x08009074

08001a28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b094      	sub	sp, #80	; 0x50
 8001a2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a2e:	f107 0320 	add.w	r3, r7, #32
 8001a32:	2230      	movs	r2, #48	; 0x30
 8001a34:	2100      	movs	r1, #0
 8001a36:	4618      	mov	r0, r3
 8001a38:	f004 fc58 	bl	80062ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a3c:	f107 030c 	add.w	r3, r7, #12
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	60da      	str	r2, [r3, #12]
 8001a4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60bb      	str	r3, [r7, #8]
 8001a50:	4b29      	ldr	r3, [pc, #164]	; (8001af8 <SystemClock_Config+0xd0>)
 8001a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a54:	4a28      	ldr	r2, [pc, #160]	; (8001af8 <SystemClock_Config+0xd0>)
 8001a56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a5a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a5c:	4b26      	ldr	r3, [pc, #152]	; (8001af8 <SystemClock_Config+0xd0>)
 8001a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a64:	60bb      	str	r3, [r7, #8]
 8001a66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a68:	2300      	movs	r3, #0
 8001a6a:	607b      	str	r3, [r7, #4]
 8001a6c:	4b23      	ldr	r3, [pc, #140]	; (8001afc <SystemClock_Config+0xd4>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a74:	4a21      	ldr	r2, [pc, #132]	; (8001afc <SystemClock_Config+0xd4>)
 8001a76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a7a:	6013      	str	r3, [r2, #0]
 8001a7c:	4b1f      	ldr	r3, [pc, #124]	; (8001afc <SystemClock_Config+0xd4>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a84:	607b      	str	r3, [r7, #4]
 8001a86:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a90:	2310      	movs	r3, #16
 8001a92:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a94:	2302      	movs	r3, #2
 8001a96:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001a9c:	2310      	movs	r3, #16
 8001a9e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001aa0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001aa4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001aa6:	2304      	movs	r3, #4
 8001aa8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001aaa:	2307      	movs	r3, #7
 8001aac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aae:	f107 0320 	add.w	r3, r7, #32
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f001 fff0 	bl	8003a98 <HAL_RCC_OscConfig>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001abe:	f000 f861 	bl	8001b84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ac2:	230f      	movs	r3, #15
 8001ac4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ace:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ad2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ad8:	f107 030c 	add.w	r3, r7, #12
 8001adc:	2102      	movs	r1, #2
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f002 fa52 	bl	8003f88 <HAL_RCC_ClockConfig>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001aea:	f000 f84b 	bl	8001b84 <Error_Handler>
  }
}
 8001aee:	bf00      	nop
 8001af0:	3750      	adds	r7, #80	; 0x50
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40007000 	.word	0x40007000

08001b00 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 4 */



// Interrupt from the timer
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]

	if(htim == &htim10){
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a04      	ldr	r2, [pc, #16]	; (8001b1c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d101      	bne.n	8001b14 <HAL_TIM_PeriodElapsedCallback+0x14>
		MPU6050_ReadGyro();
 8001b10:	f7ff fc36 	bl	8001380 <MPU6050_ReadGyro>
	}
}
 8001b14:	bf00      	nop
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20000c00 	.word	0x20000c00

08001b20 <HAL_UART_RxCpltCallback>:


// Interrupt from bluetooth
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]

	if(BLUETOOTH_FLAG==0){
 8001b28:	4b07      	ldr	r3, [pc, #28]	; (8001b48 <HAL_UART_RxCpltCallback+0x28>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d102      	bne.n	8001b36 <HAL_UART_RxCpltCallback+0x16>
		BLUETOOTH_FLAG = 1;
 8001b30:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <HAL_UART_RxCpltCallback+0x28>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	601a      	str	r2, [r3, #0]
	}

	HAL_UART_Receive_IT(&huart6, (uint8_t*)cmd_rx, 1);
 8001b36:	2201      	movs	r2, #1
 8001b38:	4904      	ldr	r1, [pc, #16]	; (8001b4c <HAL_UART_RxCpltCallback+0x2c>)
 8001b3a:	4805      	ldr	r0, [pc, #20]	; (8001b50 <HAL_UART_RxCpltCallback+0x30>)
 8001b3c:	f003 fcc3 	bl	80054c6 <HAL_UART_Receive_IT>
}
 8001b40:	bf00      	nop
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	20000240 	.word	0x20000240
 8001b4c:	20000250 	.word	0x20000250
 8001b50:	20000c90 	.word	0x20000c90

08001b54 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == B1_Pin){
 8001b5e:	88fb      	ldrh	r3, [r7, #6]
 8001b60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b64:	d106      	bne.n	8001b74 <HAL_GPIO_EXTI_Callback+0x20>
		if(BLUE_BUTTON == 0){
 8001b66:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d102      	bne.n	8001b74 <HAL_GPIO_EXTI_Callback+0x20>
			BLUE_BUTTON=1;
 8001b6e:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001b70:	2201      	movs	r2, #1
 8001b72:	601a      	str	r2, [r3, #0]
		}
	}

}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	2000023c 	.word	0x2000023c

08001b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b88:	b672      	cpsid	i
}
 8001b8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b8c:	e7fe      	b.n	8001b8c <Error_Handler+0x8>
	...

08001b90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	607b      	str	r3, [r7, #4]
 8001b9a:	4b18      	ldr	r3, [pc, #96]	; (8001bfc <HAL_MspInit+0x6c>)
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9e:	4a17      	ldr	r2, [pc, #92]	; (8001bfc <HAL_MspInit+0x6c>)
 8001ba0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ba4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ba6:	4b15      	ldr	r3, [pc, #84]	; (8001bfc <HAL_MspInit+0x6c>)
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bae:	607b      	str	r3, [r7, #4]
 8001bb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	603b      	str	r3, [r7, #0]
 8001bb6:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <HAL_MspInit+0x6c>)
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	4a10      	ldr	r2, [pc, #64]	; (8001bfc <HAL_MspInit+0x6c>)
 8001bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bc2:	4b0e      	ldr	r3, [pc, #56]	; (8001bfc <HAL_MspInit+0x6c>)
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bca:	603b      	str	r3, [r7, #0]
 8001bcc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001bce:	2007      	movs	r0, #7
 8001bd0:	f000 fcfe 	bl	80025d0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	2001      	movs	r0, #1
 8001bda:	f000 fd04 	bl	80025e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8001bde:	2001      	movs	r0, #1
 8001be0:	f000 fd1d 	bl	800261e <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 8001be4:	2200      	movs	r2, #0
 8001be6:	2100      	movs	r1, #0
 8001be8:	2051      	movs	r0, #81	; 0x51
 8001bea:	f000 fcfc 	bl	80025e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8001bee:	2051      	movs	r0, #81	; 0x51
 8001bf0:	f000 fd15 	bl	800261e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bf4:	bf00      	nop
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40023800 	.word	0x40023800

08001c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c04:	e7fe      	b.n	8001c04 <NMI_Handler+0x4>

08001c06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c0a:	e7fe      	b.n	8001c0a <HardFault_Handler+0x4>

08001c0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c10:	e7fe      	b.n	8001c10 <MemManage_Handler+0x4>

08001c12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c12:	b480      	push	{r7}
 8001c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c16:	e7fe      	b.n	8001c16 <BusFault_Handler+0x4>

08001c18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c1c:	e7fe      	b.n	8001c1c <UsageFault_Handler+0x4>

08001c1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c4c:	f000 fbd0 	bl	80023f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c50:	bf00      	nop
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8001c58:	f001 ff04 	bl	8003a64 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8001c5c:	bf00      	nop
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001c64:	4802      	ldr	r0, [pc, #8]	; (8001c70 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001c66:	f002 fd47 	bl	80046f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000c00 	.word	0x20000c00

08001c74 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001c78:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c7c:	f000 ff1a 	bl	8002ab4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c80:	bf00      	nop
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001c88:	4802      	ldr	r0, [pc, #8]	; (8001c94 <USART6_IRQHandler+0x10>)
 8001c8a:	f003 fc4d 	bl	8005528 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000c90 	.word	0x20000c90

08001c98 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	af00      	add	r7, sp, #0
	return 1;
 8001caa:	2301      	movs	r3, #1
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <_kill>:

int _kill(int pid, int sig)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b082      	sub	sp, #8
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
 8001cbe:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001cc0:	f004 faea 	bl	8006298 <__errno>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2216      	movs	r2, #22
 8001cc8:	601a      	str	r2, [r3, #0]
	return -1;
 8001cca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <_exit>:

void _exit (int status)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b082      	sub	sp, #8
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001cde:	f04f 31ff 	mov.w	r1, #4294967295
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f7ff ffe7 	bl	8001cb6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ce8:	e7fe      	b.n	8001ce8 <_exit+0x12>

08001cea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b086      	sub	sp, #24
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	60f8      	str	r0, [r7, #12]
 8001cf2:	60b9      	str	r1, [r7, #8]
 8001cf4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	617b      	str	r3, [r7, #20]
 8001cfa:	e00a      	b.n	8001d12 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001cfc:	f3af 8000 	nop.w
 8001d00:	4601      	mov	r1, r0
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	1c5a      	adds	r2, r3, #1
 8001d06:	60ba      	str	r2, [r7, #8]
 8001d08:	b2ca      	uxtb	r2, r1
 8001d0a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	617b      	str	r3, [r7, #20]
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	dbf0      	blt.n	8001cfc <_read+0x12>
	}

return len;
 8001d1a:	687b      	ldr	r3, [r7, #4]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3718      	adds	r7, #24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]
 8001d34:	e009      	b.n	8001d4a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	1c5a      	adds	r2, r3, #1
 8001d3a:	60ba      	str	r2, [r7, #8]
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	3301      	adds	r3, #1
 8001d48:	617b      	str	r3, [r7, #20]
 8001d4a:	697a      	ldr	r2, [r7, #20]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	dbf1      	blt.n	8001d36 <_write+0x12>
	}
	return len;
 8001d52:	687b      	ldr	r3, [r7, #4]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <_close>:

int _close(int file)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
	return -1;
 8001d64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d84:	605a      	str	r2, [r3, #4]
	return 0;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <_isatty>:

int _isatty(int file)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
	return 1;
 8001d9c:	2301      	movs	r3, #1
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b085      	sub	sp, #20
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	60f8      	str	r0, [r7, #12]
 8001db2:	60b9      	str	r1, [r7, #8]
 8001db4:	607a      	str	r2, [r7, #4]
	return 0;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dcc:	4a14      	ldr	r2, [pc, #80]	; (8001e20 <_sbrk+0x5c>)
 8001dce:	4b15      	ldr	r3, [pc, #84]	; (8001e24 <_sbrk+0x60>)
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dd8:	4b13      	ldr	r3, [pc, #76]	; (8001e28 <_sbrk+0x64>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d102      	bne.n	8001de6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001de0:	4b11      	ldr	r3, [pc, #68]	; (8001e28 <_sbrk+0x64>)
 8001de2:	4a12      	ldr	r2, [pc, #72]	; (8001e2c <_sbrk+0x68>)
 8001de4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001de6:	4b10      	ldr	r3, [pc, #64]	; (8001e28 <_sbrk+0x64>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4413      	add	r3, r2
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d207      	bcs.n	8001e04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001df4:	f004 fa50 	bl	8006298 <__errno>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	220c      	movs	r2, #12
 8001dfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8001e02:	e009      	b.n	8001e18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e04:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <_sbrk+0x64>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e0a:	4b07      	ldr	r3, [pc, #28]	; (8001e28 <_sbrk+0x64>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4413      	add	r3, r2
 8001e12:	4a05      	ldr	r2, [pc, #20]	; (8001e28 <_sbrk+0x64>)
 8001e14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e16:	68fb      	ldr	r3, [r7, #12]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3718      	adds	r7, #24
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	20018000 	.word	0x20018000
 8001e24:	00000400 	.word	0x00000400
 8001e28:	20000244 	.word	0x20000244
 8001e2c:	20000d30 	.word	0x20000d30

08001e30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e34:	4b08      	ldr	r3, [pc, #32]	; (8001e58 <SystemInit+0x28>)
 8001e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e3a:	4a07      	ldr	r2, [pc, #28]	; (8001e58 <SystemInit+0x28>)
 8001e3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e44:	4b04      	ldr	r3, [pc, #16]	; (8001e58 <SystemInit+0x28>)
 8001e46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e4a:	609a      	str	r2, [r3, #8]
#endif
}
 8001e4c:	bf00      	nop
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	e000ed00 	.word	0xe000ed00

08001e5c <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim10;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08e      	sub	sp, #56	; 0x38
 8001e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	605a      	str	r2, [r3, #4]
 8001e6c:	609a      	str	r2, [r3, #8]
 8001e6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e70:	f107 0320 	add.w	r3, r7, #32
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e7a:	1d3b      	adds	r3, r7, #4
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	605a      	str	r2, [r3, #4]
 8001e82:	609a      	str	r2, [r3, #8]
 8001e84:	60da      	str	r2, [r3, #12]
 8001e86:	611a      	str	r2, [r3, #16]
 8001e88:	615a      	str	r2, [r3, #20]
 8001e8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e8c:	4b3d      	ldr	r3, [pc, #244]	; (8001f84 <MX_TIM3_Init+0x128>)
 8001e8e:	4a3e      	ldr	r2, [pc, #248]	; (8001f88 <MX_TIM3_Init+0x12c>)
 8001e90:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001e92:	4b3c      	ldr	r3, [pc, #240]	; (8001f84 <MX_TIM3_Init+0x128>)
 8001e94:	2253      	movs	r2, #83	; 0x53
 8001e96:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e98:	4b3a      	ldr	r3, [pc, #232]	; (8001f84 <MX_TIM3_Init+0x128>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 8001e9e:	4b39      	ldr	r3, [pc, #228]	; (8001f84 <MX_TIM3_Init+0x128>)
 8001ea0:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001ea4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ea6:	4b37      	ldr	r3, [pc, #220]	; (8001f84 <MX_TIM3_Init+0x128>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001eac:	4b35      	ldr	r3, [pc, #212]	; (8001f84 <MX_TIM3_Init+0x128>)
 8001eae:	2280      	movs	r2, #128	; 0x80
 8001eb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001eb2:	4834      	ldr	r0, [pc, #208]	; (8001f84 <MX_TIM3_Init+0x128>)
 8001eb4:	f002 fa64 	bl	8004380 <HAL_TIM_Base_Init>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001ebe:	f7ff fe61 	bl	8001b84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ec6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ec8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ecc:	4619      	mov	r1, r3
 8001ece:	482d      	ldr	r0, [pc, #180]	; (8001f84 <MX_TIM3_Init+0x128>)
 8001ed0:	f002 fddc 	bl	8004a8c <HAL_TIM_ConfigClockSource>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001eda:	f7ff fe53 	bl	8001b84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ede:	4829      	ldr	r0, [pc, #164]	; (8001f84 <MX_TIM3_Init+0x128>)
 8001ee0:	f002 fb00 	bl	80044e4 <HAL_TIM_PWM_Init>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001eea:	f7ff fe4b 	bl	8001b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ef6:	f107 0320 	add.w	r3, r7, #32
 8001efa:	4619      	mov	r1, r3
 8001efc:	4821      	ldr	r0, [pc, #132]	; (8001f84 <MX_TIM3_Init+0x128>)
 8001efe:	f003 f981 	bl	8005204 <HAL_TIMEx_MasterConfigSynchronization>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001f08:	f7ff fe3c 	bl	8001b84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f0c:	2360      	movs	r3, #96	; 0x60
 8001f0e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f10:	2300      	movs	r3, #0
 8001f12:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f14:	2300      	movs	r3, #0
 8001f16:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f1c:	1d3b      	adds	r3, r7, #4
 8001f1e:	2200      	movs	r2, #0
 8001f20:	4619      	mov	r1, r3
 8001f22:	4818      	ldr	r0, [pc, #96]	; (8001f84 <MX_TIM3_Init+0x128>)
 8001f24:	f002 fcf0 	bl	8004908 <HAL_TIM_PWM_ConfigChannel>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001f2e:	f7ff fe29 	bl	8001b84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f32:	1d3b      	adds	r3, r7, #4
 8001f34:	2204      	movs	r2, #4
 8001f36:	4619      	mov	r1, r3
 8001f38:	4812      	ldr	r0, [pc, #72]	; (8001f84 <MX_TIM3_Init+0x128>)
 8001f3a:	f002 fce5 	bl	8004908 <HAL_TIM_PWM_ConfigChannel>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001f44:	f7ff fe1e 	bl	8001b84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f48:	1d3b      	adds	r3, r7, #4
 8001f4a:	2208      	movs	r2, #8
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	480d      	ldr	r0, [pc, #52]	; (8001f84 <MX_TIM3_Init+0x128>)
 8001f50:	f002 fcda 	bl	8004908 <HAL_TIM_PWM_ConfigChannel>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8001f5a:	f7ff fe13 	bl	8001b84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f5e:	1d3b      	adds	r3, r7, #4
 8001f60:	220c      	movs	r2, #12
 8001f62:	4619      	mov	r1, r3
 8001f64:	4807      	ldr	r0, [pc, #28]	; (8001f84 <MX_TIM3_Init+0x128>)
 8001f66:	f002 fccf 	bl	8004908 <HAL_TIM_PWM_ConfigChannel>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8001f70:	f7ff fe08 	bl	8001b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001f74:	4803      	ldr	r0, [pc, #12]	; (8001f84 <MX_TIM3_Init+0x128>)
 8001f76:	f000 f86b 	bl	8002050 <HAL_TIM_MspPostInit>

}
 8001f7a:	bf00      	nop
 8001f7c:	3738      	adds	r7, #56	; 0x38
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000c48 	.word	0x20000c48
 8001f88:	40000400 	.word	0x40000400

08001f8c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001f90:	4b0e      	ldr	r3, [pc, #56]	; (8001fcc <MX_TIM10_Init+0x40>)
 8001f92:	4a0f      	ldr	r2, [pc, #60]	; (8001fd0 <MX_TIM10_Init+0x44>)
 8001f94:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 33600-1;
 8001f96:	4b0d      	ldr	r3, [pc, #52]	; (8001fcc <MX_TIM10_Init+0x40>)
 8001f98:	f248 323f 	movw	r2, #33599	; 0x833f
 8001f9c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f9e:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <MX_TIM10_Init+0x40>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10-1;
 8001fa4:	4b09      	ldr	r3, [pc, #36]	; (8001fcc <MX_TIM10_Init+0x40>)
 8001fa6:	2209      	movs	r2, #9
 8001fa8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001faa:	4b08      	ldr	r3, [pc, #32]	; (8001fcc <MX_TIM10_Init+0x40>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fb0:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <MX_TIM10_Init+0x40>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001fb6:	4805      	ldr	r0, [pc, #20]	; (8001fcc <MX_TIM10_Init+0x40>)
 8001fb8:	f002 f9e2 	bl	8004380 <HAL_TIM_Base_Init>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001fc2:	f7ff fddf 	bl	8001b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000c00 	.word	0x20000c00
 8001fd0:	40014400 	.word	0x40014400

08001fd4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a18      	ldr	r2, [pc, #96]	; (8002044 <HAL_TIM_Base_MspInit+0x70>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d10e      	bne.n	8002004 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	4b17      	ldr	r3, [pc, #92]	; (8002048 <HAL_TIM_Base_MspInit+0x74>)
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	4a16      	ldr	r2, [pc, #88]	; (8002048 <HAL_TIM_Base_MspInit+0x74>)
 8001ff0:	f043 0302 	orr.w	r3, r3, #2
 8001ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ff6:	4b14      	ldr	r3, [pc, #80]	; (8002048 <HAL_TIM_Base_MspInit+0x74>)
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8002002:	e01a      	b.n	800203a <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM10)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a10      	ldr	r2, [pc, #64]	; (800204c <HAL_TIM_Base_MspInit+0x78>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d115      	bne.n	800203a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	60bb      	str	r3, [r7, #8]
 8002012:	4b0d      	ldr	r3, [pc, #52]	; (8002048 <HAL_TIM_Base_MspInit+0x74>)
 8002014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002016:	4a0c      	ldr	r2, [pc, #48]	; (8002048 <HAL_TIM_Base_MspInit+0x74>)
 8002018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800201c:	6453      	str	r3, [r2, #68]	; 0x44
 800201e:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <HAL_TIM_Base_MspInit+0x74>)
 8002020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002026:	60bb      	str	r3, [r7, #8]
 8002028:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800202a:	2200      	movs	r2, #0
 800202c:	2100      	movs	r1, #0
 800202e:	2019      	movs	r0, #25
 8002030:	f000 fad9 	bl	80025e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002034:	2019      	movs	r0, #25
 8002036:	f000 faf2 	bl	800261e <HAL_NVIC_EnableIRQ>
}
 800203a:	bf00      	nop
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40000400 	.word	0x40000400
 8002048:	40023800 	.word	0x40023800
 800204c:	40014400 	.word	0x40014400

08002050 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b08a      	sub	sp, #40	; 0x28
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002058:	f107 0314 	add.w	r3, r7, #20
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	605a      	str	r2, [r3, #4]
 8002062:	609a      	str	r2, [r3, #8]
 8002064:	60da      	str	r2, [r3, #12]
 8002066:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a30      	ldr	r2, [pc, #192]	; (8002130 <HAL_TIM_MspPostInit+0xe0>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d15a      	bne.n	8002128 <HAL_TIM_MspPostInit+0xd8>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	613b      	str	r3, [r7, #16]
 8002076:	4b2f      	ldr	r3, [pc, #188]	; (8002134 <HAL_TIM_MspPostInit+0xe4>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	4a2e      	ldr	r2, [pc, #184]	; (8002134 <HAL_TIM_MspPostInit+0xe4>)
 800207c:	f043 0301 	orr.w	r3, r3, #1
 8002080:	6313      	str	r3, [r2, #48]	; 0x30
 8002082:	4b2c      	ldr	r3, [pc, #176]	; (8002134 <HAL_TIM_MspPostInit+0xe4>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	613b      	str	r3, [r7, #16]
 800208c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	4b28      	ldr	r3, [pc, #160]	; (8002134 <HAL_TIM_MspPostInit+0xe4>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	4a27      	ldr	r2, [pc, #156]	; (8002134 <HAL_TIM_MspPostInit+0xe4>)
 8002098:	f043 0302 	orr.w	r3, r3, #2
 800209c:	6313      	str	r3, [r2, #48]	; 0x30
 800209e:	4b25      	ldr	r3, [pc, #148]	; (8002134 <HAL_TIM_MspPostInit+0xe4>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	60bb      	str	r3, [r7, #8]
 80020ae:	4b21      	ldr	r3, [pc, #132]	; (8002134 <HAL_TIM_MspPostInit+0xe4>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	4a20      	ldr	r2, [pc, #128]	; (8002134 <HAL_TIM_MspPostInit+0xe4>)
 80020b4:	f043 0304 	orr.w	r3, r3, #4
 80020b8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ba:	4b1e      	ldr	r3, [pc, #120]	; (8002134 <HAL_TIM_MspPostInit+0xe4>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	f003 0304 	and.w	r3, r3, #4
 80020c2:	60bb      	str	r3, [r7, #8]
 80020c4:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB1     ------> TIM3_CH4
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020c6:	23c0      	movs	r3, #192	; 0xc0
 80020c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ca:	2302      	movs	r3, #2
 80020cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ce:	2300      	movs	r3, #0
 80020d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d2:	2300      	movs	r3, #0
 80020d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020d6:	2302      	movs	r3, #2
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020da:	f107 0314 	add.w	r3, r7, #20
 80020de:	4619      	mov	r1, r3
 80020e0:	4815      	ldr	r0, [pc, #84]	; (8002138 <HAL_TIM_MspPostInit+0xe8>)
 80020e2:	f000 fb49 	bl	8002778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80020e6:	2302      	movs	r3, #2
 80020e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ea:	2302      	movs	r3, #2
 80020ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ee:	2300      	movs	r3, #0
 80020f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f2:	2300      	movs	r3, #0
 80020f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020f6:	2302      	movs	r3, #2
 80020f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020fa:	f107 0314 	add.w	r3, r7, #20
 80020fe:	4619      	mov	r1, r3
 8002100:	480e      	ldr	r0, [pc, #56]	; (800213c <HAL_TIM_MspPostInit+0xec>)
 8002102:	f000 fb39 	bl	8002778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002106:	f44f 7380 	mov.w	r3, #256	; 0x100
 800210a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210c:	2302      	movs	r3, #2
 800210e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002110:	2300      	movs	r3, #0
 8002112:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002114:	2300      	movs	r3, #0
 8002116:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002118:	2302      	movs	r3, #2
 800211a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800211c:	f107 0314 	add.w	r3, r7, #20
 8002120:	4619      	mov	r1, r3
 8002122:	4807      	ldr	r0, [pc, #28]	; (8002140 <HAL_TIM_MspPostInit+0xf0>)
 8002124:	f000 fb28 	bl	8002778 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002128:	bf00      	nop
 800212a:	3728      	adds	r7, #40	; 0x28
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40000400 	.word	0x40000400
 8002134:	40023800 	.word	0x40023800
 8002138:	40020000 	.word	0x40020000
 800213c:	40020400 	.word	0x40020400
 8002140:	40020800 	.word	0x40020800

08002144 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart6;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002148:	4b11      	ldr	r3, [pc, #68]	; (8002190 <MX_USART2_UART_Init+0x4c>)
 800214a:	4a12      	ldr	r2, [pc, #72]	; (8002194 <MX_USART2_UART_Init+0x50>)
 800214c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800214e:	4b10      	ldr	r3, [pc, #64]	; (8002190 <MX_USART2_UART_Init+0x4c>)
 8002150:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002154:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002156:	4b0e      	ldr	r3, [pc, #56]	; (8002190 <MX_USART2_UART_Init+0x4c>)
 8002158:	2200      	movs	r2, #0
 800215a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800215c:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <MX_USART2_UART_Init+0x4c>)
 800215e:	2200      	movs	r2, #0
 8002160:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002162:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <MX_USART2_UART_Init+0x4c>)
 8002164:	2200      	movs	r2, #0
 8002166:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002168:	4b09      	ldr	r3, [pc, #36]	; (8002190 <MX_USART2_UART_Init+0x4c>)
 800216a:	220c      	movs	r2, #12
 800216c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800216e:	4b08      	ldr	r3, [pc, #32]	; (8002190 <MX_USART2_UART_Init+0x4c>)
 8002170:	2200      	movs	r2, #0
 8002172:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002174:	4b06      	ldr	r3, [pc, #24]	; (8002190 <MX_USART2_UART_Init+0x4c>)
 8002176:	2200      	movs	r2, #0
 8002178:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800217a:	4805      	ldr	r0, [pc, #20]	; (8002190 <MX_USART2_UART_Init+0x4c>)
 800217c:	f003 f8c4 	bl	8005308 <HAL_UART_Init>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002186:	f7ff fcfd 	bl	8001b84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800218a:	bf00      	nop
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	20000cd4 	.word	0x20000cd4
 8002194:	40004400 	.word	0x40004400

08002198 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800219c:	4b11      	ldr	r3, [pc, #68]	; (80021e4 <MX_USART6_UART_Init+0x4c>)
 800219e:	4a12      	ldr	r2, [pc, #72]	; (80021e8 <MX_USART6_UART_Init+0x50>)
 80021a0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80021a2:	4b10      	ldr	r3, [pc, #64]	; (80021e4 <MX_USART6_UART_Init+0x4c>)
 80021a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80021a8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80021aa:	4b0e      	ldr	r3, [pc, #56]	; (80021e4 <MX_USART6_UART_Init+0x4c>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80021b0:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <MX_USART6_UART_Init+0x4c>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80021b6:	4b0b      	ldr	r3, [pc, #44]	; (80021e4 <MX_USART6_UART_Init+0x4c>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80021bc:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <MX_USART6_UART_Init+0x4c>)
 80021be:	220c      	movs	r2, #12
 80021c0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021c2:	4b08      	ldr	r3, [pc, #32]	; (80021e4 <MX_USART6_UART_Init+0x4c>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80021c8:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <MX_USART6_UART_Init+0x4c>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80021ce:	4805      	ldr	r0, [pc, #20]	; (80021e4 <MX_USART6_UART_Init+0x4c>)
 80021d0:	f003 f89a 	bl	8005308 <HAL_UART_Init>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80021da:	f7ff fcd3 	bl	8001b84 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80021de:	bf00      	nop
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	20000c90 	.word	0x20000c90
 80021e8:	40011400 	.word	0x40011400

080021ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b08c      	sub	sp, #48	; 0x30
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f4:	f107 031c 	add.w	r3, r7, #28
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	609a      	str	r2, [r3, #8]
 8002200:	60da      	str	r2, [r3, #12]
 8002202:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a36      	ldr	r2, [pc, #216]	; (80022e4 <HAL_UART_MspInit+0xf8>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d12c      	bne.n	8002268 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800220e:	2300      	movs	r3, #0
 8002210:	61bb      	str	r3, [r7, #24]
 8002212:	4b35      	ldr	r3, [pc, #212]	; (80022e8 <HAL_UART_MspInit+0xfc>)
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	4a34      	ldr	r2, [pc, #208]	; (80022e8 <HAL_UART_MspInit+0xfc>)
 8002218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800221c:	6413      	str	r3, [r2, #64]	; 0x40
 800221e:	4b32      	ldr	r3, [pc, #200]	; (80022e8 <HAL_UART_MspInit+0xfc>)
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002226:	61bb      	str	r3, [r7, #24]
 8002228:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	617b      	str	r3, [r7, #20]
 800222e:	4b2e      	ldr	r3, [pc, #184]	; (80022e8 <HAL_UART_MspInit+0xfc>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	4a2d      	ldr	r2, [pc, #180]	; (80022e8 <HAL_UART_MspInit+0xfc>)
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	6313      	str	r3, [r2, #48]	; 0x30
 800223a:	4b2b      	ldr	r3, [pc, #172]	; (80022e8 <HAL_UART_MspInit+0xfc>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	617b      	str	r3, [r7, #20]
 8002244:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002246:	230c      	movs	r3, #12
 8002248:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224a:	2302      	movs	r3, #2
 800224c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224e:	2300      	movs	r3, #0
 8002250:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002252:	2301      	movs	r3, #1
 8002254:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002256:	2307      	movs	r3, #7
 8002258:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800225a:	f107 031c 	add.w	r3, r7, #28
 800225e:	4619      	mov	r1, r3
 8002260:	4822      	ldr	r0, [pc, #136]	; (80022ec <HAL_UART_MspInit+0x100>)
 8002262:	f000 fa89 	bl	8002778 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002266:	e038      	b.n	80022da <HAL_UART_MspInit+0xee>
  else if(uartHandle->Instance==USART6)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a20      	ldr	r2, [pc, #128]	; (80022f0 <HAL_UART_MspInit+0x104>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d133      	bne.n	80022da <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	613b      	str	r3, [r7, #16]
 8002276:	4b1c      	ldr	r3, [pc, #112]	; (80022e8 <HAL_UART_MspInit+0xfc>)
 8002278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227a:	4a1b      	ldr	r2, [pc, #108]	; (80022e8 <HAL_UART_MspInit+0xfc>)
 800227c:	f043 0320 	orr.w	r3, r3, #32
 8002280:	6453      	str	r3, [r2, #68]	; 0x44
 8002282:	4b19      	ldr	r3, [pc, #100]	; (80022e8 <HAL_UART_MspInit+0xfc>)
 8002284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002286:	f003 0320 	and.w	r3, r3, #32
 800228a:	613b      	str	r3, [r7, #16]
 800228c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	4b15      	ldr	r3, [pc, #84]	; (80022e8 <HAL_UART_MspInit+0xfc>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	4a14      	ldr	r2, [pc, #80]	; (80022e8 <HAL_UART_MspInit+0xfc>)
 8002298:	f043 0304 	orr.w	r3, r3, #4
 800229c:	6313      	str	r3, [r2, #48]	; 0x30
 800229e:	4b12      	ldr	r3, [pc, #72]	; (80022e8 <HAL_UART_MspInit+0xfc>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	f003 0304 	and.w	r3, r3, #4
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022aa:	23c0      	movs	r3, #192	; 0xc0
 80022ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ae:	2302      	movs	r3, #2
 80022b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b6:	2303      	movs	r3, #3
 80022b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80022ba:	2308      	movs	r3, #8
 80022bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022be:	f107 031c 	add.w	r3, r7, #28
 80022c2:	4619      	mov	r1, r3
 80022c4:	480b      	ldr	r0, [pc, #44]	; (80022f4 <HAL_UART_MspInit+0x108>)
 80022c6:	f000 fa57 	bl	8002778 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80022ca:	2200      	movs	r2, #0
 80022cc:	2100      	movs	r1, #0
 80022ce:	2047      	movs	r0, #71	; 0x47
 80022d0:	f000 f989 	bl	80025e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80022d4:	2047      	movs	r0, #71	; 0x47
 80022d6:	f000 f9a2 	bl	800261e <HAL_NVIC_EnableIRQ>
}
 80022da:	bf00      	nop
 80022dc:	3730      	adds	r7, #48	; 0x30
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40004400 	.word	0x40004400
 80022e8:	40023800 	.word	0x40023800
 80022ec:	40020000 	.word	0x40020000
 80022f0:	40011400 	.word	0x40011400
 80022f4:	40020800 	.word	0x40020800

080022f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80022f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002330 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80022fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80022fe:	e003      	b.n	8002308 <LoopCopyDataInit>

08002300 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002300:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002302:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002304:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002306:	3104      	adds	r1, #4

08002308 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002308:	480b      	ldr	r0, [pc, #44]	; (8002338 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800230a:	4b0c      	ldr	r3, [pc, #48]	; (800233c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800230c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800230e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002310:	d3f6      	bcc.n	8002300 <CopyDataInit>
  ldr  r2, =_sbss
 8002312:	4a0b      	ldr	r2, [pc, #44]	; (8002340 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002314:	e002      	b.n	800231c <LoopFillZerobss>

08002316 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002316:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002318:	f842 3b04 	str.w	r3, [r2], #4

0800231c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800231c:	4b09      	ldr	r3, [pc, #36]	; (8002344 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800231e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002320:	d3f9      	bcc.n	8002316 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002322:	f7ff fd85 	bl	8001e30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002326:	f003 ffbd 	bl	80062a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800232a:	f7ff fa8d 	bl	8001848 <main>
  bx  lr    
 800232e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002330:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8002334:	080094c4 	.word	0x080094c4
  ldr  r0, =_sdata
 8002338:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800233c:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8002340:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8002344:	20000d2c 	.word	0x20000d2c

08002348 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002348:	e7fe      	b.n	8002348 <ADC_IRQHandler>
	...

0800234c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002350:	4b0e      	ldr	r3, [pc, #56]	; (800238c <HAL_Init+0x40>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a0d      	ldr	r2, [pc, #52]	; (800238c <HAL_Init+0x40>)
 8002356:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800235a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800235c:	4b0b      	ldr	r3, [pc, #44]	; (800238c <HAL_Init+0x40>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a0a      	ldr	r2, [pc, #40]	; (800238c <HAL_Init+0x40>)
 8002362:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002366:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002368:	4b08      	ldr	r3, [pc, #32]	; (800238c <HAL_Init+0x40>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a07      	ldr	r2, [pc, #28]	; (800238c <HAL_Init+0x40>)
 800236e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002372:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002374:	2003      	movs	r0, #3
 8002376:	f000 f92b 	bl	80025d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800237a:	2000      	movs	r0, #0
 800237c:	f000 f808 	bl	8002390 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002380:	f7ff fc06 	bl	8001b90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40023c00 	.word	0x40023c00

08002390 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002398:	4b12      	ldr	r3, [pc, #72]	; (80023e4 <HAL_InitTick+0x54>)
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	4b12      	ldr	r3, [pc, #72]	; (80023e8 <HAL_InitTick+0x58>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	4619      	mov	r1, r3
 80023a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80023aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 f943 	bl	800263a <HAL_SYSTICK_Config>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e00e      	b.n	80023dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2b0f      	cmp	r3, #15
 80023c2:	d80a      	bhi.n	80023da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023c4:	2200      	movs	r2, #0
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	f04f 30ff 	mov.w	r0, #4294967295
 80023cc:	f000 f90b 	bl	80025e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023d0:	4a06      	ldr	r2, [pc, #24]	; (80023ec <HAL_InitTick+0x5c>)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
 80023d8:	e000      	b.n	80023dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	20000000 	.word	0x20000000
 80023e8:	20000008 	.word	0x20000008
 80023ec:	20000004 	.word	0x20000004

080023f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023f4:	4b06      	ldr	r3, [pc, #24]	; (8002410 <HAL_IncTick+0x20>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	461a      	mov	r2, r3
 80023fa:	4b06      	ldr	r3, [pc, #24]	; (8002414 <HAL_IncTick+0x24>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4413      	add	r3, r2
 8002400:	4a04      	ldr	r2, [pc, #16]	; (8002414 <HAL_IncTick+0x24>)
 8002402:	6013      	str	r3, [r2, #0]
}
 8002404:	bf00      	nop
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	20000008 	.word	0x20000008
 8002414:	20000d18 	.word	0x20000d18

08002418 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  return uwTick;
 800241c:	4b03      	ldr	r3, [pc, #12]	; (800242c <HAL_GetTick+0x14>)
 800241e:	681b      	ldr	r3, [r3, #0]
}
 8002420:	4618      	mov	r0, r3
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	20000d18 	.word	0x20000d18

08002430 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002440:	4b0c      	ldr	r3, [pc, #48]	; (8002474 <__NVIC_SetPriorityGrouping+0x44>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800244c:	4013      	ands	r3, r2
 800244e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002458:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800245c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002460:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002462:	4a04      	ldr	r2, [pc, #16]	; (8002474 <__NVIC_SetPriorityGrouping+0x44>)
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	60d3      	str	r3, [r2, #12]
}
 8002468:	bf00      	nop
 800246a:	3714      	adds	r7, #20
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	e000ed00 	.word	0xe000ed00

08002478 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800247c:	4b04      	ldr	r3, [pc, #16]	; (8002490 <__NVIC_GetPriorityGrouping+0x18>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	0a1b      	lsrs	r3, r3, #8
 8002482:	f003 0307 	and.w	r3, r3, #7
}
 8002486:	4618      	mov	r0, r3
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr
 8002490:	e000ed00 	.word	0xe000ed00

08002494 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800249e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	db0b      	blt.n	80024be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024a6:	79fb      	ldrb	r3, [r7, #7]
 80024a8:	f003 021f 	and.w	r2, r3, #31
 80024ac:	4907      	ldr	r1, [pc, #28]	; (80024cc <__NVIC_EnableIRQ+0x38>)
 80024ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b2:	095b      	lsrs	r3, r3, #5
 80024b4:	2001      	movs	r0, #1
 80024b6:	fa00 f202 	lsl.w	r2, r0, r2
 80024ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	e000e100 	.word	0xe000e100

080024d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	6039      	str	r1, [r7, #0]
 80024da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	db0a      	blt.n	80024fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	b2da      	uxtb	r2, r3
 80024e8:	490c      	ldr	r1, [pc, #48]	; (800251c <__NVIC_SetPriority+0x4c>)
 80024ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ee:	0112      	lsls	r2, r2, #4
 80024f0:	b2d2      	uxtb	r2, r2
 80024f2:	440b      	add	r3, r1
 80024f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024f8:	e00a      	b.n	8002510 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	4908      	ldr	r1, [pc, #32]	; (8002520 <__NVIC_SetPriority+0x50>)
 8002500:	79fb      	ldrb	r3, [r7, #7]
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	3b04      	subs	r3, #4
 8002508:	0112      	lsls	r2, r2, #4
 800250a:	b2d2      	uxtb	r2, r2
 800250c:	440b      	add	r3, r1
 800250e:	761a      	strb	r2, [r3, #24]
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	e000e100 	.word	0xe000e100
 8002520:	e000ed00 	.word	0xe000ed00

08002524 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002524:	b480      	push	{r7}
 8002526:	b089      	sub	sp, #36	; 0x24
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	f1c3 0307 	rsb	r3, r3, #7
 800253e:	2b04      	cmp	r3, #4
 8002540:	bf28      	it	cs
 8002542:	2304      	movcs	r3, #4
 8002544:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	3304      	adds	r3, #4
 800254a:	2b06      	cmp	r3, #6
 800254c:	d902      	bls.n	8002554 <NVIC_EncodePriority+0x30>
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	3b03      	subs	r3, #3
 8002552:	e000      	b.n	8002556 <NVIC_EncodePriority+0x32>
 8002554:	2300      	movs	r3, #0
 8002556:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002558:	f04f 32ff 	mov.w	r2, #4294967295
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	43da      	mvns	r2, r3
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	401a      	ands	r2, r3
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800256c:	f04f 31ff 	mov.w	r1, #4294967295
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	fa01 f303 	lsl.w	r3, r1, r3
 8002576:	43d9      	mvns	r1, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800257c:	4313      	orrs	r3, r2
         );
}
 800257e:	4618      	mov	r0, r3
 8002580:	3724      	adds	r7, #36	; 0x24
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
	...

0800258c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3b01      	subs	r3, #1
 8002598:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800259c:	d301      	bcc.n	80025a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800259e:	2301      	movs	r3, #1
 80025a0:	e00f      	b.n	80025c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025a2:	4a0a      	ldr	r2, [pc, #40]	; (80025cc <SysTick_Config+0x40>)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3b01      	subs	r3, #1
 80025a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025aa:	210f      	movs	r1, #15
 80025ac:	f04f 30ff 	mov.w	r0, #4294967295
 80025b0:	f7ff ff8e 	bl	80024d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025b4:	4b05      	ldr	r3, [pc, #20]	; (80025cc <SysTick_Config+0x40>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025ba:	4b04      	ldr	r3, [pc, #16]	; (80025cc <SysTick_Config+0x40>)
 80025bc:	2207      	movs	r2, #7
 80025be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	e000e010 	.word	0xe000e010

080025d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f7ff ff29 	bl	8002430 <__NVIC_SetPriorityGrouping>
}
 80025de:	bf00      	nop
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b086      	sub	sp, #24
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	4603      	mov	r3, r0
 80025ee:	60b9      	str	r1, [r7, #8]
 80025f0:	607a      	str	r2, [r7, #4]
 80025f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025f4:	2300      	movs	r3, #0
 80025f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025f8:	f7ff ff3e 	bl	8002478 <__NVIC_GetPriorityGrouping>
 80025fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	68b9      	ldr	r1, [r7, #8]
 8002602:	6978      	ldr	r0, [r7, #20]
 8002604:	f7ff ff8e 	bl	8002524 <NVIC_EncodePriority>
 8002608:	4602      	mov	r2, r0
 800260a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800260e:	4611      	mov	r1, r2
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff ff5d 	bl	80024d0 <__NVIC_SetPriority>
}
 8002616:	bf00      	nop
 8002618:	3718      	adds	r7, #24
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b082      	sub	sp, #8
 8002622:	af00      	add	r7, sp, #0
 8002624:	4603      	mov	r3, r0
 8002626:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff ff31 	bl	8002494 <__NVIC_EnableIRQ>
}
 8002632:	bf00      	nop
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b082      	sub	sp, #8
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7ff ffa2 	bl	800258c <SysTick_Config>
 8002648:	4603      	mov	r3, r0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b084      	sub	sp, #16
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002660:	f7ff feda 	bl	8002418 <HAL_GetTick>
 8002664:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d008      	beq.n	8002684 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2280      	movs	r2, #128	; 0x80
 8002676:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e052      	b.n	800272a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 0216 	bic.w	r2, r2, #22
 8002692:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	695a      	ldr	r2, [r3, #20]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026a2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d103      	bne.n	80026b4 <HAL_DMA_Abort+0x62>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d007      	beq.n	80026c4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f022 0208 	bic.w	r2, r2, #8
 80026c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 0201 	bic.w	r2, r2, #1
 80026d2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026d4:	e013      	b.n	80026fe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026d6:	f7ff fe9f 	bl	8002418 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b05      	cmp	r3, #5
 80026e2:	d90c      	bls.n	80026fe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2220      	movs	r2, #32
 80026e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2203      	movs	r2, #3
 80026ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e015      	b.n	800272a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1e4      	bne.n	80026d6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002710:	223f      	movs	r2, #63	; 0x3f
 8002712:	409a      	lsls	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002732:	b480      	push	{r7}
 8002734:	b083      	sub	sp, #12
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d004      	beq.n	8002750 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2280      	movs	r2, #128	; 0x80
 800274a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e00c      	b.n	800276a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2205      	movs	r2, #5
 8002754:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 0201 	bic.w	r2, r2, #1
 8002766:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
	...

08002778 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002778:	b480      	push	{r7}
 800277a:	b089      	sub	sp, #36	; 0x24
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002782:	2300      	movs	r3, #0
 8002784:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002786:	2300      	movs	r3, #0
 8002788:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800278a:	2300      	movs	r3, #0
 800278c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800278e:	2300      	movs	r3, #0
 8002790:	61fb      	str	r3, [r7, #28]
 8002792:	e159      	b.n	8002a48 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002794:	2201      	movs	r2, #1
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	4013      	ands	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	f040 8148 	bne.w	8002a42 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f003 0303 	and.w	r3, r3, #3
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d005      	beq.n	80027ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d130      	bne.n	800282c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	2203      	movs	r2, #3
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	43db      	mvns	r3, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4013      	ands	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	68da      	ldr	r2, [r3, #12]
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002800:	2201      	movs	r2, #1
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	43db      	mvns	r3, r3
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4013      	ands	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	091b      	lsrs	r3, r3, #4
 8002816:	f003 0201 	and.w	r2, r3, #1
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	4313      	orrs	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f003 0303 	and.w	r3, r3, #3
 8002834:	2b03      	cmp	r3, #3
 8002836:	d017      	beq.n	8002868 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	2203      	movs	r2, #3
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	43db      	mvns	r3, r3
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	4013      	ands	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	689a      	ldr	r2, [r3, #8]
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	4313      	orrs	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f003 0303 	and.w	r3, r3, #3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d123      	bne.n	80028bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	08da      	lsrs	r2, r3, #3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3208      	adds	r2, #8
 800287c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002880:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	f003 0307 	and.w	r3, r3, #7
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	220f      	movs	r2, #15
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	43db      	mvns	r3, r3
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	4013      	ands	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	691a      	ldr	r2, [r3, #16]
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	08da      	lsrs	r2, r3, #3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	3208      	adds	r2, #8
 80028b6:	69b9      	ldr	r1, [r7, #24]
 80028b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	2203      	movs	r2, #3
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	43db      	mvns	r3, r3
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	4013      	ands	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f003 0203 	and.w	r2, r3, #3
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f000 80a2 	beq.w	8002a42 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028fe:	2300      	movs	r3, #0
 8002900:	60fb      	str	r3, [r7, #12]
 8002902:	4b57      	ldr	r3, [pc, #348]	; (8002a60 <HAL_GPIO_Init+0x2e8>)
 8002904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002906:	4a56      	ldr	r2, [pc, #344]	; (8002a60 <HAL_GPIO_Init+0x2e8>)
 8002908:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800290c:	6453      	str	r3, [r2, #68]	; 0x44
 800290e:	4b54      	ldr	r3, [pc, #336]	; (8002a60 <HAL_GPIO_Init+0x2e8>)
 8002910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002912:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002916:	60fb      	str	r3, [r7, #12]
 8002918:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800291a:	4a52      	ldr	r2, [pc, #328]	; (8002a64 <HAL_GPIO_Init+0x2ec>)
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	089b      	lsrs	r3, r3, #2
 8002920:	3302      	adds	r3, #2
 8002922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002926:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	f003 0303 	and.w	r3, r3, #3
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	220f      	movs	r2, #15
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	43db      	mvns	r3, r3
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	4013      	ands	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a49      	ldr	r2, [pc, #292]	; (8002a68 <HAL_GPIO_Init+0x2f0>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d019      	beq.n	800297a <HAL_GPIO_Init+0x202>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a48      	ldr	r2, [pc, #288]	; (8002a6c <HAL_GPIO_Init+0x2f4>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d013      	beq.n	8002976 <HAL_GPIO_Init+0x1fe>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a47      	ldr	r2, [pc, #284]	; (8002a70 <HAL_GPIO_Init+0x2f8>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d00d      	beq.n	8002972 <HAL_GPIO_Init+0x1fa>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a46      	ldr	r2, [pc, #280]	; (8002a74 <HAL_GPIO_Init+0x2fc>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d007      	beq.n	800296e <HAL_GPIO_Init+0x1f6>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a45      	ldr	r2, [pc, #276]	; (8002a78 <HAL_GPIO_Init+0x300>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d101      	bne.n	800296a <HAL_GPIO_Init+0x1f2>
 8002966:	2304      	movs	r3, #4
 8002968:	e008      	b.n	800297c <HAL_GPIO_Init+0x204>
 800296a:	2307      	movs	r3, #7
 800296c:	e006      	b.n	800297c <HAL_GPIO_Init+0x204>
 800296e:	2303      	movs	r3, #3
 8002970:	e004      	b.n	800297c <HAL_GPIO_Init+0x204>
 8002972:	2302      	movs	r3, #2
 8002974:	e002      	b.n	800297c <HAL_GPIO_Init+0x204>
 8002976:	2301      	movs	r3, #1
 8002978:	e000      	b.n	800297c <HAL_GPIO_Init+0x204>
 800297a:	2300      	movs	r3, #0
 800297c:	69fa      	ldr	r2, [r7, #28]
 800297e:	f002 0203 	and.w	r2, r2, #3
 8002982:	0092      	lsls	r2, r2, #2
 8002984:	4093      	lsls	r3, r2
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	4313      	orrs	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800298c:	4935      	ldr	r1, [pc, #212]	; (8002a64 <HAL_GPIO_Init+0x2ec>)
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	089b      	lsrs	r3, r3, #2
 8002992:	3302      	adds	r3, #2
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800299a:	4b38      	ldr	r3, [pc, #224]	; (8002a7c <HAL_GPIO_Init+0x304>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	43db      	mvns	r3, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4013      	ands	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029be:	4a2f      	ldr	r2, [pc, #188]	; (8002a7c <HAL_GPIO_Init+0x304>)
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029c4:	4b2d      	ldr	r3, [pc, #180]	; (8002a7c <HAL_GPIO_Init+0x304>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	43db      	mvns	r3, r3
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4013      	ands	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d003      	beq.n	80029e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029e8:	4a24      	ldr	r2, [pc, #144]	; (8002a7c <HAL_GPIO_Init+0x304>)
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029ee:	4b23      	ldr	r3, [pc, #140]	; (8002a7c <HAL_GPIO_Init+0x304>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	43db      	mvns	r3, r3
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	4013      	ands	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a12:	4a1a      	ldr	r2, [pc, #104]	; (8002a7c <HAL_GPIO_Init+0x304>)
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a18:	4b18      	ldr	r3, [pc, #96]	; (8002a7c <HAL_GPIO_Init+0x304>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	43db      	mvns	r3, r3
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	4013      	ands	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d003      	beq.n	8002a3c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a3c:	4a0f      	ldr	r2, [pc, #60]	; (8002a7c <HAL_GPIO_Init+0x304>)
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	3301      	adds	r3, #1
 8002a46:	61fb      	str	r3, [r7, #28]
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	2b0f      	cmp	r3, #15
 8002a4c:	f67f aea2 	bls.w	8002794 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a50:	bf00      	nop
 8002a52:	bf00      	nop
 8002a54:	3724      	adds	r7, #36	; 0x24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	40023800 	.word	0x40023800
 8002a64:	40013800 	.word	0x40013800
 8002a68:	40020000 	.word	0x40020000
 8002a6c:	40020400 	.word	0x40020400
 8002a70:	40020800 	.word	0x40020800
 8002a74:	40020c00 	.word	0x40020c00
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	40013c00 	.word	0x40013c00

08002a80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	460b      	mov	r3, r1
 8002a8a:	807b      	strh	r3, [r7, #2]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a90:	787b      	ldrb	r3, [r7, #1]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a96:	887a      	ldrh	r2, [r7, #2]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a9c:	e003      	b.n	8002aa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a9e:	887b      	ldrh	r3, [r7, #2]
 8002aa0:	041a      	lsls	r2, r3, #16
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	619a      	str	r2, [r3, #24]
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
	...

08002ab4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	4603      	mov	r3, r0
 8002abc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002abe:	4b08      	ldr	r3, [pc, #32]	; (8002ae0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ac0:	695a      	ldr	r2, [r3, #20]
 8002ac2:	88fb      	ldrh	r3, [r7, #6]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d006      	beq.n	8002ad8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002aca:	4a05      	ldr	r2, [pc, #20]	; (8002ae0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002acc:	88fb      	ldrh	r3, [r7, #6]
 8002ace:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ad0:	88fb      	ldrh	r3, [r7, #6]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7ff f83e 	bl	8001b54 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ad8:	bf00      	nop
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40013c00 	.word	0x40013c00

08002ae4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e12b      	b.n	8002d4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d106      	bne.n	8002b10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7fe fe52 	bl	80017b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2224      	movs	r2, #36	; 0x24
 8002b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 0201 	bic.w	r2, r2, #1
 8002b26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b48:	f001 fbf2 	bl	8004330 <HAL_RCC_GetPCLK1Freq>
 8002b4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	4a81      	ldr	r2, [pc, #516]	; (8002d58 <HAL_I2C_Init+0x274>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d807      	bhi.n	8002b68 <HAL_I2C_Init+0x84>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	4a80      	ldr	r2, [pc, #512]	; (8002d5c <HAL_I2C_Init+0x278>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	bf94      	ite	ls
 8002b60:	2301      	movls	r3, #1
 8002b62:	2300      	movhi	r3, #0
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	e006      	b.n	8002b76 <HAL_I2C_Init+0x92>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4a7d      	ldr	r2, [pc, #500]	; (8002d60 <HAL_I2C_Init+0x27c>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	bf94      	ite	ls
 8002b70:	2301      	movls	r3, #1
 8002b72:	2300      	movhi	r3, #0
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e0e7      	b.n	8002d4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	4a78      	ldr	r2, [pc, #480]	; (8002d64 <HAL_I2C_Init+0x280>)
 8002b82:	fba2 2303 	umull	r2, r3, r2, r3
 8002b86:	0c9b      	lsrs	r3, r3, #18
 8002b88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68ba      	ldr	r2, [r7, #8]
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	4a6a      	ldr	r2, [pc, #424]	; (8002d58 <HAL_I2C_Init+0x274>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d802      	bhi.n	8002bb8 <HAL_I2C_Init+0xd4>
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	e009      	b.n	8002bcc <HAL_I2C_Init+0xe8>
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002bbe:	fb02 f303 	mul.w	r3, r2, r3
 8002bc2:	4a69      	ldr	r2, [pc, #420]	; (8002d68 <HAL_I2C_Init+0x284>)
 8002bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc8:	099b      	lsrs	r3, r3, #6
 8002bca:	3301      	adds	r3, #1
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6812      	ldr	r2, [r2, #0]
 8002bd0:	430b      	orrs	r3, r1
 8002bd2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	69db      	ldr	r3, [r3, #28]
 8002bda:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002bde:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	495c      	ldr	r1, [pc, #368]	; (8002d58 <HAL_I2C_Init+0x274>)
 8002be8:	428b      	cmp	r3, r1
 8002bea:	d819      	bhi.n	8002c20 <HAL_I2C_Init+0x13c>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	1e59      	subs	r1, r3, #1
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bfa:	1c59      	adds	r1, r3, #1
 8002bfc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002c00:	400b      	ands	r3, r1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00a      	beq.n	8002c1c <HAL_I2C_Init+0x138>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	1e59      	subs	r1, r3, #1
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c14:	3301      	adds	r3, #1
 8002c16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c1a:	e051      	b.n	8002cc0 <HAL_I2C_Init+0x1dc>
 8002c1c:	2304      	movs	r3, #4
 8002c1e:	e04f      	b.n	8002cc0 <HAL_I2C_Init+0x1dc>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d111      	bne.n	8002c4c <HAL_I2C_Init+0x168>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	1e58      	subs	r0, r3, #1
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6859      	ldr	r1, [r3, #4]
 8002c30:	460b      	mov	r3, r1
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	440b      	add	r3, r1
 8002c36:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	bf0c      	ite	eq
 8002c44:	2301      	moveq	r3, #1
 8002c46:	2300      	movne	r3, #0
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	e012      	b.n	8002c72 <HAL_I2C_Init+0x18e>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	1e58      	subs	r0, r3, #1
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6859      	ldr	r1, [r3, #4]
 8002c54:	460b      	mov	r3, r1
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	440b      	add	r3, r1
 8002c5a:	0099      	lsls	r1, r3, #2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c62:	3301      	adds	r3, #1
 8002c64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	bf0c      	ite	eq
 8002c6c:	2301      	moveq	r3, #1
 8002c6e:	2300      	movne	r3, #0
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <HAL_I2C_Init+0x196>
 8002c76:	2301      	movs	r3, #1
 8002c78:	e022      	b.n	8002cc0 <HAL_I2C_Init+0x1dc>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10e      	bne.n	8002ca0 <HAL_I2C_Init+0x1bc>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	1e58      	subs	r0, r3, #1
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6859      	ldr	r1, [r3, #4]
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	440b      	add	r3, r1
 8002c90:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c94:	3301      	adds	r3, #1
 8002c96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c9e:	e00f      	b.n	8002cc0 <HAL_I2C_Init+0x1dc>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	1e58      	subs	r0, r3, #1
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6859      	ldr	r1, [r3, #4]
 8002ca8:	460b      	mov	r3, r1
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	440b      	add	r3, r1
 8002cae:	0099      	lsls	r1, r3, #2
 8002cb0:	440b      	add	r3, r1
 8002cb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cc0:	6879      	ldr	r1, [r7, #4]
 8002cc2:	6809      	ldr	r1, [r1, #0]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	69da      	ldr	r2, [r3, #28]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002cee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	6911      	ldr	r1, [r2, #16]
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	68d2      	ldr	r2, [r2, #12]
 8002cfa:	4311      	orrs	r1, r2
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	6812      	ldr	r2, [r2, #0]
 8002d00:	430b      	orrs	r3, r1
 8002d02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	695a      	ldr	r2, [r3, #20]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	431a      	orrs	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f042 0201 	orr.w	r2, r2, #1
 8002d2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2220      	movs	r2, #32
 8002d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	000186a0 	.word	0x000186a0
 8002d5c:	001e847f 	.word	0x001e847f
 8002d60:	003d08ff 	.word	0x003d08ff
 8002d64:	431bde83 	.word	0x431bde83
 8002d68:	10624dd3 	.word	0x10624dd3

08002d6c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b088      	sub	sp, #32
 8002d70:	af02      	add	r7, sp, #8
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	4608      	mov	r0, r1
 8002d76:	4611      	mov	r1, r2
 8002d78:	461a      	mov	r2, r3
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	817b      	strh	r3, [r7, #10]
 8002d7e:	460b      	mov	r3, r1
 8002d80:	813b      	strh	r3, [r7, #8]
 8002d82:	4613      	mov	r3, r2
 8002d84:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d86:	f7ff fb47 	bl	8002418 <HAL_GetTick>
 8002d8a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b20      	cmp	r3, #32
 8002d96:	f040 80d9 	bne.w	8002f4c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	9300      	str	r3, [sp, #0]
 8002d9e:	2319      	movs	r3, #25
 8002da0:	2201      	movs	r2, #1
 8002da2:	496d      	ldr	r1, [pc, #436]	; (8002f58 <HAL_I2C_Mem_Write+0x1ec>)
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f000 fc7f 	bl	80036a8 <I2C_WaitOnFlagUntilTimeout>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002db0:	2302      	movs	r3, #2
 8002db2:	e0cc      	b.n	8002f4e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d101      	bne.n	8002dc2 <HAL_I2C_Mem_Write+0x56>
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	e0c5      	b.n	8002f4e <HAL_I2C_Mem_Write+0x1e2>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d007      	beq.n	8002de8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f042 0201 	orr.w	r2, r2, #1
 8002de6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002df6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2221      	movs	r2, #33	; 0x21
 8002dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2240      	movs	r2, #64	; 0x40
 8002e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6a3a      	ldr	r2, [r7, #32]
 8002e12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	4a4d      	ldr	r2, [pc, #308]	; (8002f5c <HAL_I2C_Mem_Write+0x1f0>)
 8002e28:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e2a:	88f8      	ldrh	r0, [r7, #6]
 8002e2c:	893a      	ldrh	r2, [r7, #8]
 8002e2e:	8979      	ldrh	r1, [r7, #10]
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	9301      	str	r3, [sp, #4]
 8002e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e36:	9300      	str	r3, [sp, #0]
 8002e38:	4603      	mov	r3, r0
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f000 fab6 	bl	80033ac <I2C_RequestMemoryWrite>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d052      	beq.n	8002eec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e081      	b.n	8002f4e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f000 fd00 	bl	8003854 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00d      	beq.n	8002e76 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	d107      	bne.n	8002e72 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e70:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e06b      	b.n	8002f4e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7a:	781a      	ldrb	r2, [r3, #0]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e86:	1c5a      	adds	r2, r3, #1
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e90:	3b01      	subs	r3, #1
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	f003 0304 	and.w	r3, r3, #4
 8002eb0:	2b04      	cmp	r3, #4
 8002eb2:	d11b      	bne.n	8002eec <HAL_I2C_Mem_Write+0x180>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d017      	beq.n	8002eec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec0:	781a      	ldrb	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ecc:	1c5a      	adds	r2, r3, #1
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1aa      	bne.n	8002e4a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f000 fcec 	bl	80038d6 <I2C_WaitOnBTFFlagUntilTimeout>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00d      	beq.n	8002f20 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f08:	2b04      	cmp	r3, #4
 8002f0a:	d107      	bne.n	8002f1c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f1a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e016      	b.n	8002f4e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2220      	movs	r2, #32
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	e000      	b.n	8002f4e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002f4c:	2302      	movs	r3, #2
  }
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3718      	adds	r7, #24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	00100002 	.word	0x00100002
 8002f5c:	ffff0000 	.word	0xffff0000

08002f60 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b08c      	sub	sp, #48	; 0x30
 8002f64:	af02      	add	r7, sp, #8
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	4608      	mov	r0, r1
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	4603      	mov	r3, r0
 8002f70:	817b      	strh	r3, [r7, #10]
 8002f72:	460b      	mov	r3, r1
 8002f74:	813b      	strh	r3, [r7, #8]
 8002f76:	4613      	mov	r3, r2
 8002f78:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f7a:	f7ff fa4d 	bl	8002418 <HAL_GetTick>
 8002f7e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	2b20      	cmp	r3, #32
 8002f8a:	f040 8208 	bne.w	800339e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	2319      	movs	r3, #25
 8002f94:	2201      	movs	r2, #1
 8002f96:	497b      	ldr	r1, [pc, #492]	; (8003184 <HAL_I2C_Mem_Read+0x224>)
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f000 fb85 	bl	80036a8 <I2C_WaitOnFlagUntilTimeout>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	e1fb      	b.n	80033a0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d101      	bne.n	8002fb6 <HAL_I2C_Mem_Read+0x56>
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	e1f4      	b.n	80033a0 <HAL_I2C_Mem_Read+0x440>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d007      	beq.n	8002fdc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f042 0201 	orr.w	r2, r2, #1
 8002fda:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2222      	movs	r2, #34	; 0x22
 8002ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2240      	movs	r2, #64	; 0x40
 8002ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003006:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800300c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003012:	b29a      	uxth	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	4a5b      	ldr	r2, [pc, #364]	; (8003188 <HAL_I2C_Mem_Read+0x228>)
 800301c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800301e:	88f8      	ldrh	r0, [r7, #6]
 8003020:	893a      	ldrh	r2, [r7, #8]
 8003022:	8979      	ldrh	r1, [r7, #10]
 8003024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003026:	9301      	str	r3, [sp, #4]
 8003028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800302a:	9300      	str	r3, [sp, #0]
 800302c:	4603      	mov	r3, r0
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f000 fa52 	bl	80034d8 <I2C_RequestMemoryRead>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e1b0      	b.n	80033a0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003042:	2b00      	cmp	r3, #0
 8003044:	d113      	bne.n	800306e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003046:	2300      	movs	r3, #0
 8003048:	623b      	str	r3, [r7, #32]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	623b      	str	r3, [r7, #32]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	623b      	str	r3, [r7, #32]
 800305a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800306a:	601a      	str	r2, [r3, #0]
 800306c:	e184      	b.n	8003378 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003072:	2b01      	cmp	r3, #1
 8003074:	d11b      	bne.n	80030ae <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003084:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003086:	2300      	movs	r3, #0
 8003088:	61fb      	str	r3, [r7, #28]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	61fb      	str	r3, [r7, #28]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	61fb      	str	r3, [r7, #28]
 800309a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	e164      	b.n	8003378 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d11b      	bne.n	80030ee <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030c4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030d6:	2300      	movs	r3, #0
 80030d8:	61bb      	str	r3, [r7, #24]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	695b      	ldr	r3, [r3, #20]
 80030e0:	61bb      	str	r3, [r7, #24]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	61bb      	str	r3, [r7, #24]
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	e144      	b.n	8003378 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ee:	2300      	movs	r3, #0
 80030f0:	617b      	str	r3, [r7, #20]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	617b      	str	r3, [r7, #20]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	617b      	str	r3, [r7, #20]
 8003102:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003104:	e138      	b.n	8003378 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800310a:	2b03      	cmp	r3, #3
 800310c:	f200 80f1 	bhi.w	80032f2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003114:	2b01      	cmp	r3, #1
 8003116:	d123      	bne.n	8003160 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800311a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f000 fc1b 	bl	8003958 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e139      	b.n	80033a0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	691a      	ldr	r2, [r3, #16]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003136:	b2d2      	uxtb	r2, r2
 8003138:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313e:	1c5a      	adds	r2, r3, #1
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003148:	3b01      	subs	r3, #1
 800314a:	b29a      	uxth	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003154:	b29b      	uxth	r3, r3
 8003156:	3b01      	subs	r3, #1
 8003158:	b29a      	uxth	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800315e:	e10b      	b.n	8003378 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003164:	2b02      	cmp	r3, #2
 8003166:	d14e      	bne.n	8003206 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316a:	9300      	str	r3, [sp, #0]
 800316c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800316e:	2200      	movs	r2, #0
 8003170:	4906      	ldr	r1, [pc, #24]	; (800318c <HAL_I2C_Mem_Read+0x22c>)
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f000 fa98 	bl	80036a8 <I2C_WaitOnFlagUntilTimeout>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d008      	beq.n	8003190 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e10e      	b.n	80033a0 <HAL_I2C_Mem_Read+0x440>
 8003182:	bf00      	nop
 8003184:	00100002 	.word	0x00100002
 8003188:	ffff0000 	.word	0xffff0000
 800318c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800319e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	691a      	ldr	r2, [r3, #16]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031aa:	b2d2      	uxtb	r2, r2
 80031ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b2:	1c5a      	adds	r2, r3, #1
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031bc:	3b01      	subs	r3, #1
 80031be:	b29a      	uxth	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	3b01      	subs	r3, #1
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	691a      	ldr	r2, [r3, #16]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031dc:	b2d2      	uxtb	r2, r2
 80031de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e4:	1c5a      	adds	r2, r3, #1
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ee:	3b01      	subs	r3, #1
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	3b01      	subs	r3, #1
 80031fe:	b29a      	uxth	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003204:	e0b8      	b.n	8003378 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003208:	9300      	str	r3, [sp, #0]
 800320a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800320c:	2200      	movs	r2, #0
 800320e:	4966      	ldr	r1, [pc, #408]	; (80033a8 <HAL_I2C_Mem_Read+0x448>)
 8003210:	68f8      	ldr	r0, [r7, #12]
 8003212:	f000 fa49 	bl	80036a8 <I2C_WaitOnFlagUntilTimeout>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d001      	beq.n	8003220 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e0bf      	b.n	80033a0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800322e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	691a      	ldr	r2, [r3, #16]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323a:	b2d2      	uxtb	r2, r2
 800323c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003242:	1c5a      	adds	r2, r3, #1
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800324c:	3b01      	subs	r3, #1
 800324e:	b29a      	uxth	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003258:	b29b      	uxth	r3, r3
 800325a:	3b01      	subs	r3, #1
 800325c:	b29a      	uxth	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003264:	9300      	str	r3, [sp, #0]
 8003266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003268:	2200      	movs	r2, #0
 800326a:	494f      	ldr	r1, [pc, #316]	; (80033a8 <HAL_I2C_Mem_Read+0x448>)
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f000 fa1b 	bl	80036a8 <I2C_WaitOnFlagUntilTimeout>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e091      	b.n	80033a0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800328a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	691a      	ldr	r2, [r3, #16]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003296:	b2d2      	uxtb	r2, r2
 8003298:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329e:	1c5a      	adds	r2, r3, #1
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	3b01      	subs	r3, #1
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	691a      	ldr	r2, [r3, #16]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c8:	b2d2      	uxtb	r2, r2
 80032ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d0:	1c5a      	adds	r2, r3, #1
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032da:	3b01      	subs	r3, #1
 80032dc:	b29a      	uxth	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	3b01      	subs	r3, #1
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032f0:	e042      	b.n	8003378 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f000 fb2e 	bl	8003958 <I2C_WaitOnRXNEFlagUntilTimeout>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e04c      	b.n	80033a0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	691a      	ldr	r2, [r3, #16]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003310:	b2d2      	uxtb	r2, r2
 8003312:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003318:	1c5a      	adds	r2, r3, #1
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003322:	3b01      	subs	r3, #1
 8003324:	b29a      	uxth	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800332e:	b29b      	uxth	r3, r3
 8003330:	3b01      	subs	r3, #1
 8003332:	b29a      	uxth	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	f003 0304 	and.w	r3, r3, #4
 8003342:	2b04      	cmp	r3, #4
 8003344:	d118      	bne.n	8003378 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	691a      	ldr	r2, [r3, #16]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003350:	b2d2      	uxtb	r2, r2
 8003352:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	1c5a      	adds	r2, r3, #1
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003362:	3b01      	subs	r3, #1
 8003364:	b29a      	uxth	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800336e:	b29b      	uxth	r3, r3
 8003370:	3b01      	subs	r3, #1
 8003372:	b29a      	uxth	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800337c:	2b00      	cmp	r3, #0
 800337e:	f47f aec2 	bne.w	8003106 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2220      	movs	r2, #32
 8003386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800339a:	2300      	movs	r3, #0
 800339c:	e000      	b.n	80033a0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800339e:	2302      	movs	r3, #2
  }
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3728      	adds	r7, #40	; 0x28
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	00010004 	.word	0x00010004

080033ac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b088      	sub	sp, #32
 80033b0:	af02      	add	r7, sp, #8
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	4608      	mov	r0, r1
 80033b6:	4611      	mov	r1, r2
 80033b8:	461a      	mov	r2, r3
 80033ba:	4603      	mov	r3, r0
 80033bc:	817b      	strh	r3, [r7, #10]
 80033be:	460b      	mov	r3, r1
 80033c0:	813b      	strh	r3, [r7, #8]
 80033c2:	4613      	mov	r3, r2
 80033c4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	9300      	str	r3, [sp, #0]
 80033da:	6a3b      	ldr	r3, [r7, #32]
 80033dc:	2200      	movs	r2, #0
 80033de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033e2:	68f8      	ldr	r0, [r7, #12]
 80033e4:	f000 f960 	bl	80036a8 <I2C_WaitOnFlagUntilTimeout>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00d      	beq.n	800340a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033fc:	d103      	bne.n	8003406 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003404:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e05f      	b.n	80034ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800340a:	897b      	ldrh	r3, [r7, #10]
 800340c:	b2db      	uxtb	r3, r3
 800340e:	461a      	mov	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003418:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341c:	6a3a      	ldr	r2, [r7, #32]
 800341e:	492d      	ldr	r1, [pc, #180]	; (80034d4 <I2C_RequestMemoryWrite+0x128>)
 8003420:	68f8      	ldr	r0, [r7, #12]
 8003422:	f000 f998 	bl	8003756 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e04c      	b.n	80034ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003430:	2300      	movs	r3, #0
 8003432:	617b      	str	r3, [r7, #20]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	617b      	str	r3, [r7, #20]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	617b      	str	r3, [r7, #20]
 8003444:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003448:	6a39      	ldr	r1, [r7, #32]
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 fa02 	bl	8003854 <I2C_WaitOnTXEFlagUntilTimeout>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00d      	beq.n	8003472 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	2b04      	cmp	r3, #4
 800345c:	d107      	bne.n	800346e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800346c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e02b      	b.n	80034ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003472:	88fb      	ldrh	r3, [r7, #6]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d105      	bne.n	8003484 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003478:	893b      	ldrh	r3, [r7, #8]
 800347a:	b2da      	uxtb	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	611a      	str	r2, [r3, #16]
 8003482:	e021      	b.n	80034c8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003484:	893b      	ldrh	r3, [r7, #8]
 8003486:	0a1b      	lsrs	r3, r3, #8
 8003488:	b29b      	uxth	r3, r3
 800348a:	b2da      	uxtb	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003494:	6a39      	ldr	r1, [r7, #32]
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f000 f9dc 	bl	8003854 <I2C_WaitOnTXEFlagUntilTimeout>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00d      	beq.n	80034be <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	d107      	bne.n	80034ba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e005      	b.n	80034ca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034be:	893b      	ldrh	r3, [r7, #8]
 80034c0:	b2da      	uxtb	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3718      	adds	r7, #24
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	00010002 	.word	0x00010002

080034d8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b088      	sub	sp, #32
 80034dc:	af02      	add	r7, sp, #8
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	4608      	mov	r0, r1
 80034e2:	4611      	mov	r1, r2
 80034e4:	461a      	mov	r2, r3
 80034e6:	4603      	mov	r3, r0
 80034e8:	817b      	strh	r3, [r7, #10]
 80034ea:	460b      	mov	r3, r1
 80034ec:	813b      	strh	r3, [r7, #8]
 80034ee:	4613      	mov	r3, r2
 80034f0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003500:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003510:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	6a3b      	ldr	r3, [r7, #32]
 8003518:	2200      	movs	r2, #0
 800351a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f000 f8c2 	bl	80036a8 <I2C_WaitOnFlagUntilTimeout>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00d      	beq.n	8003546 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003534:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003538:	d103      	bne.n	8003542 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003540:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e0aa      	b.n	800369c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003546:	897b      	ldrh	r3, [r7, #10]
 8003548:	b2db      	uxtb	r3, r3
 800354a:	461a      	mov	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003554:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003558:	6a3a      	ldr	r2, [r7, #32]
 800355a:	4952      	ldr	r1, [pc, #328]	; (80036a4 <I2C_RequestMemoryRead+0x1cc>)
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f000 f8fa 	bl	8003756 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e097      	b.n	800369c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800356c:	2300      	movs	r3, #0
 800356e:	617b      	str	r3, [r7, #20]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	617b      	str	r3, [r7, #20]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	617b      	str	r3, [r7, #20]
 8003580:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003584:	6a39      	ldr	r1, [r7, #32]
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f000 f964 	bl	8003854 <I2C_WaitOnTXEFlagUntilTimeout>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00d      	beq.n	80035ae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	2b04      	cmp	r3, #4
 8003598:	d107      	bne.n	80035aa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e076      	b.n	800369c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035ae:	88fb      	ldrh	r3, [r7, #6]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d105      	bne.n	80035c0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035b4:	893b      	ldrh	r3, [r7, #8]
 80035b6:	b2da      	uxtb	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	611a      	str	r2, [r3, #16]
 80035be:	e021      	b.n	8003604 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80035c0:	893b      	ldrh	r3, [r7, #8]
 80035c2:	0a1b      	lsrs	r3, r3, #8
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	b2da      	uxtb	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d0:	6a39      	ldr	r1, [r7, #32]
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f000 f93e 	bl	8003854 <I2C_WaitOnTXEFlagUntilTimeout>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00d      	beq.n	80035fa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	2b04      	cmp	r3, #4
 80035e4:	d107      	bne.n	80035f6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e050      	b.n	800369c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035fa:	893b      	ldrh	r3, [r7, #8]
 80035fc:	b2da      	uxtb	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003606:	6a39      	ldr	r1, [r7, #32]
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	f000 f923 	bl	8003854 <I2C_WaitOnTXEFlagUntilTimeout>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00d      	beq.n	8003630 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003618:	2b04      	cmp	r3, #4
 800361a:	d107      	bne.n	800362c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800362a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e035      	b.n	800369c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800363e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	9300      	str	r3, [sp, #0]
 8003644:	6a3b      	ldr	r3, [r7, #32]
 8003646:	2200      	movs	r2, #0
 8003648:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	f000 f82b 	bl	80036a8 <I2C_WaitOnFlagUntilTimeout>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00d      	beq.n	8003674 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003666:	d103      	bne.n	8003670 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800366e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e013      	b.n	800369c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003674:	897b      	ldrh	r3, [r7, #10]
 8003676:	b2db      	uxtb	r3, r3
 8003678:	f043 0301 	orr.w	r3, r3, #1
 800367c:	b2da      	uxtb	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003686:	6a3a      	ldr	r2, [r7, #32]
 8003688:	4906      	ldr	r1, [pc, #24]	; (80036a4 <I2C_RequestMemoryRead+0x1cc>)
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	f000 f863 	bl	8003756 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e000      	b.n	800369c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	3718      	adds	r7, #24
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	00010002 	.word	0x00010002

080036a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	603b      	str	r3, [r7, #0]
 80036b4:	4613      	mov	r3, r2
 80036b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036b8:	e025      	b.n	8003706 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c0:	d021      	beq.n	8003706 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036c2:	f7fe fea9 	bl	8002418 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d302      	bcc.n	80036d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d116      	bne.n	8003706 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2220      	movs	r2, #32
 80036e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	f043 0220 	orr.w	r2, r3, #32
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e023      	b.n	800374e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	0c1b      	lsrs	r3, r3, #16
 800370a:	b2db      	uxtb	r3, r3
 800370c:	2b01      	cmp	r3, #1
 800370e:	d10d      	bne.n	800372c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	43da      	mvns	r2, r3
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	4013      	ands	r3, r2
 800371c:	b29b      	uxth	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	bf0c      	ite	eq
 8003722:	2301      	moveq	r3, #1
 8003724:	2300      	movne	r3, #0
 8003726:	b2db      	uxtb	r3, r3
 8003728:	461a      	mov	r2, r3
 800372a:	e00c      	b.n	8003746 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	43da      	mvns	r2, r3
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	4013      	ands	r3, r2
 8003738:	b29b      	uxth	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	bf0c      	ite	eq
 800373e:	2301      	moveq	r3, #1
 8003740:	2300      	movne	r3, #0
 8003742:	b2db      	uxtb	r3, r3
 8003744:	461a      	mov	r2, r3
 8003746:	79fb      	ldrb	r3, [r7, #7]
 8003748:	429a      	cmp	r2, r3
 800374a:	d0b6      	beq.n	80036ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b084      	sub	sp, #16
 800375a:	af00      	add	r7, sp, #0
 800375c:	60f8      	str	r0, [r7, #12]
 800375e:	60b9      	str	r1, [r7, #8]
 8003760:	607a      	str	r2, [r7, #4]
 8003762:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003764:	e051      	b.n	800380a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	695b      	ldr	r3, [r3, #20]
 800376c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003770:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003774:	d123      	bne.n	80037be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003784:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800378e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2220      	movs	r2, #32
 800379a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	f043 0204 	orr.w	r2, r3, #4
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e046      	b.n	800384c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c4:	d021      	beq.n	800380a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037c6:	f7fe fe27 	bl	8002418 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d302      	bcc.n	80037dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d116      	bne.n	800380a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2220      	movs	r2, #32
 80037e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	f043 0220 	orr.w	r2, r3, #32
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e020      	b.n	800384c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	0c1b      	lsrs	r3, r3, #16
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b01      	cmp	r3, #1
 8003812:	d10c      	bne.n	800382e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	43da      	mvns	r2, r3
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	4013      	ands	r3, r2
 8003820:	b29b      	uxth	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	bf14      	ite	ne
 8003826:	2301      	movne	r3, #1
 8003828:	2300      	moveq	r3, #0
 800382a:	b2db      	uxtb	r3, r3
 800382c:	e00b      	b.n	8003846 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	43da      	mvns	r2, r3
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	4013      	ands	r3, r2
 800383a:	b29b      	uxth	r3, r3
 800383c:	2b00      	cmp	r3, #0
 800383e:	bf14      	ite	ne
 8003840:	2301      	movne	r3, #1
 8003842:	2300      	moveq	r3, #0
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d18d      	bne.n	8003766 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003860:	e02d      	b.n	80038be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f000 f8ce 	bl	8003a04 <I2C_IsAcknowledgeFailed>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e02d      	b.n	80038ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003878:	d021      	beq.n	80038be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800387a:	f7fe fdcd 	bl	8002418 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	429a      	cmp	r2, r3
 8003888:	d302      	bcc.n	8003890 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d116      	bne.n	80038be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2220      	movs	r2, #32
 800389a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038aa:	f043 0220 	orr.w	r2, r3, #32
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e007      	b.n	80038ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c8:	2b80      	cmp	r3, #128	; 0x80
 80038ca:	d1ca      	bne.n	8003862 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b084      	sub	sp, #16
 80038da:	af00      	add	r7, sp, #0
 80038dc:	60f8      	str	r0, [r7, #12]
 80038de:	60b9      	str	r1, [r7, #8]
 80038e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038e2:	e02d      	b.n	8003940 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f000 f88d 	bl	8003a04 <I2C_IsAcknowledgeFailed>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e02d      	b.n	8003950 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038fa:	d021      	beq.n	8003940 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038fc:	f7fe fd8c 	bl	8002418 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	429a      	cmp	r2, r3
 800390a:	d302      	bcc.n	8003912 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d116      	bne.n	8003940 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2220      	movs	r2, #32
 800391c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392c:	f043 0220 	orr.w	r2, r3, #32
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e007      	b.n	8003950 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	f003 0304 	and.w	r3, r3, #4
 800394a:	2b04      	cmp	r3, #4
 800394c:	d1ca      	bne.n	80038e4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3710      	adds	r7, #16
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003964:	e042      	b.n	80039ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	f003 0310 	and.w	r3, r3, #16
 8003970:	2b10      	cmp	r3, #16
 8003972:	d119      	bne.n	80039a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f06f 0210 	mvn.w	r2, #16
 800397c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2220      	movs	r2, #32
 8003988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e029      	b.n	80039fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039a8:	f7fe fd36 	bl	8002418 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d302      	bcc.n	80039be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d116      	bne.n	80039ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2220      	movs	r2, #32
 80039c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d8:	f043 0220 	orr.w	r2, r3, #32
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e007      	b.n	80039fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f6:	2b40      	cmp	r3, #64	; 0x40
 80039f8:	d1b5      	bne.n	8003966 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3710      	adds	r7, #16
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a1a:	d11b      	bne.n	8003a54 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a24:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2220      	movs	r2, #32
 8003a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a40:	f043 0204 	orr.w	r2, r3, #4
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e000      	b.n	8003a56 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
	...

08003a64 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8003a68:	4b06      	ldr	r3, [pc, #24]	; (8003a84 <HAL_PWR_PVD_IRQHandler+0x20>)
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d005      	beq.n	8003a80 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8003a74:	f000 f808 	bl	8003a88 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8003a78:	4b02      	ldr	r3, [pc, #8]	; (8003a84 <HAL_PWR_PVD_IRQHandler+0x20>)
 8003a7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003a7e:	615a      	str	r2, [r3, #20]
  }
}
 8003a80:	bf00      	nop
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	40013c00 	.word	0x40013c00

08003a88 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8003a8c:	bf00      	nop
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
	...

08003a98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e264      	b.n	8003f74 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d075      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ab6:	4ba3      	ldr	r3, [pc, #652]	; (8003d44 <HAL_RCC_OscConfig+0x2ac>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 030c 	and.w	r3, r3, #12
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	d00c      	beq.n	8003adc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ac2:	4ba0      	ldr	r3, [pc, #640]	; (8003d44 <HAL_RCC_OscConfig+0x2ac>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003aca:	2b08      	cmp	r3, #8
 8003acc:	d112      	bne.n	8003af4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ace:	4b9d      	ldr	r3, [pc, #628]	; (8003d44 <HAL_RCC_OscConfig+0x2ac>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ad6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ada:	d10b      	bne.n	8003af4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003adc:	4b99      	ldr	r3, [pc, #612]	; (8003d44 <HAL_RCC_OscConfig+0x2ac>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d05b      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x108>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d157      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e23f      	b.n	8003f74 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003afc:	d106      	bne.n	8003b0c <HAL_RCC_OscConfig+0x74>
 8003afe:	4b91      	ldr	r3, [pc, #580]	; (8003d44 <HAL_RCC_OscConfig+0x2ac>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a90      	ldr	r2, [pc, #576]	; (8003d44 <HAL_RCC_OscConfig+0x2ac>)
 8003b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b08:	6013      	str	r3, [r2, #0]
 8003b0a:	e01d      	b.n	8003b48 <HAL_RCC_OscConfig+0xb0>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b14:	d10c      	bne.n	8003b30 <HAL_RCC_OscConfig+0x98>
 8003b16:	4b8b      	ldr	r3, [pc, #556]	; (8003d44 <HAL_RCC_OscConfig+0x2ac>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a8a      	ldr	r2, [pc, #552]	; (8003d44 <HAL_RCC_OscConfig+0x2ac>)
 8003b1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b20:	6013      	str	r3, [r2, #0]
 8003b22:	4b88      	ldr	r3, [pc, #544]	; (8003d44 <HAL_RCC_OscConfig+0x2ac>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a87      	ldr	r2, [pc, #540]	; (8003d44 <HAL_RCC_OscConfig+0x2ac>)
 8003b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b2c:	6013      	str	r3, [r2, #0]
 8003b2e:	e00b      	b.n	8003b48 <HAL_RCC_OscConfig+0xb0>
 8003b30:	4b84      	ldr	r3, [pc, #528]	; (8003d44 <HAL_RCC_OscConfig+0x2ac>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a83      	ldr	r2, [pc, #524]	; (8003d44 <HAL_RCC_OscConfig+0x2ac>)
 8003b36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b3a:	6013      	str	r3, [r2, #0]
 8003b3c:	4b81      	ldr	r3, [pc, #516]	; (8003d44 <HAL_RCC_OscConfig+0x2ac>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a80      	ldr	r2, [pc, #512]	; (8003d44 <HAL_RCC_OscConfig+0x2ac>)
 8003b42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d013      	beq.n	8003b78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b50:	f7fe fc62 	bl	8002418 <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b56:	e008      	b.n	8003b6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b58:	f7fe fc5e 	bl	8002418 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b64      	cmp	r3, #100	; 0x64
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e204      	b.n	8003f74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b6a:	4b76      	ldr	r3, [pc, #472]	; (8003d44 <HAL_RCC_OscConfig+0x2ac>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d0f0      	beq.n	8003b58 <HAL_RCC_OscConfig+0xc0>
 8003b76:	e014      	b.n	8003ba2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b78:	f7fe fc4e 	bl	8002418 <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b80:	f7fe fc4a 	bl	8002418 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b64      	cmp	r3, #100	; 0x64
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e1f0      	b.n	8003f74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b92:	4b6c      	ldr	r3, [pc, #432]	; (8003d44 <HAL_RCC_OscConfig+0x2ac>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1f0      	bne.n	8003b80 <HAL_RCC_OscConfig+0xe8>
 8003b9e:	e000      	b.n	8003ba2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ba0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d063      	beq.n	8003c76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bae:	4b65      	ldr	r3, [pc, #404]	; (8003d44 <HAL_RCC_OscConfig+0x2ac>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f003 030c 	and.w	r3, r3, #12
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00b      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bba:	4b62      	ldr	r3, [pc, #392]	; (8003d44 <HAL_RCC_OscConfig+0x2ac>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bc2:	2b08      	cmp	r3, #8
 8003bc4:	d11c      	bne.n	8003c00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bc6:	4b5f      	ldr	r3, [pc, #380]	; (8003d44 <HAL_RCC_OscConfig+0x2ac>)
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d116      	bne.n	8003c00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bd2:	4b5c      	ldr	r3, [pc, #368]	; (8003d44 <HAL_RCC_OscConfig+0x2ac>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d005      	beq.n	8003bea <HAL_RCC_OscConfig+0x152>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d001      	beq.n	8003bea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e1c4      	b.n	8003f74 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bea:	4b56      	ldr	r3, [pc, #344]	; (8003d44 <HAL_RCC_OscConfig+0x2ac>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	4952      	ldr	r1, [pc, #328]	; (8003d44 <HAL_RCC_OscConfig+0x2ac>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bfe:	e03a      	b.n	8003c76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d020      	beq.n	8003c4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c08:	4b4f      	ldr	r3, [pc, #316]	; (8003d48 <HAL_RCC_OscConfig+0x2b0>)
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c0e:	f7fe fc03 	bl	8002418 <HAL_GetTick>
 8003c12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c14:	e008      	b.n	8003c28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c16:	f7fe fbff 	bl	8002418 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d901      	bls.n	8003c28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e1a5      	b.n	8003f74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c28:	4b46      	ldr	r3, [pc, #280]	; (8003d44 <HAL_RCC_OscConfig+0x2ac>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d0f0      	beq.n	8003c16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c34:	4b43      	ldr	r3, [pc, #268]	; (8003d44 <HAL_RCC_OscConfig+0x2ac>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	00db      	lsls	r3, r3, #3
 8003c42:	4940      	ldr	r1, [pc, #256]	; (8003d44 <HAL_RCC_OscConfig+0x2ac>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	600b      	str	r3, [r1, #0]
 8003c48:	e015      	b.n	8003c76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c4a:	4b3f      	ldr	r3, [pc, #252]	; (8003d48 <HAL_RCC_OscConfig+0x2b0>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c50:	f7fe fbe2 	bl	8002418 <HAL_GetTick>
 8003c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c58:	f7fe fbde 	bl	8002418 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e184      	b.n	8003f74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c6a:	4b36      	ldr	r3, [pc, #216]	; (8003d44 <HAL_RCC_OscConfig+0x2ac>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1f0      	bne.n	8003c58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0308 	and.w	r3, r3, #8
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d030      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d016      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c8a:	4b30      	ldr	r3, [pc, #192]	; (8003d4c <HAL_RCC_OscConfig+0x2b4>)
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c90:	f7fe fbc2 	bl	8002418 <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c98:	f7fe fbbe 	bl	8002418 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e164      	b.n	8003f74 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003caa:	4b26      	ldr	r3, [pc, #152]	; (8003d44 <HAL_RCC_OscConfig+0x2ac>)
 8003cac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d0f0      	beq.n	8003c98 <HAL_RCC_OscConfig+0x200>
 8003cb6:	e015      	b.n	8003ce4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cb8:	4b24      	ldr	r3, [pc, #144]	; (8003d4c <HAL_RCC_OscConfig+0x2b4>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cbe:	f7fe fbab 	bl	8002418 <HAL_GetTick>
 8003cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cc4:	e008      	b.n	8003cd8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cc6:	f7fe fba7 	bl	8002418 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d901      	bls.n	8003cd8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e14d      	b.n	8003f74 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cd8:	4b1a      	ldr	r3, [pc, #104]	; (8003d44 <HAL_RCC_OscConfig+0x2ac>)
 8003cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1f0      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0304 	and.w	r3, r3, #4
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f000 80a0 	beq.w	8003e32 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cf6:	4b13      	ldr	r3, [pc, #76]	; (8003d44 <HAL_RCC_OscConfig+0x2ac>)
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10f      	bne.n	8003d22 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d02:	2300      	movs	r3, #0
 8003d04:	60bb      	str	r3, [r7, #8]
 8003d06:	4b0f      	ldr	r3, [pc, #60]	; (8003d44 <HAL_RCC_OscConfig+0x2ac>)
 8003d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0a:	4a0e      	ldr	r2, [pc, #56]	; (8003d44 <HAL_RCC_OscConfig+0x2ac>)
 8003d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d10:	6413      	str	r3, [r2, #64]	; 0x40
 8003d12:	4b0c      	ldr	r3, [pc, #48]	; (8003d44 <HAL_RCC_OscConfig+0x2ac>)
 8003d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d1a:	60bb      	str	r3, [r7, #8]
 8003d1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d22:	4b0b      	ldr	r3, [pc, #44]	; (8003d50 <HAL_RCC_OscConfig+0x2b8>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d121      	bne.n	8003d72 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d2e:	4b08      	ldr	r3, [pc, #32]	; (8003d50 <HAL_RCC_OscConfig+0x2b8>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a07      	ldr	r2, [pc, #28]	; (8003d50 <HAL_RCC_OscConfig+0x2b8>)
 8003d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d3a:	f7fe fb6d 	bl	8002418 <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d40:	e011      	b.n	8003d66 <HAL_RCC_OscConfig+0x2ce>
 8003d42:	bf00      	nop
 8003d44:	40023800 	.word	0x40023800
 8003d48:	42470000 	.word	0x42470000
 8003d4c:	42470e80 	.word	0x42470e80
 8003d50:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d54:	f7fe fb60 	bl	8002418 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e106      	b.n	8003f74 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d66:	4b85      	ldr	r3, [pc, #532]	; (8003f7c <HAL_RCC_OscConfig+0x4e4>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d0f0      	beq.n	8003d54 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d106      	bne.n	8003d88 <HAL_RCC_OscConfig+0x2f0>
 8003d7a:	4b81      	ldr	r3, [pc, #516]	; (8003f80 <HAL_RCC_OscConfig+0x4e8>)
 8003d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7e:	4a80      	ldr	r2, [pc, #512]	; (8003f80 <HAL_RCC_OscConfig+0x4e8>)
 8003d80:	f043 0301 	orr.w	r3, r3, #1
 8003d84:	6713      	str	r3, [r2, #112]	; 0x70
 8003d86:	e01c      	b.n	8003dc2 <HAL_RCC_OscConfig+0x32a>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	2b05      	cmp	r3, #5
 8003d8e:	d10c      	bne.n	8003daa <HAL_RCC_OscConfig+0x312>
 8003d90:	4b7b      	ldr	r3, [pc, #492]	; (8003f80 <HAL_RCC_OscConfig+0x4e8>)
 8003d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d94:	4a7a      	ldr	r2, [pc, #488]	; (8003f80 <HAL_RCC_OscConfig+0x4e8>)
 8003d96:	f043 0304 	orr.w	r3, r3, #4
 8003d9a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d9c:	4b78      	ldr	r3, [pc, #480]	; (8003f80 <HAL_RCC_OscConfig+0x4e8>)
 8003d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da0:	4a77      	ldr	r2, [pc, #476]	; (8003f80 <HAL_RCC_OscConfig+0x4e8>)
 8003da2:	f043 0301 	orr.w	r3, r3, #1
 8003da6:	6713      	str	r3, [r2, #112]	; 0x70
 8003da8:	e00b      	b.n	8003dc2 <HAL_RCC_OscConfig+0x32a>
 8003daa:	4b75      	ldr	r3, [pc, #468]	; (8003f80 <HAL_RCC_OscConfig+0x4e8>)
 8003dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dae:	4a74      	ldr	r2, [pc, #464]	; (8003f80 <HAL_RCC_OscConfig+0x4e8>)
 8003db0:	f023 0301 	bic.w	r3, r3, #1
 8003db4:	6713      	str	r3, [r2, #112]	; 0x70
 8003db6:	4b72      	ldr	r3, [pc, #456]	; (8003f80 <HAL_RCC_OscConfig+0x4e8>)
 8003db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dba:	4a71      	ldr	r2, [pc, #452]	; (8003f80 <HAL_RCC_OscConfig+0x4e8>)
 8003dbc:	f023 0304 	bic.w	r3, r3, #4
 8003dc0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d015      	beq.n	8003df6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dca:	f7fe fb25 	bl	8002418 <HAL_GetTick>
 8003dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dd0:	e00a      	b.n	8003de8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dd2:	f7fe fb21 	bl	8002418 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d901      	bls.n	8003de8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e0c5      	b.n	8003f74 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003de8:	4b65      	ldr	r3, [pc, #404]	; (8003f80 <HAL_RCC_OscConfig+0x4e8>)
 8003dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d0ee      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x33a>
 8003df4:	e014      	b.n	8003e20 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003df6:	f7fe fb0f 	bl	8002418 <HAL_GetTick>
 8003dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dfc:	e00a      	b.n	8003e14 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dfe:	f7fe fb0b 	bl	8002418 <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e0af      	b.n	8003f74 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e14:	4b5a      	ldr	r3, [pc, #360]	; (8003f80 <HAL_RCC_OscConfig+0x4e8>)
 8003e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1ee      	bne.n	8003dfe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e20:	7dfb      	ldrb	r3, [r7, #23]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d105      	bne.n	8003e32 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e26:	4b56      	ldr	r3, [pc, #344]	; (8003f80 <HAL_RCC_OscConfig+0x4e8>)
 8003e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2a:	4a55      	ldr	r2, [pc, #340]	; (8003f80 <HAL_RCC_OscConfig+0x4e8>)
 8003e2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e30:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f000 809b 	beq.w	8003f72 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e3c:	4b50      	ldr	r3, [pc, #320]	; (8003f80 <HAL_RCC_OscConfig+0x4e8>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f003 030c 	and.w	r3, r3, #12
 8003e44:	2b08      	cmp	r3, #8
 8003e46:	d05c      	beq.n	8003f02 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d141      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e50:	4b4c      	ldr	r3, [pc, #304]	; (8003f84 <HAL_RCC_OscConfig+0x4ec>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e56:	f7fe fadf 	bl	8002418 <HAL_GetTick>
 8003e5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e5c:	e008      	b.n	8003e70 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e5e:	f7fe fadb 	bl	8002418 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d901      	bls.n	8003e70 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e081      	b.n	8003f74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e70:	4b43      	ldr	r3, [pc, #268]	; (8003f80 <HAL_RCC_OscConfig+0x4e8>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1f0      	bne.n	8003e5e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	69da      	ldr	r2, [r3, #28]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	431a      	orrs	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8a:	019b      	lsls	r3, r3, #6
 8003e8c:	431a      	orrs	r2, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e92:	085b      	lsrs	r3, r3, #1
 8003e94:	3b01      	subs	r3, #1
 8003e96:	041b      	lsls	r3, r3, #16
 8003e98:	431a      	orrs	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9e:	061b      	lsls	r3, r3, #24
 8003ea0:	4937      	ldr	r1, [pc, #220]	; (8003f80 <HAL_RCC_OscConfig+0x4e8>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ea6:	4b37      	ldr	r3, [pc, #220]	; (8003f84 <HAL_RCC_OscConfig+0x4ec>)
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eac:	f7fe fab4 	bl	8002418 <HAL_GetTick>
 8003eb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eb4:	f7fe fab0 	bl	8002418 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e056      	b.n	8003f74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ec6:	4b2e      	ldr	r3, [pc, #184]	; (8003f80 <HAL_RCC_OscConfig+0x4e8>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d0f0      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x41c>
 8003ed2:	e04e      	b.n	8003f72 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ed4:	4b2b      	ldr	r3, [pc, #172]	; (8003f84 <HAL_RCC_OscConfig+0x4ec>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eda:	f7fe fa9d 	bl	8002418 <HAL_GetTick>
 8003ede:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ee0:	e008      	b.n	8003ef4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ee2:	f7fe fa99 	bl	8002418 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d901      	bls.n	8003ef4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e03f      	b.n	8003f74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ef4:	4b22      	ldr	r3, [pc, #136]	; (8003f80 <HAL_RCC_OscConfig+0x4e8>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1f0      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x44a>
 8003f00:	e037      	b.n	8003f72 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d101      	bne.n	8003f0e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e032      	b.n	8003f74 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f0e:	4b1c      	ldr	r3, [pc, #112]	; (8003f80 <HAL_RCC_OscConfig+0x4e8>)
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d028      	beq.n	8003f6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d121      	bne.n	8003f6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d11a      	bne.n	8003f6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f3e:	4013      	ands	r3, r2
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f44:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d111      	bne.n	8003f6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f54:	085b      	lsrs	r3, r3, #1
 8003f56:	3b01      	subs	r3, #1
 8003f58:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d107      	bne.n	8003f6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f68:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d001      	beq.n	8003f72 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e000      	b.n	8003f74 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3718      	adds	r7, #24
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	40007000 	.word	0x40007000
 8003f80:	40023800 	.word	0x40023800
 8003f84:	42470060 	.word	0x42470060

08003f88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e0cc      	b.n	8004136 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f9c:	4b68      	ldr	r3, [pc, #416]	; (8004140 <HAL_RCC_ClockConfig+0x1b8>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0307 	and.w	r3, r3, #7
 8003fa4:	683a      	ldr	r2, [r7, #0]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d90c      	bls.n	8003fc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003faa:	4b65      	ldr	r3, [pc, #404]	; (8004140 <HAL_RCC_ClockConfig+0x1b8>)
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	b2d2      	uxtb	r2, r2
 8003fb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fb2:	4b63      	ldr	r3, [pc, #396]	; (8004140 <HAL_RCC_ClockConfig+0x1b8>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0307 	and.w	r3, r3, #7
 8003fba:	683a      	ldr	r2, [r7, #0]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d001      	beq.n	8003fc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e0b8      	b.n	8004136 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d020      	beq.n	8004012 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0304 	and.w	r3, r3, #4
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d005      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fdc:	4b59      	ldr	r3, [pc, #356]	; (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	4a58      	ldr	r2, [pc, #352]	; (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fe6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0308 	and.w	r3, r3, #8
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d005      	beq.n	8004000 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ff4:	4b53      	ldr	r3, [pc, #332]	; (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	4a52      	ldr	r2, [pc, #328]	; (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ffe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004000:	4b50      	ldr	r3, [pc, #320]	; (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	494d      	ldr	r1, [pc, #308]	; (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 800400e:	4313      	orrs	r3, r2
 8004010:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d044      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d107      	bne.n	8004036 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004026:	4b47      	ldr	r3, [pc, #284]	; (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d119      	bne.n	8004066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e07f      	b.n	8004136 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	2b02      	cmp	r3, #2
 800403c:	d003      	beq.n	8004046 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004042:	2b03      	cmp	r3, #3
 8004044:	d107      	bne.n	8004056 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004046:	4b3f      	ldr	r3, [pc, #252]	; (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d109      	bne.n	8004066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e06f      	b.n	8004136 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004056:	4b3b      	ldr	r3, [pc, #236]	; (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e067      	b.n	8004136 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004066:	4b37      	ldr	r3, [pc, #220]	; (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f023 0203 	bic.w	r2, r3, #3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	4934      	ldr	r1, [pc, #208]	; (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8004074:	4313      	orrs	r3, r2
 8004076:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004078:	f7fe f9ce 	bl	8002418 <HAL_GetTick>
 800407c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800407e:	e00a      	b.n	8004096 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004080:	f7fe f9ca 	bl	8002418 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	f241 3288 	movw	r2, #5000	; 0x1388
 800408e:	4293      	cmp	r3, r2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e04f      	b.n	8004136 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004096:	4b2b      	ldr	r3, [pc, #172]	; (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f003 020c 	and.w	r2, r3, #12
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d1eb      	bne.n	8004080 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040a8:	4b25      	ldr	r3, [pc, #148]	; (8004140 <HAL_RCC_ClockConfig+0x1b8>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0307 	and.w	r3, r3, #7
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d20c      	bcs.n	80040d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040b6:	4b22      	ldr	r3, [pc, #136]	; (8004140 <HAL_RCC_ClockConfig+0x1b8>)
 80040b8:	683a      	ldr	r2, [r7, #0]
 80040ba:	b2d2      	uxtb	r2, r2
 80040bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040be:	4b20      	ldr	r3, [pc, #128]	; (8004140 <HAL_RCC_ClockConfig+0x1b8>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0307 	and.w	r3, r3, #7
 80040c6:	683a      	ldr	r2, [r7, #0]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d001      	beq.n	80040d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e032      	b.n	8004136 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0304 	and.w	r3, r3, #4
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d008      	beq.n	80040ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040dc:	4b19      	ldr	r3, [pc, #100]	; (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	4916      	ldr	r1, [pc, #88]	; (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0308 	and.w	r3, r3, #8
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d009      	beq.n	800410e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040fa:	4b12      	ldr	r3, [pc, #72]	; (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	490e      	ldr	r1, [pc, #56]	; (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 800410a:	4313      	orrs	r3, r2
 800410c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800410e:	f000 f821 	bl	8004154 <HAL_RCC_GetSysClockFreq>
 8004112:	4602      	mov	r2, r0
 8004114:	4b0b      	ldr	r3, [pc, #44]	; (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	091b      	lsrs	r3, r3, #4
 800411a:	f003 030f 	and.w	r3, r3, #15
 800411e:	490a      	ldr	r1, [pc, #40]	; (8004148 <HAL_RCC_ClockConfig+0x1c0>)
 8004120:	5ccb      	ldrb	r3, [r1, r3]
 8004122:	fa22 f303 	lsr.w	r3, r2, r3
 8004126:	4a09      	ldr	r2, [pc, #36]	; (800414c <HAL_RCC_ClockConfig+0x1c4>)
 8004128:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800412a:	4b09      	ldr	r3, [pc, #36]	; (8004150 <HAL_RCC_ClockConfig+0x1c8>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4618      	mov	r0, r3
 8004130:	f7fe f92e 	bl	8002390 <HAL_InitTick>

  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	40023c00 	.word	0x40023c00
 8004144:	40023800 	.word	0x40023800
 8004148:	080090bc 	.word	0x080090bc
 800414c:	20000000 	.word	0x20000000
 8004150:	20000004 	.word	0x20000004

08004154 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004154:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004158:	b084      	sub	sp, #16
 800415a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800415c:	2300      	movs	r3, #0
 800415e:	607b      	str	r3, [r7, #4]
 8004160:	2300      	movs	r3, #0
 8004162:	60fb      	str	r3, [r7, #12]
 8004164:	2300      	movs	r3, #0
 8004166:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004168:	2300      	movs	r3, #0
 800416a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800416c:	4b67      	ldr	r3, [pc, #412]	; (800430c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f003 030c 	and.w	r3, r3, #12
 8004174:	2b08      	cmp	r3, #8
 8004176:	d00d      	beq.n	8004194 <HAL_RCC_GetSysClockFreq+0x40>
 8004178:	2b08      	cmp	r3, #8
 800417a:	f200 80bd 	bhi.w	80042f8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800417e:	2b00      	cmp	r3, #0
 8004180:	d002      	beq.n	8004188 <HAL_RCC_GetSysClockFreq+0x34>
 8004182:	2b04      	cmp	r3, #4
 8004184:	d003      	beq.n	800418e <HAL_RCC_GetSysClockFreq+0x3a>
 8004186:	e0b7      	b.n	80042f8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004188:	4b61      	ldr	r3, [pc, #388]	; (8004310 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800418a:	60bb      	str	r3, [r7, #8]
       break;
 800418c:	e0b7      	b.n	80042fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800418e:	4b61      	ldr	r3, [pc, #388]	; (8004314 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004190:	60bb      	str	r3, [r7, #8]
      break;
 8004192:	e0b4      	b.n	80042fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004194:	4b5d      	ldr	r3, [pc, #372]	; (800430c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800419c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800419e:	4b5b      	ldr	r3, [pc, #364]	; (800430c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d04d      	beq.n	8004246 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041aa:	4b58      	ldr	r3, [pc, #352]	; (800430c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	099b      	lsrs	r3, r3, #6
 80041b0:	461a      	mov	r2, r3
 80041b2:	f04f 0300 	mov.w	r3, #0
 80041b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80041ba:	f04f 0100 	mov.w	r1, #0
 80041be:	ea02 0800 	and.w	r8, r2, r0
 80041c2:	ea03 0901 	and.w	r9, r3, r1
 80041c6:	4640      	mov	r0, r8
 80041c8:	4649      	mov	r1, r9
 80041ca:	f04f 0200 	mov.w	r2, #0
 80041ce:	f04f 0300 	mov.w	r3, #0
 80041d2:	014b      	lsls	r3, r1, #5
 80041d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80041d8:	0142      	lsls	r2, r0, #5
 80041da:	4610      	mov	r0, r2
 80041dc:	4619      	mov	r1, r3
 80041de:	ebb0 0008 	subs.w	r0, r0, r8
 80041e2:	eb61 0109 	sbc.w	r1, r1, r9
 80041e6:	f04f 0200 	mov.w	r2, #0
 80041ea:	f04f 0300 	mov.w	r3, #0
 80041ee:	018b      	lsls	r3, r1, #6
 80041f0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80041f4:	0182      	lsls	r2, r0, #6
 80041f6:	1a12      	subs	r2, r2, r0
 80041f8:	eb63 0301 	sbc.w	r3, r3, r1
 80041fc:	f04f 0000 	mov.w	r0, #0
 8004200:	f04f 0100 	mov.w	r1, #0
 8004204:	00d9      	lsls	r1, r3, #3
 8004206:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800420a:	00d0      	lsls	r0, r2, #3
 800420c:	4602      	mov	r2, r0
 800420e:	460b      	mov	r3, r1
 8004210:	eb12 0208 	adds.w	r2, r2, r8
 8004214:	eb43 0309 	adc.w	r3, r3, r9
 8004218:	f04f 0000 	mov.w	r0, #0
 800421c:	f04f 0100 	mov.w	r1, #0
 8004220:	0259      	lsls	r1, r3, #9
 8004222:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004226:	0250      	lsls	r0, r2, #9
 8004228:	4602      	mov	r2, r0
 800422a:	460b      	mov	r3, r1
 800422c:	4610      	mov	r0, r2
 800422e:	4619      	mov	r1, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	461a      	mov	r2, r3
 8004234:	f04f 0300 	mov.w	r3, #0
 8004238:	f7fc fcde 	bl	8000bf8 <__aeabi_uldivmod>
 800423c:	4602      	mov	r2, r0
 800423e:	460b      	mov	r3, r1
 8004240:	4613      	mov	r3, r2
 8004242:	60fb      	str	r3, [r7, #12]
 8004244:	e04a      	b.n	80042dc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004246:	4b31      	ldr	r3, [pc, #196]	; (800430c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	099b      	lsrs	r3, r3, #6
 800424c:	461a      	mov	r2, r3
 800424e:	f04f 0300 	mov.w	r3, #0
 8004252:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004256:	f04f 0100 	mov.w	r1, #0
 800425a:	ea02 0400 	and.w	r4, r2, r0
 800425e:	ea03 0501 	and.w	r5, r3, r1
 8004262:	4620      	mov	r0, r4
 8004264:	4629      	mov	r1, r5
 8004266:	f04f 0200 	mov.w	r2, #0
 800426a:	f04f 0300 	mov.w	r3, #0
 800426e:	014b      	lsls	r3, r1, #5
 8004270:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004274:	0142      	lsls	r2, r0, #5
 8004276:	4610      	mov	r0, r2
 8004278:	4619      	mov	r1, r3
 800427a:	1b00      	subs	r0, r0, r4
 800427c:	eb61 0105 	sbc.w	r1, r1, r5
 8004280:	f04f 0200 	mov.w	r2, #0
 8004284:	f04f 0300 	mov.w	r3, #0
 8004288:	018b      	lsls	r3, r1, #6
 800428a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800428e:	0182      	lsls	r2, r0, #6
 8004290:	1a12      	subs	r2, r2, r0
 8004292:	eb63 0301 	sbc.w	r3, r3, r1
 8004296:	f04f 0000 	mov.w	r0, #0
 800429a:	f04f 0100 	mov.w	r1, #0
 800429e:	00d9      	lsls	r1, r3, #3
 80042a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042a4:	00d0      	lsls	r0, r2, #3
 80042a6:	4602      	mov	r2, r0
 80042a8:	460b      	mov	r3, r1
 80042aa:	1912      	adds	r2, r2, r4
 80042ac:	eb45 0303 	adc.w	r3, r5, r3
 80042b0:	f04f 0000 	mov.w	r0, #0
 80042b4:	f04f 0100 	mov.w	r1, #0
 80042b8:	0299      	lsls	r1, r3, #10
 80042ba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80042be:	0290      	lsls	r0, r2, #10
 80042c0:	4602      	mov	r2, r0
 80042c2:	460b      	mov	r3, r1
 80042c4:	4610      	mov	r0, r2
 80042c6:	4619      	mov	r1, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	461a      	mov	r2, r3
 80042cc:	f04f 0300 	mov.w	r3, #0
 80042d0:	f7fc fc92 	bl	8000bf8 <__aeabi_uldivmod>
 80042d4:	4602      	mov	r2, r0
 80042d6:	460b      	mov	r3, r1
 80042d8:	4613      	mov	r3, r2
 80042da:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042dc:	4b0b      	ldr	r3, [pc, #44]	; (800430c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	0c1b      	lsrs	r3, r3, #16
 80042e2:	f003 0303 	and.w	r3, r3, #3
 80042e6:	3301      	adds	r3, #1
 80042e8:	005b      	lsls	r3, r3, #1
 80042ea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f4:	60bb      	str	r3, [r7, #8]
      break;
 80042f6:	e002      	b.n	80042fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042f8:	4b05      	ldr	r3, [pc, #20]	; (8004310 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80042fa:	60bb      	str	r3, [r7, #8]
      break;
 80042fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042fe:	68bb      	ldr	r3, [r7, #8]
}
 8004300:	4618      	mov	r0, r3
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800430a:	bf00      	nop
 800430c:	40023800 	.word	0x40023800
 8004310:	00f42400 	.word	0x00f42400
 8004314:	007a1200 	.word	0x007a1200

08004318 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004318:	b480      	push	{r7}
 800431a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800431c:	4b03      	ldr	r3, [pc, #12]	; (800432c <HAL_RCC_GetHCLKFreq+0x14>)
 800431e:	681b      	ldr	r3, [r3, #0]
}
 8004320:	4618      	mov	r0, r3
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	20000000 	.word	0x20000000

08004330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004334:	f7ff fff0 	bl	8004318 <HAL_RCC_GetHCLKFreq>
 8004338:	4602      	mov	r2, r0
 800433a:	4b05      	ldr	r3, [pc, #20]	; (8004350 <HAL_RCC_GetPCLK1Freq+0x20>)
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	0a9b      	lsrs	r3, r3, #10
 8004340:	f003 0307 	and.w	r3, r3, #7
 8004344:	4903      	ldr	r1, [pc, #12]	; (8004354 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004346:	5ccb      	ldrb	r3, [r1, r3]
 8004348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800434c:	4618      	mov	r0, r3
 800434e:	bd80      	pop	{r7, pc}
 8004350:	40023800 	.word	0x40023800
 8004354:	080090cc 	.word	0x080090cc

08004358 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800435c:	f7ff ffdc 	bl	8004318 <HAL_RCC_GetHCLKFreq>
 8004360:	4602      	mov	r2, r0
 8004362:	4b05      	ldr	r3, [pc, #20]	; (8004378 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	0b5b      	lsrs	r3, r3, #13
 8004368:	f003 0307 	and.w	r3, r3, #7
 800436c:	4903      	ldr	r1, [pc, #12]	; (800437c <HAL_RCC_GetPCLK2Freq+0x24>)
 800436e:	5ccb      	ldrb	r3, [r1, r3]
 8004370:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004374:	4618      	mov	r0, r3
 8004376:	bd80      	pop	{r7, pc}
 8004378:	40023800 	.word	0x40023800
 800437c:	080090cc 	.word	0x080090cc

08004380 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e041      	b.n	8004416 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d106      	bne.n	80043ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f7fd fe14 	bl	8001fd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2202      	movs	r2, #2
 80043b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	3304      	adds	r3, #4
 80043bc:	4619      	mov	r1, r3
 80043be:	4610      	mov	r0, r2
 80043c0:	f000 fc54 	bl	8004c6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3708      	adds	r7, #8
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
	...

08004420 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b01      	cmp	r3, #1
 8004432:	d001      	beq.n	8004438 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e044      	b.n	80044c2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2202      	movs	r2, #2
 800443c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68da      	ldr	r2, [r3, #12]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f042 0201 	orr.w	r2, r2, #1
 800444e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a1e      	ldr	r2, [pc, #120]	; (80044d0 <HAL_TIM_Base_Start_IT+0xb0>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d018      	beq.n	800448c <HAL_TIM_Base_Start_IT+0x6c>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004462:	d013      	beq.n	800448c <HAL_TIM_Base_Start_IT+0x6c>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a1a      	ldr	r2, [pc, #104]	; (80044d4 <HAL_TIM_Base_Start_IT+0xb4>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d00e      	beq.n	800448c <HAL_TIM_Base_Start_IT+0x6c>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a19      	ldr	r2, [pc, #100]	; (80044d8 <HAL_TIM_Base_Start_IT+0xb8>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d009      	beq.n	800448c <HAL_TIM_Base_Start_IT+0x6c>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a17      	ldr	r2, [pc, #92]	; (80044dc <HAL_TIM_Base_Start_IT+0xbc>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d004      	beq.n	800448c <HAL_TIM_Base_Start_IT+0x6c>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a16      	ldr	r2, [pc, #88]	; (80044e0 <HAL_TIM_Base_Start_IT+0xc0>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d111      	bne.n	80044b0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f003 0307 	and.w	r3, r3, #7
 8004496:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2b06      	cmp	r3, #6
 800449c:	d010      	beq.n	80044c0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f042 0201 	orr.w	r2, r2, #1
 80044ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ae:	e007      	b.n	80044c0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f042 0201 	orr.w	r2, r2, #1
 80044be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3714      	adds	r7, #20
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	40010000 	.word	0x40010000
 80044d4:	40000400 	.word	0x40000400
 80044d8:	40000800 	.word	0x40000800
 80044dc:	40000c00 	.word	0x40000c00
 80044e0:	40014000 	.word	0x40014000

080044e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e041      	b.n	800457a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d106      	bne.n	8004510 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f839 	bl	8004582 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2202      	movs	r2, #2
 8004514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	3304      	adds	r3, #4
 8004520:	4619      	mov	r1, r3
 8004522:	4610      	mov	r0, r2
 8004524:	f000 fba2 	bl	8004c6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3708      	adds	r7, #8
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}

08004582 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004582:	b480      	push	{r7}
 8004584:	b083      	sub	sp, #12
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800458a:	bf00      	nop
 800458c:	370c      	adds	r7, #12
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
	...

08004598 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d109      	bne.n	80045bc <HAL_TIM_PWM_Start+0x24>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	bf14      	ite	ne
 80045b4:	2301      	movne	r3, #1
 80045b6:	2300      	moveq	r3, #0
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	e022      	b.n	8004602 <HAL_TIM_PWM_Start+0x6a>
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	2b04      	cmp	r3, #4
 80045c0:	d109      	bne.n	80045d6 <HAL_TIM_PWM_Start+0x3e>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	bf14      	ite	ne
 80045ce:	2301      	movne	r3, #1
 80045d0:	2300      	moveq	r3, #0
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	e015      	b.n	8004602 <HAL_TIM_PWM_Start+0x6a>
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	2b08      	cmp	r3, #8
 80045da:	d109      	bne.n	80045f0 <HAL_TIM_PWM_Start+0x58>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	bf14      	ite	ne
 80045e8:	2301      	movne	r3, #1
 80045ea:	2300      	moveq	r3, #0
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	e008      	b.n	8004602 <HAL_TIM_PWM_Start+0x6a>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	bf14      	ite	ne
 80045fc:	2301      	movne	r3, #1
 80045fe:	2300      	moveq	r3, #0
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d001      	beq.n	800460a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e068      	b.n	80046dc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d104      	bne.n	800461a <HAL_TIM_PWM_Start+0x82>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2202      	movs	r2, #2
 8004614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004618:	e013      	b.n	8004642 <HAL_TIM_PWM_Start+0xaa>
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	2b04      	cmp	r3, #4
 800461e:	d104      	bne.n	800462a <HAL_TIM_PWM_Start+0x92>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2202      	movs	r2, #2
 8004624:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004628:	e00b      	b.n	8004642 <HAL_TIM_PWM_Start+0xaa>
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	2b08      	cmp	r3, #8
 800462e:	d104      	bne.n	800463a <HAL_TIM_PWM_Start+0xa2>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2202      	movs	r2, #2
 8004634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004638:	e003      	b.n	8004642 <HAL_TIM_PWM_Start+0xaa>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2202      	movs	r2, #2
 800463e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2201      	movs	r2, #1
 8004648:	6839      	ldr	r1, [r7, #0]
 800464a:	4618      	mov	r0, r3
 800464c:	f000 fdb4 	bl	80051b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a23      	ldr	r2, [pc, #140]	; (80046e4 <HAL_TIM_PWM_Start+0x14c>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d107      	bne.n	800466a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004668:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a1d      	ldr	r2, [pc, #116]	; (80046e4 <HAL_TIM_PWM_Start+0x14c>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d018      	beq.n	80046a6 <HAL_TIM_PWM_Start+0x10e>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800467c:	d013      	beq.n	80046a6 <HAL_TIM_PWM_Start+0x10e>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a19      	ldr	r2, [pc, #100]	; (80046e8 <HAL_TIM_PWM_Start+0x150>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d00e      	beq.n	80046a6 <HAL_TIM_PWM_Start+0x10e>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a17      	ldr	r2, [pc, #92]	; (80046ec <HAL_TIM_PWM_Start+0x154>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d009      	beq.n	80046a6 <HAL_TIM_PWM_Start+0x10e>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a16      	ldr	r2, [pc, #88]	; (80046f0 <HAL_TIM_PWM_Start+0x158>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d004      	beq.n	80046a6 <HAL_TIM_PWM_Start+0x10e>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a14      	ldr	r2, [pc, #80]	; (80046f4 <HAL_TIM_PWM_Start+0x15c>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d111      	bne.n	80046ca <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f003 0307 	and.w	r3, r3, #7
 80046b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2b06      	cmp	r3, #6
 80046b6:	d010      	beq.n	80046da <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f042 0201 	orr.w	r2, r2, #1
 80046c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046c8:	e007      	b.n	80046da <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f042 0201 	orr.w	r2, r2, #1
 80046d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3710      	adds	r7, #16
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	40010000 	.word	0x40010000
 80046e8:	40000400 	.word	0x40000400
 80046ec:	40000800 	.word	0x40000800
 80046f0:	40000c00 	.word	0x40000c00
 80046f4:	40014000 	.word	0x40014000

080046f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b02      	cmp	r3, #2
 800470c:	d122      	bne.n	8004754 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b02      	cmp	r3, #2
 800471a:	d11b      	bne.n	8004754 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f06f 0202 	mvn.w	r2, #2
 8004724:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	f003 0303 	and.w	r3, r3, #3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d003      	beq.n	8004742 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 fa77 	bl	8004c2e <HAL_TIM_IC_CaptureCallback>
 8004740:	e005      	b.n	800474e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 fa69 	bl	8004c1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 fa7a 	bl	8004c42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	f003 0304 	and.w	r3, r3, #4
 800475e:	2b04      	cmp	r3, #4
 8004760:	d122      	bne.n	80047a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	f003 0304 	and.w	r3, r3, #4
 800476c:	2b04      	cmp	r3, #4
 800476e:	d11b      	bne.n	80047a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f06f 0204 	mvn.w	r2, #4
 8004778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2202      	movs	r2, #2
 800477e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800478a:	2b00      	cmp	r3, #0
 800478c:	d003      	beq.n	8004796 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 fa4d 	bl	8004c2e <HAL_TIM_IC_CaptureCallback>
 8004794:	e005      	b.n	80047a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 fa3f 	bl	8004c1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f000 fa50 	bl	8004c42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	f003 0308 	and.w	r3, r3, #8
 80047b2:	2b08      	cmp	r3, #8
 80047b4:	d122      	bne.n	80047fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	f003 0308 	and.w	r3, r3, #8
 80047c0:	2b08      	cmp	r3, #8
 80047c2:	d11b      	bne.n	80047fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f06f 0208 	mvn.w	r2, #8
 80047cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2204      	movs	r2, #4
 80047d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	69db      	ldr	r3, [r3, #28]
 80047da:	f003 0303 	and.w	r3, r3, #3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d003      	beq.n	80047ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 fa23 	bl	8004c2e <HAL_TIM_IC_CaptureCallback>
 80047e8:	e005      	b.n	80047f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 fa15 	bl	8004c1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 fa26 	bl	8004c42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	f003 0310 	and.w	r3, r3, #16
 8004806:	2b10      	cmp	r3, #16
 8004808:	d122      	bne.n	8004850 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	f003 0310 	and.w	r3, r3, #16
 8004814:	2b10      	cmp	r3, #16
 8004816:	d11b      	bne.n	8004850 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f06f 0210 	mvn.w	r2, #16
 8004820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2208      	movs	r2, #8
 8004826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	69db      	ldr	r3, [r3, #28]
 800482e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004832:	2b00      	cmp	r3, #0
 8004834:	d003      	beq.n	800483e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 f9f9 	bl	8004c2e <HAL_TIM_IC_CaptureCallback>
 800483c:	e005      	b.n	800484a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f9eb 	bl	8004c1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 f9fc 	bl	8004c42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b01      	cmp	r3, #1
 800485c:	d10e      	bne.n	800487c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	f003 0301 	and.w	r3, r3, #1
 8004868:	2b01      	cmp	r3, #1
 800486a:	d107      	bne.n	800487c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f06f 0201 	mvn.w	r2, #1
 8004874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f7fd f942 	bl	8001b00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004886:	2b80      	cmp	r3, #128	; 0x80
 8004888:	d10e      	bne.n	80048a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004894:	2b80      	cmp	r3, #128	; 0x80
 8004896:	d107      	bne.n	80048a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 fd26 	bl	80052f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b2:	2b40      	cmp	r3, #64	; 0x40
 80048b4:	d10e      	bne.n	80048d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c0:	2b40      	cmp	r3, #64	; 0x40
 80048c2:	d107      	bne.n	80048d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 f9c1 	bl	8004c56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	f003 0320 	and.w	r3, r3, #32
 80048de:	2b20      	cmp	r3, #32
 80048e0:	d10e      	bne.n	8004900 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	f003 0320 	and.w	r3, r3, #32
 80048ec:	2b20      	cmp	r3, #32
 80048ee:	d107      	bne.n	8004900 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f06f 0220 	mvn.w	r2, #32
 80048f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 fcf0 	bl	80052e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004900:	bf00      	nop
 8004902:	3708      	adds	r7, #8
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004914:	2300      	movs	r3, #0
 8004916:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800491e:	2b01      	cmp	r3, #1
 8004920:	d101      	bne.n	8004926 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004922:	2302      	movs	r3, #2
 8004924:	e0ae      	b.n	8004a84 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2b0c      	cmp	r3, #12
 8004932:	f200 809f 	bhi.w	8004a74 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004936:	a201      	add	r2, pc, #4	; (adr r2, 800493c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800493c:	08004971 	.word	0x08004971
 8004940:	08004a75 	.word	0x08004a75
 8004944:	08004a75 	.word	0x08004a75
 8004948:	08004a75 	.word	0x08004a75
 800494c:	080049b1 	.word	0x080049b1
 8004950:	08004a75 	.word	0x08004a75
 8004954:	08004a75 	.word	0x08004a75
 8004958:	08004a75 	.word	0x08004a75
 800495c:	080049f3 	.word	0x080049f3
 8004960:	08004a75 	.word	0x08004a75
 8004964:	08004a75 	.word	0x08004a75
 8004968:	08004a75 	.word	0x08004a75
 800496c:	08004a33 	.word	0x08004a33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68b9      	ldr	r1, [r7, #8]
 8004976:	4618      	mov	r0, r3
 8004978:	f000 f9f8 	bl	8004d6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	699a      	ldr	r2, [r3, #24]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f042 0208 	orr.w	r2, r2, #8
 800498a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	699a      	ldr	r2, [r3, #24]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f022 0204 	bic.w	r2, r2, #4
 800499a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	6999      	ldr	r1, [r3, #24]
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	691a      	ldr	r2, [r3, #16]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	430a      	orrs	r2, r1
 80049ac:	619a      	str	r2, [r3, #24]
      break;
 80049ae:	e064      	b.n	8004a7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68b9      	ldr	r1, [r7, #8]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f000 fa3e 	bl	8004e38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	699a      	ldr	r2, [r3, #24]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	699a      	ldr	r2, [r3, #24]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	6999      	ldr	r1, [r3, #24]
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	021a      	lsls	r2, r3, #8
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	430a      	orrs	r2, r1
 80049ee:	619a      	str	r2, [r3, #24]
      break;
 80049f0:	e043      	b.n	8004a7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68b9      	ldr	r1, [r7, #8]
 80049f8:	4618      	mov	r0, r3
 80049fa:	f000 fa89 	bl	8004f10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	69da      	ldr	r2, [r3, #28]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f042 0208 	orr.w	r2, r2, #8
 8004a0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	69da      	ldr	r2, [r3, #28]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 0204 	bic.w	r2, r2, #4
 8004a1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	69d9      	ldr	r1, [r3, #28]
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	691a      	ldr	r2, [r3, #16]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	61da      	str	r2, [r3, #28]
      break;
 8004a30:	e023      	b.n	8004a7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68b9      	ldr	r1, [r7, #8]
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f000 fad3 	bl	8004fe4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	69da      	ldr	r2, [r3, #28]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	69da      	ldr	r2, [r3, #28]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	69d9      	ldr	r1, [r3, #28]
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	021a      	lsls	r2, r3, #8
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	61da      	str	r2, [r3, #28]
      break;
 8004a72:	e002      	b.n	8004a7a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	75fb      	strb	r3, [r7, #23]
      break;
 8004a78:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a82:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3718      	adds	r7, #24
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a96:	2300      	movs	r3, #0
 8004a98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d101      	bne.n	8004aa8 <HAL_TIM_ConfigClockSource+0x1c>
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	e0b4      	b.n	8004c12 <HAL_TIM_ConfigClockSource+0x186>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ac6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ace:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68ba      	ldr	r2, [r7, #8]
 8004ad6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ae0:	d03e      	beq.n	8004b60 <HAL_TIM_ConfigClockSource+0xd4>
 8004ae2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ae6:	f200 8087 	bhi.w	8004bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8004aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aee:	f000 8086 	beq.w	8004bfe <HAL_TIM_ConfigClockSource+0x172>
 8004af2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004af6:	d87f      	bhi.n	8004bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8004af8:	2b70      	cmp	r3, #112	; 0x70
 8004afa:	d01a      	beq.n	8004b32 <HAL_TIM_ConfigClockSource+0xa6>
 8004afc:	2b70      	cmp	r3, #112	; 0x70
 8004afe:	d87b      	bhi.n	8004bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8004b00:	2b60      	cmp	r3, #96	; 0x60
 8004b02:	d050      	beq.n	8004ba6 <HAL_TIM_ConfigClockSource+0x11a>
 8004b04:	2b60      	cmp	r3, #96	; 0x60
 8004b06:	d877      	bhi.n	8004bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8004b08:	2b50      	cmp	r3, #80	; 0x50
 8004b0a:	d03c      	beq.n	8004b86 <HAL_TIM_ConfigClockSource+0xfa>
 8004b0c:	2b50      	cmp	r3, #80	; 0x50
 8004b0e:	d873      	bhi.n	8004bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8004b10:	2b40      	cmp	r3, #64	; 0x40
 8004b12:	d058      	beq.n	8004bc6 <HAL_TIM_ConfigClockSource+0x13a>
 8004b14:	2b40      	cmp	r3, #64	; 0x40
 8004b16:	d86f      	bhi.n	8004bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8004b18:	2b30      	cmp	r3, #48	; 0x30
 8004b1a:	d064      	beq.n	8004be6 <HAL_TIM_ConfigClockSource+0x15a>
 8004b1c:	2b30      	cmp	r3, #48	; 0x30
 8004b1e:	d86b      	bhi.n	8004bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8004b20:	2b20      	cmp	r3, #32
 8004b22:	d060      	beq.n	8004be6 <HAL_TIM_ConfigClockSource+0x15a>
 8004b24:	2b20      	cmp	r3, #32
 8004b26:	d867      	bhi.n	8004bf8 <HAL_TIM_ConfigClockSource+0x16c>
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d05c      	beq.n	8004be6 <HAL_TIM_ConfigClockSource+0x15a>
 8004b2c:	2b10      	cmp	r3, #16
 8004b2e:	d05a      	beq.n	8004be6 <HAL_TIM_ConfigClockSource+0x15a>
 8004b30:	e062      	b.n	8004bf8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6818      	ldr	r0, [r3, #0]
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	6899      	ldr	r1, [r3, #8]
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	685a      	ldr	r2, [r3, #4]
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	f000 fb19 	bl	8005178 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68ba      	ldr	r2, [r7, #8]
 8004b5c:	609a      	str	r2, [r3, #8]
      break;
 8004b5e:	e04f      	b.n	8004c00 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6818      	ldr	r0, [r3, #0]
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	6899      	ldr	r1, [r3, #8]
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	f000 fb02 	bl	8005178 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	689a      	ldr	r2, [r3, #8]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b82:	609a      	str	r2, [r3, #8]
      break;
 8004b84:	e03c      	b.n	8004c00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6818      	ldr	r0, [r3, #0]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	6859      	ldr	r1, [r3, #4]
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	461a      	mov	r2, r3
 8004b94:	f000 fa76 	bl	8005084 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2150      	movs	r1, #80	; 0x50
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f000 facf 	bl	8005142 <TIM_ITRx_SetConfig>
      break;
 8004ba4:	e02c      	b.n	8004c00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6818      	ldr	r0, [r3, #0]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	6859      	ldr	r1, [r3, #4]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	f000 fa95 	bl	80050e2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2160      	movs	r1, #96	; 0x60
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f000 fabf 	bl	8005142 <TIM_ITRx_SetConfig>
      break;
 8004bc4:	e01c      	b.n	8004c00 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6818      	ldr	r0, [r3, #0]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	6859      	ldr	r1, [r3, #4]
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	f000 fa56 	bl	8005084 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2140      	movs	r1, #64	; 0x40
 8004bde:	4618      	mov	r0, r3
 8004be0:	f000 faaf 	bl	8005142 <TIM_ITRx_SetConfig>
      break;
 8004be4:	e00c      	b.n	8004c00 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4619      	mov	r1, r3
 8004bf0:	4610      	mov	r0, r2
 8004bf2:	f000 faa6 	bl	8005142 <TIM_ITRx_SetConfig>
      break;
 8004bf6:	e003      	b.n	8004c00 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	73fb      	strb	r3, [r7, #15]
      break;
 8004bfc:	e000      	b.n	8004c00 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004bfe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3710      	adds	r7, #16
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}

08004c1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c1a:	b480      	push	{r7}
 8004c1c:	b083      	sub	sp, #12
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c22:	bf00      	nop
 8004c24:	370c      	adds	r7, #12
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr

08004c2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c2e:	b480      	push	{r7}
 8004c30:	b083      	sub	sp, #12
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c36:	bf00      	nop
 8004c38:	370c      	adds	r7, #12
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr

08004c42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c42:	b480      	push	{r7}
 8004c44:	b083      	sub	sp, #12
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c4a:	bf00      	nop
 8004c4c:	370c      	adds	r7, #12
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c56:	b480      	push	{r7}
 8004c58:	b083      	sub	sp, #12
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c5e:	bf00      	nop
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
	...

08004c6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a34      	ldr	r2, [pc, #208]	; (8004d50 <TIM_Base_SetConfig+0xe4>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d00f      	beq.n	8004ca4 <TIM_Base_SetConfig+0x38>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c8a:	d00b      	beq.n	8004ca4 <TIM_Base_SetConfig+0x38>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a31      	ldr	r2, [pc, #196]	; (8004d54 <TIM_Base_SetConfig+0xe8>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d007      	beq.n	8004ca4 <TIM_Base_SetConfig+0x38>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a30      	ldr	r2, [pc, #192]	; (8004d58 <TIM_Base_SetConfig+0xec>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d003      	beq.n	8004ca4 <TIM_Base_SetConfig+0x38>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a2f      	ldr	r2, [pc, #188]	; (8004d5c <TIM_Base_SetConfig+0xf0>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d108      	bne.n	8004cb6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004caa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a25      	ldr	r2, [pc, #148]	; (8004d50 <TIM_Base_SetConfig+0xe4>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d01b      	beq.n	8004cf6 <TIM_Base_SetConfig+0x8a>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cc4:	d017      	beq.n	8004cf6 <TIM_Base_SetConfig+0x8a>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a22      	ldr	r2, [pc, #136]	; (8004d54 <TIM_Base_SetConfig+0xe8>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d013      	beq.n	8004cf6 <TIM_Base_SetConfig+0x8a>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a21      	ldr	r2, [pc, #132]	; (8004d58 <TIM_Base_SetConfig+0xec>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d00f      	beq.n	8004cf6 <TIM_Base_SetConfig+0x8a>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a20      	ldr	r2, [pc, #128]	; (8004d5c <TIM_Base_SetConfig+0xf0>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d00b      	beq.n	8004cf6 <TIM_Base_SetConfig+0x8a>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a1f      	ldr	r2, [pc, #124]	; (8004d60 <TIM_Base_SetConfig+0xf4>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d007      	beq.n	8004cf6 <TIM_Base_SetConfig+0x8a>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a1e      	ldr	r2, [pc, #120]	; (8004d64 <TIM_Base_SetConfig+0xf8>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d003      	beq.n	8004cf6 <TIM_Base_SetConfig+0x8a>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a1d      	ldr	r2, [pc, #116]	; (8004d68 <TIM_Base_SetConfig+0xfc>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d108      	bne.n	8004d08 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	689a      	ldr	r2, [r3, #8]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a08      	ldr	r2, [pc, #32]	; (8004d50 <TIM_Base_SetConfig+0xe4>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d103      	bne.n	8004d3c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	691a      	ldr	r2, [r3, #16]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	615a      	str	r2, [r3, #20]
}
 8004d42:	bf00      	nop
 8004d44:	3714      	adds	r7, #20
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	40010000 	.word	0x40010000
 8004d54:	40000400 	.word	0x40000400
 8004d58:	40000800 	.word	0x40000800
 8004d5c:	40000c00 	.word	0x40000c00
 8004d60:	40014000 	.word	0x40014000
 8004d64:	40014400 	.word	0x40014400
 8004d68:	40014800 	.word	0x40014800

08004d6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b087      	sub	sp, #28
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	f023 0201 	bic.w	r2, r3, #1
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f023 0303 	bic.w	r3, r3, #3
 8004da2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	f023 0302 	bic.w	r3, r3, #2
 8004db4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a1c      	ldr	r2, [pc, #112]	; (8004e34 <TIM_OC1_SetConfig+0xc8>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d10c      	bne.n	8004de2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	f023 0308 	bic.w	r3, r3, #8
 8004dce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	697a      	ldr	r2, [r7, #20]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	f023 0304 	bic.w	r3, r3, #4
 8004de0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a13      	ldr	r2, [pc, #76]	; (8004e34 <TIM_OC1_SetConfig+0xc8>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d111      	bne.n	8004e0e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004df0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004df8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	693a      	ldr	r2, [r7, #16]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	693a      	ldr	r2, [r7, #16]
 8004e12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	685a      	ldr	r2, [r3, #4]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	621a      	str	r2, [r3, #32]
}
 8004e28:	bf00      	nop
 8004e2a:	371c      	adds	r7, #28
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr
 8004e34:	40010000 	.word	0x40010000

08004e38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b087      	sub	sp, #28
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	f023 0210 	bic.w	r2, r3, #16
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	021b      	lsls	r3, r3, #8
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	f023 0320 	bic.w	r3, r3, #32
 8004e82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	011b      	lsls	r3, r3, #4
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a1e      	ldr	r2, [pc, #120]	; (8004f0c <TIM_OC2_SetConfig+0xd4>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d10d      	bne.n	8004eb4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	011b      	lsls	r3, r3, #4
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004eb2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a15      	ldr	r2, [pc, #84]	; (8004f0c <TIM_OC2_SetConfig+0xd4>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d113      	bne.n	8004ee4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ec2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004eca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	693a      	ldr	r2, [r7, #16]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	699b      	ldr	r3, [r3, #24]
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	685a      	ldr	r2, [r3, #4]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	621a      	str	r2, [r3, #32]
}
 8004efe:	bf00      	nop
 8004f00:	371c      	adds	r7, #28
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	40010000 	.word	0x40010000

08004f10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b087      	sub	sp, #28
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	69db      	ldr	r3, [r3, #28]
 8004f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f023 0303 	bic.w	r3, r3, #3
 8004f46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	021b      	lsls	r3, r3, #8
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a1d      	ldr	r2, [pc, #116]	; (8004fe0 <TIM_OC3_SetConfig+0xd0>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d10d      	bne.n	8004f8a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	021b      	lsls	r3, r3, #8
 8004f7c:	697a      	ldr	r2, [r7, #20]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a14      	ldr	r2, [pc, #80]	; (8004fe0 <TIM_OC3_SetConfig+0xd0>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d113      	bne.n	8004fba <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	011b      	lsls	r3, r3, #4
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	011b      	lsls	r3, r3, #4
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	685a      	ldr	r2, [r3, #4]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	621a      	str	r2, [r3, #32]
}
 8004fd4:	bf00      	nop
 8004fd6:	371c      	adds	r7, #28
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr
 8004fe0:	40010000 	.word	0x40010000

08004fe4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b087      	sub	sp, #28
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	69db      	ldr	r3, [r3, #28]
 800500a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800501a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	021b      	lsls	r3, r3, #8
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	4313      	orrs	r3, r2
 8005026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800502e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	031b      	lsls	r3, r3, #12
 8005036:	693a      	ldr	r2, [r7, #16]
 8005038:	4313      	orrs	r3, r2
 800503a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a10      	ldr	r2, [pc, #64]	; (8005080 <TIM_OC4_SetConfig+0x9c>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d109      	bne.n	8005058 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800504a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	695b      	ldr	r3, [r3, #20]
 8005050:	019b      	lsls	r3, r3, #6
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	4313      	orrs	r3, r2
 8005056:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	697a      	ldr	r2, [r7, #20]
 800505c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685a      	ldr	r2, [r3, #4]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	621a      	str	r2, [r3, #32]
}
 8005072:	bf00      	nop
 8005074:	371c      	adds	r7, #28
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	40010000 	.word	0x40010000

08005084 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005084:	b480      	push	{r7}
 8005086:	b087      	sub	sp, #28
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6a1b      	ldr	r3, [r3, #32]
 8005094:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6a1b      	ldr	r3, [r3, #32]
 800509a:	f023 0201 	bic.w	r2, r3, #1
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	011b      	lsls	r3, r3, #4
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	f023 030a 	bic.w	r3, r3, #10
 80050c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050c2:	697a      	ldr	r2, [r7, #20]
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	621a      	str	r2, [r3, #32]
}
 80050d6:	bf00      	nop
 80050d8:	371c      	adds	r7, #28
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr

080050e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050e2:	b480      	push	{r7}
 80050e4:	b087      	sub	sp, #28
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	60f8      	str	r0, [r7, #12]
 80050ea:	60b9      	str	r1, [r7, #8]
 80050ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	f023 0210 	bic.w	r2, r3, #16
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6a1b      	ldr	r3, [r3, #32]
 8005104:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800510c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	031b      	lsls	r3, r3, #12
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	4313      	orrs	r3, r2
 8005116:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800511e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	011b      	lsls	r3, r3, #4
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	4313      	orrs	r3, r2
 8005128:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	693a      	ldr	r2, [r7, #16]
 8005134:	621a      	str	r2, [r3, #32]
}
 8005136:	bf00      	nop
 8005138:	371c      	adds	r7, #28
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr

08005142 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005142:	b480      	push	{r7}
 8005144:	b085      	sub	sp, #20
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
 800514a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005158:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800515a:	683a      	ldr	r2, [r7, #0]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	4313      	orrs	r3, r2
 8005160:	f043 0307 	orr.w	r3, r3, #7
 8005164:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	609a      	str	r2, [r3, #8]
}
 800516c:	bf00      	nop
 800516e:	3714      	adds	r7, #20
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005178:	b480      	push	{r7}
 800517a:	b087      	sub	sp, #28
 800517c:	af00      	add	r7, sp, #0
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	607a      	str	r2, [r7, #4]
 8005184:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005192:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	021a      	lsls	r2, r3, #8
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	431a      	orrs	r2, r3
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	4313      	orrs	r3, r2
 80051a0:	697a      	ldr	r2, [r7, #20]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	697a      	ldr	r2, [r7, #20]
 80051aa:	609a      	str	r2, [r3, #8]
}
 80051ac:	bf00      	nop
 80051ae:	371c      	adds	r7, #28
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b087      	sub	sp, #28
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	f003 031f 	and.w	r3, r3, #31
 80051ca:	2201      	movs	r2, #1
 80051cc:	fa02 f303 	lsl.w	r3, r2, r3
 80051d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6a1a      	ldr	r2, [r3, #32]
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	43db      	mvns	r3, r3
 80051da:	401a      	ands	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6a1a      	ldr	r2, [r3, #32]
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	f003 031f 	and.w	r3, r3, #31
 80051ea:	6879      	ldr	r1, [r7, #4]
 80051ec:	fa01 f303 	lsl.w	r3, r1, r3
 80051f0:	431a      	orrs	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	621a      	str	r2, [r3, #32]
}
 80051f6:	bf00      	nop
 80051f8:	371c      	adds	r7, #28
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
	...

08005204 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005214:	2b01      	cmp	r3, #1
 8005216:	d101      	bne.n	800521c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005218:	2302      	movs	r3, #2
 800521a:	e050      	b.n	80052be <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2202      	movs	r2, #2
 8005228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005242:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	4313      	orrs	r3, r2
 800524c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a1c      	ldr	r2, [pc, #112]	; (80052cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d018      	beq.n	8005292 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005268:	d013      	beq.n	8005292 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a18      	ldr	r2, [pc, #96]	; (80052d0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d00e      	beq.n	8005292 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a16      	ldr	r2, [pc, #88]	; (80052d4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d009      	beq.n	8005292 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a15      	ldr	r2, [pc, #84]	; (80052d8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d004      	beq.n	8005292 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a13      	ldr	r2, [pc, #76]	; (80052dc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d10c      	bne.n	80052ac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005298:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	68ba      	ldr	r2, [r7, #8]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68ba      	ldr	r2, [r7, #8]
 80052aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3714      	adds	r7, #20
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	40010000 	.word	0x40010000
 80052d0:	40000400 	.word	0x40000400
 80052d4:	40000800 	.word	0x40000800
 80052d8:	40000c00 	.word	0x40000c00
 80052dc:	40014000 	.word	0x40014000

080052e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052e8:	bf00      	nop
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052fc:	bf00      	nop
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e03f      	b.n	800539a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b00      	cmp	r3, #0
 8005324:	d106      	bne.n	8005334 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f7fc ff5c 	bl	80021ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2224      	movs	r2, #36	; 0x24
 8005338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	68da      	ldr	r2, [r3, #12]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800534a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 fddb 	bl	8005f08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	691a      	ldr	r2, [r3, #16]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005360:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	695a      	ldr	r2, [r3, #20]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005370:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68da      	ldr	r2, [r3, #12]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005380:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2220      	movs	r2, #32
 800538c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2220      	movs	r2, #32
 8005394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3708      	adds	r7, #8
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b08a      	sub	sp, #40	; 0x28
 80053a6:	af02      	add	r7, sp, #8
 80053a8:	60f8      	str	r0, [r7, #12]
 80053aa:	60b9      	str	r1, [r7, #8]
 80053ac:	603b      	str	r3, [r7, #0]
 80053ae:	4613      	mov	r3, r2
 80053b0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80053b2:	2300      	movs	r3, #0
 80053b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b20      	cmp	r3, #32
 80053c0:	d17c      	bne.n	80054bc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d002      	beq.n	80053ce <HAL_UART_Transmit+0x2c>
 80053c8:	88fb      	ldrh	r3, [r7, #6]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d101      	bne.n	80053d2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e075      	b.n	80054be <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d101      	bne.n	80053e0 <HAL_UART_Transmit+0x3e>
 80053dc:	2302      	movs	r3, #2
 80053de:	e06e      	b.n	80054be <HAL_UART_Transmit+0x11c>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2200      	movs	r2, #0
 80053ec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2221      	movs	r2, #33	; 0x21
 80053f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053f6:	f7fd f80f 	bl	8002418 <HAL_GetTick>
 80053fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	88fa      	ldrh	r2, [r7, #6]
 8005400:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	88fa      	ldrh	r2, [r7, #6]
 8005406:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005410:	d108      	bne.n	8005424 <HAL_UART_Transmit+0x82>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d104      	bne.n	8005424 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800541a:	2300      	movs	r3, #0
 800541c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	61bb      	str	r3, [r7, #24]
 8005422:	e003      	b.n	800542c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005428:	2300      	movs	r3, #0
 800542a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005434:	e02a      	b.n	800548c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	9300      	str	r3, [sp, #0]
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	2200      	movs	r2, #0
 800543e:	2180      	movs	r1, #128	; 0x80
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	f000 fb1f 	bl	8005a84 <UART_WaitOnFlagUntilTimeout>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d001      	beq.n	8005450 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e036      	b.n	80054be <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d10b      	bne.n	800546e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	881b      	ldrh	r3, [r3, #0]
 800545a:	461a      	mov	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005464:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	3302      	adds	r3, #2
 800546a:	61bb      	str	r3, [r7, #24]
 800546c:	e007      	b.n	800547e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	781a      	ldrb	r2, [r3, #0]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	3301      	adds	r3, #1
 800547c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005482:	b29b      	uxth	r3, r3
 8005484:	3b01      	subs	r3, #1
 8005486:	b29a      	uxth	r2, r3
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005490:	b29b      	uxth	r3, r3
 8005492:	2b00      	cmp	r3, #0
 8005494:	d1cf      	bne.n	8005436 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	9300      	str	r3, [sp, #0]
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	2200      	movs	r2, #0
 800549e:	2140      	movs	r1, #64	; 0x40
 80054a0:	68f8      	ldr	r0, [r7, #12]
 80054a2:	f000 faef 	bl	8005a84 <UART_WaitOnFlagUntilTimeout>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d001      	beq.n	80054b0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	e006      	b.n	80054be <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2220      	movs	r2, #32
 80054b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80054b8:	2300      	movs	r3, #0
 80054ba:	e000      	b.n	80054be <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80054bc:	2302      	movs	r3, #2
  }
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3720      	adds	r7, #32
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}

080054c6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054c6:	b580      	push	{r7, lr}
 80054c8:	b084      	sub	sp, #16
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	60f8      	str	r0, [r7, #12]
 80054ce:	60b9      	str	r1, [r7, #8]
 80054d0:	4613      	mov	r3, r2
 80054d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	2b20      	cmp	r3, #32
 80054de:	d11d      	bne.n	800551c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d002      	beq.n	80054ec <HAL_UART_Receive_IT+0x26>
 80054e6:	88fb      	ldrh	r3, [r7, #6]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d101      	bne.n	80054f0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e016      	b.n	800551e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d101      	bne.n	80054fe <HAL_UART_Receive_IT+0x38>
 80054fa:	2302      	movs	r3, #2
 80054fc:	e00f      	b.n	800551e <HAL_UART_Receive_IT+0x58>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2201      	movs	r2, #1
 8005502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2200      	movs	r2, #0
 800550a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800550c:	88fb      	ldrh	r3, [r7, #6]
 800550e:	461a      	mov	r2, r3
 8005510:	68b9      	ldr	r1, [r7, #8]
 8005512:	68f8      	ldr	r0, [r7, #12]
 8005514:	f000 fb24 	bl	8005b60 <UART_Start_Receive_IT>
 8005518:	4603      	mov	r3, r0
 800551a:	e000      	b.n	800551e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800551c:	2302      	movs	r3, #2
  }
}
 800551e:	4618      	mov	r0, r3
 8005520:	3710      	adds	r7, #16
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
	...

08005528 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b0ba      	sub	sp, #232	; 0xe8
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800554e:	2300      	movs	r3, #0
 8005550:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005554:	2300      	movs	r3, #0
 8005556:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800555a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800555e:	f003 030f 	and.w	r3, r3, #15
 8005562:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005566:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800556a:	2b00      	cmp	r3, #0
 800556c:	d10f      	bne.n	800558e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800556e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005572:	f003 0320 	and.w	r3, r3, #32
 8005576:	2b00      	cmp	r3, #0
 8005578:	d009      	beq.n	800558e <HAL_UART_IRQHandler+0x66>
 800557a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800557e:	f003 0320 	and.w	r3, r3, #32
 8005582:	2b00      	cmp	r3, #0
 8005584:	d003      	beq.n	800558e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 fc03 	bl	8005d92 <UART_Receive_IT>
      return;
 800558c:	e256      	b.n	8005a3c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800558e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005592:	2b00      	cmp	r3, #0
 8005594:	f000 80de 	beq.w	8005754 <HAL_UART_IRQHandler+0x22c>
 8005598:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800559c:	f003 0301 	and.w	r3, r3, #1
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d106      	bne.n	80055b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80055a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	f000 80d1 	beq.w	8005754 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80055b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00b      	beq.n	80055d6 <HAL_UART_IRQHandler+0xae>
 80055be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d005      	beq.n	80055d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ce:	f043 0201 	orr.w	r2, r3, #1
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055da:	f003 0304 	and.w	r3, r3, #4
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00b      	beq.n	80055fa <HAL_UART_IRQHandler+0xd2>
 80055e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055e6:	f003 0301 	and.w	r3, r3, #1
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d005      	beq.n	80055fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f2:	f043 0202 	orr.w	r2, r3, #2
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055fe:	f003 0302 	and.w	r3, r3, #2
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00b      	beq.n	800561e <HAL_UART_IRQHandler+0xf6>
 8005606:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	2b00      	cmp	r3, #0
 8005610:	d005      	beq.n	800561e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005616:	f043 0204 	orr.w	r2, r3, #4
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800561e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005622:	f003 0308 	and.w	r3, r3, #8
 8005626:	2b00      	cmp	r3, #0
 8005628:	d011      	beq.n	800564e <HAL_UART_IRQHandler+0x126>
 800562a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800562e:	f003 0320 	and.w	r3, r3, #32
 8005632:	2b00      	cmp	r3, #0
 8005634:	d105      	bne.n	8005642 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005636:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800563a:	f003 0301 	and.w	r3, r3, #1
 800563e:	2b00      	cmp	r3, #0
 8005640:	d005      	beq.n	800564e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005646:	f043 0208 	orr.w	r2, r3, #8
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005652:	2b00      	cmp	r3, #0
 8005654:	f000 81ed 	beq.w	8005a32 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800565c:	f003 0320 	and.w	r3, r3, #32
 8005660:	2b00      	cmp	r3, #0
 8005662:	d008      	beq.n	8005676 <HAL_UART_IRQHandler+0x14e>
 8005664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005668:	f003 0320 	and.w	r3, r3, #32
 800566c:	2b00      	cmp	r3, #0
 800566e:	d002      	beq.n	8005676 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 fb8e 	bl	8005d92 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	695b      	ldr	r3, [r3, #20]
 800567c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005680:	2b40      	cmp	r3, #64	; 0x40
 8005682:	bf0c      	ite	eq
 8005684:	2301      	moveq	r3, #1
 8005686:	2300      	movne	r3, #0
 8005688:	b2db      	uxtb	r3, r3
 800568a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005692:	f003 0308 	and.w	r3, r3, #8
 8005696:	2b00      	cmp	r3, #0
 8005698:	d103      	bne.n	80056a2 <HAL_UART_IRQHandler+0x17a>
 800569a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d04f      	beq.n	8005742 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 fa96 	bl	8005bd4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b2:	2b40      	cmp	r3, #64	; 0x40
 80056b4:	d141      	bne.n	800573a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	3314      	adds	r3, #20
 80056bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056c4:	e853 3f00 	ldrex	r3, [r3]
 80056c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80056cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80056d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	3314      	adds	r3, #20
 80056de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80056e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80056e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80056ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80056f2:	e841 2300 	strex	r3, r2, [r1]
 80056f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80056fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1d9      	bne.n	80056b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005706:	2b00      	cmp	r3, #0
 8005708:	d013      	beq.n	8005732 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570e:	4a7d      	ldr	r2, [pc, #500]	; (8005904 <HAL_UART_IRQHandler+0x3dc>)
 8005710:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005716:	4618      	mov	r0, r3
 8005718:	f7fd f80b 	bl	8002732 <HAL_DMA_Abort_IT>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d016      	beq.n	8005750 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800572c:	4610      	mov	r0, r2
 800572e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005730:	e00e      	b.n	8005750 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 f990 	bl	8005a58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005738:	e00a      	b.n	8005750 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 f98c 	bl	8005a58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005740:	e006      	b.n	8005750 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 f988 	bl	8005a58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800574e:	e170      	b.n	8005a32 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005750:	bf00      	nop
    return;
 8005752:	e16e      	b.n	8005a32 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005758:	2b01      	cmp	r3, #1
 800575a:	f040 814a 	bne.w	80059f2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800575e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005762:	f003 0310 	and.w	r3, r3, #16
 8005766:	2b00      	cmp	r3, #0
 8005768:	f000 8143 	beq.w	80059f2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800576c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005770:	f003 0310 	and.w	r3, r3, #16
 8005774:	2b00      	cmp	r3, #0
 8005776:	f000 813c 	beq.w	80059f2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800577a:	2300      	movs	r3, #0
 800577c:	60bb      	str	r3, [r7, #8]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	60bb      	str	r3, [r7, #8]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	60bb      	str	r3, [r7, #8]
 800578e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800579a:	2b40      	cmp	r3, #64	; 0x40
 800579c:	f040 80b4 	bne.w	8005908 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80057ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	f000 8140 	beq.w	8005a36 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80057ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057be:	429a      	cmp	r2, r3
 80057c0:	f080 8139 	bcs.w	8005a36 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057ca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d0:	69db      	ldr	r3, [r3, #28]
 80057d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057d6:	f000 8088 	beq.w	80058ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	330c      	adds	r3, #12
 80057e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057e8:	e853 3f00 	ldrex	r3, [r3]
 80057ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80057f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	330c      	adds	r3, #12
 8005802:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005806:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800580a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005812:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005816:	e841 2300 	strex	r3, r2, [r1]
 800581a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800581e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1d9      	bne.n	80057da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	3314      	adds	r3, #20
 800582c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005830:	e853 3f00 	ldrex	r3, [r3]
 8005834:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005836:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005838:	f023 0301 	bic.w	r3, r3, #1
 800583c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	3314      	adds	r3, #20
 8005846:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800584a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800584e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005850:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005852:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005856:	e841 2300 	strex	r3, r2, [r1]
 800585a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800585c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1e1      	bne.n	8005826 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	3314      	adds	r3, #20
 8005868:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800586c:	e853 3f00 	ldrex	r3, [r3]
 8005870:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005872:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005874:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005878:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	3314      	adds	r3, #20
 8005882:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005886:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005888:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800588c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800588e:	e841 2300 	strex	r3, r2, [r1]
 8005892:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005894:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1e3      	bne.n	8005862 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2220      	movs	r2, #32
 800589e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	330c      	adds	r3, #12
 80058ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058b2:	e853 3f00 	ldrex	r3, [r3]
 80058b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80058b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058ba:	f023 0310 	bic.w	r3, r3, #16
 80058be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	330c      	adds	r3, #12
 80058c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80058cc:	65ba      	str	r2, [r7, #88]	; 0x58
 80058ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80058d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058d4:	e841 2300 	strex	r3, r2, [r1]
 80058d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80058da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d1e3      	bne.n	80058a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e4:	4618      	mov	r0, r3
 80058e6:	f7fc feb4 	bl	8002652 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	4619      	mov	r1, r3
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 f8b6 	bl	8005a6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005900:	e099      	b.n	8005a36 <HAL_UART_IRQHandler+0x50e>
 8005902:	bf00      	nop
 8005904:	08005c9b 	.word	0x08005c9b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005910:	b29b      	uxth	r3, r3
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800591c:	b29b      	uxth	r3, r3
 800591e:	2b00      	cmp	r3, #0
 8005920:	f000 808b 	beq.w	8005a3a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005924:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005928:	2b00      	cmp	r3, #0
 800592a:	f000 8086 	beq.w	8005a3a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	330c      	adds	r3, #12
 8005934:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005938:	e853 3f00 	ldrex	r3, [r3]
 800593c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800593e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005940:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005944:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	330c      	adds	r3, #12
 800594e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005952:	647a      	str	r2, [r7, #68]	; 0x44
 8005954:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005956:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005958:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800595a:	e841 2300 	strex	r3, r2, [r1]
 800595e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1e3      	bne.n	800592e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	3314      	adds	r3, #20
 800596c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005970:	e853 3f00 	ldrex	r3, [r3]
 8005974:	623b      	str	r3, [r7, #32]
   return(result);
 8005976:	6a3b      	ldr	r3, [r7, #32]
 8005978:	f023 0301 	bic.w	r3, r3, #1
 800597c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	3314      	adds	r3, #20
 8005986:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800598a:	633a      	str	r2, [r7, #48]	; 0x30
 800598c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005992:	e841 2300 	strex	r3, r2, [r1]
 8005996:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599a:	2b00      	cmp	r3, #0
 800599c:	d1e3      	bne.n	8005966 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2220      	movs	r2, #32
 80059a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	330c      	adds	r3, #12
 80059b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	e853 3f00 	ldrex	r3, [r3]
 80059ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f023 0310 	bic.w	r3, r3, #16
 80059c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	330c      	adds	r3, #12
 80059cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80059d0:	61fa      	str	r2, [r7, #28]
 80059d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d4:	69b9      	ldr	r1, [r7, #24]
 80059d6:	69fa      	ldr	r2, [r7, #28]
 80059d8:	e841 2300 	strex	r3, r2, [r1]
 80059dc:	617b      	str	r3, [r7, #20]
   return(result);
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d1e3      	bne.n	80059ac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80059e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80059e8:	4619      	mov	r1, r3
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 f83e 	bl	8005a6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80059f0:	e023      	b.n	8005a3a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80059f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d009      	beq.n	8005a12 <HAL_UART_IRQHandler+0x4ea>
 80059fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d003      	beq.n	8005a12 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f959 	bl	8005cc2 <UART_Transmit_IT>
    return;
 8005a10:	e014      	b.n	8005a3c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00e      	beq.n	8005a3c <HAL_UART_IRQHandler+0x514>
 8005a1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d008      	beq.n	8005a3c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f999 	bl	8005d62 <UART_EndTransmit_IT>
    return;
 8005a30:	e004      	b.n	8005a3c <HAL_UART_IRQHandler+0x514>
    return;
 8005a32:	bf00      	nop
 8005a34:	e002      	b.n	8005a3c <HAL_UART_IRQHandler+0x514>
      return;
 8005a36:	bf00      	nop
 8005a38:	e000      	b.n	8005a3c <HAL_UART_IRQHandler+0x514>
      return;
 8005a3a:	bf00      	nop
  }
}
 8005a3c:	37e8      	adds	r7, #232	; 0xe8
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop

08005a44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a4c:	bf00      	nop
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a60:	bf00      	nop
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	460b      	mov	r3, r1
 8005a76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a78:	bf00      	nop
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b090      	sub	sp, #64	; 0x40
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	603b      	str	r3, [r7, #0]
 8005a90:	4613      	mov	r3, r2
 8005a92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a94:	e050      	b.n	8005b38 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a9c:	d04c      	beq.n	8005b38 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d007      	beq.n	8005ab4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005aa4:	f7fc fcb8 	bl	8002418 <HAL_GetTick>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d241      	bcs.n	8005b38 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	330c      	adds	r3, #12
 8005aba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005abe:	e853 3f00 	ldrex	r3, [r3]
 8005ac2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005aca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	330c      	adds	r3, #12
 8005ad2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ad4:	637a      	str	r2, [r7, #52]	; 0x34
 8005ad6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ada:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005adc:	e841 2300 	strex	r3, r2, [r1]
 8005ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d1e5      	bne.n	8005ab4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	3314      	adds	r3, #20
 8005aee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	e853 3f00 	ldrex	r3, [r3]
 8005af6:	613b      	str	r3, [r7, #16]
   return(result);
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	f023 0301 	bic.w	r3, r3, #1
 8005afe:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	3314      	adds	r3, #20
 8005b06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b08:	623a      	str	r2, [r7, #32]
 8005b0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0c:	69f9      	ldr	r1, [r7, #28]
 8005b0e:	6a3a      	ldr	r2, [r7, #32]
 8005b10:	e841 2300 	strex	r3, r2, [r1]
 8005b14:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1e5      	bne.n	8005ae8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2220      	movs	r2, #32
 8005b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2220      	movs	r2, #32
 8005b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e00f      	b.n	8005b58 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	4013      	ands	r3, r2
 8005b42:	68ba      	ldr	r2, [r7, #8]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	bf0c      	ite	eq
 8005b48:	2301      	moveq	r3, #1
 8005b4a:	2300      	movne	r3, #0
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	461a      	mov	r2, r3
 8005b50:	79fb      	ldrb	r3, [r7, #7]
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d09f      	beq.n	8005a96 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b56:	2300      	movs	r3, #0
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3740      	adds	r7, #64	; 0x40
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b085      	sub	sp, #20
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	4613      	mov	r3, r2
 8005b6c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	88fa      	ldrh	r2, [r7, #6]
 8005b78:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	88fa      	ldrh	r2, [r7, #6]
 8005b7e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2222      	movs	r2, #34	; 0x22
 8005b8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68da      	ldr	r2, [r3, #12]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ba4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	695a      	ldr	r2, [r3, #20]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f042 0201 	orr.w	r2, r2, #1
 8005bb4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	68da      	ldr	r2, [r3, #12]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f042 0220 	orr.w	r2, r2, #32
 8005bc4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005bc6:	2300      	movs	r3, #0
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3714      	adds	r7, #20
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b095      	sub	sp, #84	; 0x54
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	330c      	adds	r3, #12
 8005be2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005be6:	e853 3f00 	ldrex	r3, [r3]
 8005bea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	330c      	adds	r3, #12
 8005bfa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005bfc:	643a      	str	r2, [r7, #64]	; 0x40
 8005bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c04:	e841 2300 	strex	r3, r2, [r1]
 8005c08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d1e5      	bne.n	8005bdc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	3314      	adds	r3, #20
 8005c16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c18:	6a3b      	ldr	r3, [r7, #32]
 8005c1a:	e853 3f00 	ldrex	r3, [r3]
 8005c1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	f023 0301 	bic.w	r3, r3, #1
 8005c26:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	3314      	adds	r3, #20
 8005c2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c30:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c38:	e841 2300 	strex	r3, r2, [r1]
 8005c3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d1e5      	bne.n	8005c10 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d119      	bne.n	8005c80 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	330c      	adds	r3, #12
 8005c52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	e853 3f00 	ldrex	r3, [r3]
 8005c5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	f023 0310 	bic.w	r3, r3, #16
 8005c62:	647b      	str	r3, [r7, #68]	; 0x44
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	330c      	adds	r3, #12
 8005c6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c6c:	61ba      	str	r2, [r7, #24]
 8005c6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c70:	6979      	ldr	r1, [r7, #20]
 8005c72:	69ba      	ldr	r2, [r7, #24]
 8005c74:	e841 2300 	strex	r3, r2, [r1]
 8005c78:	613b      	str	r3, [r7, #16]
   return(result);
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1e5      	bne.n	8005c4c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2220      	movs	r2, #32
 8005c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005c8e:	bf00      	nop
 8005c90:	3754      	adds	r7, #84	; 0x54
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr

08005c9a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c9a:	b580      	push	{r7, lr}
 8005c9c:	b084      	sub	sp, #16
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2200      	movs	r2, #0
 8005cac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	f7ff fecf 	bl	8005a58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cba:	bf00      	nop
 8005cbc:	3710      	adds	r7, #16
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005cc2:	b480      	push	{r7}
 8005cc4:	b085      	sub	sp, #20
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	2b21      	cmp	r3, #33	; 0x21
 8005cd4:	d13e      	bne.n	8005d54 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cde:	d114      	bne.n	8005d0a <UART_Transmit_IT+0x48>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d110      	bne.n	8005d0a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6a1b      	ldr	r3, [r3, #32]
 8005cec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	881b      	ldrh	r3, [r3, #0]
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cfc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	1c9a      	adds	r2, r3, #2
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	621a      	str	r2, [r3, #32]
 8005d08:	e008      	b.n	8005d1c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
 8005d0e:	1c59      	adds	r1, r3, #1
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	6211      	str	r1, [r2, #32]
 8005d14:	781a      	ldrb	r2, [r3, #0]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	3b01      	subs	r3, #1
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	4619      	mov	r1, r3
 8005d2a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d10f      	bne.n	8005d50 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68da      	ldr	r2, [r3, #12]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d3e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68da      	ldr	r2, [r3, #12]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d4e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005d50:	2300      	movs	r3, #0
 8005d52:	e000      	b.n	8005d56 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005d54:	2302      	movs	r3, #2
  }
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3714      	adds	r7, #20
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr

08005d62 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d62:	b580      	push	{r7, lr}
 8005d64:	b082      	sub	sp, #8
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68da      	ldr	r2, [r3, #12]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d78:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2220      	movs	r2, #32
 8005d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f7ff fe5e 	bl	8005a44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3708      	adds	r7, #8
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}

08005d92 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005d92:	b580      	push	{r7, lr}
 8005d94:	b08c      	sub	sp, #48	; 0x30
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	2b22      	cmp	r3, #34	; 0x22
 8005da4:	f040 80ab 	bne.w	8005efe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005db0:	d117      	bne.n	8005de2 <UART_Receive_IT+0x50>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d113      	bne.n	8005de2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dd0:	b29a      	uxth	r2, r3
 8005dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dda:	1c9a      	adds	r2, r3, #2
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	629a      	str	r2, [r3, #40]	; 0x28
 8005de0:	e026      	b.n	8005e30 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005de8:	2300      	movs	r3, #0
 8005dea:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005df4:	d007      	beq.n	8005e06 <UART_Receive_IT+0x74>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d10a      	bne.n	8005e14 <UART_Receive_IT+0x82>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d106      	bne.n	8005e14 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	b2da      	uxtb	r2, r3
 8005e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e10:	701a      	strb	r2, [r3, #0]
 8005e12:	e008      	b.n	8005e26 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e20:	b2da      	uxtb	r2, r3
 8005e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e24:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e2a:	1c5a      	adds	r2, r3, #1
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	3b01      	subs	r3, #1
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d15a      	bne.n	8005efa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68da      	ldr	r2, [r3, #12]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f022 0220 	bic.w	r2, r2, #32
 8005e52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68da      	ldr	r2, [r3, #12]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	695a      	ldr	r2, [r3, #20]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f022 0201 	bic.w	r2, r2, #1
 8005e72:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2220      	movs	r2, #32
 8005e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d135      	bne.n	8005ef0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	330c      	adds	r3, #12
 8005e90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	e853 3f00 	ldrex	r3, [r3]
 8005e98:	613b      	str	r3, [r7, #16]
   return(result);
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	f023 0310 	bic.w	r3, r3, #16
 8005ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	330c      	adds	r3, #12
 8005ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eaa:	623a      	str	r2, [r7, #32]
 8005eac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eae:	69f9      	ldr	r1, [r7, #28]
 8005eb0:	6a3a      	ldr	r2, [r7, #32]
 8005eb2:	e841 2300 	strex	r3, r2, [r1]
 8005eb6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d1e5      	bne.n	8005e8a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0310 	and.w	r3, r3, #16
 8005ec8:	2b10      	cmp	r3, #16
 8005eca:	d10a      	bne.n	8005ee2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ecc:	2300      	movs	r3, #0
 8005ece:	60fb      	str	r3, [r7, #12]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	60fb      	str	r3, [r7, #12]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	60fb      	str	r3, [r7, #12]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f7ff fdbf 	bl	8005a6c <HAL_UARTEx_RxEventCallback>
 8005eee:	e002      	b.n	8005ef6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f7fb fe15 	bl	8001b20 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	e002      	b.n	8005f00 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005efa:	2300      	movs	r3, #0
 8005efc:	e000      	b.n	8005f00 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005efe:	2302      	movs	r3, #2
  }
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3730      	adds	r7, #48	; 0x30
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f0c:	b09f      	sub	sp, #124	; 0x7c
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f1e:	68d9      	ldr	r1, [r3, #12]
 8005f20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	ea40 0301 	orr.w	r3, r0, r1
 8005f28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f2c:	689a      	ldr	r2, [r3, #8]
 8005f2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	431a      	orrs	r2, r3
 8005f34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f36:	695b      	ldr	r3, [r3, #20]
 8005f38:	431a      	orrs	r2, r3
 8005f3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f3c:	69db      	ldr	r3, [r3, #28]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005f42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005f4c:	f021 010c 	bic.w	r1, r1, #12
 8005f50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f56:	430b      	orrs	r3, r1
 8005f58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	695b      	ldr	r3, [r3, #20]
 8005f60:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005f64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f66:	6999      	ldr	r1, [r3, #24]
 8005f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	ea40 0301 	orr.w	r3, r0, r1
 8005f70:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	4bc5      	ldr	r3, [pc, #788]	; (800628c <UART_SetConfig+0x384>)
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d004      	beq.n	8005f86 <UART_SetConfig+0x7e>
 8005f7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	4bc3      	ldr	r3, [pc, #780]	; (8006290 <UART_SetConfig+0x388>)
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d103      	bne.n	8005f8e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f86:	f7fe f9e7 	bl	8004358 <HAL_RCC_GetPCLK2Freq>
 8005f8a:	6778      	str	r0, [r7, #116]	; 0x74
 8005f8c:	e002      	b.n	8005f94 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f8e:	f7fe f9cf 	bl	8004330 <HAL_RCC_GetPCLK1Freq>
 8005f92:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f96:	69db      	ldr	r3, [r3, #28]
 8005f98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f9c:	f040 80b6 	bne.w	800610c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005fa0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fa2:	461c      	mov	r4, r3
 8005fa4:	f04f 0500 	mov.w	r5, #0
 8005fa8:	4622      	mov	r2, r4
 8005faa:	462b      	mov	r3, r5
 8005fac:	1891      	adds	r1, r2, r2
 8005fae:	6439      	str	r1, [r7, #64]	; 0x40
 8005fb0:	415b      	adcs	r3, r3
 8005fb2:	647b      	str	r3, [r7, #68]	; 0x44
 8005fb4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005fb8:	1912      	adds	r2, r2, r4
 8005fba:	eb45 0303 	adc.w	r3, r5, r3
 8005fbe:	f04f 0000 	mov.w	r0, #0
 8005fc2:	f04f 0100 	mov.w	r1, #0
 8005fc6:	00d9      	lsls	r1, r3, #3
 8005fc8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005fcc:	00d0      	lsls	r0, r2, #3
 8005fce:	4602      	mov	r2, r0
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	1911      	adds	r1, r2, r4
 8005fd4:	6639      	str	r1, [r7, #96]	; 0x60
 8005fd6:	416b      	adcs	r3, r5
 8005fd8:	667b      	str	r3, [r7, #100]	; 0x64
 8005fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	461a      	mov	r2, r3
 8005fe0:	f04f 0300 	mov.w	r3, #0
 8005fe4:	1891      	adds	r1, r2, r2
 8005fe6:	63b9      	str	r1, [r7, #56]	; 0x38
 8005fe8:	415b      	adcs	r3, r3
 8005fea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005ff0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005ff4:	f7fa fe00 	bl	8000bf8 <__aeabi_uldivmod>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	4ba5      	ldr	r3, [pc, #660]	; (8006294 <UART_SetConfig+0x38c>)
 8005ffe:	fba3 2302 	umull	r2, r3, r3, r2
 8006002:	095b      	lsrs	r3, r3, #5
 8006004:	011e      	lsls	r6, r3, #4
 8006006:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006008:	461c      	mov	r4, r3
 800600a:	f04f 0500 	mov.w	r5, #0
 800600e:	4622      	mov	r2, r4
 8006010:	462b      	mov	r3, r5
 8006012:	1891      	adds	r1, r2, r2
 8006014:	6339      	str	r1, [r7, #48]	; 0x30
 8006016:	415b      	adcs	r3, r3
 8006018:	637b      	str	r3, [r7, #52]	; 0x34
 800601a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800601e:	1912      	adds	r2, r2, r4
 8006020:	eb45 0303 	adc.w	r3, r5, r3
 8006024:	f04f 0000 	mov.w	r0, #0
 8006028:	f04f 0100 	mov.w	r1, #0
 800602c:	00d9      	lsls	r1, r3, #3
 800602e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006032:	00d0      	lsls	r0, r2, #3
 8006034:	4602      	mov	r2, r0
 8006036:	460b      	mov	r3, r1
 8006038:	1911      	adds	r1, r2, r4
 800603a:	65b9      	str	r1, [r7, #88]	; 0x58
 800603c:	416b      	adcs	r3, r5
 800603e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	461a      	mov	r2, r3
 8006046:	f04f 0300 	mov.w	r3, #0
 800604a:	1891      	adds	r1, r2, r2
 800604c:	62b9      	str	r1, [r7, #40]	; 0x28
 800604e:	415b      	adcs	r3, r3
 8006050:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006052:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006056:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800605a:	f7fa fdcd 	bl	8000bf8 <__aeabi_uldivmod>
 800605e:	4602      	mov	r2, r0
 8006060:	460b      	mov	r3, r1
 8006062:	4b8c      	ldr	r3, [pc, #560]	; (8006294 <UART_SetConfig+0x38c>)
 8006064:	fba3 1302 	umull	r1, r3, r3, r2
 8006068:	095b      	lsrs	r3, r3, #5
 800606a:	2164      	movs	r1, #100	; 0x64
 800606c:	fb01 f303 	mul.w	r3, r1, r3
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	00db      	lsls	r3, r3, #3
 8006074:	3332      	adds	r3, #50	; 0x32
 8006076:	4a87      	ldr	r2, [pc, #540]	; (8006294 <UART_SetConfig+0x38c>)
 8006078:	fba2 2303 	umull	r2, r3, r2, r3
 800607c:	095b      	lsrs	r3, r3, #5
 800607e:	005b      	lsls	r3, r3, #1
 8006080:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006084:	441e      	add	r6, r3
 8006086:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006088:	4618      	mov	r0, r3
 800608a:	f04f 0100 	mov.w	r1, #0
 800608e:	4602      	mov	r2, r0
 8006090:	460b      	mov	r3, r1
 8006092:	1894      	adds	r4, r2, r2
 8006094:	623c      	str	r4, [r7, #32]
 8006096:	415b      	adcs	r3, r3
 8006098:	627b      	str	r3, [r7, #36]	; 0x24
 800609a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800609e:	1812      	adds	r2, r2, r0
 80060a0:	eb41 0303 	adc.w	r3, r1, r3
 80060a4:	f04f 0400 	mov.w	r4, #0
 80060a8:	f04f 0500 	mov.w	r5, #0
 80060ac:	00dd      	lsls	r5, r3, #3
 80060ae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80060b2:	00d4      	lsls	r4, r2, #3
 80060b4:	4622      	mov	r2, r4
 80060b6:	462b      	mov	r3, r5
 80060b8:	1814      	adds	r4, r2, r0
 80060ba:	653c      	str	r4, [r7, #80]	; 0x50
 80060bc:	414b      	adcs	r3, r1
 80060be:	657b      	str	r3, [r7, #84]	; 0x54
 80060c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	461a      	mov	r2, r3
 80060c6:	f04f 0300 	mov.w	r3, #0
 80060ca:	1891      	adds	r1, r2, r2
 80060cc:	61b9      	str	r1, [r7, #24]
 80060ce:	415b      	adcs	r3, r3
 80060d0:	61fb      	str	r3, [r7, #28]
 80060d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060d6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80060da:	f7fa fd8d 	bl	8000bf8 <__aeabi_uldivmod>
 80060de:	4602      	mov	r2, r0
 80060e0:	460b      	mov	r3, r1
 80060e2:	4b6c      	ldr	r3, [pc, #432]	; (8006294 <UART_SetConfig+0x38c>)
 80060e4:	fba3 1302 	umull	r1, r3, r3, r2
 80060e8:	095b      	lsrs	r3, r3, #5
 80060ea:	2164      	movs	r1, #100	; 0x64
 80060ec:	fb01 f303 	mul.w	r3, r1, r3
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	00db      	lsls	r3, r3, #3
 80060f4:	3332      	adds	r3, #50	; 0x32
 80060f6:	4a67      	ldr	r2, [pc, #412]	; (8006294 <UART_SetConfig+0x38c>)
 80060f8:	fba2 2303 	umull	r2, r3, r2, r3
 80060fc:	095b      	lsrs	r3, r3, #5
 80060fe:	f003 0207 	and.w	r2, r3, #7
 8006102:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4432      	add	r2, r6
 8006108:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800610a:	e0b9      	b.n	8006280 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800610c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800610e:	461c      	mov	r4, r3
 8006110:	f04f 0500 	mov.w	r5, #0
 8006114:	4622      	mov	r2, r4
 8006116:	462b      	mov	r3, r5
 8006118:	1891      	adds	r1, r2, r2
 800611a:	6139      	str	r1, [r7, #16]
 800611c:	415b      	adcs	r3, r3
 800611e:	617b      	str	r3, [r7, #20]
 8006120:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006124:	1912      	adds	r2, r2, r4
 8006126:	eb45 0303 	adc.w	r3, r5, r3
 800612a:	f04f 0000 	mov.w	r0, #0
 800612e:	f04f 0100 	mov.w	r1, #0
 8006132:	00d9      	lsls	r1, r3, #3
 8006134:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006138:	00d0      	lsls	r0, r2, #3
 800613a:	4602      	mov	r2, r0
 800613c:	460b      	mov	r3, r1
 800613e:	eb12 0804 	adds.w	r8, r2, r4
 8006142:	eb43 0905 	adc.w	r9, r3, r5
 8006146:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	4618      	mov	r0, r3
 800614c:	f04f 0100 	mov.w	r1, #0
 8006150:	f04f 0200 	mov.w	r2, #0
 8006154:	f04f 0300 	mov.w	r3, #0
 8006158:	008b      	lsls	r3, r1, #2
 800615a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800615e:	0082      	lsls	r2, r0, #2
 8006160:	4640      	mov	r0, r8
 8006162:	4649      	mov	r1, r9
 8006164:	f7fa fd48 	bl	8000bf8 <__aeabi_uldivmod>
 8006168:	4602      	mov	r2, r0
 800616a:	460b      	mov	r3, r1
 800616c:	4b49      	ldr	r3, [pc, #292]	; (8006294 <UART_SetConfig+0x38c>)
 800616e:	fba3 2302 	umull	r2, r3, r3, r2
 8006172:	095b      	lsrs	r3, r3, #5
 8006174:	011e      	lsls	r6, r3, #4
 8006176:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006178:	4618      	mov	r0, r3
 800617a:	f04f 0100 	mov.w	r1, #0
 800617e:	4602      	mov	r2, r0
 8006180:	460b      	mov	r3, r1
 8006182:	1894      	adds	r4, r2, r2
 8006184:	60bc      	str	r4, [r7, #8]
 8006186:	415b      	adcs	r3, r3
 8006188:	60fb      	str	r3, [r7, #12]
 800618a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800618e:	1812      	adds	r2, r2, r0
 8006190:	eb41 0303 	adc.w	r3, r1, r3
 8006194:	f04f 0400 	mov.w	r4, #0
 8006198:	f04f 0500 	mov.w	r5, #0
 800619c:	00dd      	lsls	r5, r3, #3
 800619e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80061a2:	00d4      	lsls	r4, r2, #3
 80061a4:	4622      	mov	r2, r4
 80061a6:	462b      	mov	r3, r5
 80061a8:	1814      	adds	r4, r2, r0
 80061aa:	64bc      	str	r4, [r7, #72]	; 0x48
 80061ac:	414b      	adcs	r3, r1
 80061ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	4618      	mov	r0, r3
 80061b6:	f04f 0100 	mov.w	r1, #0
 80061ba:	f04f 0200 	mov.w	r2, #0
 80061be:	f04f 0300 	mov.w	r3, #0
 80061c2:	008b      	lsls	r3, r1, #2
 80061c4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80061c8:	0082      	lsls	r2, r0, #2
 80061ca:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80061ce:	f7fa fd13 	bl	8000bf8 <__aeabi_uldivmod>
 80061d2:	4602      	mov	r2, r0
 80061d4:	460b      	mov	r3, r1
 80061d6:	4b2f      	ldr	r3, [pc, #188]	; (8006294 <UART_SetConfig+0x38c>)
 80061d8:	fba3 1302 	umull	r1, r3, r3, r2
 80061dc:	095b      	lsrs	r3, r3, #5
 80061de:	2164      	movs	r1, #100	; 0x64
 80061e0:	fb01 f303 	mul.w	r3, r1, r3
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	011b      	lsls	r3, r3, #4
 80061e8:	3332      	adds	r3, #50	; 0x32
 80061ea:	4a2a      	ldr	r2, [pc, #168]	; (8006294 <UART_SetConfig+0x38c>)
 80061ec:	fba2 2303 	umull	r2, r3, r2, r3
 80061f0:	095b      	lsrs	r3, r3, #5
 80061f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061f6:	441e      	add	r6, r3
 80061f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061fa:	4618      	mov	r0, r3
 80061fc:	f04f 0100 	mov.w	r1, #0
 8006200:	4602      	mov	r2, r0
 8006202:	460b      	mov	r3, r1
 8006204:	1894      	adds	r4, r2, r2
 8006206:	603c      	str	r4, [r7, #0]
 8006208:	415b      	adcs	r3, r3
 800620a:	607b      	str	r3, [r7, #4]
 800620c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006210:	1812      	adds	r2, r2, r0
 8006212:	eb41 0303 	adc.w	r3, r1, r3
 8006216:	f04f 0400 	mov.w	r4, #0
 800621a:	f04f 0500 	mov.w	r5, #0
 800621e:	00dd      	lsls	r5, r3, #3
 8006220:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006224:	00d4      	lsls	r4, r2, #3
 8006226:	4622      	mov	r2, r4
 8006228:	462b      	mov	r3, r5
 800622a:	eb12 0a00 	adds.w	sl, r2, r0
 800622e:	eb43 0b01 	adc.w	fp, r3, r1
 8006232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	4618      	mov	r0, r3
 8006238:	f04f 0100 	mov.w	r1, #0
 800623c:	f04f 0200 	mov.w	r2, #0
 8006240:	f04f 0300 	mov.w	r3, #0
 8006244:	008b      	lsls	r3, r1, #2
 8006246:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800624a:	0082      	lsls	r2, r0, #2
 800624c:	4650      	mov	r0, sl
 800624e:	4659      	mov	r1, fp
 8006250:	f7fa fcd2 	bl	8000bf8 <__aeabi_uldivmod>
 8006254:	4602      	mov	r2, r0
 8006256:	460b      	mov	r3, r1
 8006258:	4b0e      	ldr	r3, [pc, #56]	; (8006294 <UART_SetConfig+0x38c>)
 800625a:	fba3 1302 	umull	r1, r3, r3, r2
 800625e:	095b      	lsrs	r3, r3, #5
 8006260:	2164      	movs	r1, #100	; 0x64
 8006262:	fb01 f303 	mul.w	r3, r1, r3
 8006266:	1ad3      	subs	r3, r2, r3
 8006268:	011b      	lsls	r3, r3, #4
 800626a:	3332      	adds	r3, #50	; 0x32
 800626c:	4a09      	ldr	r2, [pc, #36]	; (8006294 <UART_SetConfig+0x38c>)
 800626e:	fba2 2303 	umull	r2, r3, r2, r3
 8006272:	095b      	lsrs	r3, r3, #5
 8006274:	f003 020f 	and.w	r2, r3, #15
 8006278:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4432      	add	r2, r6
 800627e:	609a      	str	r2, [r3, #8]
}
 8006280:	bf00      	nop
 8006282:	377c      	adds	r7, #124	; 0x7c
 8006284:	46bd      	mov	sp, r7
 8006286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800628a:	bf00      	nop
 800628c:	40011000 	.word	0x40011000
 8006290:	40011400 	.word	0x40011400
 8006294:	51eb851f 	.word	0x51eb851f

08006298 <__errno>:
 8006298:	4b01      	ldr	r3, [pc, #4]	; (80062a0 <__errno+0x8>)
 800629a:	6818      	ldr	r0, [r3, #0]
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	2000000c 	.word	0x2000000c

080062a4 <__libc_init_array>:
 80062a4:	b570      	push	{r4, r5, r6, lr}
 80062a6:	4d0d      	ldr	r5, [pc, #52]	; (80062dc <__libc_init_array+0x38>)
 80062a8:	4c0d      	ldr	r4, [pc, #52]	; (80062e0 <__libc_init_array+0x3c>)
 80062aa:	1b64      	subs	r4, r4, r5
 80062ac:	10a4      	asrs	r4, r4, #2
 80062ae:	2600      	movs	r6, #0
 80062b0:	42a6      	cmp	r6, r4
 80062b2:	d109      	bne.n	80062c8 <__libc_init_array+0x24>
 80062b4:	4d0b      	ldr	r5, [pc, #44]	; (80062e4 <__libc_init_array+0x40>)
 80062b6:	4c0c      	ldr	r4, [pc, #48]	; (80062e8 <__libc_init_array+0x44>)
 80062b8:	f002 feb4 	bl	8009024 <_init>
 80062bc:	1b64      	subs	r4, r4, r5
 80062be:	10a4      	asrs	r4, r4, #2
 80062c0:	2600      	movs	r6, #0
 80062c2:	42a6      	cmp	r6, r4
 80062c4:	d105      	bne.n	80062d2 <__libc_init_array+0x2e>
 80062c6:	bd70      	pop	{r4, r5, r6, pc}
 80062c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80062cc:	4798      	blx	r3
 80062ce:	3601      	adds	r6, #1
 80062d0:	e7ee      	b.n	80062b0 <__libc_init_array+0xc>
 80062d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80062d6:	4798      	blx	r3
 80062d8:	3601      	adds	r6, #1
 80062da:	e7f2      	b.n	80062c2 <__libc_init_array+0x1e>
 80062dc:	080094bc 	.word	0x080094bc
 80062e0:	080094bc 	.word	0x080094bc
 80062e4:	080094bc 	.word	0x080094bc
 80062e8:	080094c0 	.word	0x080094c0

080062ec <memset>:
 80062ec:	4402      	add	r2, r0
 80062ee:	4603      	mov	r3, r0
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d100      	bne.n	80062f6 <memset+0xa>
 80062f4:	4770      	bx	lr
 80062f6:	f803 1b01 	strb.w	r1, [r3], #1
 80062fa:	e7f9      	b.n	80062f0 <memset+0x4>

080062fc <__cvt>:
 80062fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006300:	ec55 4b10 	vmov	r4, r5, d0
 8006304:	2d00      	cmp	r5, #0
 8006306:	460e      	mov	r6, r1
 8006308:	4619      	mov	r1, r3
 800630a:	462b      	mov	r3, r5
 800630c:	bfbb      	ittet	lt
 800630e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006312:	461d      	movlt	r5, r3
 8006314:	2300      	movge	r3, #0
 8006316:	232d      	movlt	r3, #45	; 0x2d
 8006318:	700b      	strb	r3, [r1, #0]
 800631a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800631c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006320:	4691      	mov	r9, r2
 8006322:	f023 0820 	bic.w	r8, r3, #32
 8006326:	bfbc      	itt	lt
 8006328:	4622      	movlt	r2, r4
 800632a:	4614      	movlt	r4, r2
 800632c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006330:	d005      	beq.n	800633e <__cvt+0x42>
 8006332:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006336:	d100      	bne.n	800633a <__cvt+0x3e>
 8006338:	3601      	adds	r6, #1
 800633a:	2102      	movs	r1, #2
 800633c:	e000      	b.n	8006340 <__cvt+0x44>
 800633e:	2103      	movs	r1, #3
 8006340:	ab03      	add	r3, sp, #12
 8006342:	9301      	str	r3, [sp, #4]
 8006344:	ab02      	add	r3, sp, #8
 8006346:	9300      	str	r3, [sp, #0]
 8006348:	ec45 4b10 	vmov	d0, r4, r5
 800634c:	4653      	mov	r3, sl
 800634e:	4632      	mov	r2, r6
 8006350:	f000 fcea 	bl	8006d28 <_dtoa_r>
 8006354:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006358:	4607      	mov	r7, r0
 800635a:	d102      	bne.n	8006362 <__cvt+0x66>
 800635c:	f019 0f01 	tst.w	r9, #1
 8006360:	d022      	beq.n	80063a8 <__cvt+0xac>
 8006362:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006366:	eb07 0906 	add.w	r9, r7, r6
 800636a:	d110      	bne.n	800638e <__cvt+0x92>
 800636c:	783b      	ldrb	r3, [r7, #0]
 800636e:	2b30      	cmp	r3, #48	; 0x30
 8006370:	d10a      	bne.n	8006388 <__cvt+0x8c>
 8006372:	2200      	movs	r2, #0
 8006374:	2300      	movs	r3, #0
 8006376:	4620      	mov	r0, r4
 8006378:	4629      	mov	r1, r5
 800637a:	f7fa fbad 	bl	8000ad8 <__aeabi_dcmpeq>
 800637e:	b918      	cbnz	r0, 8006388 <__cvt+0x8c>
 8006380:	f1c6 0601 	rsb	r6, r6, #1
 8006384:	f8ca 6000 	str.w	r6, [sl]
 8006388:	f8da 3000 	ldr.w	r3, [sl]
 800638c:	4499      	add	r9, r3
 800638e:	2200      	movs	r2, #0
 8006390:	2300      	movs	r3, #0
 8006392:	4620      	mov	r0, r4
 8006394:	4629      	mov	r1, r5
 8006396:	f7fa fb9f 	bl	8000ad8 <__aeabi_dcmpeq>
 800639a:	b108      	cbz	r0, 80063a0 <__cvt+0xa4>
 800639c:	f8cd 900c 	str.w	r9, [sp, #12]
 80063a0:	2230      	movs	r2, #48	; 0x30
 80063a2:	9b03      	ldr	r3, [sp, #12]
 80063a4:	454b      	cmp	r3, r9
 80063a6:	d307      	bcc.n	80063b8 <__cvt+0xbc>
 80063a8:	9b03      	ldr	r3, [sp, #12]
 80063aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80063ac:	1bdb      	subs	r3, r3, r7
 80063ae:	4638      	mov	r0, r7
 80063b0:	6013      	str	r3, [r2, #0]
 80063b2:	b004      	add	sp, #16
 80063b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063b8:	1c59      	adds	r1, r3, #1
 80063ba:	9103      	str	r1, [sp, #12]
 80063bc:	701a      	strb	r2, [r3, #0]
 80063be:	e7f0      	b.n	80063a2 <__cvt+0xa6>

080063c0 <__exponent>:
 80063c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063c2:	4603      	mov	r3, r0
 80063c4:	2900      	cmp	r1, #0
 80063c6:	bfb8      	it	lt
 80063c8:	4249      	neglt	r1, r1
 80063ca:	f803 2b02 	strb.w	r2, [r3], #2
 80063ce:	bfb4      	ite	lt
 80063d0:	222d      	movlt	r2, #45	; 0x2d
 80063d2:	222b      	movge	r2, #43	; 0x2b
 80063d4:	2909      	cmp	r1, #9
 80063d6:	7042      	strb	r2, [r0, #1]
 80063d8:	dd2a      	ble.n	8006430 <__exponent+0x70>
 80063da:	f10d 0407 	add.w	r4, sp, #7
 80063de:	46a4      	mov	ip, r4
 80063e0:	270a      	movs	r7, #10
 80063e2:	46a6      	mov	lr, r4
 80063e4:	460a      	mov	r2, r1
 80063e6:	fb91 f6f7 	sdiv	r6, r1, r7
 80063ea:	fb07 1516 	mls	r5, r7, r6, r1
 80063ee:	3530      	adds	r5, #48	; 0x30
 80063f0:	2a63      	cmp	r2, #99	; 0x63
 80063f2:	f104 34ff 	add.w	r4, r4, #4294967295
 80063f6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80063fa:	4631      	mov	r1, r6
 80063fc:	dcf1      	bgt.n	80063e2 <__exponent+0x22>
 80063fe:	3130      	adds	r1, #48	; 0x30
 8006400:	f1ae 0502 	sub.w	r5, lr, #2
 8006404:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006408:	1c44      	adds	r4, r0, #1
 800640a:	4629      	mov	r1, r5
 800640c:	4561      	cmp	r1, ip
 800640e:	d30a      	bcc.n	8006426 <__exponent+0x66>
 8006410:	f10d 0209 	add.w	r2, sp, #9
 8006414:	eba2 020e 	sub.w	r2, r2, lr
 8006418:	4565      	cmp	r5, ip
 800641a:	bf88      	it	hi
 800641c:	2200      	movhi	r2, #0
 800641e:	4413      	add	r3, r2
 8006420:	1a18      	subs	r0, r3, r0
 8006422:	b003      	add	sp, #12
 8006424:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006426:	f811 2b01 	ldrb.w	r2, [r1], #1
 800642a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800642e:	e7ed      	b.n	800640c <__exponent+0x4c>
 8006430:	2330      	movs	r3, #48	; 0x30
 8006432:	3130      	adds	r1, #48	; 0x30
 8006434:	7083      	strb	r3, [r0, #2]
 8006436:	70c1      	strb	r1, [r0, #3]
 8006438:	1d03      	adds	r3, r0, #4
 800643a:	e7f1      	b.n	8006420 <__exponent+0x60>

0800643c <_printf_float>:
 800643c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006440:	ed2d 8b02 	vpush	{d8}
 8006444:	b08d      	sub	sp, #52	; 0x34
 8006446:	460c      	mov	r4, r1
 8006448:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800644c:	4616      	mov	r6, r2
 800644e:	461f      	mov	r7, r3
 8006450:	4605      	mov	r5, r0
 8006452:	f001 fa55 	bl	8007900 <_localeconv_r>
 8006456:	f8d0 a000 	ldr.w	sl, [r0]
 800645a:	4650      	mov	r0, sl
 800645c:	f7f9 fec0 	bl	80001e0 <strlen>
 8006460:	2300      	movs	r3, #0
 8006462:	930a      	str	r3, [sp, #40]	; 0x28
 8006464:	6823      	ldr	r3, [r4, #0]
 8006466:	9305      	str	r3, [sp, #20]
 8006468:	f8d8 3000 	ldr.w	r3, [r8]
 800646c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006470:	3307      	adds	r3, #7
 8006472:	f023 0307 	bic.w	r3, r3, #7
 8006476:	f103 0208 	add.w	r2, r3, #8
 800647a:	f8c8 2000 	str.w	r2, [r8]
 800647e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006482:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006486:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800648a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800648e:	9307      	str	r3, [sp, #28]
 8006490:	f8cd 8018 	str.w	r8, [sp, #24]
 8006494:	ee08 0a10 	vmov	s16, r0
 8006498:	4b9f      	ldr	r3, [pc, #636]	; (8006718 <_printf_float+0x2dc>)
 800649a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800649e:	f04f 32ff 	mov.w	r2, #4294967295
 80064a2:	f7fa fb4b 	bl	8000b3c <__aeabi_dcmpun>
 80064a6:	bb88      	cbnz	r0, 800650c <_printf_float+0xd0>
 80064a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80064ac:	4b9a      	ldr	r3, [pc, #616]	; (8006718 <_printf_float+0x2dc>)
 80064ae:	f04f 32ff 	mov.w	r2, #4294967295
 80064b2:	f7fa fb25 	bl	8000b00 <__aeabi_dcmple>
 80064b6:	bb48      	cbnz	r0, 800650c <_printf_float+0xd0>
 80064b8:	2200      	movs	r2, #0
 80064ba:	2300      	movs	r3, #0
 80064bc:	4640      	mov	r0, r8
 80064be:	4649      	mov	r1, r9
 80064c0:	f7fa fb14 	bl	8000aec <__aeabi_dcmplt>
 80064c4:	b110      	cbz	r0, 80064cc <_printf_float+0x90>
 80064c6:	232d      	movs	r3, #45	; 0x2d
 80064c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064cc:	4b93      	ldr	r3, [pc, #588]	; (800671c <_printf_float+0x2e0>)
 80064ce:	4894      	ldr	r0, [pc, #592]	; (8006720 <_printf_float+0x2e4>)
 80064d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80064d4:	bf94      	ite	ls
 80064d6:	4698      	movls	r8, r3
 80064d8:	4680      	movhi	r8, r0
 80064da:	2303      	movs	r3, #3
 80064dc:	6123      	str	r3, [r4, #16]
 80064de:	9b05      	ldr	r3, [sp, #20]
 80064e0:	f023 0204 	bic.w	r2, r3, #4
 80064e4:	6022      	str	r2, [r4, #0]
 80064e6:	f04f 0900 	mov.w	r9, #0
 80064ea:	9700      	str	r7, [sp, #0]
 80064ec:	4633      	mov	r3, r6
 80064ee:	aa0b      	add	r2, sp, #44	; 0x2c
 80064f0:	4621      	mov	r1, r4
 80064f2:	4628      	mov	r0, r5
 80064f4:	f000 f9d8 	bl	80068a8 <_printf_common>
 80064f8:	3001      	adds	r0, #1
 80064fa:	f040 8090 	bne.w	800661e <_printf_float+0x1e2>
 80064fe:	f04f 30ff 	mov.w	r0, #4294967295
 8006502:	b00d      	add	sp, #52	; 0x34
 8006504:	ecbd 8b02 	vpop	{d8}
 8006508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800650c:	4642      	mov	r2, r8
 800650e:	464b      	mov	r3, r9
 8006510:	4640      	mov	r0, r8
 8006512:	4649      	mov	r1, r9
 8006514:	f7fa fb12 	bl	8000b3c <__aeabi_dcmpun>
 8006518:	b140      	cbz	r0, 800652c <_printf_float+0xf0>
 800651a:	464b      	mov	r3, r9
 800651c:	2b00      	cmp	r3, #0
 800651e:	bfbc      	itt	lt
 8006520:	232d      	movlt	r3, #45	; 0x2d
 8006522:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006526:	487f      	ldr	r0, [pc, #508]	; (8006724 <_printf_float+0x2e8>)
 8006528:	4b7f      	ldr	r3, [pc, #508]	; (8006728 <_printf_float+0x2ec>)
 800652a:	e7d1      	b.n	80064d0 <_printf_float+0x94>
 800652c:	6863      	ldr	r3, [r4, #4]
 800652e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006532:	9206      	str	r2, [sp, #24]
 8006534:	1c5a      	adds	r2, r3, #1
 8006536:	d13f      	bne.n	80065b8 <_printf_float+0x17c>
 8006538:	2306      	movs	r3, #6
 800653a:	6063      	str	r3, [r4, #4]
 800653c:	9b05      	ldr	r3, [sp, #20]
 800653e:	6861      	ldr	r1, [r4, #4]
 8006540:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006544:	2300      	movs	r3, #0
 8006546:	9303      	str	r3, [sp, #12]
 8006548:	ab0a      	add	r3, sp, #40	; 0x28
 800654a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800654e:	ab09      	add	r3, sp, #36	; 0x24
 8006550:	ec49 8b10 	vmov	d0, r8, r9
 8006554:	9300      	str	r3, [sp, #0]
 8006556:	6022      	str	r2, [r4, #0]
 8006558:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800655c:	4628      	mov	r0, r5
 800655e:	f7ff fecd 	bl	80062fc <__cvt>
 8006562:	9b06      	ldr	r3, [sp, #24]
 8006564:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006566:	2b47      	cmp	r3, #71	; 0x47
 8006568:	4680      	mov	r8, r0
 800656a:	d108      	bne.n	800657e <_printf_float+0x142>
 800656c:	1cc8      	adds	r0, r1, #3
 800656e:	db02      	blt.n	8006576 <_printf_float+0x13a>
 8006570:	6863      	ldr	r3, [r4, #4]
 8006572:	4299      	cmp	r1, r3
 8006574:	dd41      	ble.n	80065fa <_printf_float+0x1be>
 8006576:	f1ab 0b02 	sub.w	fp, fp, #2
 800657a:	fa5f fb8b 	uxtb.w	fp, fp
 800657e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006582:	d820      	bhi.n	80065c6 <_printf_float+0x18a>
 8006584:	3901      	subs	r1, #1
 8006586:	465a      	mov	r2, fp
 8006588:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800658c:	9109      	str	r1, [sp, #36]	; 0x24
 800658e:	f7ff ff17 	bl	80063c0 <__exponent>
 8006592:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006594:	1813      	adds	r3, r2, r0
 8006596:	2a01      	cmp	r2, #1
 8006598:	4681      	mov	r9, r0
 800659a:	6123      	str	r3, [r4, #16]
 800659c:	dc02      	bgt.n	80065a4 <_printf_float+0x168>
 800659e:	6822      	ldr	r2, [r4, #0]
 80065a0:	07d2      	lsls	r2, r2, #31
 80065a2:	d501      	bpl.n	80065a8 <_printf_float+0x16c>
 80065a4:	3301      	adds	r3, #1
 80065a6:	6123      	str	r3, [r4, #16]
 80065a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d09c      	beq.n	80064ea <_printf_float+0xae>
 80065b0:	232d      	movs	r3, #45	; 0x2d
 80065b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065b6:	e798      	b.n	80064ea <_printf_float+0xae>
 80065b8:	9a06      	ldr	r2, [sp, #24]
 80065ba:	2a47      	cmp	r2, #71	; 0x47
 80065bc:	d1be      	bne.n	800653c <_printf_float+0x100>
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d1bc      	bne.n	800653c <_printf_float+0x100>
 80065c2:	2301      	movs	r3, #1
 80065c4:	e7b9      	b.n	800653a <_printf_float+0xfe>
 80065c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80065ca:	d118      	bne.n	80065fe <_printf_float+0x1c2>
 80065cc:	2900      	cmp	r1, #0
 80065ce:	6863      	ldr	r3, [r4, #4]
 80065d0:	dd0b      	ble.n	80065ea <_printf_float+0x1ae>
 80065d2:	6121      	str	r1, [r4, #16]
 80065d4:	b913      	cbnz	r3, 80065dc <_printf_float+0x1a0>
 80065d6:	6822      	ldr	r2, [r4, #0]
 80065d8:	07d0      	lsls	r0, r2, #31
 80065da:	d502      	bpl.n	80065e2 <_printf_float+0x1a6>
 80065dc:	3301      	adds	r3, #1
 80065de:	440b      	add	r3, r1
 80065e0:	6123      	str	r3, [r4, #16]
 80065e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80065e4:	f04f 0900 	mov.w	r9, #0
 80065e8:	e7de      	b.n	80065a8 <_printf_float+0x16c>
 80065ea:	b913      	cbnz	r3, 80065f2 <_printf_float+0x1b6>
 80065ec:	6822      	ldr	r2, [r4, #0]
 80065ee:	07d2      	lsls	r2, r2, #31
 80065f0:	d501      	bpl.n	80065f6 <_printf_float+0x1ba>
 80065f2:	3302      	adds	r3, #2
 80065f4:	e7f4      	b.n	80065e0 <_printf_float+0x1a4>
 80065f6:	2301      	movs	r3, #1
 80065f8:	e7f2      	b.n	80065e0 <_printf_float+0x1a4>
 80065fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80065fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006600:	4299      	cmp	r1, r3
 8006602:	db05      	blt.n	8006610 <_printf_float+0x1d4>
 8006604:	6823      	ldr	r3, [r4, #0]
 8006606:	6121      	str	r1, [r4, #16]
 8006608:	07d8      	lsls	r0, r3, #31
 800660a:	d5ea      	bpl.n	80065e2 <_printf_float+0x1a6>
 800660c:	1c4b      	adds	r3, r1, #1
 800660e:	e7e7      	b.n	80065e0 <_printf_float+0x1a4>
 8006610:	2900      	cmp	r1, #0
 8006612:	bfd4      	ite	le
 8006614:	f1c1 0202 	rsble	r2, r1, #2
 8006618:	2201      	movgt	r2, #1
 800661a:	4413      	add	r3, r2
 800661c:	e7e0      	b.n	80065e0 <_printf_float+0x1a4>
 800661e:	6823      	ldr	r3, [r4, #0]
 8006620:	055a      	lsls	r2, r3, #21
 8006622:	d407      	bmi.n	8006634 <_printf_float+0x1f8>
 8006624:	6923      	ldr	r3, [r4, #16]
 8006626:	4642      	mov	r2, r8
 8006628:	4631      	mov	r1, r6
 800662a:	4628      	mov	r0, r5
 800662c:	47b8      	blx	r7
 800662e:	3001      	adds	r0, #1
 8006630:	d12c      	bne.n	800668c <_printf_float+0x250>
 8006632:	e764      	b.n	80064fe <_printf_float+0xc2>
 8006634:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006638:	f240 80e0 	bls.w	80067fc <_printf_float+0x3c0>
 800663c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006640:	2200      	movs	r2, #0
 8006642:	2300      	movs	r3, #0
 8006644:	f7fa fa48 	bl	8000ad8 <__aeabi_dcmpeq>
 8006648:	2800      	cmp	r0, #0
 800664a:	d034      	beq.n	80066b6 <_printf_float+0x27a>
 800664c:	4a37      	ldr	r2, [pc, #220]	; (800672c <_printf_float+0x2f0>)
 800664e:	2301      	movs	r3, #1
 8006650:	4631      	mov	r1, r6
 8006652:	4628      	mov	r0, r5
 8006654:	47b8      	blx	r7
 8006656:	3001      	adds	r0, #1
 8006658:	f43f af51 	beq.w	80064fe <_printf_float+0xc2>
 800665c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006660:	429a      	cmp	r2, r3
 8006662:	db02      	blt.n	800666a <_printf_float+0x22e>
 8006664:	6823      	ldr	r3, [r4, #0]
 8006666:	07d8      	lsls	r0, r3, #31
 8006668:	d510      	bpl.n	800668c <_printf_float+0x250>
 800666a:	ee18 3a10 	vmov	r3, s16
 800666e:	4652      	mov	r2, sl
 8006670:	4631      	mov	r1, r6
 8006672:	4628      	mov	r0, r5
 8006674:	47b8      	blx	r7
 8006676:	3001      	adds	r0, #1
 8006678:	f43f af41 	beq.w	80064fe <_printf_float+0xc2>
 800667c:	f04f 0800 	mov.w	r8, #0
 8006680:	f104 091a 	add.w	r9, r4, #26
 8006684:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006686:	3b01      	subs	r3, #1
 8006688:	4543      	cmp	r3, r8
 800668a:	dc09      	bgt.n	80066a0 <_printf_float+0x264>
 800668c:	6823      	ldr	r3, [r4, #0]
 800668e:	079b      	lsls	r3, r3, #30
 8006690:	f100 8105 	bmi.w	800689e <_printf_float+0x462>
 8006694:	68e0      	ldr	r0, [r4, #12]
 8006696:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006698:	4298      	cmp	r0, r3
 800669a:	bfb8      	it	lt
 800669c:	4618      	movlt	r0, r3
 800669e:	e730      	b.n	8006502 <_printf_float+0xc6>
 80066a0:	2301      	movs	r3, #1
 80066a2:	464a      	mov	r2, r9
 80066a4:	4631      	mov	r1, r6
 80066a6:	4628      	mov	r0, r5
 80066a8:	47b8      	blx	r7
 80066aa:	3001      	adds	r0, #1
 80066ac:	f43f af27 	beq.w	80064fe <_printf_float+0xc2>
 80066b0:	f108 0801 	add.w	r8, r8, #1
 80066b4:	e7e6      	b.n	8006684 <_printf_float+0x248>
 80066b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	dc39      	bgt.n	8006730 <_printf_float+0x2f4>
 80066bc:	4a1b      	ldr	r2, [pc, #108]	; (800672c <_printf_float+0x2f0>)
 80066be:	2301      	movs	r3, #1
 80066c0:	4631      	mov	r1, r6
 80066c2:	4628      	mov	r0, r5
 80066c4:	47b8      	blx	r7
 80066c6:	3001      	adds	r0, #1
 80066c8:	f43f af19 	beq.w	80064fe <_printf_float+0xc2>
 80066cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066d0:	4313      	orrs	r3, r2
 80066d2:	d102      	bne.n	80066da <_printf_float+0x29e>
 80066d4:	6823      	ldr	r3, [r4, #0]
 80066d6:	07d9      	lsls	r1, r3, #31
 80066d8:	d5d8      	bpl.n	800668c <_printf_float+0x250>
 80066da:	ee18 3a10 	vmov	r3, s16
 80066de:	4652      	mov	r2, sl
 80066e0:	4631      	mov	r1, r6
 80066e2:	4628      	mov	r0, r5
 80066e4:	47b8      	blx	r7
 80066e6:	3001      	adds	r0, #1
 80066e8:	f43f af09 	beq.w	80064fe <_printf_float+0xc2>
 80066ec:	f04f 0900 	mov.w	r9, #0
 80066f0:	f104 0a1a 	add.w	sl, r4, #26
 80066f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066f6:	425b      	negs	r3, r3
 80066f8:	454b      	cmp	r3, r9
 80066fa:	dc01      	bgt.n	8006700 <_printf_float+0x2c4>
 80066fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066fe:	e792      	b.n	8006626 <_printf_float+0x1ea>
 8006700:	2301      	movs	r3, #1
 8006702:	4652      	mov	r2, sl
 8006704:	4631      	mov	r1, r6
 8006706:	4628      	mov	r0, r5
 8006708:	47b8      	blx	r7
 800670a:	3001      	adds	r0, #1
 800670c:	f43f aef7 	beq.w	80064fe <_printf_float+0xc2>
 8006710:	f109 0901 	add.w	r9, r9, #1
 8006714:	e7ee      	b.n	80066f4 <_printf_float+0x2b8>
 8006716:	bf00      	nop
 8006718:	7fefffff 	.word	0x7fefffff
 800671c:	080090d8 	.word	0x080090d8
 8006720:	080090dc 	.word	0x080090dc
 8006724:	080090e4 	.word	0x080090e4
 8006728:	080090e0 	.word	0x080090e0
 800672c:	080090e8 	.word	0x080090e8
 8006730:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006732:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006734:	429a      	cmp	r2, r3
 8006736:	bfa8      	it	ge
 8006738:	461a      	movge	r2, r3
 800673a:	2a00      	cmp	r2, #0
 800673c:	4691      	mov	r9, r2
 800673e:	dc37      	bgt.n	80067b0 <_printf_float+0x374>
 8006740:	f04f 0b00 	mov.w	fp, #0
 8006744:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006748:	f104 021a 	add.w	r2, r4, #26
 800674c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800674e:	9305      	str	r3, [sp, #20]
 8006750:	eba3 0309 	sub.w	r3, r3, r9
 8006754:	455b      	cmp	r3, fp
 8006756:	dc33      	bgt.n	80067c0 <_printf_float+0x384>
 8006758:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800675c:	429a      	cmp	r2, r3
 800675e:	db3b      	blt.n	80067d8 <_printf_float+0x39c>
 8006760:	6823      	ldr	r3, [r4, #0]
 8006762:	07da      	lsls	r2, r3, #31
 8006764:	d438      	bmi.n	80067d8 <_printf_float+0x39c>
 8006766:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006768:	9b05      	ldr	r3, [sp, #20]
 800676a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	eba2 0901 	sub.w	r9, r2, r1
 8006772:	4599      	cmp	r9, r3
 8006774:	bfa8      	it	ge
 8006776:	4699      	movge	r9, r3
 8006778:	f1b9 0f00 	cmp.w	r9, #0
 800677c:	dc35      	bgt.n	80067ea <_printf_float+0x3ae>
 800677e:	f04f 0800 	mov.w	r8, #0
 8006782:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006786:	f104 0a1a 	add.w	sl, r4, #26
 800678a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800678e:	1a9b      	subs	r3, r3, r2
 8006790:	eba3 0309 	sub.w	r3, r3, r9
 8006794:	4543      	cmp	r3, r8
 8006796:	f77f af79 	ble.w	800668c <_printf_float+0x250>
 800679a:	2301      	movs	r3, #1
 800679c:	4652      	mov	r2, sl
 800679e:	4631      	mov	r1, r6
 80067a0:	4628      	mov	r0, r5
 80067a2:	47b8      	blx	r7
 80067a4:	3001      	adds	r0, #1
 80067a6:	f43f aeaa 	beq.w	80064fe <_printf_float+0xc2>
 80067aa:	f108 0801 	add.w	r8, r8, #1
 80067ae:	e7ec      	b.n	800678a <_printf_float+0x34e>
 80067b0:	4613      	mov	r3, r2
 80067b2:	4631      	mov	r1, r6
 80067b4:	4642      	mov	r2, r8
 80067b6:	4628      	mov	r0, r5
 80067b8:	47b8      	blx	r7
 80067ba:	3001      	adds	r0, #1
 80067bc:	d1c0      	bne.n	8006740 <_printf_float+0x304>
 80067be:	e69e      	b.n	80064fe <_printf_float+0xc2>
 80067c0:	2301      	movs	r3, #1
 80067c2:	4631      	mov	r1, r6
 80067c4:	4628      	mov	r0, r5
 80067c6:	9205      	str	r2, [sp, #20]
 80067c8:	47b8      	blx	r7
 80067ca:	3001      	adds	r0, #1
 80067cc:	f43f ae97 	beq.w	80064fe <_printf_float+0xc2>
 80067d0:	9a05      	ldr	r2, [sp, #20]
 80067d2:	f10b 0b01 	add.w	fp, fp, #1
 80067d6:	e7b9      	b.n	800674c <_printf_float+0x310>
 80067d8:	ee18 3a10 	vmov	r3, s16
 80067dc:	4652      	mov	r2, sl
 80067de:	4631      	mov	r1, r6
 80067e0:	4628      	mov	r0, r5
 80067e2:	47b8      	blx	r7
 80067e4:	3001      	adds	r0, #1
 80067e6:	d1be      	bne.n	8006766 <_printf_float+0x32a>
 80067e8:	e689      	b.n	80064fe <_printf_float+0xc2>
 80067ea:	9a05      	ldr	r2, [sp, #20]
 80067ec:	464b      	mov	r3, r9
 80067ee:	4442      	add	r2, r8
 80067f0:	4631      	mov	r1, r6
 80067f2:	4628      	mov	r0, r5
 80067f4:	47b8      	blx	r7
 80067f6:	3001      	adds	r0, #1
 80067f8:	d1c1      	bne.n	800677e <_printf_float+0x342>
 80067fa:	e680      	b.n	80064fe <_printf_float+0xc2>
 80067fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067fe:	2a01      	cmp	r2, #1
 8006800:	dc01      	bgt.n	8006806 <_printf_float+0x3ca>
 8006802:	07db      	lsls	r3, r3, #31
 8006804:	d538      	bpl.n	8006878 <_printf_float+0x43c>
 8006806:	2301      	movs	r3, #1
 8006808:	4642      	mov	r2, r8
 800680a:	4631      	mov	r1, r6
 800680c:	4628      	mov	r0, r5
 800680e:	47b8      	blx	r7
 8006810:	3001      	adds	r0, #1
 8006812:	f43f ae74 	beq.w	80064fe <_printf_float+0xc2>
 8006816:	ee18 3a10 	vmov	r3, s16
 800681a:	4652      	mov	r2, sl
 800681c:	4631      	mov	r1, r6
 800681e:	4628      	mov	r0, r5
 8006820:	47b8      	blx	r7
 8006822:	3001      	adds	r0, #1
 8006824:	f43f ae6b 	beq.w	80064fe <_printf_float+0xc2>
 8006828:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800682c:	2200      	movs	r2, #0
 800682e:	2300      	movs	r3, #0
 8006830:	f7fa f952 	bl	8000ad8 <__aeabi_dcmpeq>
 8006834:	b9d8      	cbnz	r0, 800686e <_printf_float+0x432>
 8006836:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006838:	f108 0201 	add.w	r2, r8, #1
 800683c:	3b01      	subs	r3, #1
 800683e:	4631      	mov	r1, r6
 8006840:	4628      	mov	r0, r5
 8006842:	47b8      	blx	r7
 8006844:	3001      	adds	r0, #1
 8006846:	d10e      	bne.n	8006866 <_printf_float+0x42a>
 8006848:	e659      	b.n	80064fe <_printf_float+0xc2>
 800684a:	2301      	movs	r3, #1
 800684c:	4652      	mov	r2, sl
 800684e:	4631      	mov	r1, r6
 8006850:	4628      	mov	r0, r5
 8006852:	47b8      	blx	r7
 8006854:	3001      	adds	r0, #1
 8006856:	f43f ae52 	beq.w	80064fe <_printf_float+0xc2>
 800685a:	f108 0801 	add.w	r8, r8, #1
 800685e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006860:	3b01      	subs	r3, #1
 8006862:	4543      	cmp	r3, r8
 8006864:	dcf1      	bgt.n	800684a <_printf_float+0x40e>
 8006866:	464b      	mov	r3, r9
 8006868:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800686c:	e6dc      	b.n	8006628 <_printf_float+0x1ec>
 800686e:	f04f 0800 	mov.w	r8, #0
 8006872:	f104 0a1a 	add.w	sl, r4, #26
 8006876:	e7f2      	b.n	800685e <_printf_float+0x422>
 8006878:	2301      	movs	r3, #1
 800687a:	4642      	mov	r2, r8
 800687c:	e7df      	b.n	800683e <_printf_float+0x402>
 800687e:	2301      	movs	r3, #1
 8006880:	464a      	mov	r2, r9
 8006882:	4631      	mov	r1, r6
 8006884:	4628      	mov	r0, r5
 8006886:	47b8      	blx	r7
 8006888:	3001      	adds	r0, #1
 800688a:	f43f ae38 	beq.w	80064fe <_printf_float+0xc2>
 800688e:	f108 0801 	add.w	r8, r8, #1
 8006892:	68e3      	ldr	r3, [r4, #12]
 8006894:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006896:	1a5b      	subs	r3, r3, r1
 8006898:	4543      	cmp	r3, r8
 800689a:	dcf0      	bgt.n	800687e <_printf_float+0x442>
 800689c:	e6fa      	b.n	8006694 <_printf_float+0x258>
 800689e:	f04f 0800 	mov.w	r8, #0
 80068a2:	f104 0919 	add.w	r9, r4, #25
 80068a6:	e7f4      	b.n	8006892 <_printf_float+0x456>

080068a8 <_printf_common>:
 80068a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068ac:	4616      	mov	r6, r2
 80068ae:	4699      	mov	r9, r3
 80068b0:	688a      	ldr	r2, [r1, #8]
 80068b2:	690b      	ldr	r3, [r1, #16]
 80068b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80068b8:	4293      	cmp	r3, r2
 80068ba:	bfb8      	it	lt
 80068bc:	4613      	movlt	r3, r2
 80068be:	6033      	str	r3, [r6, #0]
 80068c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80068c4:	4607      	mov	r7, r0
 80068c6:	460c      	mov	r4, r1
 80068c8:	b10a      	cbz	r2, 80068ce <_printf_common+0x26>
 80068ca:	3301      	adds	r3, #1
 80068cc:	6033      	str	r3, [r6, #0]
 80068ce:	6823      	ldr	r3, [r4, #0]
 80068d0:	0699      	lsls	r1, r3, #26
 80068d2:	bf42      	ittt	mi
 80068d4:	6833      	ldrmi	r3, [r6, #0]
 80068d6:	3302      	addmi	r3, #2
 80068d8:	6033      	strmi	r3, [r6, #0]
 80068da:	6825      	ldr	r5, [r4, #0]
 80068dc:	f015 0506 	ands.w	r5, r5, #6
 80068e0:	d106      	bne.n	80068f0 <_printf_common+0x48>
 80068e2:	f104 0a19 	add.w	sl, r4, #25
 80068e6:	68e3      	ldr	r3, [r4, #12]
 80068e8:	6832      	ldr	r2, [r6, #0]
 80068ea:	1a9b      	subs	r3, r3, r2
 80068ec:	42ab      	cmp	r3, r5
 80068ee:	dc26      	bgt.n	800693e <_printf_common+0x96>
 80068f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80068f4:	1e13      	subs	r3, r2, #0
 80068f6:	6822      	ldr	r2, [r4, #0]
 80068f8:	bf18      	it	ne
 80068fa:	2301      	movne	r3, #1
 80068fc:	0692      	lsls	r2, r2, #26
 80068fe:	d42b      	bmi.n	8006958 <_printf_common+0xb0>
 8006900:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006904:	4649      	mov	r1, r9
 8006906:	4638      	mov	r0, r7
 8006908:	47c0      	blx	r8
 800690a:	3001      	adds	r0, #1
 800690c:	d01e      	beq.n	800694c <_printf_common+0xa4>
 800690e:	6823      	ldr	r3, [r4, #0]
 8006910:	68e5      	ldr	r5, [r4, #12]
 8006912:	6832      	ldr	r2, [r6, #0]
 8006914:	f003 0306 	and.w	r3, r3, #6
 8006918:	2b04      	cmp	r3, #4
 800691a:	bf08      	it	eq
 800691c:	1aad      	subeq	r5, r5, r2
 800691e:	68a3      	ldr	r3, [r4, #8]
 8006920:	6922      	ldr	r2, [r4, #16]
 8006922:	bf0c      	ite	eq
 8006924:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006928:	2500      	movne	r5, #0
 800692a:	4293      	cmp	r3, r2
 800692c:	bfc4      	itt	gt
 800692e:	1a9b      	subgt	r3, r3, r2
 8006930:	18ed      	addgt	r5, r5, r3
 8006932:	2600      	movs	r6, #0
 8006934:	341a      	adds	r4, #26
 8006936:	42b5      	cmp	r5, r6
 8006938:	d11a      	bne.n	8006970 <_printf_common+0xc8>
 800693a:	2000      	movs	r0, #0
 800693c:	e008      	b.n	8006950 <_printf_common+0xa8>
 800693e:	2301      	movs	r3, #1
 8006940:	4652      	mov	r2, sl
 8006942:	4649      	mov	r1, r9
 8006944:	4638      	mov	r0, r7
 8006946:	47c0      	blx	r8
 8006948:	3001      	adds	r0, #1
 800694a:	d103      	bne.n	8006954 <_printf_common+0xac>
 800694c:	f04f 30ff 	mov.w	r0, #4294967295
 8006950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006954:	3501      	adds	r5, #1
 8006956:	e7c6      	b.n	80068e6 <_printf_common+0x3e>
 8006958:	18e1      	adds	r1, r4, r3
 800695a:	1c5a      	adds	r2, r3, #1
 800695c:	2030      	movs	r0, #48	; 0x30
 800695e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006962:	4422      	add	r2, r4
 8006964:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006968:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800696c:	3302      	adds	r3, #2
 800696e:	e7c7      	b.n	8006900 <_printf_common+0x58>
 8006970:	2301      	movs	r3, #1
 8006972:	4622      	mov	r2, r4
 8006974:	4649      	mov	r1, r9
 8006976:	4638      	mov	r0, r7
 8006978:	47c0      	blx	r8
 800697a:	3001      	adds	r0, #1
 800697c:	d0e6      	beq.n	800694c <_printf_common+0xa4>
 800697e:	3601      	adds	r6, #1
 8006980:	e7d9      	b.n	8006936 <_printf_common+0x8e>
	...

08006984 <_printf_i>:
 8006984:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006988:	460c      	mov	r4, r1
 800698a:	4691      	mov	r9, r2
 800698c:	7e27      	ldrb	r7, [r4, #24]
 800698e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006990:	2f78      	cmp	r7, #120	; 0x78
 8006992:	4680      	mov	r8, r0
 8006994:	469a      	mov	sl, r3
 8006996:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800699a:	d807      	bhi.n	80069ac <_printf_i+0x28>
 800699c:	2f62      	cmp	r7, #98	; 0x62
 800699e:	d80a      	bhi.n	80069b6 <_printf_i+0x32>
 80069a0:	2f00      	cmp	r7, #0
 80069a2:	f000 80d8 	beq.w	8006b56 <_printf_i+0x1d2>
 80069a6:	2f58      	cmp	r7, #88	; 0x58
 80069a8:	f000 80a3 	beq.w	8006af2 <_printf_i+0x16e>
 80069ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80069b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80069b4:	e03a      	b.n	8006a2c <_printf_i+0xa8>
 80069b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80069ba:	2b15      	cmp	r3, #21
 80069bc:	d8f6      	bhi.n	80069ac <_printf_i+0x28>
 80069be:	a001      	add	r0, pc, #4	; (adr r0, 80069c4 <_printf_i+0x40>)
 80069c0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80069c4:	08006a1d 	.word	0x08006a1d
 80069c8:	08006a31 	.word	0x08006a31
 80069cc:	080069ad 	.word	0x080069ad
 80069d0:	080069ad 	.word	0x080069ad
 80069d4:	080069ad 	.word	0x080069ad
 80069d8:	080069ad 	.word	0x080069ad
 80069dc:	08006a31 	.word	0x08006a31
 80069e0:	080069ad 	.word	0x080069ad
 80069e4:	080069ad 	.word	0x080069ad
 80069e8:	080069ad 	.word	0x080069ad
 80069ec:	080069ad 	.word	0x080069ad
 80069f0:	08006b3d 	.word	0x08006b3d
 80069f4:	08006a61 	.word	0x08006a61
 80069f8:	08006b1f 	.word	0x08006b1f
 80069fc:	080069ad 	.word	0x080069ad
 8006a00:	080069ad 	.word	0x080069ad
 8006a04:	08006b5f 	.word	0x08006b5f
 8006a08:	080069ad 	.word	0x080069ad
 8006a0c:	08006a61 	.word	0x08006a61
 8006a10:	080069ad 	.word	0x080069ad
 8006a14:	080069ad 	.word	0x080069ad
 8006a18:	08006b27 	.word	0x08006b27
 8006a1c:	680b      	ldr	r3, [r1, #0]
 8006a1e:	1d1a      	adds	r2, r3, #4
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	600a      	str	r2, [r1, #0]
 8006a24:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006a28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e0a3      	b.n	8006b78 <_printf_i+0x1f4>
 8006a30:	6825      	ldr	r5, [r4, #0]
 8006a32:	6808      	ldr	r0, [r1, #0]
 8006a34:	062e      	lsls	r6, r5, #24
 8006a36:	f100 0304 	add.w	r3, r0, #4
 8006a3a:	d50a      	bpl.n	8006a52 <_printf_i+0xce>
 8006a3c:	6805      	ldr	r5, [r0, #0]
 8006a3e:	600b      	str	r3, [r1, #0]
 8006a40:	2d00      	cmp	r5, #0
 8006a42:	da03      	bge.n	8006a4c <_printf_i+0xc8>
 8006a44:	232d      	movs	r3, #45	; 0x2d
 8006a46:	426d      	negs	r5, r5
 8006a48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a4c:	485e      	ldr	r0, [pc, #376]	; (8006bc8 <_printf_i+0x244>)
 8006a4e:	230a      	movs	r3, #10
 8006a50:	e019      	b.n	8006a86 <_printf_i+0x102>
 8006a52:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006a56:	6805      	ldr	r5, [r0, #0]
 8006a58:	600b      	str	r3, [r1, #0]
 8006a5a:	bf18      	it	ne
 8006a5c:	b22d      	sxthne	r5, r5
 8006a5e:	e7ef      	b.n	8006a40 <_printf_i+0xbc>
 8006a60:	680b      	ldr	r3, [r1, #0]
 8006a62:	6825      	ldr	r5, [r4, #0]
 8006a64:	1d18      	adds	r0, r3, #4
 8006a66:	6008      	str	r0, [r1, #0]
 8006a68:	0628      	lsls	r0, r5, #24
 8006a6a:	d501      	bpl.n	8006a70 <_printf_i+0xec>
 8006a6c:	681d      	ldr	r5, [r3, #0]
 8006a6e:	e002      	b.n	8006a76 <_printf_i+0xf2>
 8006a70:	0669      	lsls	r1, r5, #25
 8006a72:	d5fb      	bpl.n	8006a6c <_printf_i+0xe8>
 8006a74:	881d      	ldrh	r5, [r3, #0]
 8006a76:	4854      	ldr	r0, [pc, #336]	; (8006bc8 <_printf_i+0x244>)
 8006a78:	2f6f      	cmp	r7, #111	; 0x6f
 8006a7a:	bf0c      	ite	eq
 8006a7c:	2308      	moveq	r3, #8
 8006a7e:	230a      	movne	r3, #10
 8006a80:	2100      	movs	r1, #0
 8006a82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a86:	6866      	ldr	r6, [r4, #4]
 8006a88:	60a6      	str	r6, [r4, #8]
 8006a8a:	2e00      	cmp	r6, #0
 8006a8c:	bfa2      	ittt	ge
 8006a8e:	6821      	ldrge	r1, [r4, #0]
 8006a90:	f021 0104 	bicge.w	r1, r1, #4
 8006a94:	6021      	strge	r1, [r4, #0]
 8006a96:	b90d      	cbnz	r5, 8006a9c <_printf_i+0x118>
 8006a98:	2e00      	cmp	r6, #0
 8006a9a:	d04d      	beq.n	8006b38 <_printf_i+0x1b4>
 8006a9c:	4616      	mov	r6, r2
 8006a9e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006aa2:	fb03 5711 	mls	r7, r3, r1, r5
 8006aa6:	5dc7      	ldrb	r7, [r0, r7]
 8006aa8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006aac:	462f      	mov	r7, r5
 8006aae:	42bb      	cmp	r3, r7
 8006ab0:	460d      	mov	r5, r1
 8006ab2:	d9f4      	bls.n	8006a9e <_printf_i+0x11a>
 8006ab4:	2b08      	cmp	r3, #8
 8006ab6:	d10b      	bne.n	8006ad0 <_printf_i+0x14c>
 8006ab8:	6823      	ldr	r3, [r4, #0]
 8006aba:	07df      	lsls	r7, r3, #31
 8006abc:	d508      	bpl.n	8006ad0 <_printf_i+0x14c>
 8006abe:	6923      	ldr	r3, [r4, #16]
 8006ac0:	6861      	ldr	r1, [r4, #4]
 8006ac2:	4299      	cmp	r1, r3
 8006ac4:	bfde      	ittt	le
 8006ac6:	2330      	movle	r3, #48	; 0x30
 8006ac8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006acc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006ad0:	1b92      	subs	r2, r2, r6
 8006ad2:	6122      	str	r2, [r4, #16]
 8006ad4:	f8cd a000 	str.w	sl, [sp]
 8006ad8:	464b      	mov	r3, r9
 8006ada:	aa03      	add	r2, sp, #12
 8006adc:	4621      	mov	r1, r4
 8006ade:	4640      	mov	r0, r8
 8006ae0:	f7ff fee2 	bl	80068a8 <_printf_common>
 8006ae4:	3001      	adds	r0, #1
 8006ae6:	d14c      	bne.n	8006b82 <_printf_i+0x1fe>
 8006ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8006aec:	b004      	add	sp, #16
 8006aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006af2:	4835      	ldr	r0, [pc, #212]	; (8006bc8 <_printf_i+0x244>)
 8006af4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006af8:	6823      	ldr	r3, [r4, #0]
 8006afa:	680e      	ldr	r6, [r1, #0]
 8006afc:	061f      	lsls	r7, r3, #24
 8006afe:	f856 5b04 	ldr.w	r5, [r6], #4
 8006b02:	600e      	str	r6, [r1, #0]
 8006b04:	d514      	bpl.n	8006b30 <_printf_i+0x1ac>
 8006b06:	07d9      	lsls	r1, r3, #31
 8006b08:	bf44      	itt	mi
 8006b0a:	f043 0320 	orrmi.w	r3, r3, #32
 8006b0e:	6023      	strmi	r3, [r4, #0]
 8006b10:	b91d      	cbnz	r5, 8006b1a <_printf_i+0x196>
 8006b12:	6823      	ldr	r3, [r4, #0]
 8006b14:	f023 0320 	bic.w	r3, r3, #32
 8006b18:	6023      	str	r3, [r4, #0]
 8006b1a:	2310      	movs	r3, #16
 8006b1c:	e7b0      	b.n	8006a80 <_printf_i+0xfc>
 8006b1e:	6823      	ldr	r3, [r4, #0]
 8006b20:	f043 0320 	orr.w	r3, r3, #32
 8006b24:	6023      	str	r3, [r4, #0]
 8006b26:	2378      	movs	r3, #120	; 0x78
 8006b28:	4828      	ldr	r0, [pc, #160]	; (8006bcc <_printf_i+0x248>)
 8006b2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b2e:	e7e3      	b.n	8006af8 <_printf_i+0x174>
 8006b30:	065e      	lsls	r6, r3, #25
 8006b32:	bf48      	it	mi
 8006b34:	b2ad      	uxthmi	r5, r5
 8006b36:	e7e6      	b.n	8006b06 <_printf_i+0x182>
 8006b38:	4616      	mov	r6, r2
 8006b3a:	e7bb      	b.n	8006ab4 <_printf_i+0x130>
 8006b3c:	680b      	ldr	r3, [r1, #0]
 8006b3e:	6826      	ldr	r6, [r4, #0]
 8006b40:	6960      	ldr	r0, [r4, #20]
 8006b42:	1d1d      	adds	r5, r3, #4
 8006b44:	600d      	str	r5, [r1, #0]
 8006b46:	0635      	lsls	r5, r6, #24
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	d501      	bpl.n	8006b50 <_printf_i+0x1cc>
 8006b4c:	6018      	str	r0, [r3, #0]
 8006b4e:	e002      	b.n	8006b56 <_printf_i+0x1d2>
 8006b50:	0671      	lsls	r1, r6, #25
 8006b52:	d5fb      	bpl.n	8006b4c <_printf_i+0x1c8>
 8006b54:	8018      	strh	r0, [r3, #0]
 8006b56:	2300      	movs	r3, #0
 8006b58:	6123      	str	r3, [r4, #16]
 8006b5a:	4616      	mov	r6, r2
 8006b5c:	e7ba      	b.n	8006ad4 <_printf_i+0x150>
 8006b5e:	680b      	ldr	r3, [r1, #0]
 8006b60:	1d1a      	adds	r2, r3, #4
 8006b62:	600a      	str	r2, [r1, #0]
 8006b64:	681e      	ldr	r6, [r3, #0]
 8006b66:	6862      	ldr	r2, [r4, #4]
 8006b68:	2100      	movs	r1, #0
 8006b6a:	4630      	mov	r0, r6
 8006b6c:	f7f9 fb40 	bl	80001f0 <memchr>
 8006b70:	b108      	cbz	r0, 8006b76 <_printf_i+0x1f2>
 8006b72:	1b80      	subs	r0, r0, r6
 8006b74:	6060      	str	r0, [r4, #4]
 8006b76:	6863      	ldr	r3, [r4, #4]
 8006b78:	6123      	str	r3, [r4, #16]
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b80:	e7a8      	b.n	8006ad4 <_printf_i+0x150>
 8006b82:	6923      	ldr	r3, [r4, #16]
 8006b84:	4632      	mov	r2, r6
 8006b86:	4649      	mov	r1, r9
 8006b88:	4640      	mov	r0, r8
 8006b8a:	47d0      	blx	sl
 8006b8c:	3001      	adds	r0, #1
 8006b8e:	d0ab      	beq.n	8006ae8 <_printf_i+0x164>
 8006b90:	6823      	ldr	r3, [r4, #0]
 8006b92:	079b      	lsls	r3, r3, #30
 8006b94:	d413      	bmi.n	8006bbe <_printf_i+0x23a>
 8006b96:	68e0      	ldr	r0, [r4, #12]
 8006b98:	9b03      	ldr	r3, [sp, #12]
 8006b9a:	4298      	cmp	r0, r3
 8006b9c:	bfb8      	it	lt
 8006b9e:	4618      	movlt	r0, r3
 8006ba0:	e7a4      	b.n	8006aec <_printf_i+0x168>
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	4632      	mov	r2, r6
 8006ba6:	4649      	mov	r1, r9
 8006ba8:	4640      	mov	r0, r8
 8006baa:	47d0      	blx	sl
 8006bac:	3001      	adds	r0, #1
 8006bae:	d09b      	beq.n	8006ae8 <_printf_i+0x164>
 8006bb0:	3501      	adds	r5, #1
 8006bb2:	68e3      	ldr	r3, [r4, #12]
 8006bb4:	9903      	ldr	r1, [sp, #12]
 8006bb6:	1a5b      	subs	r3, r3, r1
 8006bb8:	42ab      	cmp	r3, r5
 8006bba:	dcf2      	bgt.n	8006ba2 <_printf_i+0x21e>
 8006bbc:	e7eb      	b.n	8006b96 <_printf_i+0x212>
 8006bbe:	2500      	movs	r5, #0
 8006bc0:	f104 0619 	add.w	r6, r4, #25
 8006bc4:	e7f5      	b.n	8006bb2 <_printf_i+0x22e>
 8006bc6:	bf00      	nop
 8006bc8:	080090ea 	.word	0x080090ea
 8006bcc:	080090fb 	.word	0x080090fb

08006bd0 <siprintf>:
 8006bd0:	b40e      	push	{r1, r2, r3}
 8006bd2:	b500      	push	{lr}
 8006bd4:	b09c      	sub	sp, #112	; 0x70
 8006bd6:	ab1d      	add	r3, sp, #116	; 0x74
 8006bd8:	9002      	str	r0, [sp, #8]
 8006bda:	9006      	str	r0, [sp, #24]
 8006bdc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006be0:	4809      	ldr	r0, [pc, #36]	; (8006c08 <siprintf+0x38>)
 8006be2:	9107      	str	r1, [sp, #28]
 8006be4:	9104      	str	r1, [sp, #16]
 8006be6:	4909      	ldr	r1, [pc, #36]	; (8006c0c <siprintf+0x3c>)
 8006be8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bec:	9105      	str	r1, [sp, #20]
 8006bee:	6800      	ldr	r0, [r0, #0]
 8006bf0:	9301      	str	r3, [sp, #4]
 8006bf2:	a902      	add	r1, sp, #8
 8006bf4:	f001 fb32 	bl	800825c <_svfiprintf_r>
 8006bf8:	9b02      	ldr	r3, [sp, #8]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	701a      	strb	r2, [r3, #0]
 8006bfe:	b01c      	add	sp, #112	; 0x70
 8006c00:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c04:	b003      	add	sp, #12
 8006c06:	4770      	bx	lr
 8006c08:	2000000c 	.word	0x2000000c
 8006c0c:	ffff0208 	.word	0xffff0208

08006c10 <quorem>:
 8006c10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c14:	6903      	ldr	r3, [r0, #16]
 8006c16:	690c      	ldr	r4, [r1, #16]
 8006c18:	42a3      	cmp	r3, r4
 8006c1a:	4607      	mov	r7, r0
 8006c1c:	f2c0 8081 	blt.w	8006d22 <quorem+0x112>
 8006c20:	3c01      	subs	r4, #1
 8006c22:	f101 0814 	add.w	r8, r1, #20
 8006c26:	f100 0514 	add.w	r5, r0, #20
 8006c2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c2e:	9301      	str	r3, [sp, #4]
 8006c30:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006c34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c38:	3301      	adds	r3, #1
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006c40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006c44:	fbb2 f6f3 	udiv	r6, r2, r3
 8006c48:	d331      	bcc.n	8006cae <quorem+0x9e>
 8006c4a:	f04f 0e00 	mov.w	lr, #0
 8006c4e:	4640      	mov	r0, r8
 8006c50:	46ac      	mov	ip, r5
 8006c52:	46f2      	mov	sl, lr
 8006c54:	f850 2b04 	ldr.w	r2, [r0], #4
 8006c58:	b293      	uxth	r3, r2
 8006c5a:	fb06 e303 	mla	r3, r6, r3, lr
 8006c5e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	ebaa 0303 	sub.w	r3, sl, r3
 8006c68:	0c12      	lsrs	r2, r2, #16
 8006c6a:	f8dc a000 	ldr.w	sl, [ip]
 8006c6e:	fb06 e202 	mla	r2, r6, r2, lr
 8006c72:	fa13 f38a 	uxtah	r3, r3, sl
 8006c76:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006c7a:	fa1f fa82 	uxth.w	sl, r2
 8006c7e:	f8dc 2000 	ldr.w	r2, [ip]
 8006c82:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006c86:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c90:	4581      	cmp	r9, r0
 8006c92:	f84c 3b04 	str.w	r3, [ip], #4
 8006c96:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006c9a:	d2db      	bcs.n	8006c54 <quorem+0x44>
 8006c9c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006ca0:	b92b      	cbnz	r3, 8006cae <quorem+0x9e>
 8006ca2:	9b01      	ldr	r3, [sp, #4]
 8006ca4:	3b04      	subs	r3, #4
 8006ca6:	429d      	cmp	r5, r3
 8006ca8:	461a      	mov	r2, r3
 8006caa:	d32e      	bcc.n	8006d0a <quorem+0xfa>
 8006cac:	613c      	str	r4, [r7, #16]
 8006cae:	4638      	mov	r0, r7
 8006cb0:	f001 f8be 	bl	8007e30 <__mcmp>
 8006cb4:	2800      	cmp	r0, #0
 8006cb6:	db24      	blt.n	8006d02 <quorem+0xf2>
 8006cb8:	3601      	adds	r6, #1
 8006cba:	4628      	mov	r0, r5
 8006cbc:	f04f 0c00 	mov.w	ip, #0
 8006cc0:	f858 2b04 	ldr.w	r2, [r8], #4
 8006cc4:	f8d0 e000 	ldr.w	lr, [r0]
 8006cc8:	b293      	uxth	r3, r2
 8006cca:	ebac 0303 	sub.w	r3, ip, r3
 8006cce:	0c12      	lsrs	r2, r2, #16
 8006cd0:	fa13 f38e 	uxtah	r3, r3, lr
 8006cd4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006cd8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ce2:	45c1      	cmp	r9, r8
 8006ce4:	f840 3b04 	str.w	r3, [r0], #4
 8006ce8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006cec:	d2e8      	bcs.n	8006cc0 <quorem+0xb0>
 8006cee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006cf2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006cf6:	b922      	cbnz	r2, 8006d02 <quorem+0xf2>
 8006cf8:	3b04      	subs	r3, #4
 8006cfa:	429d      	cmp	r5, r3
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	d30a      	bcc.n	8006d16 <quorem+0x106>
 8006d00:	613c      	str	r4, [r7, #16]
 8006d02:	4630      	mov	r0, r6
 8006d04:	b003      	add	sp, #12
 8006d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d0a:	6812      	ldr	r2, [r2, #0]
 8006d0c:	3b04      	subs	r3, #4
 8006d0e:	2a00      	cmp	r2, #0
 8006d10:	d1cc      	bne.n	8006cac <quorem+0x9c>
 8006d12:	3c01      	subs	r4, #1
 8006d14:	e7c7      	b.n	8006ca6 <quorem+0x96>
 8006d16:	6812      	ldr	r2, [r2, #0]
 8006d18:	3b04      	subs	r3, #4
 8006d1a:	2a00      	cmp	r2, #0
 8006d1c:	d1f0      	bne.n	8006d00 <quorem+0xf0>
 8006d1e:	3c01      	subs	r4, #1
 8006d20:	e7eb      	b.n	8006cfa <quorem+0xea>
 8006d22:	2000      	movs	r0, #0
 8006d24:	e7ee      	b.n	8006d04 <quorem+0xf4>
	...

08006d28 <_dtoa_r>:
 8006d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d2c:	ed2d 8b02 	vpush	{d8}
 8006d30:	ec57 6b10 	vmov	r6, r7, d0
 8006d34:	b095      	sub	sp, #84	; 0x54
 8006d36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006d38:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006d3c:	9105      	str	r1, [sp, #20]
 8006d3e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006d42:	4604      	mov	r4, r0
 8006d44:	9209      	str	r2, [sp, #36]	; 0x24
 8006d46:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d48:	b975      	cbnz	r5, 8006d68 <_dtoa_r+0x40>
 8006d4a:	2010      	movs	r0, #16
 8006d4c:	f000 fddc 	bl	8007908 <malloc>
 8006d50:	4602      	mov	r2, r0
 8006d52:	6260      	str	r0, [r4, #36]	; 0x24
 8006d54:	b920      	cbnz	r0, 8006d60 <_dtoa_r+0x38>
 8006d56:	4bb2      	ldr	r3, [pc, #712]	; (8007020 <_dtoa_r+0x2f8>)
 8006d58:	21ea      	movs	r1, #234	; 0xea
 8006d5a:	48b2      	ldr	r0, [pc, #712]	; (8007024 <_dtoa_r+0x2fc>)
 8006d5c:	f001 fb8e 	bl	800847c <__assert_func>
 8006d60:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006d64:	6005      	str	r5, [r0, #0]
 8006d66:	60c5      	str	r5, [r0, #12]
 8006d68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d6a:	6819      	ldr	r1, [r3, #0]
 8006d6c:	b151      	cbz	r1, 8006d84 <_dtoa_r+0x5c>
 8006d6e:	685a      	ldr	r2, [r3, #4]
 8006d70:	604a      	str	r2, [r1, #4]
 8006d72:	2301      	movs	r3, #1
 8006d74:	4093      	lsls	r3, r2
 8006d76:	608b      	str	r3, [r1, #8]
 8006d78:	4620      	mov	r0, r4
 8006d7a:	f000 fe1b 	bl	80079b4 <_Bfree>
 8006d7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d80:	2200      	movs	r2, #0
 8006d82:	601a      	str	r2, [r3, #0]
 8006d84:	1e3b      	subs	r3, r7, #0
 8006d86:	bfb9      	ittee	lt
 8006d88:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006d8c:	9303      	strlt	r3, [sp, #12]
 8006d8e:	2300      	movge	r3, #0
 8006d90:	f8c8 3000 	strge.w	r3, [r8]
 8006d94:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006d98:	4ba3      	ldr	r3, [pc, #652]	; (8007028 <_dtoa_r+0x300>)
 8006d9a:	bfbc      	itt	lt
 8006d9c:	2201      	movlt	r2, #1
 8006d9e:	f8c8 2000 	strlt.w	r2, [r8]
 8006da2:	ea33 0309 	bics.w	r3, r3, r9
 8006da6:	d11b      	bne.n	8006de0 <_dtoa_r+0xb8>
 8006da8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006daa:	f242 730f 	movw	r3, #9999	; 0x270f
 8006dae:	6013      	str	r3, [r2, #0]
 8006db0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006db4:	4333      	orrs	r3, r6
 8006db6:	f000 857a 	beq.w	80078ae <_dtoa_r+0xb86>
 8006dba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006dbc:	b963      	cbnz	r3, 8006dd8 <_dtoa_r+0xb0>
 8006dbe:	4b9b      	ldr	r3, [pc, #620]	; (800702c <_dtoa_r+0x304>)
 8006dc0:	e024      	b.n	8006e0c <_dtoa_r+0xe4>
 8006dc2:	4b9b      	ldr	r3, [pc, #620]	; (8007030 <_dtoa_r+0x308>)
 8006dc4:	9300      	str	r3, [sp, #0]
 8006dc6:	3308      	adds	r3, #8
 8006dc8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006dca:	6013      	str	r3, [r2, #0]
 8006dcc:	9800      	ldr	r0, [sp, #0]
 8006dce:	b015      	add	sp, #84	; 0x54
 8006dd0:	ecbd 8b02 	vpop	{d8}
 8006dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dd8:	4b94      	ldr	r3, [pc, #592]	; (800702c <_dtoa_r+0x304>)
 8006dda:	9300      	str	r3, [sp, #0]
 8006ddc:	3303      	adds	r3, #3
 8006dde:	e7f3      	b.n	8006dc8 <_dtoa_r+0xa0>
 8006de0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006de4:	2200      	movs	r2, #0
 8006de6:	ec51 0b17 	vmov	r0, r1, d7
 8006dea:	2300      	movs	r3, #0
 8006dec:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006df0:	f7f9 fe72 	bl	8000ad8 <__aeabi_dcmpeq>
 8006df4:	4680      	mov	r8, r0
 8006df6:	b158      	cbz	r0, 8006e10 <_dtoa_r+0xe8>
 8006df8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	6013      	str	r3, [r2, #0]
 8006dfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f000 8551 	beq.w	80078a8 <_dtoa_r+0xb80>
 8006e06:	488b      	ldr	r0, [pc, #556]	; (8007034 <_dtoa_r+0x30c>)
 8006e08:	6018      	str	r0, [r3, #0]
 8006e0a:	1e43      	subs	r3, r0, #1
 8006e0c:	9300      	str	r3, [sp, #0]
 8006e0e:	e7dd      	b.n	8006dcc <_dtoa_r+0xa4>
 8006e10:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006e14:	aa12      	add	r2, sp, #72	; 0x48
 8006e16:	a913      	add	r1, sp, #76	; 0x4c
 8006e18:	4620      	mov	r0, r4
 8006e1a:	f001 f8ad 	bl	8007f78 <__d2b>
 8006e1e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006e22:	4683      	mov	fp, r0
 8006e24:	2d00      	cmp	r5, #0
 8006e26:	d07c      	beq.n	8006f22 <_dtoa_r+0x1fa>
 8006e28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e2a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006e2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e32:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006e36:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006e3a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006e3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006e42:	4b7d      	ldr	r3, [pc, #500]	; (8007038 <_dtoa_r+0x310>)
 8006e44:	2200      	movs	r2, #0
 8006e46:	4630      	mov	r0, r6
 8006e48:	4639      	mov	r1, r7
 8006e4a:	f7f9 fa25 	bl	8000298 <__aeabi_dsub>
 8006e4e:	a36e      	add	r3, pc, #440	; (adr r3, 8007008 <_dtoa_r+0x2e0>)
 8006e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e54:	f7f9 fbd8 	bl	8000608 <__aeabi_dmul>
 8006e58:	a36d      	add	r3, pc, #436	; (adr r3, 8007010 <_dtoa_r+0x2e8>)
 8006e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5e:	f7f9 fa1d 	bl	800029c <__adddf3>
 8006e62:	4606      	mov	r6, r0
 8006e64:	4628      	mov	r0, r5
 8006e66:	460f      	mov	r7, r1
 8006e68:	f7f9 fb64 	bl	8000534 <__aeabi_i2d>
 8006e6c:	a36a      	add	r3, pc, #424	; (adr r3, 8007018 <_dtoa_r+0x2f0>)
 8006e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e72:	f7f9 fbc9 	bl	8000608 <__aeabi_dmul>
 8006e76:	4602      	mov	r2, r0
 8006e78:	460b      	mov	r3, r1
 8006e7a:	4630      	mov	r0, r6
 8006e7c:	4639      	mov	r1, r7
 8006e7e:	f7f9 fa0d 	bl	800029c <__adddf3>
 8006e82:	4606      	mov	r6, r0
 8006e84:	460f      	mov	r7, r1
 8006e86:	f7f9 fe6f 	bl	8000b68 <__aeabi_d2iz>
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	4682      	mov	sl, r0
 8006e8e:	2300      	movs	r3, #0
 8006e90:	4630      	mov	r0, r6
 8006e92:	4639      	mov	r1, r7
 8006e94:	f7f9 fe2a 	bl	8000aec <__aeabi_dcmplt>
 8006e98:	b148      	cbz	r0, 8006eae <_dtoa_r+0x186>
 8006e9a:	4650      	mov	r0, sl
 8006e9c:	f7f9 fb4a 	bl	8000534 <__aeabi_i2d>
 8006ea0:	4632      	mov	r2, r6
 8006ea2:	463b      	mov	r3, r7
 8006ea4:	f7f9 fe18 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ea8:	b908      	cbnz	r0, 8006eae <_dtoa_r+0x186>
 8006eaa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006eae:	f1ba 0f16 	cmp.w	sl, #22
 8006eb2:	d854      	bhi.n	8006f5e <_dtoa_r+0x236>
 8006eb4:	4b61      	ldr	r3, [pc, #388]	; (800703c <_dtoa_r+0x314>)
 8006eb6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ebe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006ec2:	f7f9 fe13 	bl	8000aec <__aeabi_dcmplt>
 8006ec6:	2800      	cmp	r0, #0
 8006ec8:	d04b      	beq.n	8006f62 <_dtoa_r+0x23a>
 8006eca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ece:	2300      	movs	r3, #0
 8006ed0:	930e      	str	r3, [sp, #56]	; 0x38
 8006ed2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ed4:	1b5d      	subs	r5, r3, r5
 8006ed6:	1e6b      	subs	r3, r5, #1
 8006ed8:	9304      	str	r3, [sp, #16]
 8006eda:	bf43      	ittte	mi
 8006edc:	2300      	movmi	r3, #0
 8006ede:	f1c5 0801 	rsbmi	r8, r5, #1
 8006ee2:	9304      	strmi	r3, [sp, #16]
 8006ee4:	f04f 0800 	movpl.w	r8, #0
 8006ee8:	f1ba 0f00 	cmp.w	sl, #0
 8006eec:	db3b      	blt.n	8006f66 <_dtoa_r+0x23e>
 8006eee:	9b04      	ldr	r3, [sp, #16]
 8006ef0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006ef4:	4453      	add	r3, sl
 8006ef6:	9304      	str	r3, [sp, #16]
 8006ef8:	2300      	movs	r3, #0
 8006efa:	9306      	str	r3, [sp, #24]
 8006efc:	9b05      	ldr	r3, [sp, #20]
 8006efe:	2b09      	cmp	r3, #9
 8006f00:	d869      	bhi.n	8006fd6 <_dtoa_r+0x2ae>
 8006f02:	2b05      	cmp	r3, #5
 8006f04:	bfc4      	itt	gt
 8006f06:	3b04      	subgt	r3, #4
 8006f08:	9305      	strgt	r3, [sp, #20]
 8006f0a:	9b05      	ldr	r3, [sp, #20]
 8006f0c:	f1a3 0302 	sub.w	r3, r3, #2
 8006f10:	bfcc      	ite	gt
 8006f12:	2500      	movgt	r5, #0
 8006f14:	2501      	movle	r5, #1
 8006f16:	2b03      	cmp	r3, #3
 8006f18:	d869      	bhi.n	8006fee <_dtoa_r+0x2c6>
 8006f1a:	e8df f003 	tbb	[pc, r3]
 8006f1e:	4e2c      	.short	0x4e2c
 8006f20:	5a4c      	.short	0x5a4c
 8006f22:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006f26:	441d      	add	r5, r3
 8006f28:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006f2c:	2b20      	cmp	r3, #32
 8006f2e:	bfc1      	itttt	gt
 8006f30:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006f34:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006f38:	fa09 f303 	lslgt.w	r3, r9, r3
 8006f3c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006f40:	bfda      	itte	le
 8006f42:	f1c3 0320 	rsble	r3, r3, #32
 8006f46:	fa06 f003 	lslle.w	r0, r6, r3
 8006f4a:	4318      	orrgt	r0, r3
 8006f4c:	f7f9 fae2 	bl	8000514 <__aeabi_ui2d>
 8006f50:	2301      	movs	r3, #1
 8006f52:	4606      	mov	r6, r0
 8006f54:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006f58:	3d01      	subs	r5, #1
 8006f5a:	9310      	str	r3, [sp, #64]	; 0x40
 8006f5c:	e771      	b.n	8006e42 <_dtoa_r+0x11a>
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e7b6      	b.n	8006ed0 <_dtoa_r+0x1a8>
 8006f62:	900e      	str	r0, [sp, #56]	; 0x38
 8006f64:	e7b5      	b.n	8006ed2 <_dtoa_r+0x1aa>
 8006f66:	f1ca 0300 	rsb	r3, sl, #0
 8006f6a:	9306      	str	r3, [sp, #24]
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	eba8 080a 	sub.w	r8, r8, sl
 8006f72:	930d      	str	r3, [sp, #52]	; 0x34
 8006f74:	e7c2      	b.n	8006efc <_dtoa_r+0x1d4>
 8006f76:	2300      	movs	r3, #0
 8006f78:	9308      	str	r3, [sp, #32]
 8006f7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	dc39      	bgt.n	8006ff4 <_dtoa_r+0x2cc>
 8006f80:	f04f 0901 	mov.w	r9, #1
 8006f84:	f8cd 9004 	str.w	r9, [sp, #4]
 8006f88:	464b      	mov	r3, r9
 8006f8a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006f8e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006f90:	2200      	movs	r2, #0
 8006f92:	6042      	str	r2, [r0, #4]
 8006f94:	2204      	movs	r2, #4
 8006f96:	f102 0614 	add.w	r6, r2, #20
 8006f9a:	429e      	cmp	r6, r3
 8006f9c:	6841      	ldr	r1, [r0, #4]
 8006f9e:	d92f      	bls.n	8007000 <_dtoa_r+0x2d8>
 8006fa0:	4620      	mov	r0, r4
 8006fa2:	f000 fcc7 	bl	8007934 <_Balloc>
 8006fa6:	9000      	str	r0, [sp, #0]
 8006fa8:	2800      	cmp	r0, #0
 8006faa:	d14b      	bne.n	8007044 <_dtoa_r+0x31c>
 8006fac:	4b24      	ldr	r3, [pc, #144]	; (8007040 <_dtoa_r+0x318>)
 8006fae:	4602      	mov	r2, r0
 8006fb0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006fb4:	e6d1      	b.n	8006d5a <_dtoa_r+0x32>
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e7de      	b.n	8006f78 <_dtoa_r+0x250>
 8006fba:	2300      	movs	r3, #0
 8006fbc:	9308      	str	r3, [sp, #32]
 8006fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fc0:	eb0a 0903 	add.w	r9, sl, r3
 8006fc4:	f109 0301 	add.w	r3, r9, #1
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	9301      	str	r3, [sp, #4]
 8006fcc:	bfb8      	it	lt
 8006fce:	2301      	movlt	r3, #1
 8006fd0:	e7dd      	b.n	8006f8e <_dtoa_r+0x266>
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e7f2      	b.n	8006fbc <_dtoa_r+0x294>
 8006fd6:	2501      	movs	r5, #1
 8006fd8:	2300      	movs	r3, #0
 8006fda:	9305      	str	r3, [sp, #20]
 8006fdc:	9508      	str	r5, [sp, #32]
 8006fde:	f04f 39ff 	mov.w	r9, #4294967295
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f8cd 9004 	str.w	r9, [sp, #4]
 8006fe8:	2312      	movs	r3, #18
 8006fea:	9209      	str	r2, [sp, #36]	; 0x24
 8006fec:	e7cf      	b.n	8006f8e <_dtoa_r+0x266>
 8006fee:	2301      	movs	r3, #1
 8006ff0:	9308      	str	r3, [sp, #32]
 8006ff2:	e7f4      	b.n	8006fde <_dtoa_r+0x2b6>
 8006ff4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006ff8:	f8cd 9004 	str.w	r9, [sp, #4]
 8006ffc:	464b      	mov	r3, r9
 8006ffe:	e7c6      	b.n	8006f8e <_dtoa_r+0x266>
 8007000:	3101      	adds	r1, #1
 8007002:	6041      	str	r1, [r0, #4]
 8007004:	0052      	lsls	r2, r2, #1
 8007006:	e7c6      	b.n	8006f96 <_dtoa_r+0x26e>
 8007008:	636f4361 	.word	0x636f4361
 800700c:	3fd287a7 	.word	0x3fd287a7
 8007010:	8b60c8b3 	.word	0x8b60c8b3
 8007014:	3fc68a28 	.word	0x3fc68a28
 8007018:	509f79fb 	.word	0x509f79fb
 800701c:	3fd34413 	.word	0x3fd34413
 8007020:	08009119 	.word	0x08009119
 8007024:	08009130 	.word	0x08009130
 8007028:	7ff00000 	.word	0x7ff00000
 800702c:	08009115 	.word	0x08009115
 8007030:	0800910c 	.word	0x0800910c
 8007034:	080090e9 	.word	0x080090e9
 8007038:	3ff80000 	.word	0x3ff80000
 800703c:	08009228 	.word	0x08009228
 8007040:	0800918f 	.word	0x0800918f
 8007044:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007046:	9a00      	ldr	r2, [sp, #0]
 8007048:	601a      	str	r2, [r3, #0]
 800704a:	9b01      	ldr	r3, [sp, #4]
 800704c:	2b0e      	cmp	r3, #14
 800704e:	f200 80ad 	bhi.w	80071ac <_dtoa_r+0x484>
 8007052:	2d00      	cmp	r5, #0
 8007054:	f000 80aa 	beq.w	80071ac <_dtoa_r+0x484>
 8007058:	f1ba 0f00 	cmp.w	sl, #0
 800705c:	dd36      	ble.n	80070cc <_dtoa_r+0x3a4>
 800705e:	4ac3      	ldr	r2, [pc, #780]	; (800736c <_dtoa_r+0x644>)
 8007060:	f00a 030f 	and.w	r3, sl, #15
 8007064:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007068:	ed93 7b00 	vldr	d7, [r3]
 800706c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007070:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007074:	eeb0 8a47 	vmov.f32	s16, s14
 8007078:	eef0 8a67 	vmov.f32	s17, s15
 800707c:	d016      	beq.n	80070ac <_dtoa_r+0x384>
 800707e:	4bbc      	ldr	r3, [pc, #752]	; (8007370 <_dtoa_r+0x648>)
 8007080:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007084:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007088:	f7f9 fbe8 	bl	800085c <__aeabi_ddiv>
 800708c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007090:	f007 070f 	and.w	r7, r7, #15
 8007094:	2503      	movs	r5, #3
 8007096:	4eb6      	ldr	r6, [pc, #728]	; (8007370 <_dtoa_r+0x648>)
 8007098:	b957      	cbnz	r7, 80070b0 <_dtoa_r+0x388>
 800709a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800709e:	ec53 2b18 	vmov	r2, r3, d8
 80070a2:	f7f9 fbdb 	bl	800085c <__aeabi_ddiv>
 80070a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070aa:	e029      	b.n	8007100 <_dtoa_r+0x3d8>
 80070ac:	2502      	movs	r5, #2
 80070ae:	e7f2      	b.n	8007096 <_dtoa_r+0x36e>
 80070b0:	07f9      	lsls	r1, r7, #31
 80070b2:	d508      	bpl.n	80070c6 <_dtoa_r+0x39e>
 80070b4:	ec51 0b18 	vmov	r0, r1, d8
 80070b8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80070bc:	f7f9 faa4 	bl	8000608 <__aeabi_dmul>
 80070c0:	ec41 0b18 	vmov	d8, r0, r1
 80070c4:	3501      	adds	r5, #1
 80070c6:	107f      	asrs	r7, r7, #1
 80070c8:	3608      	adds	r6, #8
 80070ca:	e7e5      	b.n	8007098 <_dtoa_r+0x370>
 80070cc:	f000 80a6 	beq.w	800721c <_dtoa_r+0x4f4>
 80070d0:	f1ca 0600 	rsb	r6, sl, #0
 80070d4:	4ba5      	ldr	r3, [pc, #660]	; (800736c <_dtoa_r+0x644>)
 80070d6:	4fa6      	ldr	r7, [pc, #664]	; (8007370 <_dtoa_r+0x648>)
 80070d8:	f006 020f 	and.w	r2, r6, #15
 80070dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80070e8:	f7f9 fa8e 	bl	8000608 <__aeabi_dmul>
 80070ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070f0:	1136      	asrs	r6, r6, #4
 80070f2:	2300      	movs	r3, #0
 80070f4:	2502      	movs	r5, #2
 80070f6:	2e00      	cmp	r6, #0
 80070f8:	f040 8085 	bne.w	8007206 <_dtoa_r+0x4de>
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d1d2      	bne.n	80070a6 <_dtoa_r+0x37e>
 8007100:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007102:	2b00      	cmp	r3, #0
 8007104:	f000 808c 	beq.w	8007220 <_dtoa_r+0x4f8>
 8007108:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800710c:	4b99      	ldr	r3, [pc, #612]	; (8007374 <_dtoa_r+0x64c>)
 800710e:	2200      	movs	r2, #0
 8007110:	4630      	mov	r0, r6
 8007112:	4639      	mov	r1, r7
 8007114:	f7f9 fcea 	bl	8000aec <__aeabi_dcmplt>
 8007118:	2800      	cmp	r0, #0
 800711a:	f000 8081 	beq.w	8007220 <_dtoa_r+0x4f8>
 800711e:	9b01      	ldr	r3, [sp, #4]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d07d      	beq.n	8007220 <_dtoa_r+0x4f8>
 8007124:	f1b9 0f00 	cmp.w	r9, #0
 8007128:	dd3c      	ble.n	80071a4 <_dtoa_r+0x47c>
 800712a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800712e:	9307      	str	r3, [sp, #28]
 8007130:	2200      	movs	r2, #0
 8007132:	4b91      	ldr	r3, [pc, #580]	; (8007378 <_dtoa_r+0x650>)
 8007134:	4630      	mov	r0, r6
 8007136:	4639      	mov	r1, r7
 8007138:	f7f9 fa66 	bl	8000608 <__aeabi_dmul>
 800713c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007140:	3501      	adds	r5, #1
 8007142:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007146:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800714a:	4628      	mov	r0, r5
 800714c:	f7f9 f9f2 	bl	8000534 <__aeabi_i2d>
 8007150:	4632      	mov	r2, r6
 8007152:	463b      	mov	r3, r7
 8007154:	f7f9 fa58 	bl	8000608 <__aeabi_dmul>
 8007158:	4b88      	ldr	r3, [pc, #544]	; (800737c <_dtoa_r+0x654>)
 800715a:	2200      	movs	r2, #0
 800715c:	f7f9 f89e 	bl	800029c <__adddf3>
 8007160:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007164:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007168:	9303      	str	r3, [sp, #12]
 800716a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800716c:	2b00      	cmp	r3, #0
 800716e:	d15c      	bne.n	800722a <_dtoa_r+0x502>
 8007170:	4b83      	ldr	r3, [pc, #524]	; (8007380 <_dtoa_r+0x658>)
 8007172:	2200      	movs	r2, #0
 8007174:	4630      	mov	r0, r6
 8007176:	4639      	mov	r1, r7
 8007178:	f7f9 f88e 	bl	8000298 <__aeabi_dsub>
 800717c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007180:	4606      	mov	r6, r0
 8007182:	460f      	mov	r7, r1
 8007184:	f7f9 fcd0 	bl	8000b28 <__aeabi_dcmpgt>
 8007188:	2800      	cmp	r0, #0
 800718a:	f040 8296 	bne.w	80076ba <_dtoa_r+0x992>
 800718e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007192:	4630      	mov	r0, r6
 8007194:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007198:	4639      	mov	r1, r7
 800719a:	f7f9 fca7 	bl	8000aec <__aeabi_dcmplt>
 800719e:	2800      	cmp	r0, #0
 80071a0:	f040 8288 	bne.w	80076b4 <_dtoa_r+0x98c>
 80071a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80071a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80071ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	f2c0 8158 	blt.w	8007464 <_dtoa_r+0x73c>
 80071b4:	f1ba 0f0e 	cmp.w	sl, #14
 80071b8:	f300 8154 	bgt.w	8007464 <_dtoa_r+0x73c>
 80071bc:	4b6b      	ldr	r3, [pc, #428]	; (800736c <_dtoa_r+0x644>)
 80071be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80071c2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80071c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	f280 80e3 	bge.w	8007394 <_dtoa_r+0x66c>
 80071ce:	9b01      	ldr	r3, [sp, #4]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f300 80df 	bgt.w	8007394 <_dtoa_r+0x66c>
 80071d6:	f040 826d 	bne.w	80076b4 <_dtoa_r+0x98c>
 80071da:	4b69      	ldr	r3, [pc, #420]	; (8007380 <_dtoa_r+0x658>)
 80071dc:	2200      	movs	r2, #0
 80071de:	4640      	mov	r0, r8
 80071e0:	4649      	mov	r1, r9
 80071e2:	f7f9 fa11 	bl	8000608 <__aeabi_dmul>
 80071e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80071ea:	f7f9 fc93 	bl	8000b14 <__aeabi_dcmpge>
 80071ee:	9e01      	ldr	r6, [sp, #4]
 80071f0:	4637      	mov	r7, r6
 80071f2:	2800      	cmp	r0, #0
 80071f4:	f040 8243 	bne.w	800767e <_dtoa_r+0x956>
 80071f8:	9d00      	ldr	r5, [sp, #0]
 80071fa:	2331      	movs	r3, #49	; 0x31
 80071fc:	f805 3b01 	strb.w	r3, [r5], #1
 8007200:	f10a 0a01 	add.w	sl, sl, #1
 8007204:	e23f      	b.n	8007686 <_dtoa_r+0x95e>
 8007206:	07f2      	lsls	r2, r6, #31
 8007208:	d505      	bpl.n	8007216 <_dtoa_r+0x4ee>
 800720a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800720e:	f7f9 f9fb 	bl	8000608 <__aeabi_dmul>
 8007212:	3501      	adds	r5, #1
 8007214:	2301      	movs	r3, #1
 8007216:	1076      	asrs	r6, r6, #1
 8007218:	3708      	adds	r7, #8
 800721a:	e76c      	b.n	80070f6 <_dtoa_r+0x3ce>
 800721c:	2502      	movs	r5, #2
 800721e:	e76f      	b.n	8007100 <_dtoa_r+0x3d8>
 8007220:	9b01      	ldr	r3, [sp, #4]
 8007222:	f8cd a01c 	str.w	sl, [sp, #28]
 8007226:	930c      	str	r3, [sp, #48]	; 0x30
 8007228:	e78d      	b.n	8007146 <_dtoa_r+0x41e>
 800722a:	9900      	ldr	r1, [sp, #0]
 800722c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800722e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007230:	4b4e      	ldr	r3, [pc, #312]	; (800736c <_dtoa_r+0x644>)
 8007232:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007236:	4401      	add	r1, r0
 8007238:	9102      	str	r1, [sp, #8]
 800723a:	9908      	ldr	r1, [sp, #32]
 800723c:	eeb0 8a47 	vmov.f32	s16, s14
 8007240:	eef0 8a67 	vmov.f32	s17, s15
 8007244:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007248:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800724c:	2900      	cmp	r1, #0
 800724e:	d045      	beq.n	80072dc <_dtoa_r+0x5b4>
 8007250:	494c      	ldr	r1, [pc, #304]	; (8007384 <_dtoa_r+0x65c>)
 8007252:	2000      	movs	r0, #0
 8007254:	f7f9 fb02 	bl	800085c <__aeabi_ddiv>
 8007258:	ec53 2b18 	vmov	r2, r3, d8
 800725c:	f7f9 f81c 	bl	8000298 <__aeabi_dsub>
 8007260:	9d00      	ldr	r5, [sp, #0]
 8007262:	ec41 0b18 	vmov	d8, r0, r1
 8007266:	4639      	mov	r1, r7
 8007268:	4630      	mov	r0, r6
 800726a:	f7f9 fc7d 	bl	8000b68 <__aeabi_d2iz>
 800726e:	900c      	str	r0, [sp, #48]	; 0x30
 8007270:	f7f9 f960 	bl	8000534 <__aeabi_i2d>
 8007274:	4602      	mov	r2, r0
 8007276:	460b      	mov	r3, r1
 8007278:	4630      	mov	r0, r6
 800727a:	4639      	mov	r1, r7
 800727c:	f7f9 f80c 	bl	8000298 <__aeabi_dsub>
 8007280:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007282:	3330      	adds	r3, #48	; 0x30
 8007284:	f805 3b01 	strb.w	r3, [r5], #1
 8007288:	ec53 2b18 	vmov	r2, r3, d8
 800728c:	4606      	mov	r6, r0
 800728e:	460f      	mov	r7, r1
 8007290:	f7f9 fc2c 	bl	8000aec <__aeabi_dcmplt>
 8007294:	2800      	cmp	r0, #0
 8007296:	d165      	bne.n	8007364 <_dtoa_r+0x63c>
 8007298:	4632      	mov	r2, r6
 800729a:	463b      	mov	r3, r7
 800729c:	4935      	ldr	r1, [pc, #212]	; (8007374 <_dtoa_r+0x64c>)
 800729e:	2000      	movs	r0, #0
 80072a0:	f7f8 fffa 	bl	8000298 <__aeabi_dsub>
 80072a4:	ec53 2b18 	vmov	r2, r3, d8
 80072a8:	f7f9 fc20 	bl	8000aec <__aeabi_dcmplt>
 80072ac:	2800      	cmp	r0, #0
 80072ae:	f040 80b9 	bne.w	8007424 <_dtoa_r+0x6fc>
 80072b2:	9b02      	ldr	r3, [sp, #8]
 80072b4:	429d      	cmp	r5, r3
 80072b6:	f43f af75 	beq.w	80071a4 <_dtoa_r+0x47c>
 80072ba:	4b2f      	ldr	r3, [pc, #188]	; (8007378 <_dtoa_r+0x650>)
 80072bc:	ec51 0b18 	vmov	r0, r1, d8
 80072c0:	2200      	movs	r2, #0
 80072c2:	f7f9 f9a1 	bl	8000608 <__aeabi_dmul>
 80072c6:	4b2c      	ldr	r3, [pc, #176]	; (8007378 <_dtoa_r+0x650>)
 80072c8:	ec41 0b18 	vmov	d8, r0, r1
 80072cc:	2200      	movs	r2, #0
 80072ce:	4630      	mov	r0, r6
 80072d0:	4639      	mov	r1, r7
 80072d2:	f7f9 f999 	bl	8000608 <__aeabi_dmul>
 80072d6:	4606      	mov	r6, r0
 80072d8:	460f      	mov	r7, r1
 80072da:	e7c4      	b.n	8007266 <_dtoa_r+0x53e>
 80072dc:	ec51 0b17 	vmov	r0, r1, d7
 80072e0:	f7f9 f992 	bl	8000608 <__aeabi_dmul>
 80072e4:	9b02      	ldr	r3, [sp, #8]
 80072e6:	9d00      	ldr	r5, [sp, #0]
 80072e8:	930c      	str	r3, [sp, #48]	; 0x30
 80072ea:	ec41 0b18 	vmov	d8, r0, r1
 80072ee:	4639      	mov	r1, r7
 80072f0:	4630      	mov	r0, r6
 80072f2:	f7f9 fc39 	bl	8000b68 <__aeabi_d2iz>
 80072f6:	9011      	str	r0, [sp, #68]	; 0x44
 80072f8:	f7f9 f91c 	bl	8000534 <__aeabi_i2d>
 80072fc:	4602      	mov	r2, r0
 80072fe:	460b      	mov	r3, r1
 8007300:	4630      	mov	r0, r6
 8007302:	4639      	mov	r1, r7
 8007304:	f7f8 ffc8 	bl	8000298 <__aeabi_dsub>
 8007308:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800730a:	3330      	adds	r3, #48	; 0x30
 800730c:	f805 3b01 	strb.w	r3, [r5], #1
 8007310:	9b02      	ldr	r3, [sp, #8]
 8007312:	429d      	cmp	r5, r3
 8007314:	4606      	mov	r6, r0
 8007316:	460f      	mov	r7, r1
 8007318:	f04f 0200 	mov.w	r2, #0
 800731c:	d134      	bne.n	8007388 <_dtoa_r+0x660>
 800731e:	4b19      	ldr	r3, [pc, #100]	; (8007384 <_dtoa_r+0x65c>)
 8007320:	ec51 0b18 	vmov	r0, r1, d8
 8007324:	f7f8 ffba 	bl	800029c <__adddf3>
 8007328:	4602      	mov	r2, r0
 800732a:	460b      	mov	r3, r1
 800732c:	4630      	mov	r0, r6
 800732e:	4639      	mov	r1, r7
 8007330:	f7f9 fbfa 	bl	8000b28 <__aeabi_dcmpgt>
 8007334:	2800      	cmp	r0, #0
 8007336:	d175      	bne.n	8007424 <_dtoa_r+0x6fc>
 8007338:	ec53 2b18 	vmov	r2, r3, d8
 800733c:	4911      	ldr	r1, [pc, #68]	; (8007384 <_dtoa_r+0x65c>)
 800733e:	2000      	movs	r0, #0
 8007340:	f7f8 ffaa 	bl	8000298 <__aeabi_dsub>
 8007344:	4602      	mov	r2, r0
 8007346:	460b      	mov	r3, r1
 8007348:	4630      	mov	r0, r6
 800734a:	4639      	mov	r1, r7
 800734c:	f7f9 fbce 	bl	8000aec <__aeabi_dcmplt>
 8007350:	2800      	cmp	r0, #0
 8007352:	f43f af27 	beq.w	80071a4 <_dtoa_r+0x47c>
 8007356:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007358:	1e6b      	subs	r3, r5, #1
 800735a:	930c      	str	r3, [sp, #48]	; 0x30
 800735c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007360:	2b30      	cmp	r3, #48	; 0x30
 8007362:	d0f8      	beq.n	8007356 <_dtoa_r+0x62e>
 8007364:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007368:	e04a      	b.n	8007400 <_dtoa_r+0x6d8>
 800736a:	bf00      	nop
 800736c:	08009228 	.word	0x08009228
 8007370:	08009200 	.word	0x08009200
 8007374:	3ff00000 	.word	0x3ff00000
 8007378:	40240000 	.word	0x40240000
 800737c:	401c0000 	.word	0x401c0000
 8007380:	40140000 	.word	0x40140000
 8007384:	3fe00000 	.word	0x3fe00000
 8007388:	4baf      	ldr	r3, [pc, #700]	; (8007648 <_dtoa_r+0x920>)
 800738a:	f7f9 f93d 	bl	8000608 <__aeabi_dmul>
 800738e:	4606      	mov	r6, r0
 8007390:	460f      	mov	r7, r1
 8007392:	e7ac      	b.n	80072ee <_dtoa_r+0x5c6>
 8007394:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007398:	9d00      	ldr	r5, [sp, #0]
 800739a:	4642      	mov	r2, r8
 800739c:	464b      	mov	r3, r9
 800739e:	4630      	mov	r0, r6
 80073a0:	4639      	mov	r1, r7
 80073a2:	f7f9 fa5b 	bl	800085c <__aeabi_ddiv>
 80073a6:	f7f9 fbdf 	bl	8000b68 <__aeabi_d2iz>
 80073aa:	9002      	str	r0, [sp, #8]
 80073ac:	f7f9 f8c2 	bl	8000534 <__aeabi_i2d>
 80073b0:	4642      	mov	r2, r8
 80073b2:	464b      	mov	r3, r9
 80073b4:	f7f9 f928 	bl	8000608 <__aeabi_dmul>
 80073b8:	4602      	mov	r2, r0
 80073ba:	460b      	mov	r3, r1
 80073bc:	4630      	mov	r0, r6
 80073be:	4639      	mov	r1, r7
 80073c0:	f7f8 ff6a 	bl	8000298 <__aeabi_dsub>
 80073c4:	9e02      	ldr	r6, [sp, #8]
 80073c6:	9f01      	ldr	r7, [sp, #4]
 80073c8:	3630      	adds	r6, #48	; 0x30
 80073ca:	f805 6b01 	strb.w	r6, [r5], #1
 80073ce:	9e00      	ldr	r6, [sp, #0]
 80073d0:	1bae      	subs	r6, r5, r6
 80073d2:	42b7      	cmp	r7, r6
 80073d4:	4602      	mov	r2, r0
 80073d6:	460b      	mov	r3, r1
 80073d8:	d137      	bne.n	800744a <_dtoa_r+0x722>
 80073da:	f7f8 ff5f 	bl	800029c <__adddf3>
 80073de:	4642      	mov	r2, r8
 80073e0:	464b      	mov	r3, r9
 80073e2:	4606      	mov	r6, r0
 80073e4:	460f      	mov	r7, r1
 80073e6:	f7f9 fb9f 	bl	8000b28 <__aeabi_dcmpgt>
 80073ea:	b9c8      	cbnz	r0, 8007420 <_dtoa_r+0x6f8>
 80073ec:	4642      	mov	r2, r8
 80073ee:	464b      	mov	r3, r9
 80073f0:	4630      	mov	r0, r6
 80073f2:	4639      	mov	r1, r7
 80073f4:	f7f9 fb70 	bl	8000ad8 <__aeabi_dcmpeq>
 80073f8:	b110      	cbz	r0, 8007400 <_dtoa_r+0x6d8>
 80073fa:	9b02      	ldr	r3, [sp, #8]
 80073fc:	07d9      	lsls	r1, r3, #31
 80073fe:	d40f      	bmi.n	8007420 <_dtoa_r+0x6f8>
 8007400:	4620      	mov	r0, r4
 8007402:	4659      	mov	r1, fp
 8007404:	f000 fad6 	bl	80079b4 <_Bfree>
 8007408:	2300      	movs	r3, #0
 800740a:	702b      	strb	r3, [r5, #0]
 800740c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800740e:	f10a 0001 	add.w	r0, sl, #1
 8007412:	6018      	str	r0, [r3, #0]
 8007414:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007416:	2b00      	cmp	r3, #0
 8007418:	f43f acd8 	beq.w	8006dcc <_dtoa_r+0xa4>
 800741c:	601d      	str	r5, [r3, #0]
 800741e:	e4d5      	b.n	8006dcc <_dtoa_r+0xa4>
 8007420:	f8cd a01c 	str.w	sl, [sp, #28]
 8007424:	462b      	mov	r3, r5
 8007426:	461d      	mov	r5, r3
 8007428:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800742c:	2a39      	cmp	r2, #57	; 0x39
 800742e:	d108      	bne.n	8007442 <_dtoa_r+0x71a>
 8007430:	9a00      	ldr	r2, [sp, #0]
 8007432:	429a      	cmp	r2, r3
 8007434:	d1f7      	bne.n	8007426 <_dtoa_r+0x6fe>
 8007436:	9a07      	ldr	r2, [sp, #28]
 8007438:	9900      	ldr	r1, [sp, #0]
 800743a:	3201      	adds	r2, #1
 800743c:	9207      	str	r2, [sp, #28]
 800743e:	2230      	movs	r2, #48	; 0x30
 8007440:	700a      	strb	r2, [r1, #0]
 8007442:	781a      	ldrb	r2, [r3, #0]
 8007444:	3201      	adds	r2, #1
 8007446:	701a      	strb	r2, [r3, #0]
 8007448:	e78c      	b.n	8007364 <_dtoa_r+0x63c>
 800744a:	4b7f      	ldr	r3, [pc, #508]	; (8007648 <_dtoa_r+0x920>)
 800744c:	2200      	movs	r2, #0
 800744e:	f7f9 f8db 	bl	8000608 <__aeabi_dmul>
 8007452:	2200      	movs	r2, #0
 8007454:	2300      	movs	r3, #0
 8007456:	4606      	mov	r6, r0
 8007458:	460f      	mov	r7, r1
 800745a:	f7f9 fb3d 	bl	8000ad8 <__aeabi_dcmpeq>
 800745e:	2800      	cmp	r0, #0
 8007460:	d09b      	beq.n	800739a <_dtoa_r+0x672>
 8007462:	e7cd      	b.n	8007400 <_dtoa_r+0x6d8>
 8007464:	9a08      	ldr	r2, [sp, #32]
 8007466:	2a00      	cmp	r2, #0
 8007468:	f000 80c4 	beq.w	80075f4 <_dtoa_r+0x8cc>
 800746c:	9a05      	ldr	r2, [sp, #20]
 800746e:	2a01      	cmp	r2, #1
 8007470:	f300 80a8 	bgt.w	80075c4 <_dtoa_r+0x89c>
 8007474:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007476:	2a00      	cmp	r2, #0
 8007478:	f000 80a0 	beq.w	80075bc <_dtoa_r+0x894>
 800747c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007480:	9e06      	ldr	r6, [sp, #24]
 8007482:	4645      	mov	r5, r8
 8007484:	9a04      	ldr	r2, [sp, #16]
 8007486:	2101      	movs	r1, #1
 8007488:	441a      	add	r2, r3
 800748a:	4620      	mov	r0, r4
 800748c:	4498      	add	r8, r3
 800748e:	9204      	str	r2, [sp, #16]
 8007490:	f000 fb4c 	bl	8007b2c <__i2b>
 8007494:	4607      	mov	r7, r0
 8007496:	2d00      	cmp	r5, #0
 8007498:	dd0b      	ble.n	80074b2 <_dtoa_r+0x78a>
 800749a:	9b04      	ldr	r3, [sp, #16]
 800749c:	2b00      	cmp	r3, #0
 800749e:	dd08      	ble.n	80074b2 <_dtoa_r+0x78a>
 80074a0:	42ab      	cmp	r3, r5
 80074a2:	9a04      	ldr	r2, [sp, #16]
 80074a4:	bfa8      	it	ge
 80074a6:	462b      	movge	r3, r5
 80074a8:	eba8 0803 	sub.w	r8, r8, r3
 80074ac:	1aed      	subs	r5, r5, r3
 80074ae:	1ad3      	subs	r3, r2, r3
 80074b0:	9304      	str	r3, [sp, #16]
 80074b2:	9b06      	ldr	r3, [sp, #24]
 80074b4:	b1fb      	cbz	r3, 80074f6 <_dtoa_r+0x7ce>
 80074b6:	9b08      	ldr	r3, [sp, #32]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	f000 809f 	beq.w	80075fc <_dtoa_r+0x8d4>
 80074be:	2e00      	cmp	r6, #0
 80074c0:	dd11      	ble.n	80074e6 <_dtoa_r+0x7be>
 80074c2:	4639      	mov	r1, r7
 80074c4:	4632      	mov	r2, r6
 80074c6:	4620      	mov	r0, r4
 80074c8:	f000 fbec 	bl	8007ca4 <__pow5mult>
 80074cc:	465a      	mov	r2, fp
 80074ce:	4601      	mov	r1, r0
 80074d0:	4607      	mov	r7, r0
 80074d2:	4620      	mov	r0, r4
 80074d4:	f000 fb40 	bl	8007b58 <__multiply>
 80074d8:	4659      	mov	r1, fp
 80074da:	9007      	str	r0, [sp, #28]
 80074dc:	4620      	mov	r0, r4
 80074de:	f000 fa69 	bl	80079b4 <_Bfree>
 80074e2:	9b07      	ldr	r3, [sp, #28]
 80074e4:	469b      	mov	fp, r3
 80074e6:	9b06      	ldr	r3, [sp, #24]
 80074e8:	1b9a      	subs	r2, r3, r6
 80074ea:	d004      	beq.n	80074f6 <_dtoa_r+0x7ce>
 80074ec:	4659      	mov	r1, fp
 80074ee:	4620      	mov	r0, r4
 80074f0:	f000 fbd8 	bl	8007ca4 <__pow5mult>
 80074f4:	4683      	mov	fp, r0
 80074f6:	2101      	movs	r1, #1
 80074f8:	4620      	mov	r0, r4
 80074fa:	f000 fb17 	bl	8007b2c <__i2b>
 80074fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007500:	2b00      	cmp	r3, #0
 8007502:	4606      	mov	r6, r0
 8007504:	dd7c      	ble.n	8007600 <_dtoa_r+0x8d8>
 8007506:	461a      	mov	r2, r3
 8007508:	4601      	mov	r1, r0
 800750a:	4620      	mov	r0, r4
 800750c:	f000 fbca 	bl	8007ca4 <__pow5mult>
 8007510:	9b05      	ldr	r3, [sp, #20]
 8007512:	2b01      	cmp	r3, #1
 8007514:	4606      	mov	r6, r0
 8007516:	dd76      	ble.n	8007606 <_dtoa_r+0x8de>
 8007518:	2300      	movs	r3, #0
 800751a:	9306      	str	r3, [sp, #24]
 800751c:	6933      	ldr	r3, [r6, #16]
 800751e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007522:	6918      	ldr	r0, [r3, #16]
 8007524:	f000 fab2 	bl	8007a8c <__hi0bits>
 8007528:	f1c0 0020 	rsb	r0, r0, #32
 800752c:	9b04      	ldr	r3, [sp, #16]
 800752e:	4418      	add	r0, r3
 8007530:	f010 001f 	ands.w	r0, r0, #31
 8007534:	f000 8086 	beq.w	8007644 <_dtoa_r+0x91c>
 8007538:	f1c0 0320 	rsb	r3, r0, #32
 800753c:	2b04      	cmp	r3, #4
 800753e:	dd7f      	ble.n	8007640 <_dtoa_r+0x918>
 8007540:	f1c0 001c 	rsb	r0, r0, #28
 8007544:	9b04      	ldr	r3, [sp, #16]
 8007546:	4403      	add	r3, r0
 8007548:	4480      	add	r8, r0
 800754a:	4405      	add	r5, r0
 800754c:	9304      	str	r3, [sp, #16]
 800754e:	f1b8 0f00 	cmp.w	r8, #0
 8007552:	dd05      	ble.n	8007560 <_dtoa_r+0x838>
 8007554:	4659      	mov	r1, fp
 8007556:	4642      	mov	r2, r8
 8007558:	4620      	mov	r0, r4
 800755a:	f000 fbfd 	bl	8007d58 <__lshift>
 800755e:	4683      	mov	fp, r0
 8007560:	9b04      	ldr	r3, [sp, #16]
 8007562:	2b00      	cmp	r3, #0
 8007564:	dd05      	ble.n	8007572 <_dtoa_r+0x84a>
 8007566:	4631      	mov	r1, r6
 8007568:	461a      	mov	r2, r3
 800756a:	4620      	mov	r0, r4
 800756c:	f000 fbf4 	bl	8007d58 <__lshift>
 8007570:	4606      	mov	r6, r0
 8007572:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007574:	2b00      	cmp	r3, #0
 8007576:	d069      	beq.n	800764c <_dtoa_r+0x924>
 8007578:	4631      	mov	r1, r6
 800757a:	4658      	mov	r0, fp
 800757c:	f000 fc58 	bl	8007e30 <__mcmp>
 8007580:	2800      	cmp	r0, #0
 8007582:	da63      	bge.n	800764c <_dtoa_r+0x924>
 8007584:	2300      	movs	r3, #0
 8007586:	4659      	mov	r1, fp
 8007588:	220a      	movs	r2, #10
 800758a:	4620      	mov	r0, r4
 800758c:	f000 fa34 	bl	80079f8 <__multadd>
 8007590:	9b08      	ldr	r3, [sp, #32]
 8007592:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007596:	4683      	mov	fp, r0
 8007598:	2b00      	cmp	r3, #0
 800759a:	f000 818f 	beq.w	80078bc <_dtoa_r+0xb94>
 800759e:	4639      	mov	r1, r7
 80075a0:	2300      	movs	r3, #0
 80075a2:	220a      	movs	r2, #10
 80075a4:	4620      	mov	r0, r4
 80075a6:	f000 fa27 	bl	80079f8 <__multadd>
 80075aa:	f1b9 0f00 	cmp.w	r9, #0
 80075ae:	4607      	mov	r7, r0
 80075b0:	f300 808e 	bgt.w	80076d0 <_dtoa_r+0x9a8>
 80075b4:	9b05      	ldr	r3, [sp, #20]
 80075b6:	2b02      	cmp	r3, #2
 80075b8:	dc50      	bgt.n	800765c <_dtoa_r+0x934>
 80075ba:	e089      	b.n	80076d0 <_dtoa_r+0x9a8>
 80075bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80075be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80075c2:	e75d      	b.n	8007480 <_dtoa_r+0x758>
 80075c4:	9b01      	ldr	r3, [sp, #4]
 80075c6:	1e5e      	subs	r6, r3, #1
 80075c8:	9b06      	ldr	r3, [sp, #24]
 80075ca:	42b3      	cmp	r3, r6
 80075cc:	bfbf      	itttt	lt
 80075ce:	9b06      	ldrlt	r3, [sp, #24]
 80075d0:	9606      	strlt	r6, [sp, #24]
 80075d2:	1af2      	sublt	r2, r6, r3
 80075d4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80075d6:	bfb6      	itet	lt
 80075d8:	189b      	addlt	r3, r3, r2
 80075da:	1b9e      	subge	r6, r3, r6
 80075dc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80075de:	9b01      	ldr	r3, [sp, #4]
 80075e0:	bfb8      	it	lt
 80075e2:	2600      	movlt	r6, #0
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	bfb5      	itete	lt
 80075e8:	eba8 0503 	sublt.w	r5, r8, r3
 80075ec:	9b01      	ldrge	r3, [sp, #4]
 80075ee:	2300      	movlt	r3, #0
 80075f0:	4645      	movge	r5, r8
 80075f2:	e747      	b.n	8007484 <_dtoa_r+0x75c>
 80075f4:	9e06      	ldr	r6, [sp, #24]
 80075f6:	9f08      	ldr	r7, [sp, #32]
 80075f8:	4645      	mov	r5, r8
 80075fa:	e74c      	b.n	8007496 <_dtoa_r+0x76e>
 80075fc:	9a06      	ldr	r2, [sp, #24]
 80075fe:	e775      	b.n	80074ec <_dtoa_r+0x7c4>
 8007600:	9b05      	ldr	r3, [sp, #20]
 8007602:	2b01      	cmp	r3, #1
 8007604:	dc18      	bgt.n	8007638 <_dtoa_r+0x910>
 8007606:	9b02      	ldr	r3, [sp, #8]
 8007608:	b9b3      	cbnz	r3, 8007638 <_dtoa_r+0x910>
 800760a:	9b03      	ldr	r3, [sp, #12]
 800760c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007610:	b9a3      	cbnz	r3, 800763c <_dtoa_r+0x914>
 8007612:	9b03      	ldr	r3, [sp, #12]
 8007614:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007618:	0d1b      	lsrs	r3, r3, #20
 800761a:	051b      	lsls	r3, r3, #20
 800761c:	b12b      	cbz	r3, 800762a <_dtoa_r+0x902>
 800761e:	9b04      	ldr	r3, [sp, #16]
 8007620:	3301      	adds	r3, #1
 8007622:	9304      	str	r3, [sp, #16]
 8007624:	f108 0801 	add.w	r8, r8, #1
 8007628:	2301      	movs	r3, #1
 800762a:	9306      	str	r3, [sp, #24]
 800762c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800762e:	2b00      	cmp	r3, #0
 8007630:	f47f af74 	bne.w	800751c <_dtoa_r+0x7f4>
 8007634:	2001      	movs	r0, #1
 8007636:	e779      	b.n	800752c <_dtoa_r+0x804>
 8007638:	2300      	movs	r3, #0
 800763a:	e7f6      	b.n	800762a <_dtoa_r+0x902>
 800763c:	9b02      	ldr	r3, [sp, #8]
 800763e:	e7f4      	b.n	800762a <_dtoa_r+0x902>
 8007640:	d085      	beq.n	800754e <_dtoa_r+0x826>
 8007642:	4618      	mov	r0, r3
 8007644:	301c      	adds	r0, #28
 8007646:	e77d      	b.n	8007544 <_dtoa_r+0x81c>
 8007648:	40240000 	.word	0x40240000
 800764c:	9b01      	ldr	r3, [sp, #4]
 800764e:	2b00      	cmp	r3, #0
 8007650:	dc38      	bgt.n	80076c4 <_dtoa_r+0x99c>
 8007652:	9b05      	ldr	r3, [sp, #20]
 8007654:	2b02      	cmp	r3, #2
 8007656:	dd35      	ble.n	80076c4 <_dtoa_r+0x99c>
 8007658:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800765c:	f1b9 0f00 	cmp.w	r9, #0
 8007660:	d10d      	bne.n	800767e <_dtoa_r+0x956>
 8007662:	4631      	mov	r1, r6
 8007664:	464b      	mov	r3, r9
 8007666:	2205      	movs	r2, #5
 8007668:	4620      	mov	r0, r4
 800766a:	f000 f9c5 	bl	80079f8 <__multadd>
 800766e:	4601      	mov	r1, r0
 8007670:	4606      	mov	r6, r0
 8007672:	4658      	mov	r0, fp
 8007674:	f000 fbdc 	bl	8007e30 <__mcmp>
 8007678:	2800      	cmp	r0, #0
 800767a:	f73f adbd 	bgt.w	80071f8 <_dtoa_r+0x4d0>
 800767e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007680:	9d00      	ldr	r5, [sp, #0]
 8007682:	ea6f 0a03 	mvn.w	sl, r3
 8007686:	f04f 0800 	mov.w	r8, #0
 800768a:	4631      	mov	r1, r6
 800768c:	4620      	mov	r0, r4
 800768e:	f000 f991 	bl	80079b4 <_Bfree>
 8007692:	2f00      	cmp	r7, #0
 8007694:	f43f aeb4 	beq.w	8007400 <_dtoa_r+0x6d8>
 8007698:	f1b8 0f00 	cmp.w	r8, #0
 800769c:	d005      	beq.n	80076aa <_dtoa_r+0x982>
 800769e:	45b8      	cmp	r8, r7
 80076a0:	d003      	beq.n	80076aa <_dtoa_r+0x982>
 80076a2:	4641      	mov	r1, r8
 80076a4:	4620      	mov	r0, r4
 80076a6:	f000 f985 	bl	80079b4 <_Bfree>
 80076aa:	4639      	mov	r1, r7
 80076ac:	4620      	mov	r0, r4
 80076ae:	f000 f981 	bl	80079b4 <_Bfree>
 80076b2:	e6a5      	b.n	8007400 <_dtoa_r+0x6d8>
 80076b4:	2600      	movs	r6, #0
 80076b6:	4637      	mov	r7, r6
 80076b8:	e7e1      	b.n	800767e <_dtoa_r+0x956>
 80076ba:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80076bc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80076c0:	4637      	mov	r7, r6
 80076c2:	e599      	b.n	80071f8 <_dtoa_r+0x4d0>
 80076c4:	9b08      	ldr	r3, [sp, #32]
 80076c6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	f000 80fd 	beq.w	80078ca <_dtoa_r+0xba2>
 80076d0:	2d00      	cmp	r5, #0
 80076d2:	dd05      	ble.n	80076e0 <_dtoa_r+0x9b8>
 80076d4:	4639      	mov	r1, r7
 80076d6:	462a      	mov	r2, r5
 80076d8:	4620      	mov	r0, r4
 80076da:	f000 fb3d 	bl	8007d58 <__lshift>
 80076de:	4607      	mov	r7, r0
 80076e0:	9b06      	ldr	r3, [sp, #24]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d05c      	beq.n	80077a0 <_dtoa_r+0xa78>
 80076e6:	6879      	ldr	r1, [r7, #4]
 80076e8:	4620      	mov	r0, r4
 80076ea:	f000 f923 	bl	8007934 <_Balloc>
 80076ee:	4605      	mov	r5, r0
 80076f0:	b928      	cbnz	r0, 80076fe <_dtoa_r+0x9d6>
 80076f2:	4b80      	ldr	r3, [pc, #512]	; (80078f4 <_dtoa_r+0xbcc>)
 80076f4:	4602      	mov	r2, r0
 80076f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80076fa:	f7ff bb2e 	b.w	8006d5a <_dtoa_r+0x32>
 80076fe:	693a      	ldr	r2, [r7, #16]
 8007700:	3202      	adds	r2, #2
 8007702:	0092      	lsls	r2, r2, #2
 8007704:	f107 010c 	add.w	r1, r7, #12
 8007708:	300c      	adds	r0, #12
 800770a:	f000 f905 	bl	8007918 <memcpy>
 800770e:	2201      	movs	r2, #1
 8007710:	4629      	mov	r1, r5
 8007712:	4620      	mov	r0, r4
 8007714:	f000 fb20 	bl	8007d58 <__lshift>
 8007718:	9b00      	ldr	r3, [sp, #0]
 800771a:	3301      	adds	r3, #1
 800771c:	9301      	str	r3, [sp, #4]
 800771e:	9b00      	ldr	r3, [sp, #0]
 8007720:	444b      	add	r3, r9
 8007722:	9307      	str	r3, [sp, #28]
 8007724:	9b02      	ldr	r3, [sp, #8]
 8007726:	f003 0301 	and.w	r3, r3, #1
 800772a:	46b8      	mov	r8, r7
 800772c:	9306      	str	r3, [sp, #24]
 800772e:	4607      	mov	r7, r0
 8007730:	9b01      	ldr	r3, [sp, #4]
 8007732:	4631      	mov	r1, r6
 8007734:	3b01      	subs	r3, #1
 8007736:	4658      	mov	r0, fp
 8007738:	9302      	str	r3, [sp, #8]
 800773a:	f7ff fa69 	bl	8006c10 <quorem>
 800773e:	4603      	mov	r3, r0
 8007740:	3330      	adds	r3, #48	; 0x30
 8007742:	9004      	str	r0, [sp, #16]
 8007744:	4641      	mov	r1, r8
 8007746:	4658      	mov	r0, fp
 8007748:	9308      	str	r3, [sp, #32]
 800774a:	f000 fb71 	bl	8007e30 <__mcmp>
 800774e:	463a      	mov	r2, r7
 8007750:	4681      	mov	r9, r0
 8007752:	4631      	mov	r1, r6
 8007754:	4620      	mov	r0, r4
 8007756:	f000 fb87 	bl	8007e68 <__mdiff>
 800775a:	68c2      	ldr	r2, [r0, #12]
 800775c:	9b08      	ldr	r3, [sp, #32]
 800775e:	4605      	mov	r5, r0
 8007760:	bb02      	cbnz	r2, 80077a4 <_dtoa_r+0xa7c>
 8007762:	4601      	mov	r1, r0
 8007764:	4658      	mov	r0, fp
 8007766:	f000 fb63 	bl	8007e30 <__mcmp>
 800776a:	9b08      	ldr	r3, [sp, #32]
 800776c:	4602      	mov	r2, r0
 800776e:	4629      	mov	r1, r5
 8007770:	4620      	mov	r0, r4
 8007772:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007776:	f000 f91d 	bl	80079b4 <_Bfree>
 800777a:	9b05      	ldr	r3, [sp, #20]
 800777c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800777e:	9d01      	ldr	r5, [sp, #4]
 8007780:	ea43 0102 	orr.w	r1, r3, r2
 8007784:	9b06      	ldr	r3, [sp, #24]
 8007786:	430b      	orrs	r3, r1
 8007788:	9b08      	ldr	r3, [sp, #32]
 800778a:	d10d      	bne.n	80077a8 <_dtoa_r+0xa80>
 800778c:	2b39      	cmp	r3, #57	; 0x39
 800778e:	d029      	beq.n	80077e4 <_dtoa_r+0xabc>
 8007790:	f1b9 0f00 	cmp.w	r9, #0
 8007794:	dd01      	ble.n	800779a <_dtoa_r+0xa72>
 8007796:	9b04      	ldr	r3, [sp, #16]
 8007798:	3331      	adds	r3, #49	; 0x31
 800779a:	9a02      	ldr	r2, [sp, #8]
 800779c:	7013      	strb	r3, [r2, #0]
 800779e:	e774      	b.n	800768a <_dtoa_r+0x962>
 80077a0:	4638      	mov	r0, r7
 80077a2:	e7b9      	b.n	8007718 <_dtoa_r+0x9f0>
 80077a4:	2201      	movs	r2, #1
 80077a6:	e7e2      	b.n	800776e <_dtoa_r+0xa46>
 80077a8:	f1b9 0f00 	cmp.w	r9, #0
 80077ac:	db06      	blt.n	80077bc <_dtoa_r+0xa94>
 80077ae:	9905      	ldr	r1, [sp, #20]
 80077b0:	ea41 0909 	orr.w	r9, r1, r9
 80077b4:	9906      	ldr	r1, [sp, #24]
 80077b6:	ea59 0101 	orrs.w	r1, r9, r1
 80077ba:	d120      	bne.n	80077fe <_dtoa_r+0xad6>
 80077bc:	2a00      	cmp	r2, #0
 80077be:	ddec      	ble.n	800779a <_dtoa_r+0xa72>
 80077c0:	4659      	mov	r1, fp
 80077c2:	2201      	movs	r2, #1
 80077c4:	4620      	mov	r0, r4
 80077c6:	9301      	str	r3, [sp, #4]
 80077c8:	f000 fac6 	bl	8007d58 <__lshift>
 80077cc:	4631      	mov	r1, r6
 80077ce:	4683      	mov	fp, r0
 80077d0:	f000 fb2e 	bl	8007e30 <__mcmp>
 80077d4:	2800      	cmp	r0, #0
 80077d6:	9b01      	ldr	r3, [sp, #4]
 80077d8:	dc02      	bgt.n	80077e0 <_dtoa_r+0xab8>
 80077da:	d1de      	bne.n	800779a <_dtoa_r+0xa72>
 80077dc:	07da      	lsls	r2, r3, #31
 80077de:	d5dc      	bpl.n	800779a <_dtoa_r+0xa72>
 80077e0:	2b39      	cmp	r3, #57	; 0x39
 80077e2:	d1d8      	bne.n	8007796 <_dtoa_r+0xa6e>
 80077e4:	9a02      	ldr	r2, [sp, #8]
 80077e6:	2339      	movs	r3, #57	; 0x39
 80077e8:	7013      	strb	r3, [r2, #0]
 80077ea:	462b      	mov	r3, r5
 80077ec:	461d      	mov	r5, r3
 80077ee:	3b01      	subs	r3, #1
 80077f0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80077f4:	2a39      	cmp	r2, #57	; 0x39
 80077f6:	d050      	beq.n	800789a <_dtoa_r+0xb72>
 80077f8:	3201      	adds	r2, #1
 80077fa:	701a      	strb	r2, [r3, #0]
 80077fc:	e745      	b.n	800768a <_dtoa_r+0x962>
 80077fe:	2a00      	cmp	r2, #0
 8007800:	dd03      	ble.n	800780a <_dtoa_r+0xae2>
 8007802:	2b39      	cmp	r3, #57	; 0x39
 8007804:	d0ee      	beq.n	80077e4 <_dtoa_r+0xabc>
 8007806:	3301      	adds	r3, #1
 8007808:	e7c7      	b.n	800779a <_dtoa_r+0xa72>
 800780a:	9a01      	ldr	r2, [sp, #4]
 800780c:	9907      	ldr	r1, [sp, #28]
 800780e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007812:	428a      	cmp	r2, r1
 8007814:	d02a      	beq.n	800786c <_dtoa_r+0xb44>
 8007816:	4659      	mov	r1, fp
 8007818:	2300      	movs	r3, #0
 800781a:	220a      	movs	r2, #10
 800781c:	4620      	mov	r0, r4
 800781e:	f000 f8eb 	bl	80079f8 <__multadd>
 8007822:	45b8      	cmp	r8, r7
 8007824:	4683      	mov	fp, r0
 8007826:	f04f 0300 	mov.w	r3, #0
 800782a:	f04f 020a 	mov.w	r2, #10
 800782e:	4641      	mov	r1, r8
 8007830:	4620      	mov	r0, r4
 8007832:	d107      	bne.n	8007844 <_dtoa_r+0xb1c>
 8007834:	f000 f8e0 	bl	80079f8 <__multadd>
 8007838:	4680      	mov	r8, r0
 800783a:	4607      	mov	r7, r0
 800783c:	9b01      	ldr	r3, [sp, #4]
 800783e:	3301      	adds	r3, #1
 8007840:	9301      	str	r3, [sp, #4]
 8007842:	e775      	b.n	8007730 <_dtoa_r+0xa08>
 8007844:	f000 f8d8 	bl	80079f8 <__multadd>
 8007848:	4639      	mov	r1, r7
 800784a:	4680      	mov	r8, r0
 800784c:	2300      	movs	r3, #0
 800784e:	220a      	movs	r2, #10
 8007850:	4620      	mov	r0, r4
 8007852:	f000 f8d1 	bl	80079f8 <__multadd>
 8007856:	4607      	mov	r7, r0
 8007858:	e7f0      	b.n	800783c <_dtoa_r+0xb14>
 800785a:	f1b9 0f00 	cmp.w	r9, #0
 800785e:	9a00      	ldr	r2, [sp, #0]
 8007860:	bfcc      	ite	gt
 8007862:	464d      	movgt	r5, r9
 8007864:	2501      	movle	r5, #1
 8007866:	4415      	add	r5, r2
 8007868:	f04f 0800 	mov.w	r8, #0
 800786c:	4659      	mov	r1, fp
 800786e:	2201      	movs	r2, #1
 8007870:	4620      	mov	r0, r4
 8007872:	9301      	str	r3, [sp, #4]
 8007874:	f000 fa70 	bl	8007d58 <__lshift>
 8007878:	4631      	mov	r1, r6
 800787a:	4683      	mov	fp, r0
 800787c:	f000 fad8 	bl	8007e30 <__mcmp>
 8007880:	2800      	cmp	r0, #0
 8007882:	dcb2      	bgt.n	80077ea <_dtoa_r+0xac2>
 8007884:	d102      	bne.n	800788c <_dtoa_r+0xb64>
 8007886:	9b01      	ldr	r3, [sp, #4]
 8007888:	07db      	lsls	r3, r3, #31
 800788a:	d4ae      	bmi.n	80077ea <_dtoa_r+0xac2>
 800788c:	462b      	mov	r3, r5
 800788e:	461d      	mov	r5, r3
 8007890:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007894:	2a30      	cmp	r2, #48	; 0x30
 8007896:	d0fa      	beq.n	800788e <_dtoa_r+0xb66>
 8007898:	e6f7      	b.n	800768a <_dtoa_r+0x962>
 800789a:	9a00      	ldr	r2, [sp, #0]
 800789c:	429a      	cmp	r2, r3
 800789e:	d1a5      	bne.n	80077ec <_dtoa_r+0xac4>
 80078a0:	f10a 0a01 	add.w	sl, sl, #1
 80078a4:	2331      	movs	r3, #49	; 0x31
 80078a6:	e779      	b.n	800779c <_dtoa_r+0xa74>
 80078a8:	4b13      	ldr	r3, [pc, #76]	; (80078f8 <_dtoa_r+0xbd0>)
 80078aa:	f7ff baaf 	b.w	8006e0c <_dtoa_r+0xe4>
 80078ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	f47f aa86 	bne.w	8006dc2 <_dtoa_r+0x9a>
 80078b6:	4b11      	ldr	r3, [pc, #68]	; (80078fc <_dtoa_r+0xbd4>)
 80078b8:	f7ff baa8 	b.w	8006e0c <_dtoa_r+0xe4>
 80078bc:	f1b9 0f00 	cmp.w	r9, #0
 80078c0:	dc03      	bgt.n	80078ca <_dtoa_r+0xba2>
 80078c2:	9b05      	ldr	r3, [sp, #20]
 80078c4:	2b02      	cmp	r3, #2
 80078c6:	f73f aec9 	bgt.w	800765c <_dtoa_r+0x934>
 80078ca:	9d00      	ldr	r5, [sp, #0]
 80078cc:	4631      	mov	r1, r6
 80078ce:	4658      	mov	r0, fp
 80078d0:	f7ff f99e 	bl	8006c10 <quorem>
 80078d4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80078d8:	f805 3b01 	strb.w	r3, [r5], #1
 80078dc:	9a00      	ldr	r2, [sp, #0]
 80078de:	1aaa      	subs	r2, r5, r2
 80078e0:	4591      	cmp	r9, r2
 80078e2:	ddba      	ble.n	800785a <_dtoa_r+0xb32>
 80078e4:	4659      	mov	r1, fp
 80078e6:	2300      	movs	r3, #0
 80078e8:	220a      	movs	r2, #10
 80078ea:	4620      	mov	r0, r4
 80078ec:	f000 f884 	bl	80079f8 <__multadd>
 80078f0:	4683      	mov	fp, r0
 80078f2:	e7eb      	b.n	80078cc <_dtoa_r+0xba4>
 80078f4:	0800918f 	.word	0x0800918f
 80078f8:	080090e8 	.word	0x080090e8
 80078fc:	0800910c 	.word	0x0800910c

08007900 <_localeconv_r>:
 8007900:	4800      	ldr	r0, [pc, #0]	; (8007904 <_localeconv_r+0x4>)
 8007902:	4770      	bx	lr
 8007904:	20000160 	.word	0x20000160

08007908 <malloc>:
 8007908:	4b02      	ldr	r3, [pc, #8]	; (8007914 <malloc+0xc>)
 800790a:	4601      	mov	r1, r0
 800790c:	6818      	ldr	r0, [r3, #0]
 800790e:	f000 bbef 	b.w	80080f0 <_malloc_r>
 8007912:	bf00      	nop
 8007914:	2000000c 	.word	0x2000000c

08007918 <memcpy>:
 8007918:	440a      	add	r2, r1
 800791a:	4291      	cmp	r1, r2
 800791c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007920:	d100      	bne.n	8007924 <memcpy+0xc>
 8007922:	4770      	bx	lr
 8007924:	b510      	push	{r4, lr}
 8007926:	f811 4b01 	ldrb.w	r4, [r1], #1
 800792a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800792e:	4291      	cmp	r1, r2
 8007930:	d1f9      	bne.n	8007926 <memcpy+0xe>
 8007932:	bd10      	pop	{r4, pc}

08007934 <_Balloc>:
 8007934:	b570      	push	{r4, r5, r6, lr}
 8007936:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007938:	4604      	mov	r4, r0
 800793a:	460d      	mov	r5, r1
 800793c:	b976      	cbnz	r6, 800795c <_Balloc+0x28>
 800793e:	2010      	movs	r0, #16
 8007940:	f7ff ffe2 	bl	8007908 <malloc>
 8007944:	4602      	mov	r2, r0
 8007946:	6260      	str	r0, [r4, #36]	; 0x24
 8007948:	b920      	cbnz	r0, 8007954 <_Balloc+0x20>
 800794a:	4b18      	ldr	r3, [pc, #96]	; (80079ac <_Balloc+0x78>)
 800794c:	4818      	ldr	r0, [pc, #96]	; (80079b0 <_Balloc+0x7c>)
 800794e:	2166      	movs	r1, #102	; 0x66
 8007950:	f000 fd94 	bl	800847c <__assert_func>
 8007954:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007958:	6006      	str	r6, [r0, #0]
 800795a:	60c6      	str	r6, [r0, #12]
 800795c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800795e:	68f3      	ldr	r3, [r6, #12]
 8007960:	b183      	cbz	r3, 8007984 <_Balloc+0x50>
 8007962:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800796a:	b9b8      	cbnz	r0, 800799c <_Balloc+0x68>
 800796c:	2101      	movs	r1, #1
 800796e:	fa01 f605 	lsl.w	r6, r1, r5
 8007972:	1d72      	adds	r2, r6, #5
 8007974:	0092      	lsls	r2, r2, #2
 8007976:	4620      	mov	r0, r4
 8007978:	f000 fb5a 	bl	8008030 <_calloc_r>
 800797c:	b160      	cbz	r0, 8007998 <_Balloc+0x64>
 800797e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007982:	e00e      	b.n	80079a2 <_Balloc+0x6e>
 8007984:	2221      	movs	r2, #33	; 0x21
 8007986:	2104      	movs	r1, #4
 8007988:	4620      	mov	r0, r4
 800798a:	f000 fb51 	bl	8008030 <_calloc_r>
 800798e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007990:	60f0      	str	r0, [r6, #12]
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d1e4      	bne.n	8007962 <_Balloc+0x2e>
 8007998:	2000      	movs	r0, #0
 800799a:	bd70      	pop	{r4, r5, r6, pc}
 800799c:	6802      	ldr	r2, [r0, #0]
 800799e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80079a2:	2300      	movs	r3, #0
 80079a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80079a8:	e7f7      	b.n	800799a <_Balloc+0x66>
 80079aa:	bf00      	nop
 80079ac:	08009119 	.word	0x08009119
 80079b0:	080091a0 	.word	0x080091a0

080079b4 <_Bfree>:
 80079b4:	b570      	push	{r4, r5, r6, lr}
 80079b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80079b8:	4605      	mov	r5, r0
 80079ba:	460c      	mov	r4, r1
 80079bc:	b976      	cbnz	r6, 80079dc <_Bfree+0x28>
 80079be:	2010      	movs	r0, #16
 80079c0:	f7ff ffa2 	bl	8007908 <malloc>
 80079c4:	4602      	mov	r2, r0
 80079c6:	6268      	str	r0, [r5, #36]	; 0x24
 80079c8:	b920      	cbnz	r0, 80079d4 <_Bfree+0x20>
 80079ca:	4b09      	ldr	r3, [pc, #36]	; (80079f0 <_Bfree+0x3c>)
 80079cc:	4809      	ldr	r0, [pc, #36]	; (80079f4 <_Bfree+0x40>)
 80079ce:	218a      	movs	r1, #138	; 0x8a
 80079d0:	f000 fd54 	bl	800847c <__assert_func>
 80079d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80079d8:	6006      	str	r6, [r0, #0]
 80079da:	60c6      	str	r6, [r0, #12]
 80079dc:	b13c      	cbz	r4, 80079ee <_Bfree+0x3a>
 80079de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80079e0:	6862      	ldr	r2, [r4, #4]
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80079e8:	6021      	str	r1, [r4, #0]
 80079ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80079ee:	bd70      	pop	{r4, r5, r6, pc}
 80079f0:	08009119 	.word	0x08009119
 80079f4:	080091a0 	.word	0x080091a0

080079f8 <__multadd>:
 80079f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079fc:	690e      	ldr	r6, [r1, #16]
 80079fe:	4607      	mov	r7, r0
 8007a00:	4698      	mov	r8, r3
 8007a02:	460c      	mov	r4, r1
 8007a04:	f101 0014 	add.w	r0, r1, #20
 8007a08:	2300      	movs	r3, #0
 8007a0a:	6805      	ldr	r5, [r0, #0]
 8007a0c:	b2a9      	uxth	r1, r5
 8007a0e:	fb02 8101 	mla	r1, r2, r1, r8
 8007a12:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007a16:	0c2d      	lsrs	r5, r5, #16
 8007a18:	fb02 c505 	mla	r5, r2, r5, ip
 8007a1c:	b289      	uxth	r1, r1
 8007a1e:	3301      	adds	r3, #1
 8007a20:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007a24:	429e      	cmp	r6, r3
 8007a26:	f840 1b04 	str.w	r1, [r0], #4
 8007a2a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007a2e:	dcec      	bgt.n	8007a0a <__multadd+0x12>
 8007a30:	f1b8 0f00 	cmp.w	r8, #0
 8007a34:	d022      	beq.n	8007a7c <__multadd+0x84>
 8007a36:	68a3      	ldr	r3, [r4, #8]
 8007a38:	42b3      	cmp	r3, r6
 8007a3a:	dc19      	bgt.n	8007a70 <__multadd+0x78>
 8007a3c:	6861      	ldr	r1, [r4, #4]
 8007a3e:	4638      	mov	r0, r7
 8007a40:	3101      	adds	r1, #1
 8007a42:	f7ff ff77 	bl	8007934 <_Balloc>
 8007a46:	4605      	mov	r5, r0
 8007a48:	b928      	cbnz	r0, 8007a56 <__multadd+0x5e>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	4b0d      	ldr	r3, [pc, #52]	; (8007a84 <__multadd+0x8c>)
 8007a4e:	480e      	ldr	r0, [pc, #56]	; (8007a88 <__multadd+0x90>)
 8007a50:	21b5      	movs	r1, #181	; 0xb5
 8007a52:	f000 fd13 	bl	800847c <__assert_func>
 8007a56:	6922      	ldr	r2, [r4, #16]
 8007a58:	3202      	adds	r2, #2
 8007a5a:	f104 010c 	add.w	r1, r4, #12
 8007a5e:	0092      	lsls	r2, r2, #2
 8007a60:	300c      	adds	r0, #12
 8007a62:	f7ff ff59 	bl	8007918 <memcpy>
 8007a66:	4621      	mov	r1, r4
 8007a68:	4638      	mov	r0, r7
 8007a6a:	f7ff ffa3 	bl	80079b4 <_Bfree>
 8007a6e:	462c      	mov	r4, r5
 8007a70:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007a74:	3601      	adds	r6, #1
 8007a76:	f8c3 8014 	str.w	r8, [r3, #20]
 8007a7a:	6126      	str	r6, [r4, #16]
 8007a7c:	4620      	mov	r0, r4
 8007a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a82:	bf00      	nop
 8007a84:	0800918f 	.word	0x0800918f
 8007a88:	080091a0 	.word	0x080091a0

08007a8c <__hi0bits>:
 8007a8c:	0c03      	lsrs	r3, r0, #16
 8007a8e:	041b      	lsls	r3, r3, #16
 8007a90:	b9d3      	cbnz	r3, 8007ac8 <__hi0bits+0x3c>
 8007a92:	0400      	lsls	r0, r0, #16
 8007a94:	2310      	movs	r3, #16
 8007a96:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007a9a:	bf04      	itt	eq
 8007a9c:	0200      	lsleq	r0, r0, #8
 8007a9e:	3308      	addeq	r3, #8
 8007aa0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007aa4:	bf04      	itt	eq
 8007aa6:	0100      	lsleq	r0, r0, #4
 8007aa8:	3304      	addeq	r3, #4
 8007aaa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007aae:	bf04      	itt	eq
 8007ab0:	0080      	lsleq	r0, r0, #2
 8007ab2:	3302      	addeq	r3, #2
 8007ab4:	2800      	cmp	r0, #0
 8007ab6:	db05      	blt.n	8007ac4 <__hi0bits+0x38>
 8007ab8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007abc:	f103 0301 	add.w	r3, r3, #1
 8007ac0:	bf08      	it	eq
 8007ac2:	2320      	moveq	r3, #32
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	4770      	bx	lr
 8007ac8:	2300      	movs	r3, #0
 8007aca:	e7e4      	b.n	8007a96 <__hi0bits+0xa>

08007acc <__lo0bits>:
 8007acc:	6803      	ldr	r3, [r0, #0]
 8007ace:	f013 0207 	ands.w	r2, r3, #7
 8007ad2:	4601      	mov	r1, r0
 8007ad4:	d00b      	beq.n	8007aee <__lo0bits+0x22>
 8007ad6:	07da      	lsls	r2, r3, #31
 8007ad8:	d424      	bmi.n	8007b24 <__lo0bits+0x58>
 8007ada:	0798      	lsls	r0, r3, #30
 8007adc:	bf49      	itett	mi
 8007ade:	085b      	lsrmi	r3, r3, #1
 8007ae0:	089b      	lsrpl	r3, r3, #2
 8007ae2:	2001      	movmi	r0, #1
 8007ae4:	600b      	strmi	r3, [r1, #0]
 8007ae6:	bf5c      	itt	pl
 8007ae8:	600b      	strpl	r3, [r1, #0]
 8007aea:	2002      	movpl	r0, #2
 8007aec:	4770      	bx	lr
 8007aee:	b298      	uxth	r0, r3
 8007af0:	b9b0      	cbnz	r0, 8007b20 <__lo0bits+0x54>
 8007af2:	0c1b      	lsrs	r3, r3, #16
 8007af4:	2010      	movs	r0, #16
 8007af6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007afa:	bf04      	itt	eq
 8007afc:	0a1b      	lsreq	r3, r3, #8
 8007afe:	3008      	addeq	r0, #8
 8007b00:	071a      	lsls	r2, r3, #28
 8007b02:	bf04      	itt	eq
 8007b04:	091b      	lsreq	r3, r3, #4
 8007b06:	3004      	addeq	r0, #4
 8007b08:	079a      	lsls	r2, r3, #30
 8007b0a:	bf04      	itt	eq
 8007b0c:	089b      	lsreq	r3, r3, #2
 8007b0e:	3002      	addeq	r0, #2
 8007b10:	07da      	lsls	r2, r3, #31
 8007b12:	d403      	bmi.n	8007b1c <__lo0bits+0x50>
 8007b14:	085b      	lsrs	r3, r3, #1
 8007b16:	f100 0001 	add.w	r0, r0, #1
 8007b1a:	d005      	beq.n	8007b28 <__lo0bits+0x5c>
 8007b1c:	600b      	str	r3, [r1, #0]
 8007b1e:	4770      	bx	lr
 8007b20:	4610      	mov	r0, r2
 8007b22:	e7e8      	b.n	8007af6 <__lo0bits+0x2a>
 8007b24:	2000      	movs	r0, #0
 8007b26:	4770      	bx	lr
 8007b28:	2020      	movs	r0, #32
 8007b2a:	4770      	bx	lr

08007b2c <__i2b>:
 8007b2c:	b510      	push	{r4, lr}
 8007b2e:	460c      	mov	r4, r1
 8007b30:	2101      	movs	r1, #1
 8007b32:	f7ff feff 	bl	8007934 <_Balloc>
 8007b36:	4602      	mov	r2, r0
 8007b38:	b928      	cbnz	r0, 8007b46 <__i2b+0x1a>
 8007b3a:	4b05      	ldr	r3, [pc, #20]	; (8007b50 <__i2b+0x24>)
 8007b3c:	4805      	ldr	r0, [pc, #20]	; (8007b54 <__i2b+0x28>)
 8007b3e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007b42:	f000 fc9b 	bl	800847c <__assert_func>
 8007b46:	2301      	movs	r3, #1
 8007b48:	6144      	str	r4, [r0, #20]
 8007b4a:	6103      	str	r3, [r0, #16]
 8007b4c:	bd10      	pop	{r4, pc}
 8007b4e:	bf00      	nop
 8007b50:	0800918f 	.word	0x0800918f
 8007b54:	080091a0 	.word	0x080091a0

08007b58 <__multiply>:
 8007b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b5c:	4614      	mov	r4, r2
 8007b5e:	690a      	ldr	r2, [r1, #16]
 8007b60:	6923      	ldr	r3, [r4, #16]
 8007b62:	429a      	cmp	r2, r3
 8007b64:	bfb8      	it	lt
 8007b66:	460b      	movlt	r3, r1
 8007b68:	460d      	mov	r5, r1
 8007b6a:	bfbc      	itt	lt
 8007b6c:	4625      	movlt	r5, r4
 8007b6e:	461c      	movlt	r4, r3
 8007b70:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007b74:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007b78:	68ab      	ldr	r3, [r5, #8]
 8007b7a:	6869      	ldr	r1, [r5, #4]
 8007b7c:	eb0a 0709 	add.w	r7, sl, r9
 8007b80:	42bb      	cmp	r3, r7
 8007b82:	b085      	sub	sp, #20
 8007b84:	bfb8      	it	lt
 8007b86:	3101      	addlt	r1, #1
 8007b88:	f7ff fed4 	bl	8007934 <_Balloc>
 8007b8c:	b930      	cbnz	r0, 8007b9c <__multiply+0x44>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	4b42      	ldr	r3, [pc, #264]	; (8007c9c <__multiply+0x144>)
 8007b92:	4843      	ldr	r0, [pc, #268]	; (8007ca0 <__multiply+0x148>)
 8007b94:	f240 115d 	movw	r1, #349	; 0x15d
 8007b98:	f000 fc70 	bl	800847c <__assert_func>
 8007b9c:	f100 0614 	add.w	r6, r0, #20
 8007ba0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007ba4:	4633      	mov	r3, r6
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	4543      	cmp	r3, r8
 8007baa:	d31e      	bcc.n	8007bea <__multiply+0x92>
 8007bac:	f105 0c14 	add.w	ip, r5, #20
 8007bb0:	f104 0314 	add.w	r3, r4, #20
 8007bb4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007bb8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007bbc:	9202      	str	r2, [sp, #8]
 8007bbe:	ebac 0205 	sub.w	r2, ip, r5
 8007bc2:	3a15      	subs	r2, #21
 8007bc4:	f022 0203 	bic.w	r2, r2, #3
 8007bc8:	3204      	adds	r2, #4
 8007bca:	f105 0115 	add.w	r1, r5, #21
 8007bce:	458c      	cmp	ip, r1
 8007bd0:	bf38      	it	cc
 8007bd2:	2204      	movcc	r2, #4
 8007bd4:	9201      	str	r2, [sp, #4]
 8007bd6:	9a02      	ldr	r2, [sp, #8]
 8007bd8:	9303      	str	r3, [sp, #12]
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d808      	bhi.n	8007bf0 <__multiply+0x98>
 8007bde:	2f00      	cmp	r7, #0
 8007be0:	dc55      	bgt.n	8007c8e <__multiply+0x136>
 8007be2:	6107      	str	r7, [r0, #16]
 8007be4:	b005      	add	sp, #20
 8007be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bea:	f843 2b04 	str.w	r2, [r3], #4
 8007bee:	e7db      	b.n	8007ba8 <__multiply+0x50>
 8007bf0:	f8b3 a000 	ldrh.w	sl, [r3]
 8007bf4:	f1ba 0f00 	cmp.w	sl, #0
 8007bf8:	d020      	beq.n	8007c3c <__multiply+0xe4>
 8007bfa:	f105 0e14 	add.w	lr, r5, #20
 8007bfe:	46b1      	mov	r9, r6
 8007c00:	2200      	movs	r2, #0
 8007c02:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007c06:	f8d9 b000 	ldr.w	fp, [r9]
 8007c0a:	b2a1      	uxth	r1, r4
 8007c0c:	fa1f fb8b 	uxth.w	fp, fp
 8007c10:	fb0a b101 	mla	r1, sl, r1, fp
 8007c14:	4411      	add	r1, r2
 8007c16:	f8d9 2000 	ldr.w	r2, [r9]
 8007c1a:	0c24      	lsrs	r4, r4, #16
 8007c1c:	0c12      	lsrs	r2, r2, #16
 8007c1e:	fb0a 2404 	mla	r4, sl, r4, r2
 8007c22:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007c26:	b289      	uxth	r1, r1
 8007c28:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007c2c:	45f4      	cmp	ip, lr
 8007c2e:	f849 1b04 	str.w	r1, [r9], #4
 8007c32:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007c36:	d8e4      	bhi.n	8007c02 <__multiply+0xaa>
 8007c38:	9901      	ldr	r1, [sp, #4]
 8007c3a:	5072      	str	r2, [r6, r1]
 8007c3c:	9a03      	ldr	r2, [sp, #12]
 8007c3e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007c42:	3304      	adds	r3, #4
 8007c44:	f1b9 0f00 	cmp.w	r9, #0
 8007c48:	d01f      	beq.n	8007c8a <__multiply+0x132>
 8007c4a:	6834      	ldr	r4, [r6, #0]
 8007c4c:	f105 0114 	add.w	r1, r5, #20
 8007c50:	46b6      	mov	lr, r6
 8007c52:	f04f 0a00 	mov.w	sl, #0
 8007c56:	880a      	ldrh	r2, [r1, #0]
 8007c58:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007c5c:	fb09 b202 	mla	r2, r9, r2, fp
 8007c60:	4492      	add	sl, r2
 8007c62:	b2a4      	uxth	r4, r4
 8007c64:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007c68:	f84e 4b04 	str.w	r4, [lr], #4
 8007c6c:	f851 4b04 	ldr.w	r4, [r1], #4
 8007c70:	f8be 2000 	ldrh.w	r2, [lr]
 8007c74:	0c24      	lsrs	r4, r4, #16
 8007c76:	fb09 2404 	mla	r4, r9, r4, r2
 8007c7a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007c7e:	458c      	cmp	ip, r1
 8007c80:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007c84:	d8e7      	bhi.n	8007c56 <__multiply+0xfe>
 8007c86:	9a01      	ldr	r2, [sp, #4]
 8007c88:	50b4      	str	r4, [r6, r2]
 8007c8a:	3604      	adds	r6, #4
 8007c8c:	e7a3      	b.n	8007bd6 <__multiply+0x7e>
 8007c8e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d1a5      	bne.n	8007be2 <__multiply+0x8a>
 8007c96:	3f01      	subs	r7, #1
 8007c98:	e7a1      	b.n	8007bde <__multiply+0x86>
 8007c9a:	bf00      	nop
 8007c9c:	0800918f 	.word	0x0800918f
 8007ca0:	080091a0 	.word	0x080091a0

08007ca4 <__pow5mult>:
 8007ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ca8:	4615      	mov	r5, r2
 8007caa:	f012 0203 	ands.w	r2, r2, #3
 8007cae:	4606      	mov	r6, r0
 8007cb0:	460f      	mov	r7, r1
 8007cb2:	d007      	beq.n	8007cc4 <__pow5mult+0x20>
 8007cb4:	4c25      	ldr	r4, [pc, #148]	; (8007d4c <__pow5mult+0xa8>)
 8007cb6:	3a01      	subs	r2, #1
 8007cb8:	2300      	movs	r3, #0
 8007cba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007cbe:	f7ff fe9b 	bl	80079f8 <__multadd>
 8007cc2:	4607      	mov	r7, r0
 8007cc4:	10ad      	asrs	r5, r5, #2
 8007cc6:	d03d      	beq.n	8007d44 <__pow5mult+0xa0>
 8007cc8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007cca:	b97c      	cbnz	r4, 8007cec <__pow5mult+0x48>
 8007ccc:	2010      	movs	r0, #16
 8007cce:	f7ff fe1b 	bl	8007908 <malloc>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	6270      	str	r0, [r6, #36]	; 0x24
 8007cd6:	b928      	cbnz	r0, 8007ce4 <__pow5mult+0x40>
 8007cd8:	4b1d      	ldr	r3, [pc, #116]	; (8007d50 <__pow5mult+0xac>)
 8007cda:	481e      	ldr	r0, [pc, #120]	; (8007d54 <__pow5mult+0xb0>)
 8007cdc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007ce0:	f000 fbcc 	bl	800847c <__assert_func>
 8007ce4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007ce8:	6004      	str	r4, [r0, #0]
 8007cea:	60c4      	str	r4, [r0, #12]
 8007cec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007cf0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007cf4:	b94c      	cbnz	r4, 8007d0a <__pow5mult+0x66>
 8007cf6:	f240 2171 	movw	r1, #625	; 0x271
 8007cfa:	4630      	mov	r0, r6
 8007cfc:	f7ff ff16 	bl	8007b2c <__i2b>
 8007d00:	2300      	movs	r3, #0
 8007d02:	f8c8 0008 	str.w	r0, [r8, #8]
 8007d06:	4604      	mov	r4, r0
 8007d08:	6003      	str	r3, [r0, #0]
 8007d0a:	f04f 0900 	mov.w	r9, #0
 8007d0e:	07eb      	lsls	r3, r5, #31
 8007d10:	d50a      	bpl.n	8007d28 <__pow5mult+0x84>
 8007d12:	4639      	mov	r1, r7
 8007d14:	4622      	mov	r2, r4
 8007d16:	4630      	mov	r0, r6
 8007d18:	f7ff ff1e 	bl	8007b58 <__multiply>
 8007d1c:	4639      	mov	r1, r7
 8007d1e:	4680      	mov	r8, r0
 8007d20:	4630      	mov	r0, r6
 8007d22:	f7ff fe47 	bl	80079b4 <_Bfree>
 8007d26:	4647      	mov	r7, r8
 8007d28:	106d      	asrs	r5, r5, #1
 8007d2a:	d00b      	beq.n	8007d44 <__pow5mult+0xa0>
 8007d2c:	6820      	ldr	r0, [r4, #0]
 8007d2e:	b938      	cbnz	r0, 8007d40 <__pow5mult+0x9c>
 8007d30:	4622      	mov	r2, r4
 8007d32:	4621      	mov	r1, r4
 8007d34:	4630      	mov	r0, r6
 8007d36:	f7ff ff0f 	bl	8007b58 <__multiply>
 8007d3a:	6020      	str	r0, [r4, #0]
 8007d3c:	f8c0 9000 	str.w	r9, [r0]
 8007d40:	4604      	mov	r4, r0
 8007d42:	e7e4      	b.n	8007d0e <__pow5mult+0x6a>
 8007d44:	4638      	mov	r0, r7
 8007d46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d4a:	bf00      	nop
 8007d4c:	080092f0 	.word	0x080092f0
 8007d50:	08009119 	.word	0x08009119
 8007d54:	080091a0 	.word	0x080091a0

08007d58 <__lshift>:
 8007d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d5c:	460c      	mov	r4, r1
 8007d5e:	6849      	ldr	r1, [r1, #4]
 8007d60:	6923      	ldr	r3, [r4, #16]
 8007d62:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007d66:	68a3      	ldr	r3, [r4, #8]
 8007d68:	4607      	mov	r7, r0
 8007d6a:	4691      	mov	r9, r2
 8007d6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007d70:	f108 0601 	add.w	r6, r8, #1
 8007d74:	42b3      	cmp	r3, r6
 8007d76:	db0b      	blt.n	8007d90 <__lshift+0x38>
 8007d78:	4638      	mov	r0, r7
 8007d7a:	f7ff fddb 	bl	8007934 <_Balloc>
 8007d7e:	4605      	mov	r5, r0
 8007d80:	b948      	cbnz	r0, 8007d96 <__lshift+0x3e>
 8007d82:	4602      	mov	r2, r0
 8007d84:	4b28      	ldr	r3, [pc, #160]	; (8007e28 <__lshift+0xd0>)
 8007d86:	4829      	ldr	r0, [pc, #164]	; (8007e2c <__lshift+0xd4>)
 8007d88:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007d8c:	f000 fb76 	bl	800847c <__assert_func>
 8007d90:	3101      	adds	r1, #1
 8007d92:	005b      	lsls	r3, r3, #1
 8007d94:	e7ee      	b.n	8007d74 <__lshift+0x1c>
 8007d96:	2300      	movs	r3, #0
 8007d98:	f100 0114 	add.w	r1, r0, #20
 8007d9c:	f100 0210 	add.w	r2, r0, #16
 8007da0:	4618      	mov	r0, r3
 8007da2:	4553      	cmp	r3, sl
 8007da4:	db33      	blt.n	8007e0e <__lshift+0xb6>
 8007da6:	6920      	ldr	r0, [r4, #16]
 8007da8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007dac:	f104 0314 	add.w	r3, r4, #20
 8007db0:	f019 091f 	ands.w	r9, r9, #31
 8007db4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007db8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007dbc:	d02b      	beq.n	8007e16 <__lshift+0xbe>
 8007dbe:	f1c9 0e20 	rsb	lr, r9, #32
 8007dc2:	468a      	mov	sl, r1
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	6818      	ldr	r0, [r3, #0]
 8007dc8:	fa00 f009 	lsl.w	r0, r0, r9
 8007dcc:	4302      	orrs	r2, r0
 8007dce:	f84a 2b04 	str.w	r2, [sl], #4
 8007dd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dd6:	459c      	cmp	ip, r3
 8007dd8:	fa22 f20e 	lsr.w	r2, r2, lr
 8007ddc:	d8f3      	bhi.n	8007dc6 <__lshift+0x6e>
 8007dde:	ebac 0304 	sub.w	r3, ip, r4
 8007de2:	3b15      	subs	r3, #21
 8007de4:	f023 0303 	bic.w	r3, r3, #3
 8007de8:	3304      	adds	r3, #4
 8007dea:	f104 0015 	add.w	r0, r4, #21
 8007dee:	4584      	cmp	ip, r0
 8007df0:	bf38      	it	cc
 8007df2:	2304      	movcc	r3, #4
 8007df4:	50ca      	str	r2, [r1, r3]
 8007df6:	b10a      	cbz	r2, 8007dfc <__lshift+0xa4>
 8007df8:	f108 0602 	add.w	r6, r8, #2
 8007dfc:	3e01      	subs	r6, #1
 8007dfe:	4638      	mov	r0, r7
 8007e00:	612e      	str	r6, [r5, #16]
 8007e02:	4621      	mov	r1, r4
 8007e04:	f7ff fdd6 	bl	80079b4 <_Bfree>
 8007e08:	4628      	mov	r0, r5
 8007e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e0e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007e12:	3301      	adds	r3, #1
 8007e14:	e7c5      	b.n	8007da2 <__lshift+0x4a>
 8007e16:	3904      	subs	r1, #4
 8007e18:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e1c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007e20:	459c      	cmp	ip, r3
 8007e22:	d8f9      	bhi.n	8007e18 <__lshift+0xc0>
 8007e24:	e7ea      	b.n	8007dfc <__lshift+0xa4>
 8007e26:	bf00      	nop
 8007e28:	0800918f 	.word	0x0800918f
 8007e2c:	080091a0 	.word	0x080091a0

08007e30 <__mcmp>:
 8007e30:	b530      	push	{r4, r5, lr}
 8007e32:	6902      	ldr	r2, [r0, #16]
 8007e34:	690c      	ldr	r4, [r1, #16]
 8007e36:	1b12      	subs	r2, r2, r4
 8007e38:	d10e      	bne.n	8007e58 <__mcmp+0x28>
 8007e3a:	f100 0314 	add.w	r3, r0, #20
 8007e3e:	3114      	adds	r1, #20
 8007e40:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007e44:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007e48:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007e4c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007e50:	42a5      	cmp	r5, r4
 8007e52:	d003      	beq.n	8007e5c <__mcmp+0x2c>
 8007e54:	d305      	bcc.n	8007e62 <__mcmp+0x32>
 8007e56:	2201      	movs	r2, #1
 8007e58:	4610      	mov	r0, r2
 8007e5a:	bd30      	pop	{r4, r5, pc}
 8007e5c:	4283      	cmp	r3, r0
 8007e5e:	d3f3      	bcc.n	8007e48 <__mcmp+0x18>
 8007e60:	e7fa      	b.n	8007e58 <__mcmp+0x28>
 8007e62:	f04f 32ff 	mov.w	r2, #4294967295
 8007e66:	e7f7      	b.n	8007e58 <__mcmp+0x28>

08007e68 <__mdiff>:
 8007e68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e6c:	460c      	mov	r4, r1
 8007e6e:	4606      	mov	r6, r0
 8007e70:	4611      	mov	r1, r2
 8007e72:	4620      	mov	r0, r4
 8007e74:	4617      	mov	r7, r2
 8007e76:	f7ff ffdb 	bl	8007e30 <__mcmp>
 8007e7a:	1e05      	subs	r5, r0, #0
 8007e7c:	d110      	bne.n	8007ea0 <__mdiff+0x38>
 8007e7e:	4629      	mov	r1, r5
 8007e80:	4630      	mov	r0, r6
 8007e82:	f7ff fd57 	bl	8007934 <_Balloc>
 8007e86:	b930      	cbnz	r0, 8007e96 <__mdiff+0x2e>
 8007e88:	4b39      	ldr	r3, [pc, #228]	; (8007f70 <__mdiff+0x108>)
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	f240 2132 	movw	r1, #562	; 0x232
 8007e90:	4838      	ldr	r0, [pc, #224]	; (8007f74 <__mdiff+0x10c>)
 8007e92:	f000 faf3 	bl	800847c <__assert_func>
 8007e96:	2301      	movs	r3, #1
 8007e98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007e9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ea0:	bfa4      	itt	ge
 8007ea2:	463b      	movge	r3, r7
 8007ea4:	4627      	movge	r7, r4
 8007ea6:	4630      	mov	r0, r6
 8007ea8:	6879      	ldr	r1, [r7, #4]
 8007eaa:	bfa6      	itte	ge
 8007eac:	461c      	movge	r4, r3
 8007eae:	2500      	movge	r5, #0
 8007eb0:	2501      	movlt	r5, #1
 8007eb2:	f7ff fd3f 	bl	8007934 <_Balloc>
 8007eb6:	b920      	cbnz	r0, 8007ec2 <__mdiff+0x5a>
 8007eb8:	4b2d      	ldr	r3, [pc, #180]	; (8007f70 <__mdiff+0x108>)
 8007eba:	4602      	mov	r2, r0
 8007ebc:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007ec0:	e7e6      	b.n	8007e90 <__mdiff+0x28>
 8007ec2:	693e      	ldr	r6, [r7, #16]
 8007ec4:	60c5      	str	r5, [r0, #12]
 8007ec6:	6925      	ldr	r5, [r4, #16]
 8007ec8:	f107 0114 	add.w	r1, r7, #20
 8007ecc:	f104 0914 	add.w	r9, r4, #20
 8007ed0:	f100 0e14 	add.w	lr, r0, #20
 8007ed4:	f107 0210 	add.w	r2, r7, #16
 8007ed8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007edc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007ee0:	46f2      	mov	sl, lr
 8007ee2:	2700      	movs	r7, #0
 8007ee4:	f859 3b04 	ldr.w	r3, [r9], #4
 8007ee8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007eec:	fa1f f883 	uxth.w	r8, r3
 8007ef0:	fa17 f78b 	uxtah	r7, r7, fp
 8007ef4:	0c1b      	lsrs	r3, r3, #16
 8007ef6:	eba7 0808 	sub.w	r8, r7, r8
 8007efa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007efe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007f02:	fa1f f888 	uxth.w	r8, r8
 8007f06:	141f      	asrs	r7, r3, #16
 8007f08:	454d      	cmp	r5, r9
 8007f0a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007f0e:	f84a 3b04 	str.w	r3, [sl], #4
 8007f12:	d8e7      	bhi.n	8007ee4 <__mdiff+0x7c>
 8007f14:	1b2b      	subs	r3, r5, r4
 8007f16:	3b15      	subs	r3, #21
 8007f18:	f023 0303 	bic.w	r3, r3, #3
 8007f1c:	3304      	adds	r3, #4
 8007f1e:	3415      	adds	r4, #21
 8007f20:	42a5      	cmp	r5, r4
 8007f22:	bf38      	it	cc
 8007f24:	2304      	movcc	r3, #4
 8007f26:	4419      	add	r1, r3
 8007f28:	4473      	add	r3, lr
 8007f2a:	469e      	mov	lr, r3
 8007f2c:	460d      	mov	r5, r1
 8007f2e:	4565      	cmp	r5, ip
 8007f30:	d30e      	bcc.n	8007f50 <__mdiff+0xe8>
 8007f32:	f10c 0203 	add.w	r2, ip, #3
 8007f36:	1a52      	subs	r2, r2, r1
 8007f38:	f022 0203 	bic.w	r2, r2, #3
 8007f3c:	3903      	subs	r1, #3
 8007f3e:	458c      	cmp	ip, r1
 8007f40:	bf38      	it	cc
 8007f42:	2200      	movcc	r2, #0
 8007f44:	441a      	add	r2, r3
 8007f46:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007f4a:	b17b      	cbz	r3, 8007f6c <__mdiff+0x104>
 8007f4c:	6106      	str	r6, [r0, #16]
 8007f4e:	e7a5      	b.n	8007e9c <__mdiff+0x34>
 8007f50:	f855 8b04 	ldr.w	r8, [r5], #4
 8007f54:	fa17 f488 	uxtah	r4, r7, r8
 8007f58:	1422      	asrs	r2, r4, #16
 8007f5a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007f5e:	b2a4      	uxth	r4, r4
 8007f60:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007f64:	f84e 4b04 	str.w	r4, [lr], #4
 8007f68:	1417      	asrs	r7, r2, #16
 8007f6a:	e7e0      	b.n	8007f2e <__mdiff+0xc6>
 8007f6c:	3e01      	subs	r6, #1
 8007f6e:	e7ea      	b.n	8007f46 <__mdiff+0xde>
 8007f70:	0800918f 	.word	0x0800918f
 8007f74:	080091a0 	.word	0x080091a0

08007f78 <__d2b>:
 8007f78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007f7c:	4689      	mov	r9, r1
 8007f7e:	2101      	movs	r1, #1
 8007f80:	ec57 6b10 	vmov	r6, r7, d0
 8007f84:	4690      	mov	r8, r2
 8007f86:	f7ff fcd5 	bl	8007934 <_Balloc>
 8007f8a:	4604      	mov	r4, r0
 8007f8c:	b930      	cbnz	r0, 8007f9c <__d2b+0x24>
 8007f8e:	4602      	mov	r2, r0
 8007f90:	4b25      	ldr	r3, [pc, #148]	; (8008028 <__d2b+0xb0>)
 8007f92:	4826      	ldr	r0, [pc, #152]	; (800802c <__d2b+0xb4>)
 8007f94:	f240 310a 	movw	r1, #778	; 0x30a
 8007f98:	f000 fa70 	bl	800847c <__assert_func>
 8007f9c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007fa0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007fa4:	bb35      	cbnz	r5, 8007ff4 <__d2b+0x7c>
 8007fa6:	2e00      	cmp	r6, #0
 8007fa8:	9301      	str	r3, [sp, #4]
 8007faa:	d028      	beq.n	8007ffe <__d2b+0x86>
 8007fac:	4668      	mov	r0, sp
 8007fae:	9600      	str	r6, [sp, #0]
 8007fb0:	f7ff fd8c 	bl	8007acc <__lo0bits>
 8007fb4:	9900      	ldr	r1, [sp, #0]
 8007fb6:	b300      	cbz	r0, 8007ffa <__d2b+0x82>
 8007fb8:	9a01      	ldr	r2, [sp, #4]
 8007fba:	f1c0 0320 	rsb	r3, r0, #32
 8007fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8007fc2:	430b      	orrs	r3, r1
 8007fc4:	40c2      	lsrs	r2, r0
 8007fc6:	6163      	str	r3, [r4, #20]
 8007fc8:	9201      	str	r2, [sp, #4]
 8007fca:	9b01      	ldr	r3, [sp, #4]
 8007fcc:	61a3      	str	r3, [r4, #24]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	bf14      	ite	ne
 8007fd2:	2202      	movne	r2, #2
 8007fd4:	2201      	moveq	r2, #1
 8007fd6:	6122      	str	r2, [r4, #16]
 8007fd8:	b1d5      	cbz	r5, 8008010 <__d2b+0x98>
 8007fda:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007fde:	4405      	add	r5, r0
 8007fe0:	f8c9 5000 	str.w	r5, [r9]
 8007fe4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007fe8:	f8c8 0000 	str.w	r0, [r8]
 8007fec:	4620      	mov	r0, r4
 8007fee:	b003      	add	sp, #12
 8007ff0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ff4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ff8:	e7d5      	b.n	8007fa6 <__d2b+0x2e>
 8007ffa:	6161      	str	r1, [r4, #20]
 8007ffc:	e7e5      	b.n	8007fca <__d2b+0x52>
 8007ffe:	a801      	add	r0, sp, #4
 8008000:	f7ff fd64 	bl	8007acc <__lo0bits>
 8008004:	9b01      	ldr	r3, [sp, #4]
 8008006:	6163      	str	r3, [r4, #20]
 8008008:	2201      	movs	r2, #1
 800800a:	6122      	str	r2, [r4, #16]
 800800c:	3020      	adds	r0, #32
 800800e:	e7e3      	b.n	8007fd8 <__d2b+0x60>
 8008010:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008014:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008018:	f8c9 0000 	str.w	r0, [r9]
 800801c:	6918      	ldr	r0, [r3, #16]
 800801e:	f7ff fd35 	bl	8007a8c <__hi0bits>
 8008022:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008026:	e7df      	b.n	8007fe8 <__d2b+0x70>
 8008028:	0800918f 	.word	0x0800918f
 800802c:	080091a0 	.word	0x080091a0

08008030 <_calloc_r>:
 8008030:	b513      	push	{r0, r1, r4, lr}
 8008032:	434a      	muls	r2, r1
 8008034:	4611      	mov	r1, r2
 8008036:	9201      	str	r2, [sp, #4]
 8008038:	f000 f85a 	bl	80080f0 <_malloc_r>
 800803c:	4604      	mov	r4, r0
 800803e:	b118      	cbz	r0, 8008048 <_calloc_r+0x18>
 8008040:	9a01      	ldr	r2, [sp, #4]
 8008042:	2100      	movs	r1, #0
 8008044:	f7fe f952 	bl	80062ec <memset>
 8008048:	4620      	mov	r0, r4
 800804a:	b002      	add	sp, #8
 800804c:	bd10      	pop	{r4, pc}
	...

08008050 <_free_r>:
 8008050:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008052:	2900      	cmp	r1, #0
 8008054:	d048      	beq.n	80080e8 <_free_r+0x98>
 8008056:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800805a:	9001      	str	r0, [sp, #4]
 800805c:	2b00      	cmp	r3, #0
 800805e:	f1a1 0404 	sub.w	r4, r1, #4
 8008062:	bfb8      	it	lt
 8008064:	18e4      	addlt	r4, r4, r3
 8008066:	f000 fa65 	bl	8008534 <__malloc_lock>
 800806a:	4a20      	ldr	r2, [pc, #128]	; (80080ec <_free_r+0x9c>)
 800806c:	9801      	ldr	r0, [sp, #4]
 800806e:	6813      	ldr	r3, [r2, #0]
 8008070:	4615      	mov	r5, r2
 8008072:	b933      	cbnz	r3, 8008082 <_free_r+0x32>
 8008074:	6063      	str	r3, [r4, #4]
 8008076:	6014      	str	r4, [r2, #0]
 8008078:	b003      	add	sp, #12
 800807a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800807e:	f000 ba5f 	b.w	8008540 <__malloc_unlock>
 8008082:	42a3      	cmp	r3, r4
 8008084:	d90b      	bls.n	800809e <_free_r+0x4e>
 8008086:	6821      	ldr	r1, [r4, #0]
 8008088:	1862      	adds	r2, r4, r1
 800808a:	4293      	cmp	r3, r2
 800808c:	bf04      	itt	eq
 800808e:	681a      	ldreq	r2, [r3, #0]
 8008090:	685b      	ldreq	r3, [r3, #4]
 8008092:	6063      	str	r3, [r4, #4]
 8008094:	bf04      	itt	eq
 8008096:	1852      	addeq	r2, r2, r1
 8008098:	6022      	streq	r2, [r4, #0]
 800809a:	602c      	str	r4, [r5, #0]
 800809c:	e7ec      	b.n	8008078 <_free_r+0x28>
 800809e:	461a      	mov	r2, r3
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	b10b      	cbz	r3, 80080a8 <_free_r+0x58>
 80080a4:	42a3      	cmp	r3, r4
 80080a6:	d9fa      	bls.n	800809e <_free_r+0x4e>
 80080a8:	6811      	ldr	r1, [r2, #0]
 80080aa:	1855      	adds	r5, r2, r1
 80080ac:	42a5      	cmp	r5, r4
 80080ae:	d10b      	bne.n	80080c8 <_free_r+0x78>
 80080b0:	6824      	ldr	r4, [r4, #0]
 80080b2:	4421      	add	r1, r4
 80080b4:	1854      	adds	r4, r2, r1
 80080b6:	42a3      	cmp	r3, r4
 80080b8:	6011      	str	r1, [r2, #0]
 80080ba:	d1dd      	bne.n	8008078 <_free_r+0x28>
 80080bc:	681c      	ldr	r4, [r3, #0]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	6053      	str	r3, [r2, #4]
 80080c2:	4421      	add	r1, r4
 80080c4:	6011      	str	r1, [r2, #0]
 80080c6:	e7d7      	b.n	8008078 <_free_r+0x28>
 80080c8:	d902      	bls.n	80080d0 <_free_r+0x80>
 80080ca:	230c      	movs	r3, #12
 80080cc:	6003      	str	r3, [r0, #0]
 80080ce:	e7d3      	b.n	8008078 <_free_r+0x28>
 80080d0:	6825      	ldr	r5, [r4, #0]
 80080d2:	1961      	adds	r1, r4, r5
 80080d4:	428b      	cmp	r3, r1
 80080d6:	bf04      	itt	eq
 80080d8:	6819      	ldreq	r1, [r3, #0]
 80080da:	685b      	ldreq	r3, [r3, #4]
 80080dc:	6063      	str	r3, [r4, #4]
 80080de:	bf04      	itt	eq
 80080e0:	1949      	addeq	r1, r1, r5
 80080e2:	6021      	streq	r1, [r4, #0]
 80080e4:	6054      	str	r4, [r2, #4]
 80080e6:	e7c7      	b.n	8008078 <_free_r+0x28>
 80080e8:	b003      	add	sp, #12
 80080ea:	bd30      	pop	{r4, r5, pc}
 80080ec:	20000248 	.word	0x20000248

080080f0 <_malloc_r>:
 80080f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080f2:	1ccd      	adds	r5, r1, #3
 80080f4:	f025 0503 	bic.w	r5, r5, #3
 80080f8:	3508      	adds	r5, #8
 80080fa:	2d0c      	cmp	r5, #12
 80080fc:	bf38      	it	cc
 80080fe:	250c      	movcc	r5, #12
 8008100:	2d00      	cmp	r5, #0
 8008102:	4606      	mov	r6, r0
 8008104:	db01      	blt.n	800810a <_malloc_r+0x1a>
 8008106:	42a9      	cmp	r1, r5
 8008108:	d903      	bls.n	8008112 <_malloc_r+0x22>
 800810a:	230c      	movs	r3, #12
 800810c:	6033      	str	r3, [r6, #0]
 800810e:	2000      	movs	r0, #0
 8008110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008112:	f000 fa0f 	bl	8008534 <__malloc_lock>
 8008116:	4921      	ldr	r1, [pc, #132]	; (800819c <_malloc_r+0xac>)
 8008118:	680a      	ldr	r2, [r1, #0]
 800811a:	4614      	mov	r4, r2
 800811c:	b99c      	cbnz	r4, 8008146 <_malloc_r+0x56>
 800811e:	4f20      	ldr	r7, [pc, #128]	; (80081a0 <_malloc_r+0xb0>)
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	b923      	cbnz	r3, 800812e <_malloc_r+0x3e>
 8008124:	4621      	mov	r1, r4
 8008126:	4630      	mov	r0, r6
 8008128:	f000 f998 	bl	800845c <_sbrk_r>
 800812c:	6038      	str	r0, [r7, #0]
 800812e:	4629      	mov	r1, r5
 8008130:	4630      	mov	r0, r6
 8008132:	f000 f993 	bl	800845c <_sbrk_r>
 8008136:	1c43      	adds	r3, r0, #1
 8008138:	d123      	bne.n	8008182 <_malloc_r+0x92>
 800813a:	230c      	movs	r3, #12
 800813c:	6033      	str	r3, [r6, #0]
 800813e:	4630      	mov	r0, r6
 8008140:	f000 f9fe 	bl	8008540 <__malloc_unlock>
 8008144:	e7e3      	b.n	800810e <_malloc_r+0x1e>
 8008146:	6823      	ldr	r3, [r4, #0]
 8008148:	1b5b      	subs	r3, r3, r5
 800814a:	d417      	bmi.n	800817c <_malloc_r+0x8c>
 800814c:	2b0b      	cmp	r3, #11
 800814e:	d903      	bls.n	8008158 <_malloc_r+0x68>
 8008150:	6023      	str	r3, [r4, #0]
 8008152:	441c      	add	r4, r3
 8008154:	6025      	str	r5, [r4, #0]
 8008156:	e004      	b.n	8008162 <_malloc_r+0x72>
 8008158:	6863      	ldr	r3, [r4, #4]
 800815a:	42a2      	cmp	r2, r4
 800815c:	bf0c      	ite	eq
 800815e:	600b      	streq	r3, [r1, #0]
 8008160:	6053      	strne	r3, [r2, #4]
 8008162:	4630      	mov	r0, r6
 8008164:	f000 f9ec 	bl	8008540 <__malloc_unlock>
 8008168:	f104 000b 	add.w	r0, r4, #11
 800816c:	1d23      	adds	r3, r4, #4
 800816e:	f020 0007 	bic.w	r0, r0, #7
 8008172:	1ac2      	subs	r2, r0, r3
 8008174:	d0cc      	beq.n	8008110 <_malloc_r+0x20>
 8008176:	1a1b      	subs	r3, r3, r0
 8008178:	50a3      	str	r3, [r4, r2]
 800817a:	e7c9      	b.n	8008110 <_malloc_r+0x20>
 800817c:	4622      	mov	r2, r4
 800817e:	6864      	ldr	r4, [r4, #4]
 8008180:	e7cc      	b.n	800811c <_malloc_r+0x2c>
 8008182:	1cc4      	adds	r4, r0, #3
 8008184:	f024 0403 	bic.w	r4, r4, #3
 8008188:	42a0      	cmp	r0, r4
 800818a:	d0e3      	beq.n	8008154 <_malloc_r+0x64>
 800818c:	1a21      	subs	r1, r4, r0
 800818e:	4630      	mov	r0, r6
 8008190:	f000 f964 	bl	800845c <_sbrk_r>
 8008194:	3001      	adds	r0, #1
 8008196:	d1dd      	bne.n	8008154 <_malloc_r+0x64>
 8008198:	e7cf      	b.n	800813a <_malloc_r+0x4a>
 800819a:	bf00      	nop
 800819c:	20000248 	.word	0x20000248
 80081a0:	2000024c 	.word	0x2000024c

080081a4 <__ssputs_r>:
 80081a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081a8:	688e      	ldr	r6, [r1, #8]
 80081aa:	429e      	cmp	r6, r3
 80081ac:	4682      	mov	sl, r0
 80081ae:	460c      	mov	r4, r1
 80081b0:	4690      	mov	r8, r2
 80081b2:	461f      	mov	r7, r3
 80081b4:	d838      	bhi.n	8008228 <__ssputs_r+0x84>
 80081b6:	898a      	ldrh	r2, [r1, #12]
 80081b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80081bc:	d032      	beq.n	8008224 <__ssputs_r+0x80>
 80081be:	6825      	ldr	r5, [r4, #0]
 80081c0:	6909      	ldr	r1, [r1, #16]
 80081c2:	eba5 0901 	sub.w	r9, r5, r1
 80081c6:	6965      	ldr	r5, [r4, #20]
 80081c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80081cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80081d0:	3301      	adds	r3, #1
 80081d2:	444b      	add	r3, r9
 80081d4:	106d      	asrs	r5, r5, #1
 80081d6:	429d      	cmp	r5, r3
 80081d8:	bf38      	it	cc
 80081da:	461d      	movcc	r5, r3
 80081dc:	0553      	lsls	r3, r2, #21
 80081de:	d531      	bpl.n	8008244 <__ssputs_r+0xa0>
 80081e0:	4629      	mov	r1, r5
 80081e2:	f7ff ff85 	bl	80080f0 <_malloc_r>
 80081e6:	4606      	mov	r6, r0
 80081e8:	b950      	cbnz	r0, 8008200 <__ssputs_r+0x5c>
 80081ea:	230c      	movs	r3, #12
 80081ec:	f8ca 3000 	str.w	r3, [sl]
 80081f0:	89a3      	ldrh	r3, [r4, #12]
 80081f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081f6:	81a3      	strh	r3, [r4, #12]
 80081f8:	f04f 30ff 	mov.w	r0, #4294967295
 80081fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008200:	6921      	ldr	r1, [r4, #16]
 8008202:	464a      	mov	r2, r9
 8008204:	f7ff fb88 	bl	8007918 <memcpy>
 8008208:	89a3      	ldrh	r3, [r4, #12]
 800820a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800820e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008212:	81a3      	strh	r3, [r4, #12]
 8008214:	6126      	str	r6, [r4, #16]
 8008216:	6165      	str	r5, [r4, #20]
 8008218:	444e      	add	r6, r9
 800821a:	eba5 0509 	sub.w	r5, r5, r9
 800821e:	6026      	str	r6, [r4, #0]
 8008220:	60a5      	str	r5, [r4, #8]
 8008222:	463e      	mov	r6, r7
 8008224:	42be      	cmp	r6, r7
 8008226:	d900      	bls.n	800822a <__ssputs_r+0x86>
 8008228:	463e      	mov	r6, r7
 800822a:	4632      	mov	r2, r6
 800822c:	6820      	ldr	r0, [r4, #0]
 800822e:	4641      	mov	r1, r8
 8008230:	f000 f966 	bl	8008500 <memmove>
 8008234:	68a3      	ldr	r3, [r4, #8]
 8008236:	6822      	ldr	r2, [r4, #0]
 8008238:	1b9b      	subs	r3, r3, r6
 800823a:	4432      	add	r2, r6
 800823c:	60a3      	str	r3, [r4, #8]
 800823e:	6022      	str	r2, [r4, #0]
 8008240:	2000      	movs	r0, #0
 8008242:	e7db      	b.n	80081fc <__ssputs_r+0x58>
 8008244:	462a      	mov	r2, r5
 8008246:	f000 f981 	bl	800854c <_realloc_r>
 800824a:	4606      	mov	r6, r0
 800824c:	2800      	cmp	r0, #0
 800824e:	d1e1      	bne.n	8008214 <__ssputs_r+0x70>
 8008250:	6921      	ldr	r1, [r4, #16]
 8008252:	4650      	mov	r0, sl
 8008254:	f7ff fefc 	bl	8008050 <_free_r>
 8008258:	e7c7      	b.n	80081ea <__ssputs_r+0x46>
	...

0800825c <_svfiprintf_r>:
 800825c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008260:	4698      	mov	r8, r3
 8008262:	898b      	ldrh	r3, [r1, #12]
 8008264:	061b      	lsls	r3, r3, #24
 8008266:	b09d      	sub	sp, #116	; 0x74
 8008268:	4607      	mov	r7, r0
 800826a:	460d      	mov	r5, r1
 800826c:	4614      	mov	r4, r2
 800826e:	d50e      	bpl.n	800828e <_svfiprintf_r+0x32>
 8008270:	690b      	ldr	r3, [r1, #16]
 8008272:	b963      	cbnz	r3, 800828e <_svfiprintf_r+0x32>
 8008274:	2140      	movs	r1, #64	; 0x40
 8008276:	f7ff ff3b 	bl	80080f0 <_malloc_r>
 800827a:	6028      	str	r0, [r5, #0]
 800827c:	6128      	str	r0, [r5, #16]
 800827e:	b920      	cbnz	r0, 800828a <_svfiprintf_r+0x2e>
 8008280:	230c      	movs	r3, #12
 8008282:	603b      	str	r3, [r7, #0]
 8008284:	f04f 30ff 	mov.w	r0, #4294967295
 8008288:	e0d1      	b.n	800842e <_svfiprintf_r+0x1d2>
 800828a:	2340      	movs	r3, #64	; 0x40
 800828c:	616b      	str	r3, [r5, #20]
 800828e:	2300      	movs	r3, #0
 8008290:	9309      	str	r3, [sp, #36]	; 0x24
 8008292:	2320      	movs	r3, #32
 8008294:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008298:	f8cd 800c 	str.w	r8, [sp, #12]
 800829c:	2330      	movs	r3, #48	; 0x30
 800829e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008448 <_svfiprintf_r+0x1ec>
 80082a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80082a6:	f04f 0901 	mov.w	r9, #1
 80082aa:	4623      	mov	r3, r4
 80082ac:	469a      	mov	sl, r3
 80082ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082b2:	b10a      	cbz	r2, 80082b8 <_svfiprintf_r+0x5c>
 80082b4:	2a25      	cmp	r2, #37	; 0x25
 80082b6:	d1f9      	bne.n	80082ac <_svfiprintf_r+0x50>
 80082b8:	ebba 0b04 	subs.w	fp, sl, r4
 80082bc:	d00b      	beq.n	80082d6 <_svfiprintf_r+0x7a>
 80082be:	465b      	mov	r3, fp
 80082c0:	4622      	mov	r2, r4
 80082c2:	4629      	mov	r1, r5
 80082c4:	4638      	mov	r0, r7
 80082c6:	f7ff ff6d 	bl	80081a4 <__ssputs_r>
 80082ca:	3001      	adds	r0, #1
 80082cc:	f000 80aa 	beq.w	8008424 <_svfiprintf_r+0x1c8>
 80082d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082d2:	445a      	add	r2, fp
 80082d4:	9209      	str	r2, [sp, #36]	; 0x24
 80082d6:	f89a 3000 	ldrb.w	r3, [sl]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	f000 80a2 	beq.w	8008424 <_svfiprintf_r+0x1c8>
 80082e0:	2300      	movs	r3, #0
 80082e2:	f04f 32ff 	mov.w	r2, #4294967295
 80082e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082ea:	f10a 0a01 	add.w	sl, sl, #1
 80082ee:	9304      	str	r3, [sp, #16]
 80082f0:	9307      	str	r3, [sp, #28]
 80082f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80082f6:	931a      	str	r3, [sp, #104]	; 0x68
 80082f8:	4654      	mov	r4, sl
 80082fa:	2205      	movs	r2, #5
 80082fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008300:	4851      	ldr	r0, [pc, #324]	; (8008448 <_svfiprintf_r+0x1ec>)
 8008302:	f7f7 ff75 	bl	80001f0 <memchr>
 8008306:	9a04      	ldr	r2, [sp, #16]
 8008308:	b9d8      	cbnz	r0, 8008342 <_svfiprintf_r+0xe6>
 800830a:	06d0      	lsls	r0, r2, #27
 800830c:	bf44      	itt	mi
 800830e:	2320      	movmi	r3, #32
 8008310:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008314:	0711      	lsls	r1, r2, #28
 8008316:	bf44      	itt	mi
 8008318:	232b      	movmi	r3, #43	; 0x2b
 800831a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800831e:	f89a 3000 	ldrb.w	r3, [sl]
 8008322:	2b2a      	cmp	r3, #42	; 0x2a
 8008324:	d015      	beq.n	8008352 <_svfiprintf_r+0xf6>
 8008326:	9a07      	ldr	r2, [sp, #28]
 8008328:	4654      	mov	r4, sl
 800832a:	2000      	movs	r0, #0
 800832c:	f04f 0c0a 	mov.w	ip, #10
 8008330:	4621      	mov	r1, r4
 8008332:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008336:	3b30      	subs	r3, #48	; 0x30
 8008338:	2b09      	cmp	r3, #9
 800833a:	d94e      	bls.n	80083da <_svfiprintf_r+0x17e>
 800833c:	b1b0      	cbz	r0, 800836c <_svfiprintf_r+0x110>
 800833e:	9207      	str	r2, [sp, #28]
 8008340:	e014      	b.n	800836c <_svfiprintf_r+0x110>
 8008342:	eba0 0308 	sub.w	r3, r0, r8
 8008346:	fa09 f303 	lsl.w	r3, r9, r3
 800834a:	4313      	orrs	r3, r2
 800834c:	9304      	str	r3, [sp, #16]
 800834e:	46a2      	mov	sl, r4
 8008350:	e7d2      	b.n	80082f8 <_svfiprintf_r+0x9c>
 8008352:	9b03      	ldr	r3, [sp, #12]
 8008354:	1d19      	adds	r1, r3, #4
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	9103      	str	r1, [sp, #12]
 800835a:	2b00      	cmp	r3, #0
 800835c:	bfbb      	ittet	lt
 800835e:	425b      	neglt	r3, r3
 8008360:	f042 0202 	orrlt.w	r2, r2, #2
 8008364:	9307      	strge	r3, [sp, #28]
 8008366:	9307      	strlt	r3, [sp, #28]
 8008368:	bfb8      	it	lt
 800836a:	9204      	strlt	r2, [sp, #16]
 800836c:	7823      	ldrb	r3, [r4, #0]
 800836e:	2b2e      	cmp	r3, #46	; 0x2e
 8008370:	d10c      	bne.n	800838c <_svfiprintf_r+0x130>
 8008372:	7863      	ldrb	r3, [r4, #1]
 8008374:	2b2a      	cmp	r3, #42	; 0x2a
 8008376:	d135      	bne.n	80083e4 <_svfiprintf_r+0x188>
 8008378:	9b03      	ldr	r3, [sp, #12]
 800837a:	1d1a      	adds	r2, r3, #4
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	9203      	str	r2, [sp, #12]
 8008380:	2b00      	cmp	r3, #0
 8008382:	bfb8      	it	lt
 8008384:	f04f 33ff 	movlt.w	r3, #4294967295
 8008388:	3402      	adds	r4, #2
 800838a:	9305      	str	r3, [sp, #20]
 800838c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008458 <_svfiprintf_r+0x1fc>
 8008390:	7821      	ldrb	r1, [r4, #0]
 8008392:	2203      	movs	r2, #3
 8008394:	4650      	mov	r0, sl
 8008396:	f7f7 ff2b 	bl	80001f0 <memchr>
 800839a:	b140      	cbz	r0, 80083ae <_svfiprintf_r+0x152>
 800839c:	2340      	movs	r3, #64	; 0x40
 800839e:	eba0 000a 	sub.w	r0, r0, sl
 80083a2:	fa03 f000 	lsl.w	r0, r3, r0
 80083a6:	9b04      	ldr	r3, [sp, #16]
 80083a8:	4303      	orrs	r3, r0
 80083aa:	3401      	adds	r4, #1
 80083ac:	9304      	str	r3, [sp, #16]
 80083ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083b2:	4826      	ldr	r0, [pc, #152]	; (800844c <_svfiprintf_r+0x1f0>)
 80083b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80083b8:	2206      	movs	r2, #6
 80083ba:	f7f7 ff19 	bl	80001f0 <memchr>
 80083be:	2800      	cmp	r0, #0
 80083c0:	d038      	beq.n	8008434 <_svfiprintf_r+0x1d8>
 80083c2:	4b23      	ldr	r3, [pc, #140]	; (8008450 <_svfiprintf_r+0x1f4>)
 80083c4:	bb1b      	cbnz	r3, 800840e <_svfiprintf_r+0x1b2>
 80083c6:	9b03      	ldr	r3, [sp, #12]
 80083c8:	3307      	adds	r3, #7
 80083ca:	f023 0307 	bic.w	r3, r3, #7
 80083ce:	3308      	adds	r3, #8
 80083d0:	9303      	str	r3, [sp, #12]
 80083d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083d4:	4433      	add	r3, r6
 80083d6:	9309      	str	r3, [sp, #36]	; 0x24
 80083d8:	e767      	b.n	80082aa <_svfiprintf_r+0x4e>
 80083da:	fb0c 3202 	mla	r2, ip, r2, r3
 80083de:	460c      	mov	r4, r1
 80083e0:	2001      	movs	r0, #1
 80083e2:	e7a5      	b.n	8008330 <_svfiprintf_r+0xd4>
 80083e4:	2300      	movs	r3, #0
 80083e6:	3401      	adds	r4, #1
 80083e8:	9305      	str	r3, [sp, #20]
 80083ea:	4619      	mov	r1, r3
 80083ec:	f04f 0c0a 	mov.w	ip, #10
 80083f0:	4620      	mov	r0, r4
 80083f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083f6:	3a30      	subs	r2, #48	; 0x30
 80083f8:	2a09      	cmp	r2, #9
 80083fa:	d903      	bls.n	8008404 <_svfiprintf_r+0x1a8>
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d0c5      	beq.n	800838c <_svfiprintf_r+0x130>
 8008400:	9105      	str	r1, [sp, #20]
 8008402:	e7c3      	b.n	800838c <_svfiprintf_r+0x130>
 8008404:	fb0c 2101 	mla	r1, ip, r1, r2
 8008408:	4604      	mov	r4, r0
 800840a:	2301      	movs	r3, #1
 800840c:	e7f0      	b.n	80083f0 <_svfiprintf_r+0x194>
 800840e:	ab03      	add	r3, sp, #12
 8008410:	9300      	str	r3, [sp, #0]
 8008412:	462a      	mov	r2, r5
 8008414:	4b0f      	ldr	r3, [pc, #60]	; (8008454 <_svfiprintf_r+0x1f8>)
 8008416:	a904      	add	r1, sp, #16
 8008418:	4638      	mov	r0, r7
 800841a:	f7fe f80f 	bl	800643c <_printf_float>
 800841e:	1c42      	adds	r2, r0, #1
 8008420:	4606      	mov	r6, r0
 8008422:	d1d6      	bne.n	80083d2 <_svfiprintf_r+0x176>
 8008424:	89ab      	ldrh	r3, [r5, #12]
 8008426:	065b      	lsls	r3, r3, #25
 8008428:	f53f af2c 	bmi.w	8008284 <_svfiprintf_r+0x28>
 800842c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800842e:	b01d      	add	sp, #116	; 0x74
 8008430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008434:	ab03      	add	r3, sp, #12
 8008436:	9300      	str	r3, [sp, #0]
 8008438:	462a      	mov	r2, r5
 800843a:	4b06      	ldr	r3, [pc, #24]	; (8008454 <_svfiprintf_r+0x1f8>)
 800843c:	a904      	add	r1, sp, #16
 800843e:	4638      	mov	r0, r7
 8008440:	f7fe faa0 	bl	8006984 <_printf_i>
 8008444:	e7eb      	b.n	800841e <_svfiprintf_r+0x1c2>
 8008446:	bf00      	nop
 8008448:	080092fc 	.word	0x080092fc
 800844c:	08009306 	.word	0x08009306
 8008450:	0800643d 	.word	0x0800643d
 8008454:	080081a5 	.word	0x080081a5
 8008458:	08009302 	.word	0x08009302

0800845c <_sbrk_r>:
 800845c:	b538      	push	{r3, r4, r5, lr}
 800845e:	4d06      	ldr	r5, [pc, #24]	; (8008478 <_sbrk_r+0x1c>)
 8008460:	2300      	movs	r3, #0
 8008462:	4604      	mov	r4, r0
 8008464:	4608      	mov	r0, r1
 8008466:	602b      	str	r3, [r5, #0]
 8008468:	f7f9 fcac 	bl	8001dc4 <_sbrk>
 800846c:	1c43      	adds	r3, r0, #1
 800846e:	d102      	bne.n	8008476 <_sbrk_r+0x1a>
 8008470:	682b      	ldr	r3, [r5, #0]
 8008472:	b103      	cbz	r3, 8008476 <_sbrk_r+0x1a>
 8008474:	6023      	str	r3, [r4, #0]
 8008476:	bd38      	pop	{r3, r4, r5, pc}
 8008478:	20000d1c 	.word	0x20000d1c

0800847c <__assert_func>:
 800847c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800847e:	4614      	mov	r4, r2
 8008480:	461a      	mov	r2, r3
 8008482:	4b09      	ldr	r3, [pc, #36]	; (80084a8 <__assert_func+0x2c>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4605      	mov	r5, r0
 8008488:	68d8      	ldr	r0, [r3, #12]
 800848a:	b14c      	cbz	r4, 80084a0 <__assert_func+0x24>
 800848c:	4b07      	ldr	r3, [pc, #28]	; (80084ac <__assert_func+0x30>)
 800848e:	9100      	str	r1, [sp, #0]
 8008490:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008494:	4906      	ldr	r1, [pc, #24]	; (80084b0 <__assert_func+0x34>)
 8008496:	462b      	mov	r3, r5
 8008498:	f000 f80e 	bl	80084b8 <fiprintf>
 800849c:	f000 faa4 	bl	80089e8 <abort>
 80084a0:	4b04      	ldr	r3, [pc, #16]	; (80084b4 <__assert_func+0x38>)
 80084a2:	461c      	mov	r4, r3
 80084a4:	e7f3      	b.n	800848e <__assert_func+0x12>
 80084a6:	bf00      	nop
 80084a8:	2000000c 	.word	0x2000000c
 80084ac:	0800930d 	.word	0x0800930d
 80084b0:	0800931a 	.word	0x0800931a
 80084b4:	08009348 	.word	0x08009348

080084b8 <fiprintf>:
 80084b8:	b40e      	push	{r1, r2, r3}
 80084ba:	b503      	push	{r0, r1, lr}
 80084bc:	4601      	mov	r1, r0
 80084be:	ab03      	add	r3, sp, #12
 80084c0:	4805      	ldr	r0, [pc, #20]	; (80084d8 <fiprintf+0x20>)
 80084c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80084c6:	6800      	ldr	r0, [r0, #0]
 80084c8:	9301      	str	r3, [sp, #4]
 80084ca:	f000 f88f 	bl	80085ec <_vfiprintf_r>
 80084ce:	b002      	add	sp, #8
 80084d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80084d4:	b003      	add	sp, #12
 80084d6:	4770      	bx	lr
 80084d8:	2000000c 	.word	0x2000000c

080084dc <__ascii_mbtowc>:
 80084dc:	b082      	sub	sp, #8
 80084de:	b901      	cbnz	r1, 80084e2 <__ascii_mbtowc+0x6>
 80084e0:	a901      	add	r1, sp, #4
 80084e2:	b142      	cbz	r2, 80084f6 <__ascii_mbtowc+0x1a>
 80084e4:	b14b      	cbz	r3, 80084fa <__ascii_mbtowc+0x1e>
 80084e6:	7813      	ldrb	r3, [r2, #0]
 80084e8:	600b      	str	r3, [r1, #0]
 80084ea:	7812      	ldrb	r2, [r2, #0]
 80084ec:	1e10      	subs	r0, r2, #0
 80084ee:	bf18      	it	ne
 80084f0:	2001      	movne	r0, #1
 80084f2:	b002      	add	sp, #8
 80084f4:	4770      	bx	lr
 80084f6:	4610      	mov	r0, r2
 80084f8:	e7fb      	b.n	80084f2 <__ascii_mbtowc+0x16>
 80084fa:	f06f 0001 	mvn.w	r0, #1
 80084fe:	e7f8      	b.n	80084f2 <__ascii_mbtowc+0x16>

08008500 <memmove>:
 8008500:	4288      	cmp	r0, r1
 8008502:	b510      	push	{r4, lr}
 8008504:	eb01 0402 	add.w	r4, r1, r2
 8008508:	d902      	bls.n	8008510 <memmove+0x10>
 800850a:	4284      	cmp	r4, r0
 800850c:	4623      	mov	r3, r4
 800850e:	d807      	bhi.n	8008520 <memmove+0x20>
 8008510:	1e43      	subs	r3, r0, #1
 8008512:	42a1      	cmp	r1, r4
 8008514:	d008      	beq.n	8008528 <memmove+0x28>
 8008516:	f811 2b01 	ldrb.w	r2, [r1], #1
 800851a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800851e:	e7f8      	b.n	8008512 <memmove+0x12>
 8008520:	4402      	add	r2, r0
 8008522:	4601      	mov	r1, r0
 8008524:	428a      	cmp	r2, r1
 8008526:	d100      	bne.n	800852a <memmove+0x2a>
 8008528:	bd10      	pop	{r4, pc}
 800852a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800852e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008532:	e7f7      	b.n	8008524 <memmove+0x24>

08008534 <__malloc_lock>:
 8008534:	4801      	ldr	r0, [pc, #4]	; (800853c <__malloc_lock+0x8>)
 8008536:	f000 bc17 	b.w	8008d68 <__retarget_lock_acquire_recursive>
 800853a:	bf00      	nop
 800853c:	20000d24 	.word	0x20000d24

08008540 <__malloc_unlock>:
 8008540:	4801      	ldr	r0, [pc, #4]	; (8008548 <__malloc_unlock+0x8>)
 8008542:	f000 bc12 	b.w	8008d6a <__retarget_lock_release_recursive>
 8008546:	bf00      	nop
 8008548:	20000d24 	.word	0x20000d24

0800854c <_realloc_r>:
 800854c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800854e:	4607      	mov	r7, r0
 8008550:	4614      	mov	r4, r2
 8008552:	460e      	mov	r6, r1
 8008554:	b921      	cbnz	r1, 8008560 <_realloc_r+0x14>
 8008556:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800855a:	4611      	mov	r1, r2
 800855c:	f7ff bdc8 	b.w	80080f0 <_malloc_r>
 8008560:	b922      	cbnz	r2, 800856c <_realloc_r+0x20>
 8008562:	f7ff fd75 	bl	8008050 <_free_r>
 8008566:	4625      	mov	r5, r4
 8008568:	4628      	mov	r0, r5
 800856a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800856c:	f000 fc62 	bl	8008e34 <_malloc_usable_size_r>
 8008570:	42a0      	cmp	r0, r4
 8008572:	d20f      	bcs.n	8008594 <_realloc_r+0x48>
 8008574:	4621      	mov	r1, r4
 8008576:	4638      	mov	r0, r7
 8008578:	f7ff fdba 	bl	80080f0 <_malloc_r>
 800857c:	4605      	mov	r5, r0
 800857e:	2800      	cmp	r0, #0
 8008580:	d0f2      	beq.n	8008568 <_realloc_r+0x1c>
 8008582:	4631      	mov	r1, r6
 8008584:	4622      	mov	r2, r4
 8008586:	f7ff f9c7 	bl	8007918 <memcpy>
 800858a:	4631      	mov	r1, r6
 800858c:	4638      	mov	r0, r7
 800858e:	f7ff fd5f 	bl	8008050 <_free_r>
 8008592:	e7e9      	b.n	8008568 <_realloc_r+0x1c>
 8008594:	4635      	mov	r5, r6
 8008596:	e7e7      	b.n	8008568 <_realloc_r+0x1c>

08008598 <__sfputc_r>:
 8008598:	6893      	ldr	r3, [r2, #8]
 800859a:	3b01      	subs	r3, #1
 800859c:	2b00      	cmp	r3, #0
 800859e:	b410      	push	{r4}
 80085a0:	6093      	str	r3, [r2, #8]
 80085a2:	da08      	bge.n	80085b6 <__sfputc_r+0x1e>
 80085a4:	6994      	ldr	r4, [r2, #24]
 80085a6:	42a3      	cmp	r3, r4
 80085a8:	db01      	blt.n	80085ae <__sfputc_r+0x16>
 80085aa:	290a      	cmp	r1, #10
 80085ac:	d103      	bne.n	80085b6 <__sfputc_r+0x1e>
 80085ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80085b2:	f000 b94b 	b.w	800884c <__swbuf_r>
 80085b6:	6813      	ldr	r3, [r2, #0]
 80085b8:	1c58      	adds	r0, r3, #1
 80085ba:	6010      	str	r0, [r2, #0]
 80085bc:	7019      	strb	r1, [r3, #0]
 80085be:	4608      	mov	r0, r1
 80085c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80085c4:	4770      	bx	lr

080085c6 <__sfputs_r>:
 80085c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085c8:	4606      	mov	r6, r0
 80085ca:	460f      	mov	r7, r1
 80085cc:	4614      	mov	r4, r2
 80085ce:	18d5      	adds	r5, r2, r3
 80085d0:	42ac      	cmp	r4, r5
 80085d2:	d101      	bne.n	80085d8 <__sfputs_r+0x12>
 80085d4:	2000      	movs	r0, #0
 80085d6:	e007      	b.n	80085e8 <__sfputs_r+0x22>
 80085d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085dc:	463a      	mov	r2, r7
 80085de:	4630      	mov	r0, r6
 80085e0:	f7ff ffda 	bl	8008598 <__sfputc_r>
 80085e4:	1c43      	adds	r3, r0, #1
 80085e6:	d1f3      	bne.n	80085d0 <__sfputs_r+0xa>
 80085e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080085ec <_vfiprintf_r>:
 80085ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085f0:	460d      	mov	r5, r1
 80085f2:	b09d      	sub	sp, #116	; 0x74
 80085f4:	4614      	mov	r4, r2
 80085f6:	4698      	mov	r8, r3
 80085f8:	4606      	mov	r6, r0
 80085fa:	b118      	cbz	r0, 8008604 <_vfiprintf_r+0x18>
 80085fc:	6983      	ldr	r3, [r0, #24]
 80085fe:	b90b      	cbnz	r3, 8008604 <_vfiprintf_r+0x18>
 8008600:	f000 fb14 	bl	8008c2c <__sinit>
 8008604:	4b89      	ldr	r3, [pc, #548]	; (800882c <_vfiprintf_r+0x240>)
 8008606:	429d      	cmp	r5, r3
 8008608:	d11b      	bne.n	8008642 <_vfiprintf_r+0x56>
 800860a:	6875      	ldr	r5, [r6, #4]
 800860c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800860e:	07d9      	lsls	r1, r3, #31
 8008610:	d405      	bmi.n	800861e <_vfiprintf_r+0x32>
 8008612:	89ab      	ldrh	r3, [r5, #12]
 8008614:	059a      	lsls	r2, r3, #22
 8008616:	d402      	bmi.n	800861e <_vfiprintf_r+0x32>
 8008618:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800861a:	f000 fba5 	bl	8008d68 <__retarget_lock_acquire_recursive>
 800861e:	89ab      	ldrh	r3, [r5, #12]
 8008620:	071b      	lsls	r3, r3, #28
 8008622:	d501      	bpl.n	8008628 <_vfiprintf_r+0x3c>
 8008624:	692b      	ldr	r3, [r5, #16]
 8008626:	b9eb      	cbnz	r3, 8008664 <_vfiprintf_r+0x78>
 8008628:	4629      	mov	r1, r5
 800862a:	4630      	mov	r0, r6
 800862c:	f000 f96e 	bl	800890c <__swsetup_r>
 8008630:	b1c0      	cbz	r0, 8008664 <_vfiprintf_r+0x78>
 8008632:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008634:	07dc      	lsls	r4, r3, #31
 8008636:	d50e      	bpl.n	8008656 <_vfiprintf_r+0x6a>
 8008638:	f04f 30ff 	mov.w	r0, #4294967295
 800863c:	b01d      	add	sp, #116	; 0x74
 800863e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008642:	4b7b      	ldr	r3, [pc, #492]	; (8008830 <_vfiprintf_r+0x244>)
 8008644:	429d      	cmp	r5, r3
 8008646:	d101      	bne.n	800864c <_vfiprintf_r+0x60>
 8008648:	68b5      	ldr	r5, [r6, #8]
 800864a:	e7df      	b.n	800860c <_vfiprintf_r+0x20>
 800864c:	4b79      	ldr	r3, [pc, #484]	; (8008834 <_vfiprintf_r+0x248>)
 800864e:	429d      	cmp	r5, r3
 8008650:	bf08      	it	eq
 8008652:	68f5      	ldreq	r5, [r6, #12]
 8008654:	e7da      	b.n	800860c <_vfiprintf_r+0x20>
 8008656:	89ab      	ldrh	r3, [r5, #12]
 8008658:	0598      	lsls	r0, r3, #22
 800865a:	d4ed      	bmi.n	8008638 <_vfiprintf_r+0x4c>
 800865c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800865e:	f000 fb84 	bl	8008d6a <__retarget_lock_release_recursive>
 8008662:	e7e9      	b.n	8008638 <_vfiprintf_r+0x4c>
 8008664:	2300      	movs	r3, #0
 8008666:	9309      	str	r3, [sp, #36]	; 0x24
 8008668:	2320      	movs	r3, #32
 800866a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800866e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008672:	2330      	movs	r3, #48	; 0x30
 8008674:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008838 <_vfiprintf_r+0x24c>
 8008678:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800867c:	f04f 0901 	mov.w	r9, #1
 8008680:	4623      	mov	r3, r4
 8008682:	469a      	mov	sl, r3
 8008684:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008688:	b10a      	cbz	r2, 800868e <_vfiprintf_r+0xa2>
 800868a:	2a25      	cmp	r2, #37	; 0x25
 800868c:	d1f9      	bne.n	8008682 <_vfiprintf_r+0x96>
 800868e:	ebba 0b04 	subs.w	fp, sl, r4
 8008692:	d00b      	beq.n	80086ac <_vfiprintf_r+0xc0>
 8008694:	465b      	mov	r3, fp
 8008696:	4622      	mov	r2, r4
 8008698:	4629      	mov	r1, r5
 800869a:	4630      	mov	r0, r6
 800869c:	f7ff ff93 	bl	80085c6 <__sfputs_r>
 80086a0:	3001      	adds	r0, #1
 80086a2:	f000 80aa 	beq.w	80087fa <_vfiprintf_r+0x20e>
 80086a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086a8:	445a      	add	r2, fp
 80086aa:	9209      	str	r2, [sp, #36]	; 0x24
 80086ac:	f89a 3000 	ldrb.w	r3, [sl]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	f000 80a2 	beq.w	80087fa <_vfiprintf_r+0x20e>
 80086b6:	2300      	movs	r3, #0
 80086b8:	f04f 32ff 	mov.w	r2, #4294967295
 80086bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086c0:	f10a 0a01 	add.w	sl, sl, #1
 80086c4:	9304      	str	r3, [sp, #16]
 80086c6:	9307      	str	r3, [sp, #28]
 80086c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80086cc:	931a      	str	r3, [sp, #104]	; 0x68
 80086ce:	4654      	mov	r4, sl
 80086d0:	2205      	movs	r2, #5
 80086d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086d6:	4858      	ldr	r0, [pc, #352]	; (8008838 <_vfiprintf_r+0x24c>)
 80086d8:	f7f7 fd8a 	bl	80001f0 <memchr>
 80086dc:	9a04      	ldr	r2, [sp, #16]
 80086de:	b9d8      	cbnz	r0, 8008718 <_vfiprintf_r+0x12c>
 80086e0:	06d1      	lsls	r1, r2, #27
 80086e2:	bf44      	itt	mi
 80086e4:	2320      	movmi	r3, #32
 80086e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086ea:	0713      	lsls	r3, r2, #28
 80086ec:	bf44      	itt	mi
 80086ee:	232b      	movmi	r3, #43	; 0x2b
 80086f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086f4:	f89a 3000 	ldrb.w	r3, [sl]
 80086f8:	2b2a      	cmp	r3, #42	; 0x2a
 80086fa:	d015      	beq.n	8008728 <_vfiprintf_r+0x13c>
 80086fc:	9a07      	ldr	r2, [sp, #28]
 80086fe:	4654      	mov	r4, sl
 8008700:	2000      	movs	r0, #0
 8008702:	f04f 0c0a 	mov.w	ip, #10
 8008706:	4621      	mov	r1, r4
 8008708:	f811 3b01 	ldrb.w	r3, [r1], #1
 800870c:	3b30      	subs	r3, #48	; 0x30
 800870e:	2b09      	cmp	r3, #9
 8008710:	d94e      	bls.n	80087b0 <_vfiprintf_r+0x1c4>
 8008712:	b1b0      	cbz	r0, 8008742 <_vfiprintf_r+0x156>
 8008714:	9207      	str	r2, [sp, #28]
 8008716:	e014      	b.n	8008742 <_vfiprintf_r+0x156>
 8008718:	eba0 0308 	sub.w	r3, r0, r8
 800871c:	fa09 f303 	lsl.w	r3, r9, r3
 8008720:	4313      	orrs	r3, r2
 8008722:	9304      	str	r3, [sp, #16]
 8008724:	46a2      	mov	sl, r4
 8008726:	e7d2      	b.n	80086ce <_vfiprintf_r+0xe2>
 8008728:	9b03      	ldr	r3, [sp, #12]
 800872a:	1d19      	adds	r1, r3, #4
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	9103      	str	r1, [sp, #12]
 8008730:	2b00      	cmp	r3, #0
 8008732:	bfbb      	ittet	lt
 8008734:	425b      	neglt	r3, r3
 8008736:	f042 0202 	orrlt.w	r2, r2, #2
 800873a:	9307      	strge	r3, [sp, #28]
 800873c:	9307      	strlt	r3, [sp, #28]
 800873e:	bfb8      	it	lt
 8008740:	9204      	strlt	r2, [sp, #16]
 8008742:	7823      	ldrb	r3, [r4, #0]
 8008744:	2b2e      	cmp	r3, #46	; 0x2e
 8008746:	d10c      	bne.n	8008762 <_vfiprintf_r+0x176>
 8008748:	7863      	ldrb	r3, [r4, #1]
 800874a:	2b2a      	cmp	r3, #42	; 0x2a
 800874c:	d135      	bne.n	80087ba <_vfiprintf_r+0x1ce>
 800874e:	9b03      	ldr	r3, [sp, #12]
 8008750:	1d1a      	adds	r2, r3, #4
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	9203      	str	r2, [sp, #12]
 8008756:	2b00      	cmp	r3, #0
 8008758:	bfb8      	it	lt
 800875a:	f04f 33ff 	movlt.w	r3, #4294967295
 800875e:	3402      	adds	r4, #2
 8008760:	9305      	str	r3, [sp, #20]
 8008762:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008848 <_vfiprintf_r+0x25c>
 8008766:	7821      	ldrb	r1, [r4, #0]
 8008768:	2203      	movs	r2, #3
 800876a:	4650      	mov	r0, sl
 800876c:	f7f7 fd40 	bl	80001f0 <memchr>
 8008770:	b140      	cbz	r0, 8008784 <_vfiprintf_r+0x198>
 8008772:	2340      	movs	r3, #64	; 0x40
 8008774:	eba0 000a 	sub.w	r0, r0, sl
 8008778:	fa03 f000 	lsl.w	r0, r3, r0
 800877c:	9b04      	ldr	r3, [sp, #16]
 800877e:	4303      	orrs	r3, r0
 8008780:	3401      	adds	r4, #1
 8008782:	9304      	str	r3, [sp, #16]
 8008784:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008788:	482c      	ldr	r0, [pc, #176]	; (800883c <_vfiprintf_r+0x250>)
 800878a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800878e:	2206      	movs	r2, #6
 8008790:	f7f7 fd2e 	bl	80001f0 <memchr>
 8008794:	2800      	cmp	r0, #0
 8008796:	d03f      	beq.n	8008818 <_vfiprintf_r+0x22c>
 8008798:	4b29      	ldr	r3, [pc, #164]	; (8008840 <_vfiprintf_r+0x254>)
 800879a:	bb1b      	cbnz	r3, 80087e4 <_vfiprintf_r+0x1f8>
 800879c:	9b03      	ldr	r3, [sp, #12]
 800879e:	3307      	adds	r3, #7
 80087a0:	f023 0307 	bic.w	r3, r3, #7
 80087a4:	3308      	adds	r3, #8
 80087a6:	9303      	str	r3, [sp, #12]
 80087a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087aa:	443b      	add	r3, r7
 80087ac:	9309      	str	r3, [sp, #36]	; 0x24
 80087ae:	e767      	b.n	8008680 <_vfiprintf_r+0x94>
 80087b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80087b4:	460c      	mov	r4, r1
 80087b6:	2001      	movs	r0, #1
 80087b8:	e7a5      	b.n	8008706 <_vfiprintf_r+0x11a>
 80087ba:	2300      	movs	r3, #0
 80087bc:	3401      	adds	r4, #1
 80087be:	9305      	str	r3, [sp, #20]
 80087c0:	4619      	mov	r1, r3
 80087c2:	f04f 0c0a 	mov.w	ip, #10
 80087c6:	4620      	mov	r0, r4
 80087c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087cc:	3a30      	subs	r2, #48	; 0x30
 80087ce:	2a09      	cmp	r2, #9
 80087d0:	d903      	bls.n	80087da <_vfiprintf_r+0x1ee>
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d0c5      	beq.n	8008762 <_vfiprintf_r+0x176>
 80087d6:	9105      	str	r1, [sp, #20]
 80087d8:	e7c3      	b.n	8008762 <_vfiprintf_r+0x176>
 80087da:	fb0c 2101 	mla	r1, ip, r1, r2
 80087de:	4604      	mov	r4, r0
 80087e0:	2301      	movs	r3, #1
 80087e2:	e7f0      	b.n	80087c6 <_vfiprintf_r+0x1da>
 80087e4:	ab03      	add	r3, sp, #12
 80087e6:	9300      	str	r3, [sp, #0]
 80087e8:	462a      	mov	r2, r5
 80087ea:	4b16      	ldr	r3, [pc, #88]	; (8008844 <_vfiprintf_r+0x258>)
 80087ec:	a904      	add	r1, sp, #16
 80087ee:	4630      	mov	r0, r6
 80087f0:	f7fd fe24 	bl	800643c <_printf_float>
 80087f4:	4607      	mov	r7, r0
 80087f6:	1c78      	adds	r0, r7, #1
 80087f8:	d1d6      	bne.n	80087a8 <_vfiprintf_r+0x1bc>
 80087fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087fc:	07d9      	lsls	r1, r3, #31
 80087fe:	d405      	bmi.n	800880c <_vfiprintf_r+0x220>
 8008800:	89ab      	ldrh	r3, [r5, #12]
 8008802:	059a      	lsls	r2, r3, #22
 8008804:	d402      	bmi.n	800880c <_vfiprintf_r+0x220>
 8008806:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008808:	f000 faaf 	bl	8008d6a <__retarget_lock_release_recursive>
 800880c:	89ab      	ldrh	r3, [r5, #12]
 800880e:	065b      	lsls	r3, r3, #25
 8008810:	f53f af12 	bmi.w	8008638 <_vfiprintf_r+0x4c>
 8008814:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008816:	e711      	b.n	800863c <_vfiprintf_r+0x50>
 8008818:	ab03      	add	r3, sp, #12
 800881a:	9300      	str	r3, [sp, #0]
 800881c:	462a      	mov	r2, r5
 800881e:	4b09      	ldr	r3, [pc, #36]	; (8008844 <_vfiprintf_r+0x258>)
 8008820:	a904      	add	r1, sp, #16
 8008822:	4630      	mov	r0, r6
 8008824:	f7fe f8ae 	bl	8006984 <_printf_i>
 8008828:	e7e4      	b.n	80087f4 <_vfiprintf_r+0x208>
 800882a:	bf00      	nop
 800882c:	08009474 	.word	0x08009474
 8008830:	08009494 	.word	0x08009494
 8008834:	08009454 	.word	0x08009454
 8008838:	080092fc 	.word	0x080092fc
 800883c:	08009306 	.word	0x08009306
 8008840:	0800643d 	.word	0x0800643d
 8008844:	080085c7 	.word	0x080085c7
 8008848:	08009302 	.word	0x08009302

0800884c <__swbuf_r>:
 800884c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800884e:	460e      	mov	r6, r1
 8008850:	4614      	mov	r4, r2
 8008852:	4605      	mov	r5, r0
 8008854:	b118      	cbz	r0, 800885e <__swbuf_r+0x12>
 8008856:	6983      	ldr	r3, [r0, #24]
 8008858:	b90b      	cbnz	r3, 800885e <__swbuf_r+0x12>
 800885a:	f000 f9e7 	bl	8008c2c <__sinit>
 800885e:	4b21      	ldr	r3, [pc, #132]	; (80088e4 <__swbuf_r+0x98>)
 8008860:	429c      	cmp	r4, r3
 8008862:	d12b      	bne.n	80088bc <__swbuf_r+0x70>
 8008864:	686c      	ldr	r4, [r5, #4]
 8008866:	69a3      	ldr	r3, [r4, #24]
 8008868:	60a3      	str	r3, [r4, #8]
 800886a:	89a3      	ldrh	r3, [r4, #12]
 800886c:	071a      	lsls	r2, r3, #28
 800886e:	d52f      	bpl.n	80088d0 <__swbuf_r+0x84>
 8008870:	6923      	ldr	r3, [r4, #16]
 8008872:	b36b      	cbz	r3, 80088d0 <__swbuf_r+0x84>
 8008874:	6923      	ldr	r3, [r4, #16]
 8008876:	6820      	ldr	r0, [r4, #0]
 8008878:	1ac0      	subs	r0, r0, r3
 800887a:	6963      	ldr	r3, [r4, #20]
 800887c:	b2f6      	uxtb	r6, r6
 800887e:	4283      	cmp	r3, r0
 8008880:	4637      	mov	r7, r6
 8008882:	dc04      	bgt.n	800888e <__swbuf_r+0x42>
 8008884:	4621      	mov	r1, r4
 8008886:	4628      	mov	r0, r5
 8008888:	f000 f93c 	bl	8008b04 <_fflush_r>
 800888c:	bb30      	cbnz	r0, 80088dc <__swbuf_r+0x90>
 800888e:	68a3      	ldr	r3, [r4, #8]
 8008890:	3b01      	subs	r3, #1
 8008892:	60a3      	str	r3, [r4, #8]
 8008894:	6823      	ldr	r3, [r4, #0]
 8008896:	1c5a      	adds	r2, r3, #1
 8008898:	6022      	str	r2, [r4, #0]
 800889a:	701e      	strb	r6, [r3, #0]
 800889c:	6963      	ldr	r3, [r4, #20]
 800889e:	3001      	adds	r0, #1
 80088a0:	4283      	cmp	r3, r0
 80088a2:	d004      	beq.n	80088ae <__swbuf_r+0x62>
 80088a4:	89a3      	ldrh	r3, [r4, #12]
 80088a6:	07db      	lsls	r3, r3, #31
 80088a8:	d506      	bpl.n	80088b8 <__swbuf_r+0x6c>
 80088aa:	2e0a      	cmp	r6, #10
 80088ac:	d104      	bne.n	80088b8 <__swbuf_r+0x6c>
 80088ae:	4621      	mov	r1, r4
 80088b0:	4628      	mov	r0, r5
 80088b2:	f000 f927 	bl	8008b04 <_fflush_r>
 80088b6:	b988      	cbnz	r0, 80088dc <__swbuf_r+0x90>
 80088b8:	4638      	mov	r0, r7
 80088ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088bc:	4b0a      	ldr	r3, [pc, #40]	; (80088e8 <__swbuf_r+0x9c>)
 80088be:	429c      	cmp	r4, r3
 80088c0:	d101      	bne.n	80088c6 <__swbuf_r+0x7a>
 80088c2:	68ac      	ldr	r4, [r5, #8]
 80088c4:	e7cf      	b.n	8008866 <__swbuf_r+0x1a>
 80088c6:	4b09      	ldr	r3, [pc, #36]	; (80088ec <__swbuf_r+0xa0>)
 80088c8:	429c      	cmp	r4, r3
 80088ca:	bf08      	it	eq
 80088cc:	68ec      	ldreq	r4, [r5, #12]
 80088ce:	e7ca      	b.n	8008866 <__swbuf_r+0x1a>
 80088d0:	4621      	mov	r1, r4
 80088d2:	4628      	mov	r0, r5
 80088d4:	f000 f81a 	bl	800890c <__swsetup_r>
 80088d8:	2800      	cmp	r0, #0
 80088da:	d0cb      	beq.n	8008874 <__swbuf_r+0x28>
 80088dc:	f04f 37ff 	mov.w	r7, #4294967295
 80088e0:	e7ea      	b.n	80088b8 <__swbuf_r+0x6c>
 80088e2:	bf00      	nop
 80088e4:	08009474 	.word	0x08009474
 80088e8:	08009494 	.word	0x08009494
 80088ec:	08009454 	.word	0x08009454

080088f0 <__ascii_wctomb>:
 80088f0:	b149      	cbz	r1, 8008906 <__ascii_wctomb+0x16>
 80088f2:	2aff      	cmp	r2, #255	; 0xff
 80088f4:	bf85      	ittet	hi
 80088f6:	238a      	movhi	r3, #138	; 0x8a
 80088f8:	6003      	strhi	r3, [r0, #0]
 80088fa:	700a      	strbls	r2, [r1, #0]
 80088fc:	f04f 30ff 	movhi.w	r0, #4294967295
 8008900:	bf98      	it	ls
 8008902:	2001      	movls	r0, #1
 8008904:	4770      	bx	lr
 8008906:	4608      	mov	r0, r1
 8008908:	4770      	bx	lr
	...

0800890c <__swsetup_r>:
 800890c:	4b32      	ldr	r3, [pc, #200]	; (80089d8 <__swsetup_r+0xcc>)
 800890e:	b570      	push	{r4, r5, r6, lr}
 8008910:	681d      	ldr	r5, [r3, #0]
 8008912:	4606      	mov	r6, r0
 8008914:	460c      	mov	r4, r1
 8008916:	b125      	cbz	r5, 8008922 <__swsetup_r+0x16>
 8008918:	69ab      	ldr	r3, [r5, #24]
 800891a:	b913      	cbnz	r3, 8008922 <__swsetup_r+0x16>
 800891c:	4628      	mov	r0, r5
 800891e:	f000 f985 	bl	8008c2c <__sinit>
 8008922:	4b2e      	ldr	r3, [pc, #184]	; (80089dc <__swsetup_r+0xd0>)
 8008924:	429c      	cmp	r4, r3
 8008926:	d10f      	bne.n	8008948 <__swsetup_r+0x3c>
 8008928:	686c      	ldr	r4, [r5, #4]
 800892a:	89a3      	ldrh	r3, [r4, #12]
 800892c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008930:	0719      	lsls	r1, r3, #28
 8008932:	d42c      	bmi.n	800898e <__swsetup_r+0x82>
 8008934:	06dd      	lsls	r5, r3, #27
 8008936:	d411      	bmi.n	800895c <__swsetup_r+0x50>
 8008938:	2309      	movs	r3, #9
 800893a:	6033      	str	r3, [r6, #0]
 800893c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008940:	81a3      	strh	r3, [r4, #12]
 8008942:	f04f 30ff 	mov.w	r0, #4294967295
 8008946:	e03e      	b.n	80089c6 <__swsetup_r+0xba>
 8008948:	4b25      	ldr	r3, [pc, #148]	; (80089e0 <__swsetup_r+0xd4>)
 800894a:	429c      	cmp	r4, r3
 800894c:	d101      	bne.n	8008952 <__swsetup_r+0x46>
 800894e:	68ac      	ldr	r4, [r5, #8]
 8008950:	e7eb      	b.n	800892a <__swsetup_r+0x1e>
 8008952:	4b24      	ldr	r3, [pc, #144]	; (80089e4 <__swsetup_r+0xd8>)
 8008954:	429c      	cmp	r4, r3
 8008956:	bf08      	it	eq
 8008958:	68ec      	ldreq	r4, [r5, #12]
 800895a:	e7e6      	b.n	800892a <__swsetup_r+0x1e>
 800895c:	0758      	lsls	r0, r3, #29
 800895e:	d512      	bpl.n	8008986 <__swsetup_r+0x7a>
 8008960:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008962:	b141      	cbz	r1, 8008976 <__swsetup_r+0x6a>
 8008964:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008968:	4299      	cmp	r1, r3
 800896a:	d002      	beq.n	8008972 <__swsetup_r+0x66>
 800896c:	4630      	mov	r0, r6
 800896e:	f7ff fb6f 	bl	8008050 <_free_r>
 8008972:	2300      	movs	r3, #0
 8008974:	6363      	str	r3, [r4, #52]	; 0x34
 8008976:	89a3      	ldrh	r3, [r4, #12]
 8008978:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800897c:	81a3      	strh	r3, [r4, #12]
 800897e:	2300      	movs	r3, #0
 8008980:	6063      	str	r3, [r4, #4]
 8008982:	6923      	ldr	r3, [r4, #16]
 8008984:	6023      	str	r3, [r4, #0]
 8008986:	89a3      	ldrh	r3, [r4, #12]
 8008988:	f043 0308 	orr.w	r3, r3, #8
 800898c:	81a3      	strh	r3, [r4, #12]
 800898e:	6923      	ldr	r3, [r4, #16]
 8008990:	b94b      	cbnz	r3, 80089a6 <__swsetup_r+0x9a>
 8008992:	89a3      	ldrh	r3, [r4, #12]
 8008994:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008998:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800899c:	d003      	beq.n	80089a6 <__swsetup_r+0x9a>
 800899e:	4621      	mov	r1, r4
 80089a0:	4630      	mov	r0, r6
 80089a2:	f000 fa07 	bl	8008db4 <__smakebuf_r>
 80089a6:	89a0      	ldrh	r0, [r4, #12]
 80089a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80089ac:	f010 0301 	ands.w	r3, r0, #1
 80089b0:	d00a      	beq.n	80089c8 <__swsetup_r+0xbc>
 80089b2:	2300      	movs	r3, #0
 80089b4:	60a3      	str	r3, [r4, #8]
 80089b6:	6963      	ldr	r3, [r4, #20]
 80089b8:	425b      	negs	r3, r3
 80089ba:	61a3      	str	r3, [r4, #24]
 80089bc:	6923      	ldr	r3, [r4, #16]
 80089be:	b943      	cbnz	r3, 80089d2 <__swsetup_r+0xc6>
 80089c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80089c4:	d1ba      	bne.n	800893c <__swsetup_r+0x30>
 80089c6:	bd70      	pop	{r4, r5, r6, pc}
 80089c8:	0781      	lsls	r1, r0, #30
 80089ca:	bf58      	it	pl
 80089cc:	6963      	ldrpl	r3, [r4, #20]
 80089ce:	60a3      	str	r3, [r4, #8]
 80089d0:	e7f4      	b.n	80089bc <__swsetup_r+0xb0>
 80089d2:	2000      	movs	r0, #0
 80089d4:	e7f7      	b.n	80089c6 <__swsetup_r+0xba>
 80089d6:	bf00      	nop
 80089d8:	2000000c 	.word	0x2000000c
 80089dc:	08009474 	.word	0x08009474
 80089e0:	08009494 	.word	0x08009494
 80089e4:	08009454 	.word	0x08009454

080089e8 <abort>:
 80089e8:	b508      	push	{r3, lr}
 80089ea:	2006      	movs	r0, #6
 80089ec:	f000 fa52 	bl	8008e94 <raise>
 80089f0:	2001      	movs	r0, #1
 80089f2:	f7f9 f970 	bl	8001cd6 <_exit>
	...

080089f8 <__sflush_r>:
 80089f8:	898a      	ldrh	r2, [r1, #12]
 80089fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089fe:	4605      	mov	r5, r0
 8008a00:	0710      	lsls	r0, r2, #28
 8008a02:	460c      	mov	r4, r1
 8008a04:	d458      	bmi.n	8008ab8 <__sflush_r+0xc0>
 8008a06:	684b      	ldr	r3, [r1, #4]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	dc05      	bgt.n	8008a18 <__sflush_r+0x20>
 8008a0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	dc02      	bgt.n	8008a18 <__sflush_r+0x20>
 8008a12:	2000      	movs	r0, #0
 8008a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a1a:	2e00      	cmp	r6, #0
 8008a1c:	d0f9      	beq.n	8008a12 <__sflush_r+0x1a>
 8008a1e:	2300      	movs	r3, #0
 8008a20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008a24:	682f      	ldr	r7, [r5, #0]
 8008a26:	602b      	str	r3, [r5, #0]
 8008a28:	d032      	beq.n	8008a90 <__sflush_r+0x98>
 8008a2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008a2c:	89a3      	ldrh	r3, [r4, #12]
 8008a2e:	075a      	lsls	r2, r3, #29
 8008a30:	d505      	bpl.n	8008a3e <__sflush_r+0x46>
 8008a32:	6863      	ldr	r3, [r4, #4]
 8008a34:	1ac0      	subs	r0, r0, r3
 8008a36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a38:	b10b      	cbz	r3, 8008a3e <__sflush_r+0x46>
 8008a3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a3c:	1ac0      	subs	r0, r0, r3
 8008a3e:	2300      	movs	r3, #0
 8008a40:	4602      	mov	r2, r0
 8008a42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a44:	6a21      	ldr	r1, [r4, #32]
 8008a46:	4628      	mov	r0, r5
 8008a48:	47b0      	blx	r6
 8008a4a:	1c43      	adds	r3, r0, #1
 8008a4c:	89a3      	ldrh	r3, [r4, #12]
 8008a4e:	d106      	bne.n	8008a5e <__sflush_r+0x66>
 8008a50:	6829      	ldr	r1, [r5, #0]
 8008a52:	291d      	cmp	r1, #29
 8008a54:	d82c      	bhi.n	8008ab0 <__sflush_r+0xb8>
 8008a56:	4a2a      	ldr	r2, [pc, #168]	; (8008b00 <__sflush_r+0x108>)
 8008a58:	40ca      	lsrs	r2, r1
 8008a5a:	07d6      	lsls	r6, r2, #31
 8008a5c:	d528      	bpl.n	8008ab0 <__sflush_r+0xb8>
 8008a5e:	2200      	movs	r2, #0
 8008a60:	6062      	str	r2, [r4, #4]
 8008a62:	04d9      	lsls	r1, r3, #19
 8008a64:	6922      	ldr	r2, [r4, #16]
 8008a66:	6022      	str	r2, [r4, #0]
 8008a68:	d504      	bpl.n	8008a74 <__sflush_r+0x7c>
 8008a6a:	1c42      	adds	r2, r0, #1
 8008a6c:	d101      	bne.n	8008a72 <__sflush_r+0x7a>
 8008a6e:	682b      	ldr	r3, [r5, #0]
 8008a70:	b903      	cbnz	r3, 8008a74 <__sflush_r+0x7c>
 8008a72:	6560      	str	r0, [r4, #84]	; 0x54
 8008a74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a76:	602f      	str	r7, [r5, #0]
 8008a78:	2900      	cmp	r1, #0
 8008a7a:	d0ca      	beq.n	8008a12 <__sflush_r+0x1a>
 8008a7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a80:	4299      	cmp	r1, r3
 8008a82:	d002      	beq.n	8008a8a <__sflush_r+0x92>
 8008a84:	4628      	mov	r0, r5
 8008a86:	f7ff fae3 	bl	8008050 <_free_r>
 8008a8a:	2000      	movs	r0, #0
 8008a8c:	6360      	str	r0, [r4, #52]	; 0x34
 8008a8e:	e7c1      	b.n	8008a14 <__sflush_r+0x1c>
 8008a90:	6a21      	ldr	r1, [r4, #32]
 8008a92:	2301      	movs	r3, #1
 8008a94:	4628      	mov	r0, r5
 8008a96:	47b0      	blx	r6
 8008a98:	1c41      	adds	r1, r0, #1
 8008a9a:	d1c7      	bne.n	8008a2c <__sflush_r+0x34>
 8008a9c:	682b      	ldr	r3, [r5, #0]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d0c4      	beq.n	8008a2c <__sflush_r+0x34>
 8008aa2:	2b1d      	cmp	r3, #29
 8008aa4:	d001      	beq.n	8008aaa <__sflush_r+0xb2>
 8008aa6:	2b16      	cmp	r3, #22
 8008aa8:	d101      	bne.n	8008aae <__sflush_r+0xb6>
 8008aaa:	602f      	str	r7, [r5, #0]
 8008aac:	e7b1      	b.n	8008a12 <__sflush_r+0x1a>
 8008aae:	89a3      	ldrh	r3, [r4, #12]
 8008ab0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ab4:	81a3      	strh	r3, [r4, #12]
 8008ab6:	e7ad      	b.n	8008a14 <__sflush_r+0x1c>
 8008ab8:	690f      	ldr	r7, [r1, #16]
 8008aba:	2f00      	cmp	r7, #0
 8008abc:	d0a9      	beq.n	8008a12 <__sflush_r+0x1a>
 8008abe:	0793      	lsls	r3, r2, #30
 8008ac0:	680e      	ldr	r6, [r1, #0]
 8008ac2:	bf08      	it	eq
 8008ac4:	694b      	ldreq	r3, [r1, #20]
 8008ac6:	600f      	str	r7, [r1, #0]
 8008ac8:	bf18      	it	ne
 8008aca:	2300      	movne	r3, #0
 8008acc:	eba6 0807 	sub.w	r8, r6, r7
 8008ad0:	608b      	str	r3, [r1, #8]
 8008ad2:	f1b8 0f00 	cmp.w	r8, #0
 8008ad6:	dd9c      	ble.n	8008a12 <__sflush_r+0x1a>
 8008ad8:	6a21      	ldr	r1, [r4, #32]
 8008ada:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008adc:	4643      	mov	r3, r8
 8008ade:	463a      	mov	r2, r7
 8008ae0:	4628      	mov	r0, r5
 8008ae2:	47b0      	blx	r6
 8008ae4:	2800      	cmp	r0, #0
 8008ae6:	dc06      	bgt.n	8008af6 <__sflush_r+0xfe>
 8008ae8:	89a3      	ldrh	r3, [r4, #12]
 8008aea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008aee:	81a3      	strh	r3, [r4, #12]
 8008af0:	f04f 30ff 	mov.w	r0, #4294967295
 8008af4:	e78e      	b.n	8008a14 <__sflush_r+0x1c>
 8008af6:	4407      	add	r7, r0
 8008af8:	eba8 0800 	sub.w	r8, r8, r0
 8008afc:	e7e9      	b.n	8008ad2 <__sflush_r+0xda>
 8008afe:	bf00      	nop
 8008b00:	20400001 	.word	0x20400001

08008b04 <_fflush_r>:
 8008b04:	b538      	push	{r3, r4, r5, lr}
 8008b06:	690b      	ldr	r3, [r1, #16]
 8008b08:	4605      	mov	r5, r0
 8008b0a:	460c      	mov	r4, r1
 8008b0c:	b913      	cbnz	r3, 8008b14 <_fflush_r+0x10>
 8008b0e:	2500      	movs	r5, #0
 8008b10:	4628      	mov	r0, r5
 8008b12:	bd38      	pop	{r3, r4, r5, pc}
 8008b14:	b118      	cbz	r0, 8008b1e <_fflush_r+0x1a>
 8008b16:	6983      	ldr	r3, [r0, #24]
 8008b18:	b90b      	cbnz	r3, 8008b1e <_fflush_r+0x1a>
 8008b1a:	f000 f887 	bl	8008c2c <__sinit>
 8008b1e:	4b14      	ldr	r3, [pc, #80]	; (8008b70 <_fflush_r+0x6c>)
 8008b20:	429c      	cmp	r4, r3
 8008b22:	d11b      	bne.n	8008b5c <_fflush_r+0x58>
 8008b24:	686c      	ldr	r4, [r5, #4]
 8008b26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d0ef      	beq.n	8008b0e <_fflush_r+0xa>
 8008b2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008b30:	07d0      	lsls	r0, r2, #31
 8008b32:	d404      	bmi.n	8008b3e <_fflush_r+0x3a>
 8008b34:	0599      	lsls	r1, r3, #22
 8008b36:	d402      	bmi.n	8008b3e <_fflush_r+0x3a>
 8008b38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b3a:	f000 f915 	bl	8008d68 <__retarget_lock_acquire_recursive>
 8008b3e:	4628      	mov	r0, r5
 8008b40:	4621      	mov	r1, r4
 8008b42:	f7ff ff59 	bl	80089f8 <__sflush_r>
 8008b46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b48:	07da      	lsls	r2, r3, #31
 8008b4a:	4605      	mov	r5, r0
 8008b4c:	d4e0      	bmi.n	8008b10 <_fflush_r+0xc>
 8008b4e:	89a3      	ldrh	r3, [r4, #12]
 8008b50:	059b      	lsls	r3, r3, #22
 8008b52:	d4dd      	bmi.n	8008b10 <_fflush_r+0xc>
 8008b54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b56:	f000 f908 	bl	8008d6a <__retarget_lock_release_recursive>
 8008b5a:	e7d9      	b.n	8008b10 <_fflush_r+0xc>
 8008b5c:	4b05      	ldr	r3, [pc, #20]	; (8008b74 <_fflush_r+0x70>)
 8008b5e:	429c      	cmp	r4, r3
 8008b60:	d101      	bne.n	8008b66 <_fflush_r+0x62>
 8008b62:	68ac      	ldr	r4, [r5, #8]
 8008b64:	e7df      	b.n	8008b26 <_fflush_r+0x22>
 8008b66:	4b04      	ldr	r3, [pc, #16]	; (8008b78 <_fflush_r+0x74>)
 8008b68:	429c      	cmp	r4, r3
 8008b6a:	bf08      	it	eq
 8008b6c:	68ec      	ldreq	r4, [r5, #12]
 8008b6e:	e7da      	b.n	8008b26 <_fflush_r+0x22>
 8008b70:	08009474 	.word	0x08009474
 8008b74:	08009494 	.word	0x08009494
 8008b78:	08009454 	.word	0x08009454

08008b7c <std>:
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	b510      	push	{r4, lr}
 8008b80:	4604      	mov	r4, r0
 8008b82:	e9c0 3300 	strd	r3, r3, [r0]
 8008b86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008b8a:	6083      	str	r3, [r0, #8]
 8008b8c:	8181      	strh	r1, [r0, #12]
 8008b8e:	6643      	str	r3, [r0, #100]	; 0x64
 8008b90:	81c2      	strh	r2, [r0, #14]
 8008b92:	6183      	str	r3, [r0, #24]
 8008b94:	4619      	mov	r1, r3
 8008b96:	2208      	movs	r2, #8
 8008b98:	305c      	adds	r0, #92	; 0x5c
 8008b9a:	f7fd fba7 	bl	80062ec <memset>
 8008b9e:	4b05      	ldr	r3, [pc, #20]	; (8008bb4 <std+0x38>)
 8008ba0:	6263      	str	r3, [r4, #36]	; 0x24
 8008ba2:	4b05      	ldr	r3, [pc, #20]	; (8008bb8 <std+0x3c>)
 8008ba4:	62a3      	str	r3, [r4, #40]	; 0x28
 8008ba6:	4b05      	ldr	r3, [pc, #20]	; (8008bbc <std+0x40>)
 8008ba8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008baa:	4b05      	ldr	r3, [pc, #20]	; (8008bc0 <std+0x44>)
 8008bac:	6224      	str	r4, [r4, #32]
 8008bae:	6323      	str	r3, [r4, #48]	; 0x30
 8008bb0:	bd10      	pop	{r4, pc}
 8008bb2:	bf00      	nop
 8008bb4:	08008ecd 	.word	0x08008ecd
 8008bb8:	08008eef 	.word	0x08008eef
 8008bbc:	08008f27 	.word	0x08008f27
 8008bc0:	08008f4b 	.word	0x08008f4b

08008bc4 <_cleanup_r>:
 8008bc4:	4901      	ldr	r1, [pc, #4]	; (8008bcc <_cleanup_r+0x8>)
 8008bc6:	f000 b8af 	b.w	8008d28 <_fwalk_reent>
 8008bca:	bf00      	nop
 8008bcc:	08008b05 	.word	0x08008b05

08008bd0 <__sfmoreglue>:
 8008bd0:	b570      	push	{r4, r5, r6, lr}
 8008bd2:	1e4a      	subs	r2, r1, #1
 8008bd4:	2568      	movs	r5, #104	; 0x68
 8008bd6:	4355      	muls	r5, r2
 8008bd8:	460e      	mov	r6, r1
 8008bda:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008bde:	f7ff fa87 	bl	80080f0 <_malloc_r>
 8008be2:	4604      	mov	r4, r0
 8008be4:	b140      	cbz	r0, 8008bf8 <__sfmoreglue+0x28>
 8008be6:	2100      	movs	r1, #0
 8008be8:	e9c0 1600 	strd	r1, r6, [r0]
 8008bec:	300c      	adds	r0, #12
 8008bee:	60a0      	str	r0, [r4, #8]
 8008bf0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008bf4:	f7fd fb7a 	bl	80062ec <memset>
 8008bf8:	4620      	mov	r0, r4
 8008bfa:	bd70      	pop	{r4, r5, r6, pc}

08008bfc <__sfp_lock_acquire>:
 8008bfc:	4801      	ldr	r0, [pc, #4]	; (8008c04 <__sfp_lock_acquire+0x8>)
 8008bfe:	f000 b8b3 	b.w	8008d68 <__retarget_lock_acquire_recursive>
 8008c02:	bf00      	nop
 8008c04:	20000d28 	.word	0x20000d28

08008c08 <__sfp_lock_release>:
 8008c08:	4801      	ldr	r0, [pc, #4]	; (8008c10 <__sfp_lock_release+0x8>)
 8008c0a:	f000 b8ae 	b.w	8008d6a <__retarget_lock_release_recursive>
 8008c0e:	bf00      	nop
 8008c10:	20000d28 	.word	0x20000d28

08008c14 <__sinit_lock_acquire>:
 8008c14:	4801      	ldr	r0, [pc, #4]	; (8008c1c <__sinit_lock_acquire+0x8>)
 8008c16:	f000 b8a7 	b.w	8008d68 <__retarget_lock_acquire_recursive>
 8008c1a:	bf00      	nop
 8008c1c:	20000d23 	.word	0x20000d23

08008c20 <__sinit_lock_release>:
 8008c20:	4801      	ldr	r0, [pc, #4]	; (8008c28 <__sinit_lock_release+0x8>)
 8008c22:	f000 b8a2 	b.w	8008d6a <__retarget_lock_release_recursive>
 8008c26:	bf00      	nop
 8008c28:	20000d23 	.word	0x20000d23

08008c2c <__sinit>:
 8008c2c:	b510      	push	{r4, lr}
 8008c2e:	4604      	mov	r4, r0
 8008c30:	f7ff fff0 	bl	8008c14 <__sinit_lock_acquire>
 8008c34:	69a3      	ldr	r3, [r4, #24]
 8008c36:	b11b      	cbz	r3, 8008c40 <__sinit+0x14>
 8008c38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c3c:	f7ff bff0 	b.w	8008c20 <__sinit_lock_release>
 8008c40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008c44:	6523      	str	r3, [r4, #80]	; 0x50
 8008c46:	4b13      	ldr	r3, [pc, #76]	; (8008c94 <__sinit+0x68>)
 8008c48:	4a13      	ldr	r2, [pc, #76]	; (8008c98 <__sinit+0x6c>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	62a2      	str	r2, [r4, #40]	; 0x28
 8008c4e:	42a3      	cmp	r3, r4
 8008c50:	bf04      	itt	eq
 8008c52:	2301      	moveq	r3, #1
 8008c54:	61a3      	streq	r3, [r4, #24]
 8008c56:	4620      	mov	r0, r4
 8008c58:	f000 f820 	bl	8008c9c <__sfp>
 8008c5c:	6060      	str	r0, [r4, #4]
 8008c5e:	4620      	mov	r0, r4
 8008c60:	f000 f81c 	bl	8008c9c <__sfp>
 8008c64:	60a0      	str	r0, [r4, #8]
 8008c66:	4620      	mov	r0, r4
 8008c68:	f000 f818 	bl	8008c9c <__sfp>
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	60e0      	str	r0, [r4, #12]
 8008c70:	2104      	movs	r1, #4
 8008c72:	6860      	ldr	r0, [r4, #4]
 8008c74:	f7ff ff82 	bl	8008b7c <std>
 8008c78:	68a0      	ldr	r0, [r4, #8]
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	2109      	movs	r1, #9
 8008c7e:	f7ff ff7d 	bl	8008b7c <std>
 8008c82:	68e0      	ldr	r0, [r4, #12]
 8008c84:	2202      	movs	r2, #2
 8008c86:	2112      	movs	r1, #18
 8008c88:	f7ff ff78 	bl	8008b7c <std>
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	61a3      	str	r3, [r4, #24]
 8008c90:	e7d2      	b.n	8008c38 <__sinit+0xc>
 8008c92:	bf00      	nop
 8008c94:	080090d4 	.word	0x080090d4
 8008c98:	08008bc5 	.word	0x08008bc5

08008c9c <__sfp>:
 8008c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c9e:	4607      	mov	r7, r0
 8008ca0:	f7ff ffac 	bl	8008bfc <__sfp_lock_acquire>
 8008ca4:	4b1e      	ldr	r3, [pc, #120]	; (8008d20 <__sfp+0x84>)
 8008ca6:	681e      	ldr	r6, [r3, #0]
 8008ca8:	69b3      	ldr	r3, [r6, #24]
 8008caa:	b913      	cbnz	r3, 8008cb2 <__sfp+0x16>
 8008cac:	4630      	mov	r0, r6
 8008cae:	f7ff ffbd 	bl	8008c2c <__sinit>
 8008cb2:	3648      	adds	r6, #72	; 0x48
 8008cb4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008cb8:	3b01      	subs	r3, #1
 8008cba:	d503      	bpl.n	8008cc4 <__sfp+0x28>
 8008cbc:	6833      	ldr	r3, [r6, #0]
 8008cbe:	b30b      	cbz	r3, 8008d04 <__sfp+0x68>
 8008cc0:	6836      	ldr	r6, [r6, #0]
 8008cc2:	e7f7      	b.n	8008cb4 <__sfp+0x18>
 8008cc4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008cc8:	b9d5      	cbnz	r5, 8008d00 <__sfp+0x64>
 8008cca:	4b16      	ldr	r3, [pc, #88]	; (8008d24 <__sfp+0x88>)
 8008ccc:	60e3      	str	r3, [r4, #12]
 8008cce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008cd2:	6665      	str	r5, [r4, #100]	; 0x64
 8008cd4:	f000 f847 	bl	8008d66 <__retarget_lock_init_recursive>
 8008cd8:	f7ff ff96 	bl	8008c08 <__sfp_lock_release>
 8008cdc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008ce0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008ce4:	6025      	str	r5, [r4, #0]
 8008ce6:	61a5      	str	r5, [r4, #24]
 8008ce8:	2208      	movs	r2, #8
 8008cea:	4629      	mov	r1, r5
 8008cec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008cf0:	f7fd fafc 	bl	80062ec <memset>
 8008cf4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008cf8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008cfc:	4620      	mov	r0, r4
 8008cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d00:	3468      	adds	r4, #104	; 0x68
 8008d02:	e7d9      	b.n	8008cb8 <__sfp+0x1c>
 8008d04:	2104      	movs	r1, #4
 8008d06:	4638      	mov	r0, r7
 8008d08:	f7ff ff62 	bl	8008bd0 <__sfmoreglue>
 8008d0c:	4604      	mov	r4, r0
 8008d0e:	6030      	str	r0, [r6, #0]
 8008d10:	2800      	cmp	r0, #0
 8008d12:	d1d5      	bne.n	8008cc0 <__sfp+0x24>
 8008d14:	f7ff ff78 	bl	8008c08 <__sfp_lock_release>
 8008d18:	230c      	movs	r3, #12
 8008d1a:	603b      	str	r3, [r7, #0]
 8008d1c:	e7ee      	b.n	8008cfc <__sfp+0x60>
 8008d1e:	bf00      	nop
 8008d20:	080090d4 	.word	0x080090d4
 8008d24:	ffff0001 	.word	0xffff0001

08008d28 <_fwalk_reent>:
 8008d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d2c:	4606      	mov	r6, r0
 8008d2e:	4688      	mov	r8, r1
 8008d30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008d34:	2700      	movs	r7, #0
 8008d36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008d3a:	f1b9 0901 	subs.w	r9, r9, #1
 8008d3e:	d505      	bpl.n	8008d4c <_fwalk_reent+0x24>
 8008d40:	6824      	ldr	r4, [r4, #0]
 8008d42:	2c00      	cmp	r4, #0
 8008d44:	d1f7      	bne.n	8008d36 <_fwalk_reent+0xe>
 8008d46:	4638      	mov	r0, r7
 8008d48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d4c:	89ab      	ldrh	r3, [r5, #12]
 8008d4e:	2b01      	cmp	r3, #1
 8008d50:	d907      	bls.n	8008d62 <_fwalk_reent+0x3a>
 8008d52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d56:	3301      	adds	r3, #1
 8008d58:	d003      	beq.n	8008d62 <_fwalk_reent+0x3a>
 8008d5a:	4629      	mov	r1, r5
 8008d5c:	4630      	mov	r0, r6
 8008d5e:	47c0      	blx	r8
 8008d60:	4307      	orrs	r7, r0
 8008d62:	3568      	adds	r5, #104	; 0x68
 8008d64:	e7e9      	b.n	8008d3a <_fwalk_reent+0x12>

08008d66 <__retarget_lock_init_recursive>:
 8008d66:	4770      	bx	lr

08008d68 <__retarget_lock_acquire_recursive>:
 8008d68:	4770      	bx	lr

08008d6a <__retarget_lock_release_recursive>:
 8008d6a:	4770      	bx	lr

08008d6c <__swhatbuf_r>:
 8008d6c:	b570      	push	{r4, r5, r6, lr}
 8008d6e:	460e      	mov	r6, r1
 8008d70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d74:	2900      	cmp	r1, #0
 8008d76:	b096      	sub	sp, #88	; 0x58
 8008d78:	4614      	mov	r4, r2
 8008d7a:	461d      	mov	r5, r3
 8008d7c:	da07      	bge.n	8008d8e <__swhatbuf_r+0x22>
 8008d7e:	2300      	movs	r3, #0
 8008d80:	602b      	str	r3, [r5, #0]
 8008d82:	89b3      	ldrh	r3, [r6, #12]
 8008d84:	061a      	lsls	r2, r3, #24
 8008d86:	d410      	bmi.n	8008daa <__swhatbuf_r+0x3e>
 8008d88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d8c:	e00e      	b.n	8008dac <__swhatbuf_r+0x40>
 8008d8e:	466a      	mov	r2, sp
 8008d90:	f000 f902 	bl	8008f98 <_fstat_r>
 8008d94:	2800      	cmp	r0, #0
 8008d96:	dbf2      	blt.n	8008d7e <__swhatbuf_r+0x12>
 8008d98:	9a01      	ldr	r2, [sp, #4]
 8008d9a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008d9e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008da2:	425a      	negs	r2, r3
 8008da4:	415a      	adcs	r2, r3
 8008da6:	602a      	str	r2, [r5, #0]
 8008da8:	e7ee      	b.n	8008d88 <__swhatbuf_r+0x1c>
 8008daa:	2340      	movs	r3, #64	; 0x40
 8008dac:	2000      	movs	r0, #0
 8008dae:	6023      	str	r3, [r4, #0]
 8008db0:	b016      	add	sp, #88	; 0x58
 8008db2:	bd70      	pop	{r4, r5, r6, pc}

08008db4 <__smakebuf_r>:
 8008db4:	898b      	ldrh	r3, [r1, #12]
 8008db6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008db8:	079d      	lsls	r5, r3, #30
 8008dba:	4606      	mov	r6, r0
 8008dbc:	460c      	mov	r4, r1
 8008dbe:	d507      	bpl.n	8008dd0 <__smakebuf_r+0x1c>
 8008dc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008dc4:	6023      	str	r3, [r4, #0]
 8008dc6:	6123      	str	r3, [r4, #16]
 8008dc8:	2301      	movs	r3, #1
 8008dca:	6163      	str	r3, [r4, #20]
 8008dcc:	b002      	add	sp, #8
 8008dce:	bd70      	pop	{r4, r5, r6, pc}
 8008dd0:	ab01      	add	r3, sp, #4
 8008dd2:	466a      	mov	r2, sp
 8008dd4:	f7ff ffca 	bl	8008d6c <__swhatbuf_r>
 8008dd8:	9900      	ldr	r1, [sp, #0]
 8008dda:	4605      	mov	r5, r0
 8008ddc:	4630      	mov	r0, r6
 8008dde:	f7ff f987 	bl	80080f0 <_malloc_r>
 8008de2:	b948      	cbnz	r0, 8008df8 <__smakebuf_r+0x44>
 8008de4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008de8:	059a      	lsls	r2, r3, #22
 8008dea:	d4ef      	bmi.n	8008dcc <__smakebuf_r+0x18>
 8008dec:	f023 0303 	bic.w	r3, r3, #3
 8008df0:	f043 0302 	orr.w	r3, r3, #2
 8008df4:	81a3      	strh	r3, [r4, #12]
 8008df6:	e7e3      	b.n	8008dc0 <__smakebuf_r+0xc>
 8008df8:	4b0d      	ldr	r3, [pc, #52]	; (8008e30 <__smakebuf_r+0x7c>)
 8008dfa:	62b3      	str	r3, [r6, #40]	; 0x28
 8008dfc:	89a3      	ldrh	r3, [r4, #12]
 8008dfe:	6020      	str	r0, [r4, #0]
 8008e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e04:	81a3      	strh	r3, [r4, #12]
 8008e06:	9b00      	ldr	r3, [sp, #0]
 8008e08:	6163      	str	r3, [r4, #20]
 8008e0a:	9b01      	ldr	r3, [sp, #4]
 8008e0c:	6120      	str	r0, [r4, #16]
 8008e0e:	b15b      	cbz	r3, 8008e28 <__smakebuf_r+0x74>
 8008e10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e14:	4630      	mov	r0, r6
 8008e16:	f000 f8d1 	bl	8008fbc <_isatty_r>
 8008e1a:	b128      	cbz	r0, 8008e28 <__smakebuf_r+0x74>
 8008e1c:	89a3      	ldrh	r3, [r4, #12]
 8008e1e:	f023 0303 	bic.w	r3, r3, #3
 8008e22:	f043 0301 	orr.w	r3, r3, #1
 8008e26:	81a3      	strh	r3, [r4, #12]
 8008e28:	89a0      	ldrh	r0, [r4, #12]
 8008e2a:	4305      	orrs	r5, r0
 8008e2c:	81a5      	strh	r5, [r4, #12]
 8008e2e:	e7cd      	b.n	8008dcc <__smakebuf_r+0x18>
 8008e30:	08008bc5 	.word	0x08008bc5

08008e34 <_malloc_usable_size_r>:
 8008e34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e38:	1f18      	subs	r0, r3, #4
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	bfbc      	itt	lt
 8008e3e:	580b      	ldrlt	r3, [r1, r0]
 8008e40:	18c0      	addlt	r0, r0, r3
 8008e42:	4770      	bx	lr

08008e44 <_raise_r>:
 8008e44:	291f      	cmp	r1, #31
 8008e46:	b538      	push	{r3, r4, r5, lr}
 8008e48:	4604      	mov	r4, r0
 8008e4a:	460d      	mov	r5, r1
 8008e4c:	d904      	bls.n	8008e58 <_raise_r+0x14>
 8008e4e:	2316      	movs	r3, #22
 8008e50:	6003      	str	r3, [r0, #0]
 8008e52:	f04f 30ff 	mov.w	r0, #4294967295
 8008e56:	bd38      	pop	{r3, r4, r5, pc}
 8008e58:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008e5a:	b112      	cbz	r2, 8008e62 <_raise_r+0x1e>
 8008e5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008e60:	b94b      	cbnz	r3, 8008e76 <_raise_r+0x32>
 8008e62:	4620      	mov	r0, r4
 8008e64:	f000 f830 	bl	8008ec8 <_getpid_r>
 8008e68:	462a      	mov	r2, r5
 8008e6a:	4601      	mov	r1, r0
 8008e6c:	4620      	mov	r0, r4
 8008e6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e72:	f000 b817 	b.w	8008ea4 <_kill_r>
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	d00a      	beq.n	8008e90 <_raise_r+0x4c>
 8008e7a:	1c59      	adds	r1, r3, #1
 8008e7c:	d103      	bne.n	8008e86 <_raise_r+0x42>
 8008e7e:	2316      	movs	r3, #22
 8008e80:	6003      	str	r3, [r0, #0]
 8008e82:	2001      	movs	r0, #1
 8008e84:	e7e7      	b.n	8008e56 <_raise_r+0x12>
 8008e86:	2400      	movs	r4, #0
 8008e88:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008e8c:	4628      	mov	r0, r5
 8008e8e:	4798      	blx	r3
 8008e90:	2000      	movs	r0, #0
 8008e92:	e7e0      	b.n	8008e56 <_raise_r+0x12>

08008e94 <raise>:
 8008e94:	4b02      	ldr	r3, [pc, #8]	; (8008ea0 <raise+0xc>)
 8008e96:	4601      	mov	r1, r0
 8008e98:	6818      	ldr	r0, [r3, #0]
 8008e9a:	f7ff bfd3 	b.w	8008e44 <_raise_r>
 8008e9e:	bf00      	nop
 8008ea0:	2000000c 	.word	0x2000000c

08008ea4 <_kill_r>:
 8008ea4:	b538      	push	{r3, r4, r5, lr}
 8008ea6:	4d07      	ldr	r5, [pc, #28]	; (8008ec4 <_kill_r+0x20>)
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	4604      	mov	r4, r0
 8008eac:	4608      	mov	r0, r1
 8008eae:	4611      	mov	r1, r2
 8008eb0:	602b      	str	r3, [r5, #0]
 8008eb2:	f7f8 ff00 	bl	8001cb6 <_kill>
 8008eb6:	1c43      	adds	r3, r0, #1
 8008eb8:	d102      	bne.n	8008ec0 <_kill_r+0x1c>
 8008eba:	682b      	ldr	r3, [r5, #0]
 8008ebc:	b103      	cbz	r3, 8008ec0 <_kill_r+0x1c>
 8008ebe:	6023      	str	r3, [r4, #0]
 8008ec0:	bd38      	pop	{r3, r4, r5, pc}
 8008ec2:	bf00      	nop
 8008ec4:	20000d1c 	.word	0x20000d1c

08008ec8 <_getpid_r>:
 8008ec8:	f7f8 beed 	b.w	8001ca6 <_getpid>

08008ecc <__sread>:
 8008ecc:	b510      	push	{r4, lr}
 8008ece:	460c      	mov	r4, r1
 8008ed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ed4:	f000 f894 	bl	8009000 <_read_r>
 8008ed8:	2800      	cmp	r0, #0
 8008eda:	bfab      	itete	ge
 8008edc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008ede:	89a3      	ldrhlt	r3, [r4, #12]
 8008ee0:	181b      	addge	r3, r3, r0
 8008ee2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008ee6:	bfac      	ite	ge
 8008ee8:	6563      	strge	r3, [r4, #84]	; 0x54
 8008eea:	81a3      	strhlt	r3, [r4, #12]
 8008eec:	bd10      	pop	{r4, pc}

08008eee <__swrite>:
 8008eee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ef2:	461f      	mov	r7, r3
 8008ef4:	898b      	ldrh	r3, [r1, #12]
 8008ef6:	05db      	lsls	r3, r3, #23
 8008ef8:	4605      	mov	r5, r0
 8008efa:	460c      	mov	r4, r1
 8008efc:	4616      	mov	r6, r2
 8008efe:	d505      	bpl.n	8008f0c <__swrite+0x1e>
 8008f00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f04:	2302      	movs	r3, #2
 8008f06:	2200      	movs	r2, #0
 8008f08:	f000 f868 	bl	8008fdc <_lseek_r>
 8008f0c:	89a3      	ldrh	r3, [r4, #12]
 8008f0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f16:	81a3      	strh	r3, [r4, #12]
 8008f18:	4632      	mov	r2, r6
 8008f1a:	463b      	mov	r3, r7
 8008f1c:	4628      	mov	r0, r5
 8008f1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f22:	f000 b817 	b.w	8008f54 <_write_r>

08008f26 <__sseek>:
 8008f26:	b510      	push	{r4, lr}
 8008f28:	460c      	mov	r4, r1
 8008f2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f2e:	f000 f855 	bl	8008fdc <_lseek_r>
 8008f32:	1c43      	adds	r3, r0, #1
 8008f34:	89a3      	ldrh	r3, [r4, #12]
 8008f36:	bf15      	itete	ne
 8008f38:	6560      	strne	r0, [r4, #84]	; 0x54
 8008f3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008f3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008f42:	81a3      	strheq	r3, [r4, #12]
 8008f44:	bf18      	it	ne
 8008f46:	81a3      	strhne	r3, [r4, #12]
 8008f48:	bd10      	pop	{r4, pc}

08008f4a <__sclose>:
 8008f4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f4e:	f000 b813 	b.w	8008f78 <_close_r>
	...

08008f54 <_write_r>:
 8008f54:	b538      	push	{r3, r4, r5, lr}
 8008f56:	4d07      	ldr	r5, [pc, #28]	; (8008f74 <_write_r+0x20>)
 8008f58:	4604      	mov	r4, r0
 8008f5a:	4608      	mov	r0, r1
 8008f5c:	4611      	mov	r1, r2
 8008f5e:	2200      	movs	r2, #0
 8008f60:	602a      	str	r2, [r5, #0]
 8008f62:	461a      	mov	r2, r3
 8008f64:	f7f8 fede 	bl	8001d24 <_write>
 8008f68:	1c43      	adds	r3, r0, #1
 8008f6a:	d102      	bne.n	8008f72 <_write_r+0x1e>
 8008f6c:	682b      	ldr	r3, [r5, #0]
 8008f6e:	b103      	cbz	r3, 8008f72 <_write_r+0x1e>
 8008f70:	6023      	str	r3, [r4, #0]
 8008f72:	bd38      	pop	{r3, r4, r5, pc}
 8008f74:	20000d1c 	.word	0x20000d1c

08008f78 <_close_r>:
 8008f78:	b538      	push	{r3, r4, r5, lr}
 8008f7a:	4d06      	ldr	r5, [pc, #24]	; (8008f94 <_close_r+0x1c>)
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	4604      	mov	r4, r0
 8008f80:	4608      	mov	r0, r1
 8008f82:	602b      	str	r3, [r5, #0]
 8008f84:	f7f8 feea 	bl	8001d5c <_close>
 8008f88:	1c43      	adds	r3, r0, #1
 8008f8a:	d102      	bne.n	8008f92 <_close_r+0x1a>
 8008f8c:	682b      	ldr	r3, [r5, #0]
 8008f8e:	b103      	cbz	r3, 8008f92 <_close_r+0x1a>
 8008f90:	6023      	str	r3, [r4, #0]
 8008f92:	bd38      	pop	{r3, r4, r5, pc}
 8008f94:	20000d1c 	.word	0x20000d1c

08008f98 <_fstat_r>:
 8008f98:	b538      	push	{r3, r4, r5, lr}
 8008f9a:	4d07      	ldr	r5, [pc, #28]	; (8008fb8 <_fstat_r+0x20>)
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	4604      	mov	r4, r0
 8008fa0:	4608      	mov	r0, r1
 8008fa2:	4611      	mov	r1, r2
 8008fa4:	602b      	str	r3, [r5, #0]
 8008fa6:	f7f8 fee5 	bl	8001d74 <_fstat>
 8008faa:	1c43      	adds	r3, r0, #1
 8008fac:	d102      	bne.n	8008fb4 <_fstat_r+0x1c>
 8008fae:	682b      	ldr	r3, [r5, #0]
 8008fb0:	b103      	cbz	r3, 8008fb4 <_fstat_r+0x1c>
 8008fb2:	6023      	str	r3, [r4, #0]
 8008fb4:	bd38      	pop	{r3, r4, r5, pc}
 8008fb6:	bf00      	nop
 8008fb8:	20000d1c 	.word	0x20000d1c

08008fbc <_isatty_r>:
 8008fbc:	b538      	push	{r3, r4, r5, lr}
 8008fbe:	4d06      	ldr	r5, [pc, #24]	; (8008fd8 <_isatty_r+0x1c>)
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	4604      	mov	r4, r0
 8008fc4:	4608      	mov	r0, r1
 8008fc6:	602b      	str	r3, [r5, #0]
 8008fc8:	f7f8 fee4 	bl	8001d94 <_isatty>
 8008fcc:	1c43      	adds	r3, r0, #1
 8008fce:	d102      	bne.n	8008fd6 <_isatty_r+0x1a>
 8008fd0:	682b      	ldr	r3, [r5, #0]
 8008fd2:	b103      	cbz	r3, 8008fd6 <_isatty_r+0x1a>
 8008fd4:	6023      	str	r3, [r4, #0]
 8008fd6:	bd38      	pop	{r3, r4, r5, pc}
 8008fd8:	20000d1c 	.word	0x20000d1c

08008fdc <_lseek_r>:
 8008fdc:	b538      	push	{r3, r4, r5, lr}
 8008fde:	4d07      	ldr	r5, [pc, #28]	; (8008ffc <_lseek_r+0x20>)
 8008fe0:	4604      	mov	r4, r0
 8008fe2:	4608      	mov	r0, r1
 8008fe4:	4611      	mov	r1, r2
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	602a      	str	r2, [r5, #0]
 8008fea:	461a      	mov	r2, r3
 8008fec:	f7f8 fedd 	bl	8001daa <_lseek>
 8008ff0:	1c43      	adds	r3, r0, #1
 8008ff2:	d102      	bne.n	8008ffa <_lseek_r+0x1e>
 8008ff4:	682b      	ldr	r3, [r5, #0]
 8008ff6:	b103      	cbz	r3, 8008ffa <_lseek_r+0x1e>
 8008ff8:	6023      	str	r3, [r4, #0]
 8008ffa:	bd38      	pop	{r3, r4, r5, pc}
 8008ffc:	20000d1c 	.word	0x20000d1c

08009000 <_read_r>:
 8009000:	b538      	push	{r3, r4, r5, lr}
 8009002:	4d07      	ldr	r5, [pc, #28]	; (8009020 <_read_r+0x20>)
 8009004:	4604      	mov	r4, r0
 8009006:	4608      	mov	r0, r1
 8009008:	4611      	mov	r1, r2
 800900a:	2200      	movs	r2, #0
 800900c:	602a      	str	r2, [r5, #0]
 800900e:	461a      	mov	r2, r3
 8009010:	f7f8 fe6b 	bl	8001cea <_read>
 8009014:	1c43      	adds	r3, r0, #1
 8009016:	d102      	bne.n	800901e <_read_r+0x1e>
 8009018:	682b      	ldr	r3, [r5, #0]
 800901a:	b103      	cbz	r3, 800901e <_read_r+0x1e>
 800901c:	6023      	str	r3, [r4, #0]
 800901e:	bd38      	pop	{r3, r4, r5, pc}
 8009020:	20000d1c 	.word	0x20000d1c

08009024 <_init>:
 8009024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009026:	bf00      	nop
 8009028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800902a:	bc08      	pop	{r3}
 800902c:	469e      	mov	lr, r3
 800902e:	4770      	bx	lr

08009030 <_fini>:
 8009030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009032:	bf00      	nop
 8009034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009036:	bc08      	pop	{r3}
 8009038:	469e      	mov	lr, r3
 800903a:	4770      	bx	lr
