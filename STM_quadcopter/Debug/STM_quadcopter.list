
STM_quadcopter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b19c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000628  0800b340  0800b340  0001b340  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b968  0800b968  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b968  0800b968  0001b968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b970  0800b970  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b970  0800b970  0001b970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b974  0800b974  0001b974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b978  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  200001e0  0800bb58  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004ec  0800bb58  000204ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001813c  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f04  00000000  00000000  0003834c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001148  00000000  00000000  0003b250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001038  00000000  00000000  0003c398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018dd1  00000000  00000000  0003d3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000178da  00000000  00000000  000561a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009264b  00000000  00000000  0006da7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001000c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d70  00000000  00000000  0010011c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b324 	.word	0x0800b324

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800b324 	.word	0x0800b324

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <ESC_Init>:

char cmd_rx[1];


// FUNCTIONS *****************************
void ESC_Init(ESC_CONF * ESC_speed){
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]

	  ESC_speed->FR = 0;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	801a      	strh	r2, [r3, #0]
	  ESC_speed->FL = 0;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2200      	movs	r2, #0
 8000f62:	805a      	strh	r2, [r3, #2]
	  ESC_speed->RR = 0;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2200      	movs	r2, #0
 8000f68:	809a      	strh	r2, [r3, #4]
	  ESC_speed->RL = 0;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	80da      	strh	r2, [r3, #6]

	  ESC_speed->state = ARMED;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2201      	movs	r2, #1
 8000f74:	729a      	strb	r2, [r3, #10]

	  ESC_speed->up_value = 0;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	811a      	strh	r2, [r3, #8]

	  // Set PWM to 0 for the ESC (1 ms)
	  TIM3->CCR1 = ESC_speed->FR + PWM_1_MS;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f82:	f503 6296 	add.w	r2, r3, #1200	; 0x4b0
 8000f86:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <ESC_Init+0x70>)
 8000f88:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM3->CCR2 = ESC_speed->FL + PWM_1_MS;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f90:	f503 6296 	add.w	r2, r3, #1200	; 0x4b0
 8000f94:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <ESC_Init+0x70>)
 8000f96:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM3->CCR3 = ESC_speed->RR + PWM_1_MS;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000f9e:	f503 6296 	add.w	r2, r3, #1200	; 0x4b0
 8000fa2:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <ESC_Init+0x70>)
 8000fa4:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM3->CCR4 = ESC_speed->RL + PWM_1_MS;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000fac:	f503 6296 	add.w	r2, r3, #1200	; 0x4b0
 8000fb0:	4b03      	ldr	r3, [pc, #12]	; (8000fc0 <ESC_Init+0x70>)
 8000fb2:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	40000400 	.word	0x40000400

08000fc4 <ESC_Calibrate>:

void ESC_Calibrate(ESC_CONF * ESC_speed){
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]

	  TIM3->CCR1 = PWM_1_MS;
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <ESC_Calibrate+0x3c>)
 8000fce:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8000fd2:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM3->CCR2 = PWM_1_MS;
 8000fd4:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <ESC_Calibrate+0x3c>)
 8000fd6:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8000fda:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM3->CCR3 = PWM_1_MS;
 8000fdc:	4b08      	ldr	r3, [pc, #32]	; (8001000 <ESC_Calibrate+0x3c>)
 8000fde:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8000fe2:	63da      	str	r2, [r3, #60]	; 0x3c
	  TIM3->CCR4 = PWM_1_MS;
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <ESC_Calibrate+0x3c>)
 8000fe6:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8000fea:	641a      	str	r2, [r3, #64]	; 0x40

	  ESC_speed->state = DISARMED;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	729a      	strb	r2, [r3, #10]
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	40000400 	.word	0x40000400

08001004 <ESC_followCmd>:


void ESC_followCmd(ESC_CONF * ESC_speed, IMU_MEASURE * MPU_measure, char cmd){
 8001004:	b5b0      	push	{r4, r5, r7, lr}
 8001006:	b096      	sub	sp, #88	; 0x58
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	4613      	mov	r3, r2
 8001010:	71fb      	strb	r3, [r7, #7]

	int cmd_pitch = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	657b      	str	r3, [r7, #84]	; 0x54
	int cmd_roll  = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	653b      	str	r3, [r7, #80]	; 0x50

	int16_t low_lim = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	int16_t high_lim = 600;
 8001020:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001024:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	// PID values
	int P_pitch = 2;
 8001028:	2302      	movs	r3, #2
 800102a:	64bb      	str	r3, [r7, #72]	; 0x48
	int D_pitch  = 1;
 800102c:	2301      	movs	r3, #1
 800102e:	647b      	str	r3, [r7, #68]	; 0x44
	//int I_pitch = 0;
	int P_roll  = 2;
 8001030:	2302      	movs	r3, #2
 8001032:	643b      	str	r3, [r7, #64]	; 0x40
	int D_roll  = 1;
 8001034:	2301      	movs	r3, #1
 8001036:	63fb      	str	r3, [r7, #60]	; 0x3c
	//int I_roll = 0;


	if(cmd == 'W'){	// forward
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	2b57      	cmp	r3, #87	; 0x57
 800103c:	d103      	bne.n	8001046 <ESC_followCmd+0x42>
		cmd_pitch = -10;
 800103e:	f06f 0309 	mvn.w	r3, #9
 8001042:	657b      	str	r3, [r7, #84]	; 0x54
 8001044:	e03f      	b.n	80010c6 <ESC_followCmd+0xc2>
		//PRINTF(" FORWARD \n\r");
	}else if(cmd == 'A'){ // left
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	2b41      	cmp	r3, #65	; 0x41
 800104a:	d103      	bne.n	8001054 <ESC_followCmd+0x50>
		cmd_roll = -10;
 800104c:	f06f 0309 	mvn.w	r3, #9
 8001050:	653b      	str	r3, [r7, #80]	; 0x50
 8001052:	e038      	b.n	80010c6 <ESC_followCmd+0xc2>
		//PRINTF(" LEFT \n\r");
	}else if(cmd == 'S'){ // back
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	2b53      	cmp	r3, #83	; 0x53
 8001058:	d102      	bne.n	8001060 <ESC_followCmd+0x5c>
		cmd_pitch = 10;
 800105a:	230a      	movs	r3, #10
 800105c:	657b      	str	r3, [r7, #84]	; 0x54
 800105e:	e032      	b.n	80010c6 <ESC_followCmd+0xc2>
		//PRINTF(" BACK \n\r");
	}else if(cmd == 'D'){ // right
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	2b44      	cmp	r3, #68	; 0x44
 8001064:	d102      	bne.n	800106c <ESC_followCmd+0x68>
		cmd_roll = +10;
 8001066:	230a      	movs	r3, #10
 8001068:	653b      	str	r3, [r7, #80]	; 0x50
 800106a:	e02c      	b.n	80010c6 <ESC_followCmd+0xc2>
		//PRINTF(" RIGHT \n\r");
	}else if(cmd == 'I'){ // up
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	2b49      	cmp	r3, #73	; 0x49
 8001070:	d109      	bne.n	8001086 <ESC_followCmd+0x82>
		ESC_speed->up_value += 10;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001078:	b29b      	uxth	r3, r3
 800107a:	330a      	adds	r3, #10
 800107c:	b29b      	uxth	r3, r3
 800107e:	b21a      	sxth	r2, r3
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	811a      	strh	r2, [r3, #8]
 8001084:	e01f      	b.n	80010c6 <ESC_followCmd+0xc2>
		//PRINTF(" UP \n\r");
	}else if(cmd == 'J'){ // rotate left
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	2b4a      	cmp	r3, #74	; 0x4a
 800108a:	d01c      	beq.n	80010c6 <ESC_followCmd+0xc2>
		//PRINTF(" ROT LEFT \n\r");
	}else if(cmd == 'K'){ // down
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	2b4b      	cmp	r3, #75	; 0x4b
 8001090:	d109      	bne.n	80010a6 <ESC_followCmd+0xa2>
		ESC_speed->up_value -= 50;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001098:	b29b      	uxth	r3, r3
 800109a:	3b32      	subs	r3, #50	; 0x32
 800109c:	b29b      	uxth	r3, r3
 800109e:	b21a      	sxth	r2, r3
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	811a      	strh	r2, [r3, #8]
 80010a4:	e00f      	b.n	80010c6 <ESC_followCmd+0xc2>
		//PRINTF(" DOWN \n\r");
	}else if(cmd == 'L'){ // rotate right
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	2b4c      	cmp	r3, #76	; 0x4c
 80010aa:	d00c      	beq.n	80010c6 <ESC_followCmd+0xc2>
		//PRINTF(" ROT RIGHT \n\r");
	}else if(cmd == 'X'){ // disarm drone
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	2b58      	cmp	r3, #88	; 0x58
 80010b0:	d103      	bne.n	80010ba <ESC_followCmd+0xb6>
		ESC_speed->state = DISARMED;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	2200      	movs	r2, #0
 80010b6:	729a      	strb	r2, [r3, #10]
 80010b8:	e005      	b.n	80010c6 <ESC_followCmd+0xc2>
		//PRINTF(" DISARM \n\r");
	}else if(cmd == 'C'){ // arms DRONE
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	2b43      	cmp	r3, #67	; 0x43
 80010be:	d102      	bne.n	80010c6 <ESC_followCmd+0xc2>
		ESC_speed->state = ARMED;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	2201      	movs	r2, #1
 80010c4:	729a      	strb	r2, [r3, #10]
		//PRINTF(" ARM \n\r");
	}

	// Security check to avoid dead bodies in the field
	if(MPU_measure->angle_X > 10 || MPU_measure->angle_Y > 10 || MPU_measure->angle_X < -10 || MPU_measure->angle_Y < -10){
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80010cc:	f04f 0200 	mov.w	r2, #0
 80010d0:	4bc9      	ldr	r3, [pc, #804]	; (80013f8 <ESC_followCmd+0x3f4>)
 80010d2:	f7ff fd29 	bl	8000b28 <__aeabi_dcmpgt>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d11f      	bne.n	800111c <ESC_followCmd+0x118>
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80010e2:	f04f 0200 	mov.w	r2, #0
 80010e6:	4bc4      	ldr	r3, [pc, #784]	; (80013f8 <ESC_followCmd+0x3f4>)
 80010e8:	f7ff fd1e 	bl	8000b28 <__aeabi_dcmpgt>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d114      	bne.n	800111c <ESC_followCmd+0x118>
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80010f8:	f04f 0200 	mov.w	r2, #0
 80010fc:	4bbf      	ldr	r3, [pc, #764]	; (80013fc <ESC_followCmd+0x3f8>)
 80010fe:	f7ff fcf5 	bl	8000aec <__aeabi_dcmplt>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d109      	bne.n	800111c <ESC_followCmd+0x118>
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800110e:	f04f 0200 	mov.w	r2, #0
 8001112:	4bba      	ldr	r3, [pc, #744]	; (80013fc <ESC_followCmd+0x3f8>)
 8001114:	f7ff fcea 	bl	8000aec <__aeabi_dcmplt>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
		ESC_speed->state == DISARMED;
	}

	if(ESC_speed->state == ARMED){
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	7a9b      	ldrb	r3, [r3, #10]
 8001120:	2b01      	cmp	r3, #1
 8001122:	f040 819b 	bne.w	800145c <ESC_followCmd+0x458>

		double pitch_err   = 0;//cmd_pitch - MPU_measure->angle_X;
 8001126:	f04f 0200 	mov.w	r2, #0
 800112a:	f04f 0300 	mov.w	r3, #0
 800112e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		double pitch_d_err = 0;//MPU_measure->gyro_angle_dX;
 8001132:	f04f 0200 	mov.w	r2, #0
 8001136:	f04f 0300 	mov.w	r3, #0
 800113a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		double roll_err    = 0;//cmd_roll  - MPU_measure->angle_Y;
 800113e:	f04f 0200 	mov.w	r2, #0
 8001142:	f04f 0300 	mov.w	r3, #0
 8001146:	e9c7 2308 	strd	r2, r3, [r7, #32]
		double roll_d_err  = 0;//MPU_measure->gyro_angle_dY;
 800114a:	f04f 0200 	mov.w	r2, #0
 800114e:	f04f 0300 	mov.w	r3, #0
 8001152:	e9c7 2306 	strd	r2, r3, [r7, #24]

		int16_t FR_tmp = ESC_speed->up_value + pitch_err*P_pitch - pitch_d_err*D_pitch - roll_err*P_roll + roll_d_err*D_roll;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff f9e9 	bl	8000534 <__aeabi_i2d>
 8001162:	4604      	mov	r4, r0
 8001164:	460d      	mov	r5, r1
 8001166:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001168:	f7ff f9e4 	bl	8000534 <__aeabi_i2d>
 800116c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001170:	f7ff fa4a 	bl	8000608 <__aeabi_dmul>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4620      	mov	r0, r4
 800117a:	4629      	mov	r1, r5
 800117c:	f7ff f88e 	bl	800029c <__adddf3>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	4614      	mov	r4, r2
 8001186:	461d      	mov	r5, r3
 8001188:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800118a:	f7ff f9d3 	bl	8000534 <__aeabi_i2d>
 800118e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001192:	f7ff fa39 	bl	8000608 <__aeabi_dmul>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	4620      	mov	r0, r4
 800119c:	4629      	mov	r1, r5
 800119e:	f7ff f87b 	bl	8000298 <__aeabi_dsub>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	4614      	mov	r4, r2
 80011a8:	461d      	mov	r5, r3
 80011aa:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80011ac:	f7ff f9c2 	bl	8000534 <__aeabi_i2d>
 80011b0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80011b4:	f7ff fa28 	bl	8000608 <__aeabi_dmul>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	4620      	mov	r0, r4
 80011be:	4629      	mov	r1, r5
 80011c0:	f7ff f86a 	bl	8000298 <__aeabi_dsub>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4614      	mov	r4, r2
 80011ca:	461d      	mov	r5, r3
 80011cc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80011ce:	f7ff f9b1 	bl	8000534 <__aeabi_i2d>
 80011d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80011d6:	f7ff fa17 	bl	8000608 <__aeabi_dmul>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	4620      	mov	r0, r4
 80011e0:	4629      	mov	r1, r5
 80011e2:	f7ff f85b 	bl	800029c <__adddf3>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	4610      	mov	r0, r2
 80011ec:	4619      	mov	r1, r3
 80011ee:	f7ff fcbb 	bl	8000b68 <__aeabi_d2iz>
 80011f2:	4603      	mov	r3, r0
 80011f4:	82fb      	strh	r3, [r7, #22]
		int16_t FL_tmp = ESC_speed->up_value + pitch_err*P_pitch - pitch_d_err*D_pitch + roll_err*P_roll - roll_d_err*D_roll;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff f999 	bl	8000534 <__aeabi_i2d>
 8001202:	4604      	mov	r4, r0
 8001204:	460d      	mov	r5, r1
 8001206:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001208:	f7ff f994 	bl	8000534 <__aeabi_i2d>
 800120c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001210:	f7ff f9fa 	bl	8000608 <__aeabi_dmul>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4620      	mov	r0, r4
 800121a:	4629      	mov	r1, r5
 800121c:	f7ff f83e 	bl	800029c <__adddf3>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4614      	mov	r4, r2
 8001226:	461d      	mov	r5, r3
 8001228:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800122a:	f7ff f983 	bl	8000534 <__aeabi_i2d>
 800122e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001232:	f7ff f9e9 	bl	8000608 <__aeabi_dmul>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	4620      	mov	r0, r4
 800123c:	4629      	mov	r1, r5
 800123e:	f7ff f82b 	bl	8000298 <__aeabi_dsub>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	4614      	mov	r4, r2
 8001248:	461d      	mov	r5, r3
 800124a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800124c:	f7ff f972 	bl	8000534 <__aeabi_i2d>
 8001250:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001254:	f7ff f9d8 	bl	8000608 <__aeabi_dmul>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	4620      	mov	r0, r4
 800125e:	4629      	mov	r1, r5
 8001260:	f7ff f81c 	bl	800029c <__adddf3>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4614      	mov	r4, r2
 800126a:	461d      	mov	r5, r3
 800126c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800126e:	f7ff f961 	bl	8000534 <__aeabi_i2d>
 8001272:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001276:	f7ff f9c7 	bl	8000608 <__aeabi_dmul>
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	4620      	mov	r0, r4
 8001280:	4629      	mov	r1, r5
 8001282:	f7ff f809 	bl	8000298 <__aeabi_dsub>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	4610      	mov	r0, r2
 800128c:	4619      	mov	r1, r3
 800128e:	f7ff fc6b 	bl	8000b68 <__aeabi_d2iz>
 8001292:	4603      	mov	r3, r0
 8001294:	82bb      	strh	r3, [r7, #20]
		int16_t RR_tmp = ESC_speed->up_value - pitch_err*P_pitch + pitch_d_err*D_pitch - roll_err*P_roll + roll_d_err*D_roll;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff f949 	bl	8000534 <__aeabi_i2d>
 80012a2:	4604      	mov	r4, r0
 80012a4:	460d      	mov	r5, r1
 80012a6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80012a8:	f7ff f944 	bl	8000534 <__aeabi_i2d>
 80012ac:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80012b0:	f7ff f9aa 	bl	8000608 <__aeabi_dmul>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	4620      	mov	r0, r4
 80012ba:	4629      	mov	r1, r5
 80012bc:	f7fe ffec 	bl	8000298 <__aeabi_dsub>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4614      	mov	r4, r2
 80012c6:	461d      	mov	r5, r3
 80012c8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80012ca:	f7ff f933 	bl	8000534 <__aeabi_i2d>
 80012ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80012d2:	f7ff f999 	bl	8000608 <__aeabi_dmul>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	4620      	mov	r0, r4
 80012dc:	4629      	mov	r1, r5
 80012de:	f7fe ffdd 	bl	800029c <__adddf3>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	4614      	mov	r4, r2
 80012e8:	461d      	mov	r5, r3
 80012ea:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80012ec:	f7ff f922 	bl	8000534 <__aeabi_i2d>
 80012f0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80012f4:	f7ff f988 	bl	8000608 <__aeabi_dmul>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4620      	mov	r0, r4
 80012fe:	4629      	mov	r1, r5
 8001300:	f7fe ffca 	bl	8000298 <__aeabi_dsub>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	4614      	mov	r4, r2
 800130a:	461d      	mov	r5, r3
 800130c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800130e:	f7ff f911 	bl	8000534 <__aeabi_i2d>
 8001312:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001316:	f7ff f977 	bl	8000608 <__aeabi_dmul>
 800131a:	4602      	mov	r2, r0
 800131c:	460b      	mov	r3, r1
 800131e:	4620      	mov	r0, r4
 8001320:	4629      	mov	r1, r5
 8001322:	f7fe ffbb 	bl	800029c <__adddf3>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	4610      	mov	r0, r2
 800132c:	4619      	mov	r1, r3
 800132e:	f7ff fc1b 	bl	8000b68 <__aeabi_d2iz>
 8001332:	4603      	mov	r3, r0
 8001334:	827b      	strh	r3, [r7, #18]
		int16_t RL_tmp = ESC_speed->up_value - pitch_err*P_pitch + pitch_d_err*D_pitch + roll_err*P_roll - roll_d_err*D_roll;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff f8f9 	bl	8000534 <__aeabi_i2d>
 8001342:	4604      	mov	r4, r0
 8001344:	460d      	mov	r5, r1
 8001346:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001348:	f7ff f8f4 	bl	8000534 <__aeabi_i2d>
 800134c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001350:	f7ff f95a 	bl	8000608 <__aeabi_dmul>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	4620      	mov	r0, r4
 800135a:	4629      	mov	r1, r5
 800135c:	f7fe ff9c 	bl	8000298 <__aeabi_dsub>
 8001360:	4602      	mov	r2, r0
 8001362:	460b      	mov	r3, r1
 8001364:	4614      	mov	r4, r2
 8001366:	461d      	mov	r5, r3
 8001368:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800136a:	f7ff f8e3 	bl	8000534 <__aeabi_i2d>
 800136e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001372:	f7ff f949 	bl	8000608 <__aeabi_dmul>
 8001376:	4602      	mov	r2, r0
 8001378:	460b      	mov	r3, r1
 800137a:	4620      	mov	r0, r4
 800137c:	4629      	mov	r1, r5
 800137e:	f7fe ff8d 	bl	800029c <__adddf3>
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	4614      	mov	r4, r2
 8001388:	461d      	mov	r5, r3
 800138a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800138c:	f7ff f8d2 	bl	8000534 <__aeabi_i2d>
 8001390:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001394:	f7ff f938 	bl	8000608 <__aeabi_dmul>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	4620      	mov	r0, r4
 800139e:	4629      	mov	r1, r5
 80013a0:	f7fe ff7c 	bl	800029c <__adddf3>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	4614      	mov	r4, r2
 80013aa:	461d      	mov	r5, r3
 80013ac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80013ae:	f7ff f8c1 	bl	8000534 <__aeabi_i2d>
 80013b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013b6:	f7ff f927 	bl	8000608 <__aeabi_dmul>
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	4620      	mov	r0, r4
 80013c0:	4629      	mov	r1, r5
 80013c2:	f7fe ff69 	bl	8000298 <__aeabi_dsub>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	4610      	mov	r0, r2
 80013cc:	4619      	mov	r1, r3
 80013ce:	f7ff fbcb 	bl	8000b68 <__aeabi_d2iz>
 80013d2:	4603      	mov	r3, r0
 80013d4:	823b      	strh	r3, [r7, #16]

		if(FR_tmp > low_lim && FR_tmp < high_lim){
 80013d6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80013da:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80013de:	429a      	cmp	r2, r3
 80013e0:	dd0e      	ble.n	8001400 <ESC_followCmd+0x3fc>
 80013e2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80013e6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80013ea:	429a      	cmp	r2, r3
 80013ec:	da08      	bge.n	8001400 <ESC_followCmd+0x3fc>
			ESC_speed->FR = FR_tmp;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	8afa      	ldrh	r2, [r7, #22]
 80013f2:	801a      	strh	r2, [r3, #0]
 80013f4:	e004      	b.n	8001400 <ESC_followCmd+0x3fc>
 80013f6:	bf00      	nop
 80013f8:	40240000 	.word	0x40240000
 80013fc:	c0240000 	.word	0xc0240000
		}

		if(FL_tmp > low_lim && FL_tmp < high_lim){
 8001400:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001404:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8001408:	429a      	cmp	r2, r3
 800140a:	dd08      	ble.n	800141e <ESC_followCmd+0x41a>
 800140c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001410:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8001414:	429a      	cmp	r2, r3
 8001416:	da02      	bge.n	800141e <ESC_followCmd+0x41a>
			ESC_speed->FL = FL_tmp;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	8aba      	ldrh	r2, [r7, #20]
 800141c:	805a      	strh	r2, [r3, #2]
		}

		if(RR_tmp > low_lim && RR_tmp < high_lim){
 800141e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001422:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8001426:	429a      	cmp	r2, r3
 8001428:	dd08      	ble.n	800143c <ESC_followCmd+0x438>
 800142a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800142e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8001432:	429a      	cmp	r2, r3
 8001434:	da02      	bge.n	800143c <ESC_followCmd+0x438>
			ESC_speed->RR = RR_tmp;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	8a7a      	ldrh	r2, [r7, #18]
 800143a:	809a      	strh	r2, [r3, #4]
		}

		if(RL_tmp > low_lim && RL_tmp < high_lim){
 800143c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001440:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8001444:	429a      	cmp	r2, r3
 8001446:	dd1c      	ble.n	8001482 <ESC_followCmd+0x47e>
 8001448:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800144c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8001450:	429a      	cmp	r2, r3
 8001452:	da16      	bge.n	8001482 <ESC_followCmd+0x47e>
			ESC_speed->RL = RL_tmp;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	8a3a      	ldrh	r2, [r7, #16]
 8001458:	80da      	strh	r2, [r3, #6]
		ESC_speed->FL = 0;
		ESC_speed->RR = 0;
		ESC_speed->RL = 0;
		ESC_speed->up_value =0;
	}
}
 800145a:	e012      	b.n	8001482 <ESC_followCmd+0x47e>
	}else if(ESC_speed->state == DISARMED){
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	7a9b      	ldrb	r3, [r3, #10]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d10e      	bne.n	8001482 <ESC_followCmd+0x47e>
		ESC_speed->FR = 0;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2200      	movs	r2, #0
 8001468:	801a      	strh	r2, [r3, #0]
		ESC_speed->FL = 0;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	2200      	movs	r2, #0
 800146e:	805a      	strh	r2, [r3, #2]
		ESC_speed->RR = 0;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2200      	movs	r2, #0
 8001474:	809a      	strh	r2, [r3, #4]
		ESC_speed->RL = 0;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2200      	movs	r2, #0
 800147a:	80da      	strh	r2, [r3, #6]
		ESC_speed->up_value =0;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2200      	movs	r2, #0
 8001480:	811a      	strh	r2, [r3, #8]
}
 8001482:	bf00      	nop
 8001484:	3758      	adds	r7, #88	; 0x58
 8001486:	46bd      	mov	sp, r7
 8001488:	bdb0      	pop	{r4, r5, r7, pc}
 800148a:	bf00      	nop

0800148c <ESC_setSpeed>:


void ESC_setSpeed(ESC_CONF * ESC_speed){
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]

	TIM3->CCR1 = ESC_speed->FR + PWM_1_MS;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f9b3 3000 	ldrsh.w	r3, [r3]
 800149a:	f503 6296 	add.w	r2, r3, #1200	; 0x4b0
 800149e:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <ESC_setSpeed+0x4c>)
 80014a0:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = ESC_speed->FL + PWM_1_MS;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80014a8:	f503 6296 	add.w	r2, r3, #1200	; 0x4b0
 80014ac:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <ESC_setSpeed+0x4c>)
 80014ae:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR3 = ESC_speed->RR + PWM_1_MS;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80014b6:	f503 6296 	add.w	r2, r3, #1200	; 0x4b0
 80014ba:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <ESC_setSpeed+0x4c>)
 80014bc:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM3->CCR4 = ESC_speed->RL + PWM_1_MS;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80014c4:	f503 6296 	add.w	r2, r3, #1200	; 0x4b0
 80014c8:	4b03      	ldr	r3, [pc, #12]	; (80014d8 <ESC_setSpeed+0x4c>)
 80014ca:	641a      	str	r2, [r3, #64]	; 0x40
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	40000400 	.word	0x40000400

080014dc <MPU6050_Init>:





void MPU6050_Init(void){
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af04      	add	r7, sp, #16

	uint8_t check = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	71fb      	strb	r3, [r7, #7]
	uint8_t data;

	// Reads from address if device is connected
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 500);
 80014e6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80014ea:	9302      	str	r3, [sp, #8]
 80014ec:	2301      	movs	r3, #1
 80014ee:	9301      	str	r3, [sp, #4]
 80014f0:	1dfb      	adds	r3, r7, #7
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	2301      	movs	r3, #1
 80014f6:	2275      	movs	r2, #117	; 0x75
 80014f8:	21d0      	movs	r1, #208	; 0xd0
 80014fa:	4826      	ldr	r0, [pc, #152]	; (8001594 <MPU6050_Init+0xb8>)
 80014fc:	f001 ff74 	bl	80033e8 <HAL_I2C_Mem_Read>

	if(check == 104){
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	2b68      	cmp	r3, #104	; 0x68
 8001504:	d141      	bne.n	800158a <MPU6050_Init+0xae>
		//PRINTF("MPU6050 initialized \n\r");

		// exit SLEEP mode
		data=0;
 8001506:	2300      	movs	r3, #0
 8001508:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, 500);
 800150a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800150e:	9302      	str	r3, [sp, #8]
 8001510:	2301      	movs	r3, #1
 8001512:	9301      	str	r3, [sp, #4]
 8001514:	1dbb      	adds	r3, r7, #6
 8001516:	9300      	str	r3, [sp, #0]
 8001518:	2301      	movs	r3, #1
 800151a:	226b      	movs	r2, #107	; 0x6b
 800151c:	21d0      	movs	r1, #208	; 0xd0
 800151e:	481d      	ldr	r0, [pc, #116]	; (8001594 <MPU6050_Init+0xb8>)
 8001520:	f001 fe68 	bl	80031f4 <HAL_I2C_Mem_Write>

		// sample frequency = 8 kHZ
		data = 0X07;
 8001524:	2307      	movs	r3, #7
 8001526:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, 500);
 8001528:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800152c:	9302      	str	r3, [sp, #8]
 800152e:	2301      	movs	r3, #1
 8001530:	9301      	str	r3, [sp, #4]
 8001532:	1dbb      	adds	r3, r7, #6
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	2301      	movs	r3, #1
 8001538:	2219      	movs	r2, #25
 800153a:	21d0      	movs	r1, #208	; 0xd0
 800153c:	4815      	ldr	r0, [pc, #84]	; (8001594 <MPU6050_Init+0xb8>)
 800153e:	f001 fe59 	bl	80031f4 <HAL_I2C_Mem_Write>
		// set the MPU digital low pass filter to 250 Hz
		//data = 0X01;
		//HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, CONFIG, 1, &data, 1, 500);

		// Set up the ACC config (full scale and auto test)
		data = 0x08;
 8001542:	2308      	movs	r3, #8
 8001544:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, 500);
 8001546:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800154a:	9302      	str	r3, [sp, #8]
 800154c:	2301      	movs	r3, #1
 800154e:	9301      	str	r3, [sp, #4]
 8001550:	1dbb      	adds	r3, r7, #6
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	2301      	movs	r3, #1
 8001556:	221c      	movs	r2, #28
 8001558:	21d0      	movs	r1, #208	; 0xd0
 800155a:	480e      	ldr	r0, [pc, #56]	; (8001594 <MPU6050_Init+0xb8>)
 800155c:	f001 fe4a 	bl	80031f4 <HAL_I2C_Mem_Write>


		// Set up the GYRO config (full scale)
		data = 0x08;
 8001560:	2308      	movs	r3, #8
 8001562:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, 500);
 8001564:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001568:	9302      	str	r3, [sp, #8]
 800156a:	2301      	movs	r3, #1
 800156c:	9301      	str	r3, [sp, #4]
 800156e:	1dbb      	adds	r3, r7, #6
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	2301      	movs	r3, #1
 8001574:	221b      	movs	r2, #27
 8001576:	21d0      	movs	r1, #208	; 0xd0
 8001578:	4806      	ldr	r0, [pc, #24]	; (8001594 <MPU6050_Init+0xb8>)
 800157a:	f001 fe3b 	bl	80031f4 <HAL_I2C_Mem_Write>

		GYRO_STATE = READY;
 800157e:	4b06      	ldr	r3, [pc, #24]	; (8001598 <MPU6050_Init+0xbc>)
 8001580:	2202      	movs	r2, #2
 8001582:	701a      	strb	r2, [r3, #0]
		ACC_STATE = READY;
 8001584:	4b05      	ldr	r3, [pc, #20]	; (800159c <MPU6050_Init+0xc0>)
 8001586:	2202      	movs	r2, #2
 8001588:	701a      	strb	r2, [r3, #0]
	}
}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	200002e8 	.word	0x200002e8
 8001598:	200001fd 	.word	0x200001fd
 800159c:	200001fc 	.word	0x200001fc

080015a0 <MPU6050_Reset>:


void MPU6050_Reset(IMU_MEASURE * measures){
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]

	// Measures from the accelerometer
	measures->acc_X = 0;
 80015a8:	6879      	ldr	r1, [r7, #4]
 80015aa:	f04f 0200 	mov.w	r2, #0
 80015ae:	f04f 0300 	mov.w	r3, #0
 80015b2:	e9c1 2300 	strd	r2, r3, [r1]
	measures->acc_Y = 0;
 80015b6:	6879      	ldr	r1, [r7, #4]
 80015b8:	f04f 0200 	mov.w	r2, #0
 80015bc:	f04f 0300 	mov.w	r3, #0
 80015c0:	e9c1 2302 	strd	r2, r3, [r1, #8]
	measures->acc_Z = 0;
 80015c4:	6879      	ldr	r1, [r7, #4]
 80015c6:	f04f 0200 	mov.w	r2, #0
 80015ca:	f04f 0300 	mov.w	r3, #0
 80015ce:	e9c1 2304 	strd	r2, r3, [r1, #16]

	measures->acc_angle_X = 0;
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	f04f 0200 	mov.w	r2, #0
 80015d8:	f04f 0300 	mov.w	r3, #0
 80015dc:	e9c1 2306 	strd	r2, r3, [r1, #24]
	measures->acc_angle_Y = 0;
 80015e0:	6879      	ldr	r1, [r7, #4]
 80015e2:	f04f 0200 	mov.w	r2, #0
 80015e6:	f04f 0300 	mov.w	r3, #0
 80015ea:	e9c1 2308 	strd	r2, r3, [r1, #32]
	measures->acc_angle_Z = 0;
 80015ee:	6879      	ldr	r1, [r7, #4]
 80015f0:	f04f 0200 	mov.w	r2, #0
 80015f4:	f04f 0300 	mov.w	r3, #0
 80015f8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	// Measures from the gyroscope
	measures->gyro_X = 0;
 80015fc:	6879      	ldr	r1, [r7, #4]
 80015fe:	f04f 0200 	mov.w	r2, #0
 8001602:	f04f 0300 	mov.w	r3, #0
 8001606:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	measures->gyro_Y = 0;
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	f04f 0200 	mov.w	r2, #0
 8001610:	f04f 0300 	mov.w	r3, #0
 8001614:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	measures->gyro_Z = 0;
 8001618:	6879      	ldr	r1, [r7, #4]
 800161a:	f04f 0200 	mov.w	r2, #0
 800161e:	f04f 0300 	mov.w	r3, #0
 8001622:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	measures->gyro_angle_X = 0;
 8001626:	6879      	ldr	r1, [r7, #4]
 8001628:	f04f 0200 	mov.w	r2, #0
 800162c:	f04f 0300 	mov.w	r3, #0
 8001630:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	measures->gyro_angle_Y = 0;
 8001634:	6879      	ldr	r1, [r7, #4]
 8001636:	f04f 0200 	mov.w	r2, #0
 800163a:	f04f 0300 	mov.w	r3, #0
 800163e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	measures->gyro_angle_Z = 0;
 8001642:	6879      	ldr	r1, [r7, #4]
 8001644:	f04f 0200 	mov.w	r2, #0
 8001648:	f04f 0300 	mov.w	r3, #0
 800164c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

	// Angle measure after the sensor fusion
	measures->angle_X = 0;
 8001650:	6879      	ldr	r1, [r7, #4]
 8001652:	f04f 0200 	mov.w	r2, #0
 8001656:	f04f 0300 	mov.w	r3, #0
 800165a:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	measures->angle_Y = 0;
 800165e:	6879      	ldr	r1, [r7, #4]
 8001660:	f04f 0200 	mov.w	r2, #0
 8001664:	f04f 0300 	mov.w	r3, #0
 8001668:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	measures->angle_Z = 0;
 800166c:	6879      	ldr	r1, [r7, #4]
 800166e:	f04f 0200 	mov.w	r2, #0
 8001672:	f04f 0300 	mov.w	r3, #0
 8001676:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
}
 800167a:	bf00      	nop
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
	...

08001688 <MPU6050_ReadAcc>:


// Read ACCELEROMETER data
void MPU6050_ReadAcc(IMU_MEASURE * measures){
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af04      	add	r7, sp, #16
 800168e:	6078      	str	r0, [r7, #4]

	if(ACC_STATE == DISABLED) return;
 8001690:	4b33      	ldr	r3, [pc, #204]	; (8001760 <MPU6050_ReadAcc+0xd8>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d05e      	beq.n	8001756 <MPU6050_ReadAcc+0xce>

	// Read data
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, rec_data1, 6, 500);
 8001698:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800169c:	9302      	str	r3, [sp, #8]
 800169e:	2306      	movs	r3, #6
 80016a0:	9301      	str	r3, [sp, #4]
 80016a2:	4b30      	ldr	r3, [pc, #192]	; (8001764 <MPU6050_ReadAcc+0xdc>)
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	2301      	movs	r3, #1
 80016a8:	223b      	movs	r2, #59	; 0x3b
 80016aa:	21d0      	movs	r1, #208	; 0xd0
 80016ac:	482e      	ldr	r0, [pc, #184]	; (8001768 <MPU6050_ReadAcc+0xe0>)
 80016ae:	f001 fe9b 	bl	80033e8 <HAL_I2C_Mem_Read>

	// Parse data
	acc_X_raw = (int16_t)(rec_data1[0] << 8 | rec_data1[1]);
 80016b2:	4b2c      	ldr	r3, [pc, #176]	; (8001764 <MPU6050_ReadAcc+0xdc>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	021b      	lsls	r3, r3, #8
 80016b8:	b21a      	sxth	r2, r3
 80016ba:	4b2a      	ldr	r3, [pc, #168]	; (8001764 <MPU6050_ReadAcc+0xdc>)
 80016bc:	785b      	ldrb	r3, [r3, #1]
 80016be:	b21b      	sxth	r3, r3
 80016c0:	4313      	orrs	r3, r2
 80016c2:	b21a      	sxth	r2, r3
 80016c4:	4b29      	ldr	r3, [pc, #164]	; (800176c <MPU6050_ReadAcc+0xe4>)
 80016c6:	801a      	strh	r2, [r3, #0]
	acc_Y_raw = (int16_t)(rec_data1[2] << 8 | rec_data1[3]);
 80016c8:	4b26      	ldr	r3, [pc, #152]	; (8001764 <MPU6050_ReadAcc+0xdc>)
 80016ca:	789b      	ldrb	r3, [r3, #2]
 80016cc:	021b      	lsls	r3, r3, #8
 80016ce:	b21a      	sxth	r2, r3
 80016d0:	4b24      	ldr	r3, [pc, #144]	; (8001764 <MPU6050_ReadAcc+0xdc>)
 80016d2:	78db      	ldrb	r3, [r3, #3]
 80016d4:	b21b      	sxth	r3, r3
 80016d6:	4313      	orrs	r3, r2
 80016d8:	b21a      	sxth	r2, r3
 80016da:	4b25      	ldr	r3, [pc, #148]	; (8001770 <MPU6050_ReadAcc+0xe8>)
 80016dc:	801a      	strh	r2, [r3, #0]
	acc_Z_raw = (int16_t)(rec_data1[4] << 8 | rec_data1[5]);
 80016de:	4b21      	ldr	r3, [pc, #132]	; (8001764 <MPU6050_ReadAcc+0xdc>)
 80016e0:	791b      	ldrb	r3, [r3, #4]
 80016e2:	021b      	lsls	r3, r3, #8
 80016e4:	b21a      	sxth	r2, r3
 80016e6:	4b1f      	ldr	r3, [pc, #124]	; (8001764 <MPU6050_ReadAcc+0xdc>)
 80016e8:	795b      	ldrb	r3, [r3, #5]
 80016ea:	b21b      	sxth	r3, r3
 80016ec:	4313      	orrs	r3, r2
 80016ee:	b21a      	sxth	r2, r3
 80016f0:	4b20      	ldr	r3, [pc, #128]	; (8001774 <MPU6050_ReadAcc+0xec>)
 80016f2:	801a      	strh	r2, [r3, #0]

	// Scale data
	measures->acc_X = (double)acc_X_raw/ACC_SCALE_FACTOR;
 80016f4:	4b1d      	ldr	r3, [pc, #116]	; (800176c <MPU6050_ReadAcc+0xe4>)
 80016f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7fe ff1a 	bl	8000534 <__aeabi_i2d>
 8001700:	f04f 0200 	mov.w	r2, #0
 8001704:	4b1c      	ldr	r3, [pc, #112]	; (8001778 <MPU6050_ReadAcc+0xf0>)
 8001706:	f7ff f8a9 	bl	800085c <__aeabi_ddiv>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	6879      	ldr	r1, [r7, #4]
 8001710:	e9c1 2300 	strd	r2, r3, [r1]
	measures->acc_Y = (double)acc_Y_raw/ACC_SCALE_FACTOR;
 8001714:	4b16      	ldr	r3, [pc, #88]	; (8001770 <MPU6050_ReadAcc+0xe8>)
 8001716:	f9b3 3000 	ldrsh.w	r3, [r3]
 800171a:	4618      	mov	r0, r3
 800171c:	f7fe ff0a 	bl	8000534 <__aeabi_i2d>
 8001720:	f04f 0200 	mov.w	r2, #0
 8001724:	4b14      	ldr	r3, [pc, #80]	; (8001778 <MPU6050_ReadAcc+0xf0>)
 8001726:	f7ff f899 	bl	800085c <__aeabi_ddiv>
 800172a:	4602      	mov	r2, r0
 800172c:	460b      	mov	r3, r1
 800172e:	6879      	ldr	r1, [r7, #4]
 8001730:	e9c1 2302 	strd	r2, r3, [r1, #8]
	measures->acc_Z = (double)acc_Z_raw/ACC_SCALE_FACTOR;
 8001734:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <MPU6050_ReadAcc+0xec>)
 8001736:	f9b3 3000 	ldrsh.w	r3, [r3]
 800173a:	4618      	mov	r0, r3
 800173c:	f7fe fefa 	bl	8000534 <__aeabi_i2d>
 8001740:	f04f 0200 	mov.w	r2, #0
 8001744:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <MPU6050_ReadAcc+0xf0>)
 8001746:	f7ff f889 	bl	800085c <__aeabi_ddiv>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001754:	e000      	b.n	8001758 <MPU6050_ReadAcc+0xd0>
	if(ACC_STATE == DISABLED) return;
 8001756:	bf00      	nop
}
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	200001fc 	.word	0x200001fc
 8001764:	200002d0 	.word	0x200002d0
 8001768:	200002e8 	.word	0x200002e8
 800176c:	200002d6 	.word	0x200002d6
 8001770:	200002c0 	.word	0x200002c0
 8001774:	200002b8 	.word	0x200002b8
 8001778:	40c00000 	.word	0x40c00000
 800177c:	00000000 	.word	0x00000000

08001780 <MPU6050_ReadGyro>:





void MPU6050_ReadGyro(IMU_MEASURE * MPU_measure){
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af04      	add	r7, sp, #16
 8001786:	6078      	str	r0, [r7, #4]

	if(GYRO_STATE == DISABLED) return;
 8001788:	4b35      	ldr	r3, [pc, #212]	; (8001860 <MPU6050_ReadGyro+0xe0>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d05e      	beq.n	800184e <MPU6050_ReadGyro+0xce>

	// Read data
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, rec_data2, 6, 500);
 8001790:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001794:	9302      	str	r3, [sp, #8]
 8001796:	2306      	movs	r3, #6
 8001798:	9301      	str	r3, [sp, #4]
 800179a:	4b32      	ldr	r3, [pc, #200]	; (8001864 <MPU6050_ReadGyro+0xe4>)
 800179c:	9300      	str	r3, [sp, #0]
 800179e:	2301      	movs	r3, #1
 80017a0:	2243      	movs	r2, #67	; 0x43
 80017a2:	21d0      	movs	r1, #208	; 0xd0
 80017a4:	4830      	ldr	r0, [pc, #192]	; (8001868 <MPU6050_ReadGyro+0xe8>)
 80017a6:	f001 fe1f 	bl	80033e8 <HAL_I2C_Mem_Read>

	// Parse data
	gyro_X_raw = (int16_t)(rec_data2[0] << 8 | rec_data2[1]);
 80017aa:	4b2e      	ldr	r3, [pc, #184]	; (8001864 <MPU6050_ReadGyro+0xe4>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	021b      	lsls	r3, r3, #8
 80017b0:	b21a      	sxth	r2, r3
 80017b2:	4b2c      	ldr	r3, [pc, #176]	; (8001864 <MPU6050_ReadGyro+0xe4>)
 80017b4:	785b      	ldrb	r3, [r3, #1]
 80017b6:	b21b      	sxth	r3, r3
 80017b8:	4313      	orrs	r3, r2
 80017ba:	b21a      	sxth	r2, r3
 80017bc:	4b2b      	ldr	r3, [pc, #172]	; (800186c <MPU6050_ReadGyro+0xec>)
 80017be:	801a      	strh	r2, [r3, #0]
	gyro_Y_raw = (int16_t)(rec_data2[2] << 8 | rec_data2[3]);
 80017c0:	4b28      	ldr	r3, [pc, #160]	; (8001864 <MPU6050_ReadGyro+0xe4>)
 80017c2:	789b      	ldrb	r3, [r3, #2]
 80017c4:	021b      	lsls	r3, r3, #8
 80017c6:	b21a      	sxth	r2, r3
 80017c8:	4b26      	ldr	r3, [pc, #152]	; (8001864 <MPU6050_ReadGyro+0xe4>)
 80017ca:	78db      	ldrb	r3, [r3, #3]
 80017cc:	b21b      	sxth	r3, r3
 80017ce:	4313      	orrs	r3, r2
 80017d0:	b21a      	sxth	r2, r3
 80017d2:	4b27      	ldr	r3, [pc, #156]	; (8001870 <MPU6050_ReadGyro+0xf0>)
 80017d4:	801a      	strh	r2, [r3, #0]
	gyro_Z_raw = (int16_t)(rec_data2[4] << 8 | rec_data2[5]);
 80017d6:	4b23      	ldr	r3, [pc, #140]	; (8001864 <MPU6050_ReadGyro+0xe4>)
 80017d8:	791b      	ldrb	r3, [r3, #4]
 80017da:	021b      	lsls	r3, r3, #8
 80017dc:	b21a      	sxth	r2, r3
 80017de:	4b21      	ldr	r3, [pc, #132]	; (8001864 <MPU6050_ReadGyro+0xe4>)
 80017e0:	795b      	ldrb	r3, [r3, #5]
 80017e2:	b21b      	sxth	r3, r3
 80017e4:	4313      	orrs	r3, r2
 80017e6:	b21a      	sxth	r2, r3
 80017e8:	4b22      	ldr	r3, [pc, #136]	; (8001874 <MPU6050_ReadGyro+0xf4>)
 80017ea:	801a      	strh	r2, [r3, #0]

	// Scale data
	MPU_measure->gyro_X = (double)(gyro_X_raw/GYRO_SCALE_FACTOR);
 80017ec:	4b1f      	ldr	r3, [pc, #124]	; (800186c <MPU6050_ReadGyro+0xec>)
 80017ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7fe fe9e 	bl	8000534 <__aeabi_i2d>
 80017f8:	a317      	add	r3, pc, #92	; (adr r3, 8001858 <MPU6050_ReadGyro+0xd8>)
 80017fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fe:	f7ff f82d 	bl	800085c <__aeabi_ddiv>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	MPU_measure->gyro_Y = (double)(gyro_Y_raw/GYRO_SCALE_FACTOR);
 800180c:	4b18      	ldr	r3, [pc, #96]	; (8001870 <MPU6050_ReadGyro+0xf0>)
 800180e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001812:	4618      	mov	r0, r3
 8001814:	f7fe fe8e 	bl	8000534 <__aeabi_i2d>
 8001818:	a30f      	add	r3, pc, #60	; (adr r3, 8001858 <MPU6050_ReadGyro+0xd8>)
 800181a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181e:	f7ff f81d 	bl	800085c <__aeabi_ddiv>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	6879      	ldr	r1, [r7, #4]
 8001828:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	MPU_measure->gyro_Z = (double)(gyro_Z_raw/GYRO_SCALE_FACTOR);
 800182c:	4b11      	ldr	r3, [pc, #68]	; (8001874 <MPU6050_ReadGyro+0xf4>)
 800182e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001832:	4618      	mov	r0, r3
 8001834:	f7fe fe7e 	bl	8000534 <__aeabi_i2d>
 8001838:	a307      	add	r3, pc, #28	; (adr r3, 8001858 <MPU6050_ReadGyro+0xd8>)
 800183a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183e:	f7ff f80d 	bl	800085c <__aeabi_ddiv>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 800184c:	e000      	b.n	8001850 <MPU6050_ReadGyro+0xd0>
	if(GYRO_STATE == DISABLED) return;
 800184e:	bf00      	nop
}
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	00000000 	.word	0x00000000
 800185c:	40506000 	.word	0x40506000
 8001860:	200001fd 	.word	0x200001fd
 8001864:	20000228 	.word	0x20000228
 8001868:	200002e8 	.word	0x200002e8
 800186c:	200002d8 	.word	0x200002d8
 8001870:	20000240 	.word	0x20000240
 8001874:	20000242 	.word	0x20000242

08001878 <MPU6050_ComplementFilter>:
}




void MPU6050_ComplementFilter(IMU_MEASURE * measures){
 8001878:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800187c:	b084      	sub	sp, #16
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]

	if(GYRO_STATE==READY && ACC_STATE==READY){
 8001882:	4bb7      	ldr	r3, [pc, #732]	; (8001b60 <MPU6050_ComplementFilter+0x2e8>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b02      	cmp	r3, #2
 8001888:	f040 8154 	bne.w	8001b34 <MPU6050_ComplementFilter+0x2bc>
 800188c:	4bb5      	ldr	r3, [pc, #724]	; (8001b64 <MPU6050_ComplementFilter+0x2ec>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b02      	cmp	r3, #2
 8001892:	f040 814f 	bne.w	8001b34 <MPU6050_ComplementFilter+0x2bc>


		// Get angle from accelerometer
		measures->acc_angle_X = atan(measures->acc_X / measures->acc_Z) * RAD_TO_DEG;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	e9d3 0100 	ldrd	r0, r1, [r3]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80018a2:	f7fe ffdb 	bl	800085c <__aeabi_ddiv>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	ec43 2b17 	vmov	d7, r2, r3
 80018ae:	eeb0 0a47 	vmov.f32	s0, s14
 80018b2:	eef0 0a67 	vmov.f32	s1, s15
 80018b6:	f007 fdfb 	bl	80094b0 <atan>
 80018ba:	ec51 0b10 	vmov	r0, r1, d0
 80018be:	f04f 0200 	mov.w	r2, #0
 80018c2:	4ba9      	ldr	r3, [pc, #676]	; (8001b68 <MPU6050_ComplementFilter+0x2f0>)
 80018c4:	f7fe fea0 	bl	8000608 <__aeabi_dmul>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4610      	mov	r0, r2
 80018ce:	4619      	mov	r1, r3
 80018d0:	a39b      	add	r3, pc, #620	; (adr r3, 8001b40 <MPU6050_ComplementFilter+0x2c8>)
 80018d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d6:	f7fe ffc1 	bl	800085c <__aeabi_ddiv>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	e9c1 2306 	strd	r2, r3, [r1, #24]
		measures->acc_angle_Y = asin(measures->acc_X / GRAV_CONST) * RAD_TO_DEG;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018ea:	a397      	add	r3, pc, #604	; (adr r3, 8001b48 <MPU6050_ComplementFilter+0x2d0>)
 80018ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f0:	f7fe ffb4 	bl	800085c <__aeabi_ddiv>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	ec43 2b17 	vmov	d7, r2, r3
 80018fc:	eeb0 0a47 	vmov.f32	s0, s14
 8001900:	eef0 0a67 	vmov.f32	s1, s15
 8001904:	f008 f854 	bl	80099b0 <asin>
 8001908:	ec51 0b10 	vmov	r0, r1, d0
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	4b95      	ldr	r3, [pc, #596]	; (8001b68 <MPU6050_ComplementFilter+0x2f0>)
 8001912:	f7fe fe79 	bl	8000608 <__aeabi_dmul>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	4610      	mov	r0, r2
 800191c:	4619      	mov	r1, r3
 800191e:	a388      	add	r3, pc, #544	; (adr r3, 8001b40 <MPU6050_ComplementFilter+0x2c8>)
 8001920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001924:	f7fe ff9a 	bl	800085c <__aeabi_ddiv>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	6879      	ldr	r1, [r7, #4]
 800192e:	e9c1 2308 	strd	r2, r3, [r1, #32]

		// Get euler angles from gyroscope
		float roll_rate  = measures->gyro_Y + measures->gyro_X*sin(measures->angle_Y)*tan(measures->angle_X) + measures->gyro_Z*cos(measures->angle_Y)*tan(measures->angle_X);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	e9d3 890c 	ldrd	r8, r9, [r3, #48]	; 0x30
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8001944:	eeb0 0a47 	vmov.f32	s0, s14
 8001948:	eef0 0a67 	vmov.f32	s1, s15
 800194c:	f007 ffac 	bl	80098a8 <sin>
 8001950:	ec53 2b10 	vmov	r2, r3, d0
 8001954:	4640      	mov	r0, r8
 8001956:	4649      	mov	r1, r9
 8001958:	f7fe fe56 	bl	8000608 <__aeabi_dmul>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4690      	mov	r8, r2
 8001962:	4699      	mov	r9, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 800196a:	eeb0 0a47 	vmov.f32	s0, s14
 800196e:	eef0 0a67 	vmov.f32	s1, s15
 8001972:	f007 ffed 	bl	8009950 <tan>
 8001976:	ec53 2b10 	vmov	r2, r3, d0
 800197a:	4640      	mov	r0, r8
 800197c:	4649      	mov	r1, r9
 800197e:	f7fe fe43 	bl	8000608 <__aeabi_dmul>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	4620      	mov	r0, r4
 8001988:	4629      	mov	r1, r5
 800198a:	f7fe fc87 	bl	800029c <__adddf3>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	4690      	mov	r8, r2
 8001994:	4699      	mov	r9, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 80019a2:	eeb0 0a47 	vmov.f32	s0, s14
 80019a6:	eef0 0a67 	vmov.f32	s1, s15
 80019aa:	f007 ff21 	bl	80097f0 <cos>
 80019ae:	ec53 2b10 	vmov	r2, r3, d0
 80019b2:	4620      	mov	r0, r4
 80019b4:	4629      	mov	r1, r5
 80019b6:	f7fe fe27 	bl	8000608 <__aeabi_dmul>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	4614      	mov	r4, r2
 80019c0:	461d      	mov	r5, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 80019c8:	eeb0 0a47 	vmov.f32	s0, s14
 80019cc:	eef0 0a67 	vmov.f32	s1, s15
 80019d0:	f007 ffbe 	bl	8009950 <tan>
 80019d4:	ec53 2b10 	vmov	r2, r3, d0
 80019d8:	4620      	mov	r0, r4
 80019da:	4629      	mov	r1, r5
 80019dc:	f7fe fe14 	bl	8000608 <__aeabi_dmul>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	4640      	mov	r0, r8
 80019e6:	4649      	mov	r1, r9
 80019e8:	f7fe fc58 	bl	800029c <__adddf3>
 80019ec:	4602      	mov	r2, r0
 80019ee:	460b      	mov	r3, r1
 80019f0:	4610      	mov	r0, r2
 80019f2:	4619      	mov	r1, r3
 80019f4:	f7ff f8e0 	bl	8000bb8 <__aeabi_d2f>
 80019f8:	4603      	mov	r3, r0
 80019fa:	60fb      	str	r3, [r7, #12]
		float pitch_rate = measures->gyro_X*cos(measures->angle_Y) - measures->gyro_Z*sin(measures->angle_Y);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8001a08:	eeb0 0a47 	vmov.f32	s0, s14
 8001a0c:	eef0 0a67 	vmov.f32	s1, s15
 8001a10:	f007 feee 	bl	80097f0 <cos>
 8001a14:	ec53 2b10 	vmov	r2, r3, d0
 8001a18:	4620      	mov	r0, r4
 8001a1a:	4629      	mov	r1, r5
 8001a1c:	f7fe fdf4 	bl	8000608 <__aeabi_dmul>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4690      	mov	r8, r2
 8001a26:	4699      	mov	r9, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8001a34:	eeb0 0a47 	vmov.f32	s0, s14
 8001a38:	eef0 0a67 	vmov.f32	s1, s15
 8001a3c:	f007 ff34 	bl	80098a8 <sin>
 8001a40:	ec53 2b10 	vmov	r2, r3, d0
 8001a44:	4620      	mov	r0, r4
 8001a46:	4629      	mov	r1, r5
 8001a48:	f7fe fdde 	bl	8000608 <__aeabi_dmul>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	4640      	mov	r0, r8
 8001a52:	4649      	mov	r1, r9
 8001a54:	f7fe fc20 	bl	8000298 <__aeabi_dsub>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4610      	mov	r0, r2
 8001a5e:	4619      	mov	r1, r3
 8001a60:	f7ff f8aa 	bl	8000bb8 <__aeabi_d2f>
 8001a64:	4603      	mov	r3, r0
 8001a66:	60bb      	str	r3, [r7, #8]


		// Actual complementary filter
		measures->angle_X = measures->acc_angle_X*ALPHA_COMP + (1-ALPHA_COMP)*(measures->angle_X + pitch_rate/SAMPL_FREQ);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001a6e:	a338      	add	r3, pc, #224	; (adr r3, 8001b50 <MPU6050_ComplementFilter+0x2d8>)
 8001a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a74:	f7fe fdc8 	bl	8000608 <__aeabi_dmul>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4690      	mov	r8, r2
 8001a7e:	4699      	mov	r9, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	e9d3 4518 	ldrd	r4, r5, [r3, #96]	; 0x60
 8001a86:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a8a:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8001b6c <MPU6050_ComplementFilter+0x2f4>
 8001a8e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001a92:	ee16 0a90 	vmov	r0, s13
 8001a96:	f7fe fd5f 	bl	8000558 <__aeabi_f2d>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4620      	mov	r0, r4
 8001aa0:	4629      	mov	r1, r5
 8001aa2:	f7fe fbfb 	bl	800029c <__adddf3>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4610      	mov	r0, r2
 8001aac:	4619      	mov	r1, r3
 8001aae:	a32a      	add	r3, pc, #168	; (adr r3, 8001b58 <MPU6050_ComplementFilter+0x2e0>)
 8001ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab4:	f7fe fda8 	bl	8000608 <__aeabi_dmul>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	4640      	mov	r0, r8
 8001abe:	4649      	mov	r1, r9
 8001ac0:	f7fe fbec 	bl	800029c <__adddf3>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	6879      	ldr	r1, [r7, #4]
 8001aca:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
		measures->angle_Y = measures->acc_angle_Y*ALPHA_COMP + (1-ALPHA_COMP)*(measures->angle_Y + roll_rate/SAMPL_FREQ);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001ad4:	a31e      	add	r3, pc, #120	; (adr r3, 8001b50 <MPU6050_ComplementFilter+0x2d8>)
 8001ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ada:	f7fe fd95 	bl	8000608 <__aeabi_dmul>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	4690      	mov	r8, r2
 8001ae4:	4699      	mov	r9, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	e9d3 451a 	ldrd	r4, r5, [r3, #104]	; 0x68
 8001aec:	edd7 7a03 	vldr	s15, [r7, #12]
 8001af0:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001b6c <MPU6050_ComplementFilter+0x2f4>
 8001af4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001af8:	ee16 0a90 	vmov	r0, s13
 8001afc:	f7fe fd2c 	bl	8000558 <__aeabi_f2d>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	4620      	mov	r0, r4
 8001b06:	4629      	mov	r1, r5
 8001b08:	f7fe fbc8 	bl	800029c <__adddf3>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	4610      	mov	r0, r2
 8001b12:	4619      	mov	r1, r3
 8001b14:	a310      	add	r3, pc, #64	; (adr r3, 8001b58 <MPU6050_ComplementFilter+0x2e0>)
 8001b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b1a:	f7fe fd75 	bl	8000608 <__aeabi_dmul>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	460b      	mov	r3, r1
 8001b22:	4640      	mov	r0, r8
 8001b24:	4649      	mov	r1, r9
 8001b26:	f7fe fbb9 	bl	800029c <__adddf3>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	6879      	ldr	r1, [r7, #4]
 8001b30:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	}
}
 8001b34:	bf00      	nop
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b3e:	bf00      	nop
 8001b40:	53c8d4f1 	.word	0x53c8d4f1
 8001b44:	400921fb 	.word	0x400921fb
 8001b48:	51eb851f 	.word	0x51eb851f
 8001b4c:	40239eb8 	.word	0x40239eb8
 8001b50:	47ae147b 	.word	0x47ae147b
 8001b54:	3f847ae1 	.word	0x3f847ae1
 8001b58:	7ae147ae 	.word	0x7ae147ae
 8001b5c:	3fefae14 	.word	0x3fefae14
 8001b60:	200001fd 	.word	0x200001fd
 8001b64:	200001fc 	.word	0x200001fc
 8001b68:	40668000 	.word	0x40668000
 8001b6c:	437a0000 	.word	0x437a0000

08001b70 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08a      	sub	sp, #40	; 0x28
 8001b74:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b76:	f107 0314 	add.w	r3, r7, #20
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	605a      	str	r2, [r3, #4]
 8001b80:	609a      	str	r2, [r3, #8]
 8001b82:	60da      	str	r2, [r3, #12]
 8001b84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	613b      	str	r3, [r7, #16]
 8001b8a:	4b3b      	ldr	r3, [pc, #236]	; (8001c78 <MX_GPIO_Init+0x108>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	4a3a      	ldr	r2, [pc, #232]	; (8001c78 <MX_GPIO_Init+0x108>)
 8001b90:	f043 0304 	orr.w	r3, r3, #4
 8001b94:	6313      	str	r3, [r2, #48]	; 0x30
 8001b96:	4b38      	ldr	r3, [pc, #224]	; (8001c78 <MX_GPIO_Init+0x108>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	f003 0304 	and.w	r3, r3, #4
 8001b9e:	613b      	str	r3, [r7, #16]
 8001ba0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	4b34      	ldr	r3, [pc, #208]	; (8001c78 <MX_GPIO_Init+0x108>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	4a33      	ldr	r2, [pc, #204]	; (8001c78 <MX_GPIO_Init+0x108>)
 8001bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb2:	4b31      	ldr	r3, [pc, #196]	; (8001c78 <MX_GPIO_Init+0x108>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60bb      	str	r3, [r7, #8]
 8001bc2:	4b2d      	ldr	r3, [pc, #180]	; (8001c78 <MX_GPIO_Init+0x108>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	4a2c      	ldr	r2, [pc, #176]	; (8001c78 <MX_GPIO_Init+0x108>)
 8001bc8:	f043 0301 	orr.w	r3, r3, #1
 8001bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bce:	4b2a      	ldr	r3, [pc, #168]	; (8001c78 <MX_GPIO_Init+0x108>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	60bb      	str	r3, [r7, #8]
 8001bd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	607b      	str	r3, [r7, #4]
 8001bde:	4b26      	ldr	r3, [pc, #152]	; (8001c78 <MX_GPIO_Init+0x108>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	4a25      	ldr	r2, [pc, #148]	; (8001c78 <MX_GPIO_Init+0x108>)
 8001be4:	f043 0302 	orr.w	r3, r3, #2
 8001be8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bea:	4b23      	ldr	r3, [pc, #140]	; (8001c78 <MX_GPIO_Init+0x108>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	607b      	str	r3, [r7, #4]
 8001bf4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2120      	movs	r1, #32
 8001bfa:	4820      	ldr	r0, [pc, #128]	; (8001c7c <MX_GPIO_Init+0x10c>)
 8001bfc:	f001 f984 	bl	8002f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001c00:	2200      	movs	r2, #0
 8001c02:	2101      	movs	r1, #1
 8001c04:	481e      	ldr	r0, [pc, #120]	; (8001c80 <MX_GPIO_Init+0x110>)
 8001c06:	f001 f97f 	bl	8002f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c10:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001c14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c1a:	f107 0314 	add.w	r3, r7, #20
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4818      	ldr	r0, [pc, #96]	; (8001c84 <MX_GPIO_Init+0x114>)
 8001c22:	f000 ffed 	bl	8002c00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001c26:	2320      	movs	r3, #32
 8001c28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c32:	2300      	movs	r3, #0
 8001c34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001c36:	f107 0314 	add.w	r3, r7, #20
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	480f      	ldr	r0, [pc, #60]	; (8001c7c <MX_GPIO_Init+0x10c>)
 8001c3e:	f000 ffdf 	bl	8002c00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c42:	2301      	movs	r3, #1
 8001c44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c46:	2301      	movs	r3, #1
 8001c48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c52:	f107 0314 	add.w	r3, r7, #20
 8001c56:	4619      	mov	r1, r3
 8001c58:	4809      	ldr	r0, [pc, #36]	; (8001c80 <MX_GPIO_Init+0x110>)
 8001c5a:	f000 ffd1 	bl	8002c00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2100      	movs	r1, #0
 8001c62:	2028      	movs	r0, #40	; 0x28
 8001c64:	f000 ff03 	bl	8002a6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c68:	2028      	movs	r0, #40	; 0x28
 8001c6a:	f000 ff1c 	bl	8002aa6 <HAL_NVIC_EnableIRQ>

}
 8001c6e:	bf00      	nop
 8001c70:	3728      	adds	r7, #40	; 0x28
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	40020000 	.word	0x40020000
 8001c80:	40020400 	.word	0x40020400
 8001c84:	40020800 	.word	0x40020800

08001c88 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c8c:	4b12      	ldr	r3, [pc, #72]	; (8001cd8 <MX_I2C1_Init+0x50>)
 8001c8e:	4a13      	ldr	r2, [pc, #76]	; (8001cdc <MX_I2C1_Init+0x54>)
 8001c90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001c92:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <MX_I2C1_Init+0x50>)
 8001c94:	4a12      	ldr	r2, [pc, #72]	; (8001ce0 <MX_I2C1_Init+0x58>)
 8001c96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c98:	4b0f      	ldr	r3, [pc, #60]	; (8001cd8 <MX_I2C1_Init+0x50>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c9e:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <MX_I2C1_Init+0x50>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ca4:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <MX_I2C1_Init+0x50>)
 8001ca6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001caa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cac:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <MX_I2C1_Init+0x50>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001cb2:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <MX_I2C1_Init+0x50>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cb8:	4b07      	ldr	r3, [pc, #28]	; (8001cd8 <MX_I2C1_Init+0x50>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cbe:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <MX_I2C1_Init+0x50>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001cc4:	4804      	ldr	r0, [pc, #16]	; (8001cd8 <MX_I2C1_Init+0x50>)
 8001cc6:	f001 f951 	bl	8002f6c <HAL_I2C_Init>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001cd0:	f000 f99c 	bl	800200c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001cd4:	bf00      	nop
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	200002e8 	.word	0x200002e8
 8001cdc:	40005400 	.word	0x40005400
 8001ce0:	000186a0 	.word	0x000186a0

08001ce4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08a      	sub	sp, #40	; 0x28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cec:	f107 0314 	add.w	r3, r7, #20
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a19      	ldr	r2, [pc, #100]	; (8001d68 <HAL_I2C_MspInit+0x84>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d12b      	bne.n	8001d5e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	613b      	str	r3, [r7, #16]
 8001d0a:	4b18      	ldr	r3, [pc, #96]	; (8001d6c <HAL_I2C_MspInit+0x88>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	4a17      	ldr	r2, [pc, #92]	; (8001d6c <HAL_I2C_MspInit+0x88>)
 8001d10:	f043 0302 	orr.w	r3, r3, #2
 8001d14:	6313      	str	r3, [r2, #48]	; 0x30
 8001d16:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <HAL_I2C_MspInit+0x88>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d22:	23c0      	movs	r3, #192	; 0xc0
 8001d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d26:	2312      	movs	r3, #18
 8001d28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d32:	2304      	movs	r3, #4
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d36:	f107 0314 	add.w	r3, r7, #20
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	480c      	ldr	r0, [pc, #48]	; (8001d70 <HAL_I2C_MspInit+0x8c>)
 8001d3e:	f000 ff5f 	bl	8002c00 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <HAL_I2C_MspInit+0x88>)
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	4a08      	ldr	r2, [pc, #32]	; (8001d6c <HAL_I2C_MspInit+0x88>)
 8001d4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d50:	6413      	str	r3, [r2, #64]	; 0x40
 8001d52:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <HAL_I2C_MspInit+0x88>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001d5e:	bf00      	nop
 8001d60:	3728      	adds	r7, #40	; 0x28
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40005400 	.word	0x40005400
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	40020400 	.word	0x40020400

08001d74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d76:	b097      	sub	sp, #92	; 0x5c
 8001d78:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d7a:	f000 fd2b 	bl	80027d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d7e:	f000 f88d 	bl	8001e9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d82:	f7ff fef5 	bl	8001b70 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001d86:	f000 fc21 	bl	80025cc <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8001d8a:	f000 fc49 	bl	8002620 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 8001d8e:	f000 faa9 	bl	80022e4 <MX_TIM3_Init>
  MX_I2C1_Init();
 8001d92:	f7ff ff79 	bl	8001c88 <MX_I2C1_Init>
  MX_TIM10_Init();
 8001d96:	f000 fb3d 	bl	8002414 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  //PRINTF("\n\r BEGINNING OF THE CODE \n\n\r");

  // Start timer interrupt that enables the GYRO reading 250 Hz
  HAL_TIM_Base_Start_IT(&htim10);
 8001d9a:	4836      	ldr	r0, [pc, #216]	; (8001e74 <main+0x100>)
 8001d9c:	f002 fd84 	bl	80048a8 <HAL_TIM_Base_Start_IT>

  // Start timer for the PWM signal
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001da0:	2100      	movs	r1, #0
 8001da2:	4835      	ldr	r0, [pc, #212]	; (8001e78 <main+0x104>)
 8001da4:	f002 fe3c 	bl	8004a20 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001da8:	2104      	movs	r1, #4
 8001daa:	4833      	ldr	r0, [pc, #204]	; (8001e78 <main+0x104>)
 8001dac:	f002 fe38 	bl	8004a20 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001db0:	2108      	movs	r1, #8
 8001db2:	4831      	ldr	r0, [pc, #196]	; (8001e78 <main+0x104>)
 8001db4:	f002 fe34 	bl	8004a20 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001db8:	210c      	movs	r1, #12
 8001dba:	482f      	ldr	r0, [pc, #188]	; (8001e78 <main+0x104>)
 8001dbc:	f002 fe30 	bl	8004a20 <HAL_TIM_PWM_Start>

  // Start interrupt for bluetooth Rx commands
  HAL_UART_Receive_IT(&huart6, (uint8_t*)cmd_rx, 1);
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	492e      	ldr	r1, [pc, #184]	; (8001e7c <main+0x108>)
 8001dc4:	482e      	ldr	r0, [pc, #184]	; (8001e80 <main+0x10c>)
 8001dc6:	f003 fdc2 	bl	800594e <HAL_UART_Receive_IT>

  ESC_CONF ESC_speed;

  ESC_Calibrate(&ESC_speed);
 8001dca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff f8f8 	bl	8000fc4 <ESC_Calibrate>

  //PRINTF(" -- Press blue button to start the code \n\n\r");
  while(BLUE_BUTTON==0){
 8001dd4:	e003      	b.n	8001dde <main+0x6a>
	  if(BLUE_BUTTON==1){
 8001dd6:	4b2b      	ldr	r3, [pc, #172]	; (8001e84 <main+0x110>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d004      	beq.n	8001de8 <main+0x74>
  while(BLUE_BUTTON==0){
 8001dde:	4b29      	ldr	r3, [pc, #164]	; (8001e84 <main+0x110>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d0f7      	beq.n	8001dd6 <main+0x62>
 8001de6:	e000      	b.n	8001dea <main+0x76>
		  break;
 8001de8:	bf00      	nop
	  }
  }

  MPU6050_Init();
 8001dea:	f7ff fb77 	bl	80014dc <MPU6050_Init>
  MPU6050_Reset(&MPU_measure);
 8001dee:	4826      	ldr	r0, [pc, #152]	; (8001e88 <main+0x114>)
 8001df0:	f7ff fbd6 	bl	80015a0 <MPU6050_Reset>

  ESC_Init(&ESC_speed);
 8001df4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff f8a9 	bl	8000f50 <ESC_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(ACC_STATE == READY && GYRO_STATE == READY){
 8001dfe:	4b23      	ldr	r3, [pc, #140]	; (8001e8c <main+0x118>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	2b02      	cmp	r3, #2
		  //HAL_UART_Transmit(&huart2, (uint8_t*)messaggio, lengh, 50);
	  }


	  // Receive the command from the radio/bl controller
	  if(BLUETOOTH_FLAG == 1){
 8001e04:	4b22      	ldr	r3, [pc, #136]	; (8001e90 <main+0x11c>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d103      	bne.n	8001e14 <main+0xa0>

		  //msgLen = sprintf(msgDebug, "\n\r   FRONTT LEFT %d  -  FRONT RIGHT %d  -  REAR LEFT %d - REAR RIGHT %d \r\n", ESC_speed.FL, ESC_speed.FR, ESC_speed.RL, ESC_speed.RR);
		  //HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 10);

		  BLUETOOTH_FLAG = 0;
 8001e0c:	4b20      	ldr	r3, [pc, #128]	; (8001e90 <main+0x11c>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	e002      	b.n	8001e1a <main+0xa6>
	  }else{
		  cmd_rx[0] = ' ';
 8001e14:	4b19      	ldr	r3, [pc, #100]	; (8001e7c <main+0x108>)
 8001e16:	2220      	movs	r2, #32
 8001e18:	701a      	strb	r2, [r3, #0]
	  }

	  ESC_followCmd(&ESC_speed, &MPU_measure, cmd_rx[0]);
 8001e1a:	4b18      	ldr	r3, [pc, #96]	; (8001e7c <main+0x108>)
 8001e1c:	781a      	ldrb	r2, [r3, #0]
 8001e1e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e22:	4919      	ldr	r1, [pc, #100]	; (8001e88 <main+0x114>)
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff f8ed 	bl	8001004 <ESC_followCmd>
	  ESC_setSpeed(&ESC_speed);
 8001e2a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff fb2c 	bl	800148c <ESC_setSpeed>

	  //msgLen = sprintf(msgDebug, "\r CIAO");
	  //HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 10);

		char message[50];
		int length = 0;
 8001e34:	2300      	movs	r3, #0
 8001e36:	647b      	str	r3, [r7, #68]	; 0x44

		length = sprintf(message, "%f, %f, %f \r", MPU_measure.angle_X, MPU_measure.angle_Y, MPU_measure.angle_Z);
 8001e38:	4b13      	ldr	r3, [pc, #76]	; (8001e88 <main+0x114>)
 8001e3a:	e9d3 4518 	ldrd	r4, r5, [r3, #96]	; 0x60
 8001e3e:	4b12      	ldr	r3, [pc, #72]	; (8001e88 <main+0x114>)
 8001e40:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001e44:	4910      	ldr	r1, [pc, #64]	; (8001e88 <main+0x114>)
 8001e46:	e9d1 011c 	ldrd	r0, r1, [r1, #112]	; 0x70
 8001e4a:	1d3e      	adds	r6, r7, #4
 8001e4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001e50:	e9cd 2300 	strd	r2, r3, [sp]
 8001e54:	4622      	mov	r2, r4
 8001e56:	462b      	mov	r3, r5
 8001e58:	490e      	ldr	r1, [pc, #56]	; (8001e94 <main+0x120>)
 8001e5a:	4630      	mov	r0, r6
 8001e5c:	f005 f8fc 	bl	8007058 <siprintf>
 8001e60:	6478      	str	r0, [r7, #68]	; 0x44
		HAL_UART_Transmit(&huart2, (uint8_t*)message, length, 10);
 8001e62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	1d39      	adds	r1, r7, #4
 8001e68:	230a      	movs	r3, #10
 8001e6a:	480b      	ldr	r0, [pc, #44]	; (8001e98 <main+0x124>)
 8001e6c:	f003 fcdd 	bl	800582a <HAL_UART_Transmit>
  {
 8001e70:	e7c5      	b.n	8001dfe <main+0x8a>
 8001e72:	bf00      	nop
 8001e74:	200003c0 	.word	0x200003c0
 8001e78:	20000408 	.word	0x20000408
 8001e7c:	20000218 	.word	0x20000218
 8001e80:	20000450 	.word	0x20000450
 8001e84:	20000200 	.word	0x20000200
 8001e88:	20000348 	.word	0x20000348
 8001e8c:	200001fc 	.word	0x200001fc
 8001e90:	20000204 	.word	0x20000204
 8001e94:	0800b340 	.word	0x0800b340
 8001e98:	20000494 	.word	0x20000494

08001e9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b094      	sub	sp, #80	; 0x50
 8001ea0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ea2:	f107 0320 	add.w	r3, r7, #32
 8001ea6:	2230      	movs	r2, #48	; 0x30
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f004 fc62 	bl	8006774 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001eb0:	f107 030c 	add.w	r3, r7, #12
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	60da      	str	r2, [r3, #12]
 8001ebe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60bb      	str	r3, [r7, #8]
 8001ec4:	4b29      	ldr	r3, [pc, #164]	; (8001f6c <SystemClock_Config+0xd0>)
 8001ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec8:	4a28      	ldr	r2, [pc, #160]	; (8001f6c <SystemClock_Config+0xd0>)
 8001eca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ece:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed0:	4b26      	ldr	r3, [pc, #152]	; (8001f6c <SystemClock_Config+0xd0>)
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001edc:	2300      	movs	r3, #0
 8001ede:	607b      	str	r3, [r7, #4]
 8001ee0:	4b23      	ldr	r3, [pc, #140]	; (8001f70 <SystemClock_Config+0xd4>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ee8:	4a21      	ldr	r2, [pc, #132]	; (8001f70 <SystemClock_Config+0xd4>)
 8001eea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001eee:	6013      	str	r3, [r2, #0]
 8001ef0:	4b1f      	ldr	r3, [pc, #124]	; (8001f70 <SystemClock_Config+0xd4>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ef8:	607b      	str	r3, [r7, #4]
 8001efa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001efc:	2302      	movs	r3, #2
 8001efe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f00:	2301      	movs	r3, #1
 8001f02:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f04:	2310      	movs	r3, #16
 8001f06:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001f10:	2310      	movs	r3, #16
 8001f12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001f14:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001f18:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001f1a:	2304      	movs	r3, #4
 8001f1c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001f1e:	2307      	movs	r3, #7
 8001f20:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f22:	f107 0320 	add.w	r3, r7, #32
 8001f26:	4618      	mov	r0, r3
 8001f28:	f001 fffa 	bl	8003f20 <HAL_RCC_OscConfig>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001f32:	f000 f86b 	bl	800200c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f36:	230f      	movs	r3, #15
 8001f38:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f46:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f4c:	f107 030c 	add.w	r3, r7, #12
 8001f50:	2102      	movs	r1, #2
 8001f52:	4618      	mov	r0, r3
 8001f54:	f002 fa5c 	bl	8004410 <HAL_RCC_ClockConfig>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001f5e:	f000 f855 	bl	800200c <Error_Handler>
  }
}
 8001f62:	bf00      	nop
 8001f64:	3750      	adds	r7, #80	; 0x50
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	40007000 	.word	0x40007000

08001f74 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 4 */



// Interrupt from the timer
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]

	if(htim == &htim10){
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a08      	ldr	r2, [pc, #32]	; (8001fa0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d108      	bne.n	8001f96 <HAL_TIM_PeriodElapsedCallback+0x22>
		MPU6050_ReadAcc(&MPU_measure);
 8001f84:	4807      	ldr	r0, [pc, #28]	; (8001fa4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001f86:	f7ff fb7f 	bl	8001688 <MPU6050_ReadAcc>
		MPU6050_ReadGyro(&MPU_measure);
 8001f8a:	4806      	ldr	r0, [pc, #24]	; (8001fa4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001f8c:	f7ff fbf8 	bl	8001780 <MPU6050_ReadGyro>
		MPU6050_ComplementFilter(&MPU_measure);
 8001f90:	4804      	ldr	r0, [pc, #16]	; (8001fa4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001f92:	f7ff fc71 	bl	8001878 <MPU6050_ComplementFilter>
	}
}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	200003c0 	.word	0x200003c0
 8001fa4:	20000348 	.word	0x20000348

08001fa8 <HAL_UART_RxCpltCallback>:


// Interrupt from bluetooth
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]

	if(BLUETOOTH_FLAG==0){
 8001fb0:	4b07      	ldr	r3, [pc, #28]	; (8001fd0 <HAL_UART_RxCpltCallback+0x28>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d102      	bne.n	8001fbe <HAL_UART_RxCpltCallback+0x16>
		BLUETOOTH_FLAG = 1;
 8001fb8:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <HAL_UART_RxCpltCallback+0x28>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	601a      	str	r2, [r3, #0]
	}

	HAL_UART_Receive_IT(&huart6, (uint8_t*)cmd_rx, 1);
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	4904      	ldr	r1, [pc, #16]	; (8001fd4 <HAL_UART_RxCpltCallback+0x2c>)
 8001fc2:	4805      	ldr	r0, [pc, #20]	; (8001fd8 <HAL_UART_RxCpltCallback+0x30>)
 8001fc4:	f003 fcc3 	bl	800594e <HAL_UART_Receive_IT>
}
 8001fc8:	bf00      	nop
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20000204 	.word	0x20000204
 8001fd4:	20000218 	.word	0x20000218
 8001fd8:	20000450 	.word	0x20000450

08001fdc <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == B1_Pin){
 8001fe6:	88fb      	ldrh	r3, [r7, #6]
 8001fe8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fec:	d106      	bne.n	8001ffc <HAL_GPIO_EXTI_Callback+0x20>
		if(BLUE_BUTTON == 0){
 8001fee:	4b06      	ldr	r3, [pc, #24]	; (8002008 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d102      	bne.n	8001ffc <HAL_GPIO_EXTI_Callback+0x20>
			BLUE_BUTTON=1;
 8001ff6:	4b04      	ldr	r3, [pc, #16]	; (8002008 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	601a      	str	r2, [r3, #0]
		}
	}

}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	20000200 	.word	0x20000200

0800200c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002010:	b672      	cpsid	i
}
 8002012:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002014:	e7fe      	b.n	8002014 <Error_Handler+0x8>
	...

08002018 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	607b      	str	r3, [r7, #4]
 8002022:	4b18      	ldr	r3, [pc, #96]	; (8002084 <HAL_MspInit+0x6c>)
 8002024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002026:	4a17      	ldr	r2, [pc, #92]	; (8002084 <HAL_MspInit+0x6c>)
 8002028:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800202c:	6453      	str	r3, [r2, #68]	; 0x44
 800202e:	4b15      	ldr	r3, [pc, #84]	; (8002084 <HAL_MspInit+0x6c>)
 8002030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002036:	607b      	str	r3, [r7, #4]
 8002038:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	603b      	str	r3, [r7, #0]
 800203e:	4b11      	ldr	r3, [pc, #68]	; (8002084 <HAL_MspInit+0x6c>)
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	4a10      	ldr	r2, [pc, #64]	; (8002084 <HAL_MspInit+0x6c>)
 8002044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002048:	6413      	str	r3, [r2, #64]	; 0x40
 800204a:	4b0e      	ldr	r3, [pc, #56]	; (8002084 <HAL_MspInit+0x6c>)
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002052:	603b      	str	r3, [r7, #0]
 8002054:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002056:	2007      	movs	r0, #7
 8002058:	f000 fcfe 	bl	8002a58 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 800205c:	2200      	movs	r2, #0
 800205e:	2100      	movs	r1, #0
 8002060:	2001      	movs	r0, #1
 8002062:	f000 fd04 	bl	8002a6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8002066:	2001      	movs	r0, #1
 8002068:	f000 fd1d 	bl	8002aa6 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 800206c:	2200      	movs	r2, #0
 800206e:	2100      	movs	r1, #0
 8002070:	2051      	movs	r0, #81	; 0x51
 8002072:	f000 fcfc 	bl	8002a6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8002076:	2051      	movs	r0, #81	; 0x51
 8002078:	f000 fd15 	bl	8002aa6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800207c:	bf00      	nop
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40023800 	.word	0x40023800

08002088 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800208c:	e7fe      	b.n	800208c <NMI_Handler+0x4>

0800208e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800208e:	b480      	push	{r7}
 8002090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002092:	e7fe      	b.n	8002092 <HardFault_Handler+0x4>

08002094 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002098:	e7fe      	b.n	8002098 <MemManage_Handler+0x4>

0800209a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800209a:	b480      	push	{r7}
 800209c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800209e:	e7fe      	b.n	800209e <BusFault_Handler+0x4>

080020a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020a4:	e7fe      	b.n	80020a4 <UsageFault_Handler+0x4>

080020a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020a6:	b480      	push	{r7}
 80020a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020aa:	bf00      	nop
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020b8:	bf00      	nop
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020c2:	b480      	push	{r7}
 80020c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020c6:	bf00      	nop
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020d4:	f000 fbd0 	bl	8002878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020d8:	bf00      	nop
 80020da:	bd80      	pop	{r7, pc}

080020dc <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 80020e0:	f001 ff04 	bl	8003eec <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 80020e4:	bf00      	nop
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80020ec:	4802      	ldr	r0, [pc, #8]	; (80020f8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80020ee:	f002 fd47 	bl	8004b80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	200003c0 	.word	0x200003c0

080020fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002100:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002104:	f000 ff1a 	bl	8002f3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002108:	bf00      	nop
 800210a:	bd80      	pop	{r7, pc}

0800210c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002110:	4802      	ldr	r0, [pc, #8]	; (800211c <USART6_IRQHandler+0x10>)
 8002112:	f003 fc4d 	bl	80059b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	20000450 	.word	0x20000450

08002120 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8002124:	bf00      	nop
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr

0800212e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800212e:	b480      	push	{r7}
 8002130:	af00      	add	r7, sp, #0
	return 1;
 8002132:	2301      	movs	r3, #1
}
 8002134:	4618      	mov	r0, r3
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <_kill>:

int _kill(int pid, int sig)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b082      	sub	sp, #8
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
 8002146:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002148:	f004 faea 	bl	8006720 <__errno>
 800214c:	4603      	mov	r3, r0
 800214e:	2216      	movs	r2, #22
 8002150:	601a      	str	r2, [r3, #0]
	return -1;
 8002152:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002156:	4618      	mov	r0, r3
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <_exit>:

void _exit (int status)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b082      	sub	sp, #8
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002166:	f04f 31ff 	mov.w	r1, #4294967295
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f7ff ffe7 	bl	800213e <_kill>
	while (1) {}		/* Make sure we hang here */
 8002170:	e7fe      	b.n	8002170 <_exit+0x12>

08002172 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b086      	sub	sp, #24
 8002176:	af00      	add	r7, sp, #0
 8002178:	60f8      	str	r0, [r7, #12]
 800217a:	60b9      	str	r1, [r7, #8]
 800217c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800217e:	2300      	movs	r3, #0
 8002180:	617b      	str	r3, [r7, #20]
 8002182:	e00a      	b.n	800219a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002184:	f3af 8000 	nop.w
 8002188:	4601      	mov	r1, r0
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	1c5a      	adds	r2, r3, #1
 800218e:	60ba      	str	r2, [r7, #8]
 8002190:	b2ca      	uxtb	r2, r1
 8002192:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	3301      	adds	r3, #1
 8002198:	617b      	str	r3, [r7, #20]
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	429a      	cmp	r2, r3
 80021a0:	dbf0      	blt.n	8002184 <_read+0x12>
	}

return len;
 80021a2:	687b      	ldr	r3, [r7, #4]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3718      	adds	r7, #24
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021b8:	2300      	movs	r3, #0
 80021ba:	617b      	str	r3, [r7, #20]
 80021bc:	e009      	b.n	80021d2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	1c5a      	adds	r2, r3, #1
 80021c2:	60ba      	str	r2, [r7, #8]
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	3301      	adds	r3, #1
 80021d0:	617b      	str	r3, [r7, #20]
 80021d2:	697a      	ldr	r2, [r7, #20]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	dbf1      	blt.n	80021be <_write+0x12>
	}
	return len;
 80021da:	687b      	ldr	r3, [r7, #4]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3718      	adds	r7, #24
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <_close>:

int _close(int file)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
	return -1;
 80021ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800220c:	605a      	str	r2, [r3, #4]
	return 0;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <_isatty>:

int _isatty(int file)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
	return 1;
 8002224:	2301      	movs	r3, #1
}
 8002226:	4618      	mov	r0, r3
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002232:	b480      	push	{r7}
 8002234:	b085      	sub	sp, #20
 8002236:	af00      	add	r7, sp, #0
 8002238:	60f8      	str	r0, [r7, #12]
 800223a:	60b9      	str	r1, [r7, #8]
 800223c:	607a      	str	r2, [r7, #4]
	return 0;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002254:	4a14      	ldr	r2, [pc, #80]	; (80022a8 <_sbrk+0x5c>)
 8002256:	4b15      	ldr	r3, [pc, #84]	; (80022ac <_sbrk+0x60>)
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002260:	4b13      	ldr	r3, [pc, #76]	; (80022b0 <_sbrk+0x64>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d102      	bne.n	800226e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002268:	4b11      	ldr	r3, [pc, #68]	; (80022b0 <_sbrk+0x64>)
 800226a:	4a12      	ldr	r2, [pc, #72]	; (80022b4 <_sbrk+0x68>)
 800226c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800226e:	4b10      	ldr	r3, [pc, #64]	; (80022b0 <_sbrk+0x64>)
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4413      	add	r3, r2
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	429a      	cmp	r2, r3
 800227a:	d207      	bcs.n	800228c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800227c:	f004 fa50 	bl	8006720 <__errno>
 8002280:	4603      	mov	r3, r0
 8002282:	220c      	movs	r2, #12
 8002284:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002286:	f04f 33ff 	mov.w	r3, #4294967295
 800228a:	e009      	b.n	80022a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800228c:	4b08      	ldr	r3, [pc, #32]	; (80022b0 <_sbrk+0x64>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002292:	4b07      	ldr	r3, [pc, #28]	; (80022b0 <_sbrk+0x64>)
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4413      	add	r3, r2
 800229a:	4a05      	ldr	r2, [pc, #20]	; (80022b0 <_sbrk+0x64>)
 800229c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800229e:	68fb      	ldr	r3, [r7, #12]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3718      	adds	r7, #24
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	20018000 	.word	0x20018000
 80022ac:	00000400 	.word	0x00000400
 80022b0:	20000208 	.word	0x20000208
 80022b4:	200004f0 	.word	0x200004f0

080022b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022bc:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <SystemInit+0x28>)
 80022be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c2:	4a07      	ldr	r2, [pc, #28]	; (80022e0 <SystemInit+0x28>)
 80022c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80022cc:	4b04      	ldr	r3, [pc, #16]	; (80022e0 <SystemInit+0x28>)
 80022ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022d2:	609a      	str	r2, [r3, #8]
#endif
}
 80022d4:	bf00      	nop
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim10;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b08e      	sub	sp, #56	; 0x38
 80022e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	605a      	str	r2, [r3, #4]
 80022f4:	609a      	str	r2, [r3, #8]
 80022f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022f8:	f107 0320 	add.w	r3, r7, #32
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002302:	1d3b      	adds	r3, r7, #4
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	605a      	str	r2, [r3, #4]
 800230a:	609a      	str	r2, [r3, #8]
 800230c:	60da      	str	r2, [r3, #12]
 800230e:	611a      	str	r2, [r3, #16]
 8002310:	615a      	str	r2, [r3, #20]
 8002312:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002314:	4b3d      	ldr	r3, [pc, #244]	; (800240c <MX_TIM3_Init+0x128>)
 8002316:	4a3e      	ldr	r2, [pc, #248]	; (8002410 <MX_TIM3_Init+0x12c>)
 8002318:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 70-1;
 800231a:	4b3c      	ldr	r3, [pc, #240]	; (800240c <MX_TIM3_Init+0x128>)
 800231c:	2245      	movs	r2, #69	; 0x45
 800231e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002320:	4b3a      	ldr	r3, [pc, #232]	; (800240c <MX_TIM3_Init+0x128>)
 8002322:	2200      	movs	r2, #0
 8002324:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8002326:	4b39      	ldr	r3, [pc, #228]	; (800240c <MX_TIM3_Init+0x128>)
 8002328:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800232c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800232e:	4b37      	ldr	r3, [pc, #220]	; (800240c <MX_TIM3_Init+0x128>)
 8002330:	2200      	movs	r2, #0
 8002332:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002334:	4b35      	ldr	r3, [pc, #212]	; (800240c <MX_TIM3_Init+0x128>)
 8002336:	2280      	movs	r2, #128	; 0x80
 8002338:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800233a:	4834      	ldr	r0, [pc, #208]	; (800240c <MX_TIM3_Init+0x128>)
 800233c:	f002 fa64 	bl	8004808 <HAL_TIM_Base_Init>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002346:	f7ff fe61 	bl	800200c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800234a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800234e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002350:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002354:	4619      	mov	r1, r3
 8002356:	482d      	ldr	r0, [pc, #180]	; (800240c <MX_TIM3_Init+0x128>)
 8002358:	f002 fddc 	bl	8004f14 <HAL_TIM_ConfigClockSource>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002362:	f7ff fe53 	bl	800200c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002366:	4829      	ldr	r0, [pc, #164]	; (800240c <MX_TIM3_Init+0x128>)
 8002368:	f002 fb00 	bl	800496c <HAL_TIM_PWM_Init>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002372:	f7ff fe4b 	bl	800200c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002376:	2300      	movs	r3, #0
 8002378:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800237a:	2300      	movs	r3, #0
 800237c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800237e:	f107 0320 	add.w	r3, r7, #32
 8002382:	4619      	mov	r1, r3
 8002384:	4821      	ldr	r0, [pc, #132]	; (800240c <MX_TIM3_Init+0x128>)
 8002386:	f003 f981 	bl	800568c <HAL_TIMEx_MasterConfigSynchronization>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002390:	f7ff fe3c 	bl	800200c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002394:	2360      	movs	r3, #96	; 0x60
 8002396:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002398:	2300      	movs	r3, #0
 800239a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800239c:	2300      	movs	r3, #0
 800239e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023a0:	2300      	movs	r3, #0
 80023a2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023a4:	1d3b      	adds	r3, r7, #4
 80023a6:	2200      	movs	r2, #0
 80023a8:	4619      	mov	r1, r3
 80023aa:	4818      	ldr	r0, [pc, #96]	; (800240c <MX_TIM3_Init+0x128>)
 80023ac:	f002 fcf0 	bl	8004d90 <HAL_TIM_PWM_ConfigChannel>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80023b6:	f7ff fe29 	bl	800200c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023ba:	1d3b      	adds	r3, r7, #4
 80023bc:	2204      	movs	r2, #4
 80023be:	4619      	mov	r1, r3
 80023c0:	4812      	ldr	r0, [pc, #72]	; (800240c <MX_TIM3_Init+0x128>)
 80023c2:	f002 fce5 	bl	8004d90 <HAL_TIM_PWM_ConfigChannel>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80023cc:	f7ff fe1e 	bl	800200c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80023d0:	1d3b      	adds	r3, r7, #4
 80023d2:	2208      	movs	r2, #8
 80023d4:	4619      	mov	r1, r3
 80023d6:	480d      	ldr	r0, [pc, #52]	; (800240c <MX_TIM3_Init+0x128>)
 80023d8:	f002 fcda 	bl	8004d90 <HAL_TIM_PWM_ConfigChannel>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80023e2:	f7ff fe13 	bl	800200c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80023e6:	1d3b      	adds	r3, r7, #4
 80023e8:	220c      	movs	r2, #12
 80023ea:	4619      	mov	r1, r3
 80023ec:	4807      	ldr	r0, [pc, #28]	; (800240c <MX_TIM3_Init+0x128>)
 80023ee:	f002 fccf 	bl	8004d90 <HAL_TIM_PWM_ConfigChannel>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 80023f8:	f7ff fe08 	bl	800200c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80023fc:	4803      	ldr	r0, [pc, #12]	; (800240c <MX_TIM3_Init+0x128>)
 80023fe:	f000 f86b 	bl	80024d8 <HAL_TIM_MspPostInit>

}
 8002402:	bf00      	nop
 8002404:	3738      	adds	r7, #56	; 0x38
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	20000408 	.word	0x20000408
 8002410:	40000400 	.word	0x40000400

08002414 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002418:	4b0e      	ldr	r3, [pc, #56]	; (8002454 <MX_TIM10_Init+0x40>)
 800241a:	4a0f      	ldr	r2, [pc, #60]	; (8002458 <MX_TIM10_Init+0x44>)
 800241c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 33600-1;
 800241e:	4b0d      	ldr	r3, [pc, #52]	; (8002454 <MX_TIM10_Init+0x40>)
 8002420:	f248 323f 	movw	r2, #33599	; 0x833f
 8002424:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002426:	4b0b      	ldr	r3, [pc, #44]	; (8002454 <MX_TIM10_Init+0x40>)
 8002428:	2200      	movs	r2, #0
 800242a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10-1;
 800242c:	4b09      	ldr	r3, [pc, #36]	; (8002454 <MX_TIM10_Init+0x40>)
 800242e:	2209      	movs	r2, #9
 8002430:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002432:	4b08      	ldr	r3, [pc, #32]	; (8002454 <MX_TIM10_Init+0x40>)
 8002434:	2200      	movs	r2, #0
 8002436:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002438:	4b06      	ldr	r3, [pc, #24]	; (8002454 <MX_TIM10_Init+0x40>)
 800243a:	2200      	movs	r2, #0
 800243c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800243e:	4805      	ldr	r0, [pc, #20]	; (8002454 <MX_TIM10_Init+0x40>)
 8002440:	f002 f9e2 	bl	8004808 <HAL_TIM_Base_Init>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800244a:	f7ff fddf 	bl	800200c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800244e:	bf00      	nop
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	200003c0 	.word	0x200003c0
 8002458:	40014400 	.word	0x40014400

0800245c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a18      	ldr	r2, [pc, #96]	; (80024cc <HAL_TIM_Base_MspInit+0x70>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d10e      	bne.n	800248c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800246e:	2300      	movs	r3, #0
 8002470:	60fb      	str	r3, [r7, #12]
 8002472:	4b17      	ldr	r3, [pc, #92]	; (80024d0 <HAL_TIM_Base_MspInit+0x74>)
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	4a16      	ldr	r2, [pc, #88]	; (80024d0 <HAL_TIM_Base_MspInit+0x74>)
 8002478:	f043 0302 	orr.w	r3, r3, #2
 800247c:	6413      	str	r3, [r2, #64]	; 0x40
 800247e:	4b14      	ldr	r3, [pc, #80]	; (80024d0 <HAL_TIM_Base_MspInit+0x74>)
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 800248a:	e01a      	b.n	80024c2 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM10)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a10      	ldr	r2, [pc, #64]	; (80024d4 <HAL_TIM_Base_MspInit+0x78>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d115      	bne.n	80024c2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	60bb      	str	r3, [r7, #8]
 800249a:	4b0d      	ldr	r3, [pc, #52]	; (80024d0 <HAL_TIM_Base_MspInit+0x74>)
 800249c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249e:	4a0c      	ldr	r2, [pc, #48]	; (80024d0 <HAL_TIM_Base_MspInit+0x74>)
 80024a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024a4:	6453      	str	r3, [r2, #68]	; 0x44
 80024a6:	4b0a      	ldr	r3, [pc, #40]	; (80024d0 <HAL_TIM_Base_MspInit+0x74>)
 80024a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ae:	60bb      	str	r3, [r7, #8]
 80024b0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80024b2:	2200      	movs	r2, #0
 80024b4:	2100      	movs	r1, #0
 80024b6:	2019      	movs	r0, #25
 80024b8:	f000 fad9 	bl	8002a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80024bc:	2019      	movs	r0, #25
 80024be:	f000 faf2 	bl	8002aa6 <HAL_NVIC_EnableIRQ>
}
 80024c2:	bf00      	nop
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40000400 	.word	0x40000400
 80024d0:	40023800 	.word	0x40023800
 80024d4:	40014400 	.word	0x40014400

080024d8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b08a      	sub	sp, #40	; 0x28
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e0:	f107 0314 	add.w	r3, r7, #20
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	605a      	str	r2, [r3, #4]
 80024ea:	609a      	str	r2, [r3, #8]
 80024ec:	60da      	str	r2, [r3, #12]
 80024ee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a30      	ldr	r2, [pc, #192]	; (80025b8 <HAL_TIM_MspPostInit+0xe0>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d15a      	bne.n	80025b0 <HAL_TIM_MspPostInit+0xd8>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	613b      	str	r3, [r7, #16]
 80024fe:	4b2f      	ldr	r3, [pc, #188]	; (80025bc <HAL_TIM_MspPostInit+0xe4>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	4a2e      	ldr	r2, [pc, #184]	; (80025bc <HAL_TIM_MspPostInit+0xe4>)
 8002504:	f043 0301 	orr.w	r3, r3, #1
 8002508:	6313      	str	r3, [r2, #48]	; 0x30
 800250a:	4b2c      	ldr	r3, [pc, #176]	; (80025bc <HAL_TIM_MspPostInit+0xe4>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	613b      	str	r3, [r7, #16]
 8002514:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	60fb      	str	r3, [r7, #12]
 800251a:	4b28      	ldr	r3, [pc, #160]	; (80025bc <HAL_TIM_MspPostInit+0xe4>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	4a27      	ldr	r2, [pc, #156]	; (80025bc <HAL_TIM_MspPostInit+0xe4>)
 8002520:	f043 0302 	orr.w	r3, r3, #2
 8002524:	6313      	str	r3, [r2, #48]	; 0x30
 8002526:	4b25      	ldr	r3, [pc, #148]	; (80025bc <HAL_TIM_MspPostInit+0xe4>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	4b21      	ldr	r3, [pc, #132]	; (80025bc <HAL_TIM_MspPostInit+0xe4>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	4a20      	ldr	r2, [pc, #128]	; (80025bc <HAL_TIM_MspPostInit+0xe4>)
 800253c:	f043 0304 	orr.w	r3, r3, #4
 8002540:	6313      	str	r3, [r2, #48]	; 0x30
 8002542:	4b1e      	ldr	r3, [pc, #120]	; (80025bc <HAL_TIM_MspPostInit+0xe4>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	f003 0304 	and.w	r3, r3, #4
 800254a:	60bb      	str	r3, [r7, #8]
 800254c:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB1     ------> TIM3_CH4
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800254e:	23c0      	movs	r3, #192	; 0xc0
 8002550:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002552:	2302      	movs	r3, #2
 8002554:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002556:	2300      	movs	r3, #0
 8002558:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800255a:	2300      	movs	r3, #0
 800255c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800255e:	2302      	movs	r3, #2
 8002560:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002562:	f107 0314 	add.w	r3, r7, #20
 8002566:	4619      	mov	r1, r3
 8002568:	4815      	ldr	r0, [pc, #84]	; (80025c0 <HAL_TIM_MspPostInit+0xe8>)
 800256a:	f000 fb49 	bl	8002c00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800256e:	2302      	movs	r3, #2
 8002570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002572:	2302      	movs	r3, #2
 8002574:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002576:	2300      	movs	r3, #0
 8002578:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257a:	2300      	movs	r3, #0
 800257c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800257e:	2302      	movs	r3, #2
 8002580:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002582:	f107 0314 	add.w	r3, r7, #20
 8002586:	4619      	mov	r1, r3
 8002588:	480e      	ldr	r0, [pc, #56]	; (80025c4 <HAL_TIM_MspPostInit+0xec>)
 800258a:	f000 fb39 	bl	8002c00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800258e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002592:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002594:	2302      	movs	r3, #2
 8002596:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002598:	2300      	movs	r3, #0
 800259a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259c:	2300      	movs	r3, #0
 800259e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80025a0:	2302      	movs	r3, #2
 80025a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025a4:	f107 0314 	add.w	r3, r7, #20
 80025a8:	4619      	mov	r1, r3
 80025aa:	4807      	ldr	r0, [pc, #28]	; (80025c8 <HAL_TIM_MspPostInit+0xf0>)
 80025ac:	f000 fb28 	bl	8002c00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80025b0:	bf00      	nop
 80025b2:	3728      	adds	r7, #40	; 0x28
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40000400 	.word	0x40000400
 80025bc:	40023800 	.word	0x40023800
 80025c0:	40020000 	.word	0x40020000
 80025c4:	40020400 	.word	0x40020400
 80025c8:	40020800 	.word	0x40020800

080025cc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart6;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80025d0:	4b11      	ldr	r3, [pc, #68]	; (8002618 <MX_USART2_UART_Init+0x4c>)
 80025d2:	4a12      	ldr	r2, [pc, #72]	; (800261c <MX_USART2_UART_Init+0x50>)
 80025d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80025d6:	4b10      	ldr	r3, [pc, #64]	; (8002618 <MX_USART2_UART_Init+0x4c>)
 80025d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025de:	4b0e      	ldr	r3, [pc, #56]	; (8002618 <MX_USART2_UART_Init+0x4c>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80025e4:	4b0c      	ldr	r3, [pc, #48]	; (8002618 <MX_USART2_UART_Init+0x4c>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80025ea:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <MX_USART2_UART_Init+0x4c>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80025f0:	4b09      	ldr	r3, [pc, #36]	; (8002618 <MX_USART2_UART_Init+0x4c>)
 80025f2:	220c      	movs	r2, #12
 80025f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025f6:	4b08      	ldr	r3, [pc, #32]	; (8002618 <MX_USART2_UART_Init+0x4c>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80025fc:	4b06      	ldr	r3, [pc, #24]	; (8002618 <MX_USART2_UART_Init+0x4c>)
 80025fe:	2200      	movs	r2, #0
 8002600:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002602:	4805      	ldr	r0, [pc, #20]	; (8002618 <MX_USART2_UART_Init+0x4c>)
 8002604:	f003 f8c4 	bl	8005790 <HAL_UART_Init>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800260e:	f7ff fcfd 	bl	800200c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002612:	bf00      	nop
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	20000494 	.word	0x20000494
 800261c:	40004400 	.word	0x40004400

08002620 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002624:	4b11      	ldr	r3, [pc, #68]	; (800266c <MX_USART6_UART_Init+0x4c>)
 8002626:	4a12      	ldr	r2, [pc, #72]	; (8002670 <MX_USART6_UART_Init+0x50>)
 8002628:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800262a:	4b10      	ldr	r3, [pc, #64]	; (800266c <MX_USART6_UART_Init+0x4c>)
 800262c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002630:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002632:	4b0e      	ldr	r3, [pc, #56]	; (800266c <MX_USART6_UART_Init+0x4c>)
 8002634:	2200      	movs	r2, #0
 8002636:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002638:	4b0c      	ldr	r3, [pc, #48]	; (800266c <MX_USART6_UART_Init+0x4c>)
 800263a:	2200      	movs	r2, #0
 800263c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800263e:	4b0b      	ldr	r3, [pc, #44]	; (800266c <MX_USART6_UART_Init+0x4c>)
 8002640:	2200      	movs	r2, #0
 8002642:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002644:	4b09      	ldr	r3, [pc, #36]	; (800266c <MX_USART6_UART_Init+0x4c>)
 8002646:	220c      	movs	r2, #12
 8002648:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800264a:	4b08      	ldr	r3, [pc, #32]	; (800266c <MX_USART6_UART_Init+0x4c>)
 800264c:	2200      	movs	r2, #0
 800264e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002650:	4b06      	ldr	r3, [pc, #24]	; (800266c <MX_USART6_UART_Init+0x4c>)
 8002652:	2200      	movs	r2, #0
 8002654:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002656:	4805      	ldr	r0, [pc, #20]	; (800266c <MX_USART6_UART_Init+0x4c>)
 8002658:	f003 f89a 	bl	8005790 <HAL_UART_Init>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002662:	f7ff fcd3 	bl	800200c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002666:	bf00      	nop
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	20000450 	.word	0x20000450
 8002670:	40011400 	.word	0x40011400

08002674 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b08c      	sub	sp, #48	; 0x30
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800267c:	f107 031c 	add.w	r3, r7, #28
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	605a      	str	r2, [r3, #4]
 8002686:	609a      	str	r2, [r3, #8]
 8002688:	60da      	str	r2, [r3, #12]
 800268a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a36      	ldr	r2, [pc, #216]	; (800276c <HAL_UART_MspInit+0xf8>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d12c      	bne.n	80026f0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	61bb      	str	r3, [r7, #24]
 800269a:	4b35      	ldr	r3, [pc, #212]	; (8002770 <HAL_UART_MspInit+0xfc>)
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	4a34      	ldr	r2, [pc, #208]	; (8002770 <HAL_UART_MspInit+0xfc>)
 80026a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026a4:	6413      	str	r3, [r2, #64]	; 0x40
 80026a6:	4b32      	ldr	r3, [pc, #200]	; (8002770 <HAL_UART_MspInit+0xfc>)
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ae:	61bb      	str	r3, [r7, #24]
 80026b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b2:	2300      	movs	r3, #0
 80026b4:	617b      	str	r3, [r7, #20]
 80026b6:	4b2e      	ldr	r3, [pc, #184]	; (8002770 <HAL_UART_MspInit+0xfc>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ba:	4a2d      	ldr	r2, [pc, #180]	; (8002770 <HAL_UART_MspInit+0xfc>)
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	6313      	str	r3, [r2, #48]	; 0x30
 80026c2:	4b2b      	ldr	r3, [pc, #172]	; (8002770 <HAL_UART_MspInit+0xfc>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	617b      	str	r3, [r7, #20]
 80026cc:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80026ce:	230c      	movs	r3, #12
 80026d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d2:	2302      	movs	r3, #2
 80026d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80026da:	2301      	movs	r3, #1
 80026dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026de:	2307      	movs	r3, #7
 80026e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e2:	f107 031c 	add.w	r3, r7, #28
 80026e6:	4619      	mov	r1, r3
 80026e8:	4822      	ldr	r0, [pc, #136]	; (8002774 <HAL_UART_MspInit+0x100>)
 80026ea:	f000 fa89 	bl	8002c00 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80026ee:	e038      	b.n	8002762 <HAL_UART_MspInit+0xee>
  else if(uartHandle->Instance==USART6)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a20      	ldr	r2, [pc, #128]	; (8002778 <HAL_UART_MspInit+0x104>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d133      	bne.n	8002762 <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 80026fa:	2300      	movs	r3, #0
 80026fc:	613b      	str	r3, [r7, #16]
 80026fe:	4b1c      	ldr	r3, [pc, #112]	; (8002770 <HAL_UART_MspInit+0xfc>)
 8002700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002702:	4a1b      	ldr	r2, [pc, #108]	; (8002770 <HAL_UART_MspInit+0xfc>)
 8002704:	f043 0320 	orr.w	r3, r3, #32
 8002708:	6453      	str	r3, [r2, #68]	; 0x44
 800270a:	4b19      	ldr	r3, [pc, #100]	; (8002770 <HAL_UART_MspInit+0xfc>)
 800270c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270e:	f003 0320 	and.w	r3, r3, #32
 8002712:	613b      	str	r3, [r7, #16]
 8002714:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002716:	2300      	movs	r3, #0
 8002718:	60fb      	str	r3, [r7, #12]
 800271a:	4b15      	ldr	r3, [pc, #84]	; (8002770 <HAL_UART_MspInit+0xfc>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271e:	4a14      	ldr	r2, [pc, #80]	; (8002770 <HAL_UART_MspInit+0xfc>)
 8002720:	f043 0304 	orr.w	r3, r3, #4
 8002724:	6313      	str	r3, [r2, #48]	; 0x30
 8002726:	4b12      	ldr	r3, [pc, #72]	; (8002770 <HAL_UART_MspInit+0xfc>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	f003 0304 	and.w	r3, r3, #4
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002732:	23c0      	movs	r3, #192	; 0xc0
 8002734:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002736:	2302      	movs	r3, #2
 8002738:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273a:	2300      	movs	r3, #0
 800273c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800273e:	2303      	movs	r3, #3
 8002740:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002742:	2308      	movs	r3, #8
 8002744:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002746:	f107 031c 	add.w	r3, r7, #28
 800274a:	4619      	mov	r1, r3
 800274c:	480b      	ldr	r0, [pc, #44]	; (800277c <HAL_UART_MspInit+0x108>)
 800274e:	f000 fa57 	bl	8002c00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002752:	2200      	movs	r2, #0
 8002754:	2100      	movs	r1, #0
 8002756:	2047      	movs	r0, #71	; 0x47
 8002758:	f000 f989 	bl	8002a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800275c:	2047      	movs	r0, #71	; 0x47
 800275e:	f000 f9a2 	bl	8002aa6 <HAL_NVIC_EnableIRQ>
}
 8002762:	bf00      	nop
 8002764:	3730      	adds	r7, #48	; 0x30
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40004400 	.word	0x40004400
 8002770:	40023800 	.word	0x40023800
 8002774:	40020000 	.word	0x40020000
 8002778:	40011400 	.word	0x40011400
 800277c:	40020800 	.word	0x40020800

08002780 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002780:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002784:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002786:	e003      	b.n	8002790 <LoopCopyDataInit>

08002788 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002788:	4b0c      	ldr	r3, [pc, #48]	; (80027bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800278a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800278c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800278e:	3104      	adds	r1, #4

08002790 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002790:	480b      	ldr	r0, [pc, #44]	; (80027c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002792:	4b0c      	ldr	r3, [pc, #48]	; (80027c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002794:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002796:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002798:	d3f6      	bcc.n	8002788 <CopyDataInit>
  ldr  r2, =_sbss
 800279a:	4a0b      	ldr	r2, [pc, #44]	; (80027c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800279c:	e002      	b.n	80027a4 <LoopFillZerobss>

0800279e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800279e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80027a0:	f842 3b04 	str.w	r3, [r2], #4

080027a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80027a4:	4b09      	ldr	r3, [pc, #36]	; (80027cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80027a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80027a8:	d3f9      	bcc.n	800279e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80027aa:	f7ff fd85 	bl	80022b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027ae:	f003 ffbd 	bl	800672c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027b2:	f7ff fadf 	bl	8001d74 <main>
  bx  lr    
 80027b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80027b8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80027bc:	0800b978 	.word	0x0800b978
  ldr  r0, =_sdata
 80027c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80027c4:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 80027c8:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 80027cc:	200004ec 	.word	0x200004ec

080027d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027d0:	e7fe      	b.n	80027d0 <ADC_IRQHandler>
	...

080027d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027d8:	4b0e      	ldr	r3, [pc, #56]	; (8002814 <HAL_Init+0x40>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a0d      	ldr	r2, [pc, #52]	; (8002814 <HAL_Init+0x40>)
 80027de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027e4:	4b0b      	ldr	r3, [pc, #44]	; (8002814 <HAL_Init+0x40>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a0a      	ldr	r2, [pc, #40]	; (8002814 <HAL_Init+0x40>)
 80027ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027f0:	4b08      	ldr	r3, [pc, #32]	; (8002814 <HAL_Init+0x40>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a07      	ldr	r2, [pc, #28]	; (8002814 <HAL_Init+0x40>)
 80027f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027fc:	2003      	movs	r0, #3
 80027fe:	f000 f92b 	bl	8002a58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002802:	2000      	movs	r0, #0
 8002804:	f000 f808 	bl	8002818 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002808:	f7ff fc06 	bl	8002018 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40023c00 	.word	0x40023c00

08002818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002820:	4b12      	ldr	r3, [pc, #72]	; (800286c <HAL_InitTick+0x54>)
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	4b12      	ldr	r3, [pc, #72]	; (8002870 <HAL_InitTick+0x58>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	4619      	mov	r1, r3
 800282a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800282e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002832:	fbb2 f3f3 	udiv	r3, r2, r3
 8002836:	4618      	mov	r0, r3
 8002838:	f000 f943 	bl	8002ac2 <HAL_SYSTICK_Config>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e00e      	b.n	8002864 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2b0f      	cmp	r3, #15
 800284a:	d80a      	bhi.n	8002862 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800284c:	2200      	movs	r2, #0
 800284e:	6879      	ldr	r1, [r7, #4]
 8002850:	f04f 30ff 	mov.w	r0, #4294967295
 8002854:	f000 f90b 	bl	8002a6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002858:	4a06      	ldr	r2, [pc, #24]	; (8002874 <HAL_InitTick+0x5c>)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800285e:	2300      	movs	r3, #0
 8002860:	e000      	b.n	8002864 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
}
 8002864:	4618      	mov	r0, r3
 8002866:	3708      	adds	r7, #8
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	20000000 	.word	0x20000000
 8002870:	20000008 	.word	0x20000008
 8002874:	20000004 	.word	0x20000004

08002878 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800287c:	4b06      	ldr	r3, [pc, #24]	; (8002898 <HAL_IncTick+0x20>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	461a      	mov	r2, r3
 8002882:	4b06      	ldr	r3, [pc, #24]	; (800289c <HAL_IncTick+0x24>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4413      	add	r3, r2
 8002888:	4a04      	ldr	r2, [pc, #16]	; (800289c <HAL_IncTick+0x24>)
 800288a:	6013      	str	r3, [r2, #0]
}
 800288c:	bf00      	nop
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	20000008 	.word	0x20000008
 800289c:	200004d8 	.word	0x200004d8

080028a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  return uwTick;
 80028a4:	4b03      	ldr	r3, [pc, #12]	; (80028b4 <HAL_GetTick+0x14>)
 80028a6:	681b      	ldr	r3, [r3, #0]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	200004d8 	.word	0x200004d8

080028b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f003 0307 	and.w	r3, r3, #7
 80028c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028c8:	4b0c      	ldr	r3, [pc, #48]	; (80028fc <__NVIC_SetPriorityGrouping+0x44>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ce:	68ba      	ldr	r2, [r7, #8]
 80028d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028d4:	4013      	ands	r3, r2
 80028d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028ea:	4a04      	ldr	r2, [pc, #16]	; (80028fc <__NVIC_SetPriorityGrouping+0x44>)
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	60d3      	str	r3, [r2, #12]
}
 80028f0:	bf00      	nop
 80028f2:	3714      	adds	r7, #20
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	e000ed00 	.word	0xe000ed00

08002900 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002904:	4b04      	ldr	r3, [pc, #16]	; (8002918 <__NVIC_GetPriorityGrouping+0x18>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	0a1b      	lsrs	r3, r3, #8
 800290a:	f003 0307 	and.w	r3, r3, #7
}
 800290e:	4618      	mov	r0, r3
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	e000ed00 	.word	0xe000ed00

0800291c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	4603      	mov	r3, r0
 8002924:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292a:	2b00      	cmp	r3, #0
 800292c:	db0b      	blt.n	8002946 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800292e:	79fb      	ldrb	r3, [r7, #7]
 8002930:	f003 021f 	and.w	r2, r3, #31
 8002934:	4907      	ldr	r1, [pc, #28]	; (8002954 <__NVIC_EnableIRQ+0x38>)
 8002936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293a:	095b      	lsrs	r3, r3, #5
 800293c:	2001      	movs	r0, #1
 800293e:	fa00 f202 	lsl.w	r2, r0, r2
 8002942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	e000e100 	.word	0xe000e100

08002958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	6039      	str	r1, [r7, #0]
 8002962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002968:	2b00      	cmp	r3, #0
 800296a:	db0a      	blt.n	8002982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	b2da      	uxtb	r2, r3
 8002970:	490c      	ldr	r1, [pc, #48]	; (80029a4 <__NVIC_SetPriority+0x4c>)
 8002972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002976:	0112      	lsls	r2, r2, #4
 8002978:	b2d2      	uxtb	r2, r2
 800297a:	440b      	add	r3, r1
 800297c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002980:	e00a      	b.n	8002998 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	b2da      	uxtb	r2, r3
 8002986:	4908      	ldr	r1, [pc, #32]	; (80029a8 <__NVIC_SetPriority+0x50>)
 8002988:	79fb      	ldrb	r3, [r7, #7]
 800298a:	f003 030f 	and.w	r3, r3, #15
 800298e:	3b04      	subs	r3, #4
 8002990:	0112      	lsls	r2, r2, #4
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	440b      	add	r3, r1
 8002996:	761a      	strb	r2, [r3, #24]
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr
 80029a4:	e000e100 	.word	0xe000e100
 80029a8:	e000ed00 	.word	0xe000ed00

080029ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b089      	sub	sp, #36	; 0x24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f003 0307 	and.w	r3, r3, #7
 80029be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	f1c3 0307 	rsb	r3, r3, #7
 80029c6:	2b04      	cmp	r3, #4
 80029c8:	bf28      	it	cs
 80029ca:	2304      	movcs	r3, #4
 80029cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	3304      	adds	r3, #4
 80029d2:	2b06      	cmp	r3, #6
 80029d4:	d902      	bls.n	80029dc <NVIC_EncodePriority+0x30>
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	3b03      	subs	r3, #3
 80029da:	e000      	b.n	80029de <NVIC_EncodePriority+0x32>
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029e0:	f04f 32ff 	mov.w	r2, #4294967295
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	43da      	mvns	r2, r3
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	401a      	ands	r2, r3
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029f4:	f04f 31ff 	mov.w	r1, #4294967295
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	fa01 f303 	lsl.w	r3, r1, r3
 80029fe:	43d9      	mvns	r1, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a04:	4313      	orrs	r3, r2
         );
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3724      	adds	r7, #36	; 0x24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
	...

08002a14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a24:	d301      	bcc.n	8002a2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a26:	2301      	movs	r3, #1
 8002a28:	e00f      	b.n	8002a4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a2a:	4a0a      	ldr	r2, [pc, #40]	; (8002a54 <SysTick_Config+0x40>)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a32:	210f      	movs	r1, #15
 8002a34:	f04f 30ff 	mov.w	r0, #4294967295
 8002a38:	f7ff ff8e 	bl	8002958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a3c:	4b05      	ldr	r3, [pc, #20]	; (8002a54 <SysTick_Config+0x40>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a42:	4b04      	ldr	r3, [pc, #16]	; (8002a54 <SysTick_Config+0x40>)
 8002a44:	2207      	movs	r2, #7
 8002a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	e000e010 	.word	0xe000e010

08002a58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f7ff ff29 	bl	80028b8 <__NVIC_SetPriorityGrouping>
}
 8002a66:	bf00      	nop
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b086      	sub	sp, #24
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	4603      	mov	r3, r0
 8002a76:	60b9      	str	r1, [r7, #8]
 8002a78:	607a      	str	r2, [r7, #4]
 8002a7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a80:	f7ff ff3e 	bl	8002900 <__NVIC_GetPriorityGrouping>
 8002a84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	68b9      	ldr	r1, [r7, #8]
 8002a8a:	6978      	ldr	r0, [r7, #20]
 8002a8c:	f7ff ff8e 	bl	80029ac <NVIC_EncodePriority>
 8002a90:	4602      	mov	r2, r0
 8002a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a96:	4611      	mov	r1, r2
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff ff5d 	bl	8002958 <__NVIC_SetPriority>
}
 8002a9e:	bf00      	nop
 8002aa0:	3718      	adds	r7, #24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b082      	sub	sp, #8
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	4603      	mov	r3, r0
 8002aae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff ff31 	bl	800291c <__NVIC_EnableIRQ>
}
 8002aba:	bf00      	nop
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b082      	sub	sp, #8
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7ff ffa2 	bl	8002a14 <SysTick_Config>
 8002ad0:	4603      	mov	r3, r0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b084      	sub	sp, #16
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ae8:	f7ff feda 	bl	80028a0 <HAL_GetTick>
 8002aec:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d008      	beq.n	8002b0c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2280      	movs	r2, #128	; 0x80
 8002afe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e052      	b.n	8002bb2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 0216 	bic.w	r2, r2, #22
 8002b1a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	695a      	ldr	r2, [r3, #20]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b2a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d103      	bne.n	8002b3c <HAL_DMA_Abort+0x62>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d007      	beq.n	8002b4c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 0208 	bic.w	r2, r2, #8
 8002b4a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 0201 	bic.w	r2, r2, #1
 8002b5a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b5c:	e013      	b.n	8002b86 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b5e:	f7ff fe9f 	bl	80028a0 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b05      	cmp	r3, #5
 8002b6a:	d90c      	bls.n	8002b86 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2220      	movs	r2, #32
 8002b70:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2203      	movs	r2, #3
 8002b76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e015      	b.n	8002bb2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1e4      	bne.n	8002b5e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b98:	223f      	movs	r2, #63	; 0x3f
 8002b9a:	409a      	lsls	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b083      	sub	sp, #12
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d004      	beq.n	8002bd8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2280      	movs	r2, #128	; 0x80
 8002bd2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e00c      	b.n	8002bf2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2205      	movs	r2, #5
 8002bdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f022 0201 	bic.w	r2, r2, #1
 8002bee:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
	...

08002c00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b089      	sub	sp, #36	; 0x24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c12:	2300      	movs	r3, #0
 8002c14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c16:	2300      	movs	r3, #0
 8002c18:	61fb      	str	r3, [r7, #28]
 8002c1a:	e159      	b.n	8002ed0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	f040 8148 	bne.w	8002eca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f003 0303 	and.w	r3, r3, #3
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d005      	beq.n	8002c52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d130      	bne.n	8002cb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	2203      	movs	r2, #3
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	43db      	mvns	r3, r3
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	4013      	ands	r3, r2
 8002c68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	68da      	ldr	r2, [r3, #12]
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	fa02 f303 	lsl.w	r3, r2, r3
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c88:	2201      	movs	r2, #1
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	43db      	mvns	r3, r3
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	4013      	ands	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	091b      	lsrs	r3, r3, #4
 8002c9e:	f003 0201 	and.w	r2, r3, #1
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f003 0303 	and.w	r3, r3, #3
 8002cbc:	2b03      	cmp	r3, #3
 8002cbe:	d017      	beq.n	8002cf0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	2203      	movs	r2, #3
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f003 0303 	and.w	r3, r3, #3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d123      	bne.n	8002d44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	08da      	lsrs	r2, r3, #3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	3208      	adds	r2, #8
 8002d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	f003 0307 	and.w	r3, r3, #7
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	220f      	movs	r2, #15
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	691a      	ldr	r2, [r3, #16]
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	f003 0307 	and.w	r3, r3, #7
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	08da      	lsrs	r2, r3, #3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	3208      	adds	r2, #8
 8002d3e:	69b9      	ldr	r1, [r7, #24]
 8002d40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	2203      	movs	r2, #3
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	43db      	mvns	r3, r3
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f003 0203 	and.w	r2, r3, #3
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f000 80a2 	beq.w	8002eca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d86:	2300      	movs	r3, #0
 8002d88:	60fb      	str	r3, [r7, #12]
 8002d8a:	4b57      	ldr	r3, [pc, #348]	; (8002ee8 <HAL_GPIO_Init+0x2e8>)
 8002d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8e:	4a56      	ldr	r2, [pc, #344]	; (8002ee8 <HAL_GPIO_Init+0x2e8>)
 8002d90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d94:	6453      	str	r3, [r2, #68]	; 0x44
 8002d96:	4b54      	ldr	r3, [pc, #336]	; (8002ee8 <HAL_GPIO_Init+0x2e8>)
 8002d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d9e:	60fb      	str	r3, [r7, #12]
 8002da0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002da2:	4a52      	ldr	r2, [pc, #328]	; (8002eec <HAL_GPIO_Init+0x2ec>)
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	089b      	lsrs	r3, r3, #2
 8002da8:	3302      	adds	r3, #2
 8002daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	220f      	movs	r2, #15
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	43db      	mvns	r3, r3
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a49      	ldr	r2, [pc, #292]	; (8002ef0 <HAL_GPIO_Init+0x2f0>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d019      	beq.n	8002e02 <HAL_GPIO_Init+0x202>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a48      	ldr	r2, [pc, #288]	; (8002ef4 <HAL_GPIO_Init+0x2f4>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d013      	beq.n	8002dfe <HAL_GPIO_Init+0x1fe>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a47      	ldr	r2, [pc, #284]	; (8002ef8 <HAL_GPIO_Init+0x2f8>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d00d      	beq.n	8002dfa <HAL_GPIO_Init+0x1fa>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a46      	ldr	r2, [pc, #280]	; (8002efc <HAL_GPIO_Init+0x2fc>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d007      	beq.n	8002df6 <HAL_GPIO_Init+0x1f6>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a45      	ldr	r2, [pc, #276]	; (8002f00 <HAL_GPIO_Init+0x300>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d101      	bne.n	8002df2 <HAL_GPIO_Init+0x1f2>
 8002dee:	2304      	movs	r3, #4
 8002df0:	e008      	b.n	8002e04 <HAL_GPIO_Init+0x204>
 8002df2:	2307      	movs	r3, #7
 8002df4:	e006      	b.n	8002e04 <HAL_GPIO_Init+0x204>
 8002df6:	2303      	movs	r3, #3
 8002df8:	e004      	b.n	8002e04 <HAL_GPIO_Init+0x204>
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	e002      	b.n	8002e04 <HAL_GPIO_Init+0x204>
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e000      	b.n	8002e04 <HAL_GPIO_Init+0x204>
 8002e02:	2300      	movs	r3, #0
 8002e04:	69fa      	ldr	r2, [r7, #28]
 8002e06:	f002 0203 	and.w	r2, r2, #3
 8002e0a:	0092      	lsls	r2, r2, #2
 8002e0c:	4093      	lsls	r3, r2
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e14:	4935      	ldr	r1, [pc, #212]	; (8002eec <HAL_GPIO_Init+0x2ec>)
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	089b      	lsrs	r3, r3, #2
 8002e1a:	3302      	adds	r3, #2
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e22:	4b38      	ldr	r3, [pc, #224]	; (8002f04 <HAL_GPIO_Init+0x304>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e46:	4a2f      	ldr	r2, [pc, #188]	; (8002f04 <HAL_GPIO_Init+0x304>)
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e4c:	4b2d      	ldr	r3, [pc, #180]	; (8002f04 <HAL_GPIO_Init+0x304>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	43db      	mvns	r3, r3
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d003      	beq.n	8002e70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e70:	4a24      	ldr	r2, [pc, #144]	; (8002f04 <HAL_GPIO_Init+0x304>)
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e76:	4b23      	ldr	r3, [pc, #140]	; (8002f04 <HAL_GPIO_Init+0x304>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	43db      	mvns	r3, r3
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	4013      	ands	r3, r2
 8002e84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e9a:	4a1a      	ldr	r2, [pc, #104]	; (8002f04 <HAL_GPIO_Init+0x304>)
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ea0:	4b18      	ldr	r3, [pc, #96]	; (8002f04 <HAL_GPIO_Init+0x304>)
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	4013      	ands	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d003      	beq.n	8002ec4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ec4:	4a0f      	ldr	r2, [pc, #60]	; (8002f04 <HAL_GPIO_Init+0x304>)
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	61fb      	str	r3, [r7, #28]
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	2b0f      	cmp	r3, #15
 8002ed4:	f67f aea2 	bls.w	8002c1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ed8:	bf00      	nop
 8002eda:	bf00      	nop
 8002edc:	3724      	adds	r7, #36	; 0x24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	40013800 	.word	0x40013800
 8002ef0:	40020000 	.word	0x40020000
 8002ef4:	40020400 	.word	0x40020400
 8002ef8:	40020800 	.word	0x40020800
 8002efc:	40020c00 	.word	0x40020c00
 8002f00:	40021000 	.word	0x40021000
 8002f04:	40013c00 	.word	0x40013c00

08002f08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	460b      	mov	r3, r1
 8002f12:	807b      	strh	r3, [r7, #2]
 8002f14:	4613      	mov	r3, r2
 8002f16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f18:	787b      	ldrb	r3, [r7, #1]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d003      	beq.n	8002f26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f1e:	887a      	ldrh	r2, [r7, #2]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f24:	e003      	b.n	8002f2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f26:	887b      	ldrh	r3, [r7, #2]
 8002f28:	041a      	lsls	r2, r3, #16
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	619a      	str	r2, [r3, #24]
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
	...

08002f3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	4603      	mov	r3, r0
 8002f44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002f46:	4b08      	ldr	r3, [pc, #32]	; (8002f68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f48:	695a      	ldr	r2, [r3, #20]
 8002f4a:	88fb      	ldrh	r3, [r7, #6]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d006      	beq.n	8002f60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f52:	4a05      	ldr	r2, [pc, #20]	; (8002f68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f54:	88fb      	ldrh	r3, [r7, #6]
 8002f56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f58:	88fb      	ldrh	r3, [r7, #6]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff f83e 	bl	8001fdc <HAL_GPIO_EXTI_Callback>
  }
}
 8002f60:	bf00      	nop
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	40013c00 	.word	0x40013c00

08002f6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e12b      	b.n	80031d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d106      	bne.n	8002f98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f7fe fea6 	bl	8001ce4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2224      	movs	r2, #36	; 0x24
 8002f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 0201 	bic.w	r2, r2, #1
 8002fae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fbe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002fd0:	f001 fbf2 	bl	80047b8 <HAL_RCC_GetPCLK1Freq>
 8002fd4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	4a81      	ldr	r2, [pc, #516]	; (80031e0 <HAL_I2C_Init+0x274>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d807      	bhi.n	8002ff0 <HAL_I2C_Init+0x84>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	4a80      	ldr	r2, [pc, #512]	; (80031e4 <HAL_I2C_Init+0x278>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	bf94      	ite	ls
 8002fe8:	2301      	movls	r3, #1
 8002fea:	2300      	movhi	r3, #0
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	e006      	b.n	8002ffe <HAL_I2C_Init+0x92>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	4a7d      	ldr	r2, [pc, #500]	; (80031e8 <HAL_I2C_Init+0x27c>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	bf94      	ite	ls
 8002ff8:	2301      	movls	r3, #1
 8002ffa:	2300      	movhi	r3, #0
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e0e7      	b.n	80031d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	4a78      	ldr	r2, [pc, #480]	; (80031ec <HAL_I2C_Init+0x280>)
 800300a:	fba2 2303 	umull	r2, r3, r2, r3
 800300e:	0c9b      	lsrs	r3, r3, #18
 8003010:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68ba      	ldr	r2, [r7, #8]
 8003022:	430a      	orrs	r2, r1
 8003024:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	6a1b      	ldr	r3, [r3, #32]
 800302c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	4a6a      	ldr	r2, [pc, #424]	; (80031e0 <HAL_I2C_Init+0x274>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d802      	bhi.n	8003040 <HAL_I2C_Init+0xd4>
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	3301      	adds	r3, #1
 800303e:	e009      	b.n	8003054 <HAL_I2C_Init+0xe8>
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003046:	fb02 f303 	mul.w	r3, r2, r3
 800304a:	4a69      	ldr	r2, [pc, #420]	; (80031f0 <HAL_I2C_Init+0x284>)
 800304c:	fba2 2303 	umull	r2, r3, r2, r3
 8003050:	099b      	lsrs	r3, r3, #6
 8003052:	3301      	adds	r3, #1
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	6812      	ldr	r2, [r2, #0]
 8003058:	430b      	orrs	r3, r1
 800305a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003066:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	495c      	ldr	r1, [pc, #368]	; (80031e0 <HAL_I2C_Init+0x274>)
 8003070:	428b      	cmp	r3, r1
 8003072:	d819      	bhi.n	80030a8 <HAL_I2C_Init+0x13c>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	1e59      	subs	r1, r3, #1
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003082:	1c59      	adds	r1, r3, #1
 8003084:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003088:	400b      	ands	r3, r1
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00a      	beq.n	80030a4 <HAL_I2C_Init+0x138>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	1e59      	subs	r1, r3, #1
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	fbb1 f3f3 	udiv	r3, r1, r3
 800309c:	3301      	adds	r3, #1
 800309e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030a2:	e051      	b.n	8003148 <HAL_I2C_Init+0x1dc>
 80030a4:	2304      	movs	r3, #4
 80030a6:	e04f      	b.n	8003148 <HAL_I2C_Init+0x1dc>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d111      	bne.n	80030d4 <HAL_I2C_Init+0x168>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	1e58      	subs	r0, r3, #1
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6859      	ldr	r1, [r3, #4]
 80030b8:	460b      	mov	r3, r1
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	440b      	add	r3, r1
 80030be:	fbb0 f3f3 	udiv	r3, r0, r3
 80030c2:	3301      	adds	r3, #1
 80030c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	bf0c      	ite	eq
 80030cc:	2301      	moveq	r3, #1
 80030ce:	2300      	movne	r3, #0
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	e012      	b.n	80030fa <HAL_I2C_Init+0x18e>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	1e58      	subs	r0, r3, #1
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6859      	ldr	r1, [r3, #4]
 80030dc:	460b      	mov	r3, r1
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	0099      	lsls	r1, r3, #2
 80030e4:	440b      	add	r3, r1
 80030e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ea:	3301      	adds	r3, #1
 80030ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	bf0c      	ite	eq
 80030f4:	2301      	moveq	r3, #1
 80030f6:	2300      	movne	r3, #0
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <HAL_I2C_Init+0x196>
 80030fe:	2301      	movs	r3, #1
 8003100:	e022      	b.n	8003148 <HAL_I2C_Init+0x1dc>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d10e      	bne.n	8003128 <HAL_I2C_Init+0x1bc>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	1e58      	subs	r0, r3, #1
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6859      	ldr	r1, [r3, #4]
 8003112:	460b      	mov	r3, r1
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	440b      	add	r3, r1
 8003118:	fbb0 f3f3 	udiv	r3, r0, r3
 800311c:	3301      	adds	r3, #1
 800311e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003122:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003126:	e00f      	b.n	8003148 <HAL_I2C_Init+0x1dc>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	1e58      	subs	r0, r3, #1
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6859      	ldr	r1, [r3, #4]
 8003130:	460b      	mov	r3, r1
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	0099      	lsls	r1, r3, #2
 8003138:	440b      	add	r3, r1
 800313a:	fbb0 f3f3 	udiv	r3, r0, r3
 800313e:	3301      	adds	r3, #1
 8003140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003144:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	6809      	ldr	r1, [r1, #0]
 800314c:	4313      	orrs	r3, r2
 800314e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	69da      	ldr	r2, [r3, #28]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	431a      	orrs	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	430a      	orrs	r2, r1
 800316a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003176:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	6911      	ldr	r1, [r2, #16]
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	68d2      	ldr	r2, [r2, #12]
 8003182:	4311      	orrs	r1, r2
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	6812      	ldr	r2, [r2, #0]
 8003188:	430b      	orrs	r3, r1
 800318a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	695a      	ldr	r2, [r3, #20]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	431a      	orrs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f042 0201 	orr.w	r2, r2, #1
 80031b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2220      	movs	r2, #32
 80031c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	000186a0 	.word	0x000186a0
 80031e4:	001e847f 	.word	0x001e847f
 80031e8:	003d08ff 	.word	0x003d08ff
 80031ec:	431bde83 	.word	0x431bde83
 80031f0:	10624dd3 	.word	0x10624dd3

080031f4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b088      	sub	sp, #32
 80031f8:	af02      	add	r7, sp, #8
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	4608      	mov	r0, r1
 80031fe:	4611      	mov	r1, r2
 8003200:	461a      	mov	r2, r3
 8003202:	4603      	mov	r3, r0
 8003204:	817b      	strh	r3, [r7, #10]
 8003206:	460b      	mov	r3, r1
 8003208:	813b      	strh	r3, [r7, #8]
 800320a:	4613      	mov	r3, r2
 800320c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800320e:	f7ff fb47 	bl	80028a0 <HAL_GetTick>
 8003212:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2b20      	cmp	r3, #32
 800321e:	f040 80d9 	bne.w	80033d4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	2319      	movs	r3, #25
 8003228:	2201      	movs	r2, #1
 800322a:	496d      	ldr	r1, [pc, #436]	; (80033e0 <HAL_I2C_Mem_Write+0x1ec>)
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f000 fc7f 	bl	8003b30 <I2C_WaitOnFlagUntilTimeout>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003238:	2302      	movs	r3, #2
 800323a:	e0cc      	b.n	80033d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003242:	2b01      	cmp	r3, #1
 8003244:	d101      	bne.n	800324a <HAL_I2C_Mem_Write+0x56>
 8003246:	2302      	movs	r3, #2
 8003248:	e0c5      	b.n	80033d6 <HAL_I2C_Mem_Write+0x1e2>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0301 	and.w	r3, r3, #1
 800325c:	2b01      	cmp	r3, #1
 800325e:	d007      	beq.n	8003270 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f042 0201 	orr.w	r2, r2, #1
 800326e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800327e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2221      	movs	r2, #33	; 0x21
 8003284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2240      	movs	r2, #64	; 0x40
 800328c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6a3a      	ldr	r2, [r7, #32]
 800329a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80032a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4a4d      	ldr	r2, [pc, #308]	; (80033e4 <HAL_I2C_Mem_Write+0x1f0>)
 80032b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032b2:	88f8      	ldrh	r0, [r7, #6]
 80032b4:	893a      	ldrh	r2, [r7, #8]
 80032b6:	8979      	ldrh	r1, [r7, #10]
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	9301      	str	r3, [sp, #4]
 80032bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032be:	9300      	str	r3, [sp, #0]
 80032c0:	4603      	mov	r3, r0
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f000 fab6 	bl	8003834 <I2C_RequestMemoryWrite>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d052      	beq.n	8003374 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e081      	b.n	80033d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f000 fd00 	bl	8003cdc <I2C_WaitOnTXEFlagUntilTimeout>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00d      	beq.n	80032fe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	2b04      	cmp	r3, #4
 80032e8:	d107      	bne.n	80032fa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e06b      	b.n	80033d6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003302:	781a      	ldrb	r2, [r3, #0]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330e:	1c5a      	adds	r2, r3, #1
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003318:	3b01      	subs	r3, #1
 800331a:	b29a      	uxth	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003324:	b29b      	uxth	r3, r3
 8003326:	3b01      	subs	r3, #1
 8003328:	b29a      	uxth	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	f003 0304 	and.w	r3, r3, #4
 8003338:	2b04      	cmp	r3, #4
 800333a:	d11b      	bne.n	8003374 <HAL_I2C_Mem_Write+0x180>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003340:	2b00      	cmp	r3, #0
 8003342:	d017      	beq.n	8003374 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003348:	781a      	ldrb	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003354:	1c5a      	adds	r2, r3, #1
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800335e:	3b01      	subs	r3, #1
 8003360:	b29a      	uxth	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800336a:	b29b      	uxth	r3, r3
 800336c:	3b01      	subs	r3, #1
 800336e:	b29a      	uxth	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1aa      	bne.n	80032d2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f000 fcec 	bl	8003d5e <I2C_WaitOnBTFFlagUntilTimeout>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00d      	beq.n	80033a8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003390:	2b04      	cmp	r3, #4
 8003392:	d107      	bne.n	80033a4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033a2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e016      	b.n	80033d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2220      	movs	r2, #32
 80033bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80033d0:	2300      	movs	r3, #0
 80033d2:	e000      	b.n	80033d6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80033d4:	2302      	movs	r3, #2
  }
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3718      	adds	r7, #24
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	00100002 	.word	0x00100002
 80033e4:	ffff0000 	.word	0xffff0000

080033e8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b08c      	sub	sp, #48	; 0x30
 80033ec:	af02      	add	r7, sp, #8
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	4608      	mov	r0, r1
 80033f2:	4611      	mov	r1, r2
 80033f4:	461a      	mov	r2, r3
 80033f6:	4603      	mov	r3, r0
 80033f8:	817b      	strh	r3, [r7, #10]
 80033fa:	460b      	mov	r3, r1
 80033fc:	813b      	strh	r3, [r7, #8]
 80033fe:	4613      	mov	r3, r2
 8003400:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003402:	f7ff fa4d 	bl	80028a0 <HAL_GetTick>
 8003406:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800340e:	b2db      	uxtb	r3, r3
 8003410:	2b20      	cmp	r3, #32
 8003412:	f040 8208 	bne.w	8003826 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003418:	9300      	str	r3, [sp, #0]
 800341a:	2319      	movs	r3, #25
 800341c:	2201      	movs	r2, #1
 800341e:	497b      	ldr	r1, [pc, #492]	; (800360c <HAL_I2C_Mem_Read+0x224>)
 8003420:	68f8      	ldr	r0, [r7, #12]
 8003422:	f000 fb85 	bl	8003b30 <I2C_WaitOnFlagUntilTimeout>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800342c:	2302      	movs	r3, #2
 800342e:	e1fb      	b.n	8003828 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003436:	2b01      	cmp	r3, #1
 8003438:	d101      	bne.n	800343e <HAL_I2C_Mem_Read+0x56>
 800343a:	2302      	movs	r3, #2
 800343c:	e1f4      	b.n	8003828 <HAL_I2C_Mem_Read+0x440>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	2b01      	cmp	r3, #1
 8003452:	d007      	beq.n	8003464 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f042 0201 	orr.w	r2, r2, #1
 8003462:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003472:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2222      	movs	r2, #34	; 0x22
 8003478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2240      	movs	r2, #64	; 0x40
 8003480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800348e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003494:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800349a:	b29a      	uxth	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	4a5b      	ldr	r2, [pc, #364]	; (8003610 <HAL_I2C_Mem_Read+0x228>)
 80034a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034a6:	88f8      	ldrh	r0, [r7, #6]
 80034a8:	893a      	ldrh	r2, [r7, #8]
 80034aa:	8979      	ldrh	r1, [r7, #10]
 80034ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ae:	9301      	str	r3, [sp, #4]
 80034b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b2:	9300      	str	r3, [sp, #0]
 80034b4:	4603      	mov	r3, r0
 80034b6:	68f8      	ldr	r0, [r7, #12]
 80034b8:	f000 fa52 	bl	8003960 <I2C_RequestMemoryRead>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e1b0      	b.n	8003828 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d113      	bne.n	80034f6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ce:	2300      	movs	r3, #0
 80034d0:	623b      	str	r3, [r7, #32]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	623b      	str	r3, [r7, #32]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	623b      	str	r3, [r7, #32]
 80034e2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	e184      	b.n	8003800 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d11b      	bne.n	8003536 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800350c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800350e:	2300      	movs	r3, #0
 8003510:	61fb      	str	r3, [r7, #28]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	61fb      	str	r3, [r7, #28]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	61fb      	str	r3, [r7, #28]
 8003522:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003532:	601a      	str	r2, [r3, #0]
 8003534:	e164      	b.n	8003800 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800353a:	2b02      	cmp	r3, #2
 800353c:	d11b      	bne.n	8003576 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800354c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800355c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800355e:	2300      	movs	r3, #0
 8003560:	61bb      	str	r3, [r7, #24]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	695b      	ldr	r3, [r3, #20]
 8003568:	61bb      	str	r3, [r7, #24]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	61bb      	str	r3, [r7, #24]
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	e144      	b.n	8003800 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003576:	2300      	movs	r3, #0
 8003578:	617b      	str	r3, [r7, #20]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	695b      	ldr	r3, [r3, #20]
 8003580:	617b      	str	r3, [r7, #20]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	617b      	str	r3, [r7, #20]
 800358a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800358c:	e138      	b.n	8003800 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003592:	2b03      	cmp	r3, #3
 8003594:	f200 80f1 	bhi.w	800377a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800359c:	2b01      	cmp	r3, #1
 800359e:	d123      	bne.n	80035e8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f000 fc1b 	bl	8003de0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d001      	beq.n	80035b4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e139      	b.n	8003828 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	691a      	ldr	r2, [r3, #16]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035be:	b2d2      	uxtb	r2, r2
 80035c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c6:	1c5a      	adds	r2, r3, #1
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035d0:	3b01      	subs	r3, #1
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035dc:	b29b      	uxth	r3, r3
 80035de:	3b01      	subs	r3, #1
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035e6:	e10b      	b.n	8003800 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d14e      	bne.n	800368e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f2:	9300      	str	r3, [sp, #0]
 80035f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f6:	2200      	movs	r2, #0
 80035f8:	4906      	ldr	r1, [pc, #24]	; (8003614 <HAL_I2C_Mem_Read+0x22c>)
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f000 fa98 	bl	8003b30 <I2C_WaitOnFlagUntilTimeout>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d008      	beq.n	8003618 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e10e      	b.n	8003828 <HAL_I2C_Mem_Read+0x440>
 800360a:	bf00      	nop
 800360c:	00100002 	.word	0x00100002
 8003610:	ffff0000 	.word	0xffff0000
 8003614:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003626:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	691a      	ldr	r2, [r3, #16]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	b2d2      	uxtb	r2, r2
 8003634:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	1c5a      	adds	r2, r3, #1
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003644:	3b01      	subs	r3, #1
 8003646:	b29a      	uxth	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003650:	b29b      	uxth	r3, r3
 8003652:	3b01      	subs	r3, #1
 8003654:	b29a      	uxth	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	691a      	ldr	r2, [r3, #16]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	b2d2      	uxtb	r2, r2
 8003666:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366c:	1c5a      	adds	r2, r3, #1
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003676:	3b01      	subs	r3, #1
 8003678:	b29a      	uxth	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003682:	b29b      	uxth	r3, r3
 8003684:	3b01      	subs	r3, #1
 8003686:	b29a      	uxth	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800368c:	e0b8      	b.n	8003800 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800368e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003690:	9300      	str	r3, [sp, #0]
 8003692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003694:	2200      	movs	r2, #0
 8003696:	4966      	ldr	r1, [pc, #408]	; (8003830 <HAL_I2C_Mem_Read+0x448>)
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f000 fa49 	bl	8003b30 <I2C_WaitOnFlagUntilTimeout>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d001      	beq.n	80036a8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e0bf      	b.n	8003828 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	691a      	ldr	r2, [r3, #16]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c2:	b2d2      	uxtb	r2, r2
 80036c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ca:	1c5a      	adds	r2, r3, #1
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d4:	3b01      	subs	r3, #1
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	3b01      	subs	r3, #1
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f0:	2200      	movs	r2, #0
 80036f2:	494f      	ldr	r1, [pc, #316]	; (8003830 <HAL_I2C_Mem_Read+0x448>)
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f000 fa1b 	bl	8003b30 <I2C_WaitOnFlagUntilTimeout>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d001      	beq.n	8003704 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e091      	b.n	8003828 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003712:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	691a      	ldr	r2, [r3, #16]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371e:	b2d2      	uxtb	r2, r2
 8003720:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003726:	1c5a      	adds	r2, r3, #1
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003730:	3b01      	subs	r3, #1
 8003732:	b29a      	uxth	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800373c:	b29b      	uxth	r3, r3
 800373e:	3b01      	subs	r3, #1
 8003740:	b29a      	uxth	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	691a      	ldr	r2, [r3, #16]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003750:	b2d2      	uxtb	r2, r2
 8003752:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	1c5a      	adds	r2, r3, #1
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003762:	3b01      	subs	r3, #1
 8003764:	b29a      	uxth	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376e:	b29b      	uxth	r3, r3
 8003770:	3b01      	subs	r3, #1
 8003772:	b29a      	uxth	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003778:	e042      	b.n	8003800 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800377a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800377c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f000 fb2e 	bl	8003de0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e04c      	b.n	8003828 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	691a      	ldr	r2, [r3, #16]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003798:	b2d2      	uxtb	r2, r2
 800379a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a0:	1c5a      	adds	r2, r3, #1
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037aa:	3b01      	subs	r3, #1
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	3b01      	subs	r3, #1
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	f003 0304 	and.w	r3, r3, #4
 80037ca:	2b04      	cmp	r3, #4
 80037cc:	d118      	bne.n	8003800 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	691a      	ldr	r2, [r3, #16]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d8:	b2d2      	uxtb	r2, r2
 80037da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e0:	1c5a      	adds	r2, r3, #1
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ea:	3b01      	subs	r3, #1
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	3b01      	subs	r3, #1
 80037fa:	b29a      	uxth	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003804:	2b00      	cmp	r3, #0
 8003806:	f47f aec2 	bne.w	800358e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2220      	movs	r2, #32
 800380e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003822:	2300      	movs	r3, #0
 8003824:	e000      	b.n	8003828 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003826:	2302      	movs	r3, #2
  }
}
 8003828:	4618      	mov	r0, r3
 800382a:	3728      	adds	r7, #40	; 0x28
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	00010004 	.word	0x00010004

08003834 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b088      	sub	sp, #32
 8003838:	af02      	add	r7, sp, #8
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	4608      	mov	r0, r1
 800383e:	4611      	mov	r1, r2
 8003840:	461a      	mov	r2, r3
 8003842:	4603      	mov	r3, r0
 8003844:	817b      	strh	r3, [r7, #10]
 8003846:	460b      	mov	r3, r1
 8003848:	813b      	strh	r3, [r7, #8]
 800384a:	4613      	mov	r3, r2
 800384c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800385c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800385e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	2200      	movs	r2, #0
 8003866:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f000 f960 	bl	8003b30 <I2C_WaitOnFlagUntilTimeout>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00d      	beq.n	8003892 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003880:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003884:	d103      	bne.n	800388e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f44f 7200 	mov.w	r2, #512	; 0x200
 800388c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e05f      	b.n	8003952 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003892:	897b      	ldrh	r3, [r7, #10]
 8003894:	b2db      	uxtb	r3, r3
 8003896:	461a      	mov	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80038a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a4:	6a3a      	ldr	r2, [r7, #32]
 80038a6:	492d      	ldr	r1, [pc, #180]	; (800395c <I2C_RequestMemoryWrite+0x128>)
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f000 f998 	bl	8003bde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e04c      	b.n	8003952 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038b8:	2300      	movs	r3, #0
 80038ba:	617b      	str	r3, [r7, #20]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	617b      	str	r3, [r7, #20]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	617b      	str	r3, [r7, #20]
 80038cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038d0:	6a39      	ldr	r1, [r7, #32]
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	f000 fa02 	bl	8003cdc <I2C_WaitOnTXEFlagUntilTimeout>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00d      	beq.n	80038fa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	2b04      	cmp	r3, #4
 80038e4:	d107      	bne.n	80038f6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e02b      	b.n	8003952 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038fa:	88fb      	ldrh	r3, [r7, #6]
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d105      	bne.n	800390c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003900:	893b      	ldrh	r3, [r7, #8]
 8003902:	b2da      	uxtb	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	611a      	str	r2, [r3, #16]
 800390a:	e021      	b.n	8003950 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800390c:	893b      	ldrh	r3, [r7, #8]
 800390e:	0a1b      	lsrs	r3, r3, #8
 8003910:	b29b      	uxth	r3, r3
 8003912:	b2da      	uxtb	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800391a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800391c:	6a39      	ldr	r1, [r7, #32]
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f000 f9dc 	bl	8003cdc <I2C_WaitOnTXEFlagUntilTimeout>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00d      	beq.n	8003946 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	2b04      	cmp	r3, #4
 8003930:	d107      	bne.n	8003942 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003940:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e005      	b.n	8003952 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003946:	893b      	ldrh	r3, [r7, #8]
 8003948:	b2da      	uxtb	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3718      	adds	r7, #24
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	00010002 	.word	0x00010002

08003960 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b088      	sub	sp, #32
 8003964:	af02      	add	r7, sp, #8
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	4608      	mov	r0, r1
 800396a:	4611      	mov	r1, r2
 800396c:	461a      	mov	r2, r3
 800396e:	4603      	mov	r3, r0
 8003970:	817b      	strh	r3, [r7, #10]
 8003972:	460b      	mov	r3, r1
 8003974:	813b      	strh	r3, [r7, #8]
 8003976:	4613      	mov	r3, r2
 8003978:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003988:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003998:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800399a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399c:	9300      	str	r3, [sp, #0]
 800399e:	6a3b      	ldr	r3, [r7, #32]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f000 f8c2 	bl	8003b30 <I2C_WaitOnFlagUntilTimeout>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00d      	beq.n	80039ce <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039c0:	d103      	bne.n	80039ca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e0aa      	b.n	8003b24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039ce:	897b      	ldrh	r3, [r7, #10]
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	461a      	mov	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e0:	6a3a      	ldr	r2, [r7, #32]
 80039e2:	4952      	ldr	r1, [pc, #328]	; (8003b2c <I2C_RequestMemoryRead+0x1cc>)
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f000 f8fa 	bl	8003bde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e097      	b.n	8003b24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039f4:	2300      	movs	r3, #0
 80039f6:	617b      	str	r3, [r7, #20]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	617b      	str	r3, [r7, #20]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	617b      	str	r3, [r7, #20]
 8003a08:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a0c:	6a39      	ldr	r1, [r7, #32]
 8003a0e:	68f8      	ldr	r0, [r7, #12]
 8003a10:	f000 f964 	bl	8003cdc <I2C_WaitOnTXEFlagUntilTimeout>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00d      	beq.n	8003a36 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	2b04      	cmp	r3, #4
 8003a20:	d107      	bne.n	8003a32 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a30:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e076      	b.n	8003b24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a36:	88fb      	ldrh	r3, [r7, #6]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d105      	bne.n	8003a48 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a3c:	893b      	ldrh	r3, [r7, #8]
 8003a3e:	b2da      	uxtb	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	611a      	str	r2, [r3, #16]
 8003a46:	e021      	b.n	8003a8c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a48:	893b      	ldrh	r3, [r7, #8]
 8003a4a:	0a1b      	lsrs	r3, r3, #8
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	b2da      	uxtb	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a58:	6a39      	ldr	r1, [r7, #32]
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f000 f93e 	bl	8003cdc <I2C_WaitOnTXEFlagUntilTimeout>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00d      	beq.n	8003a82 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	d107      	bne.n	8003a7e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a7c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e050      	b.n	8003b24 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a82:	893b      	ldrh	r3, [r7, #8]
 8003a84:	b2da      	uxtb	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a8e:	6a39      	ldr	r1, [r7, #32]
 8003a90:	68f8      	ldr	r0, [r7, #12]
 8003a92:	f000 f923 	bl	8003cdc <I2C_WaitOnTXEFlagUntilTimeout>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00d      	beq.n	8003ab8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa0:	2b04      	cmp	r3, #4
 8003aa2:	d107      	bne.n	8003ab4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ab2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e035      	b.n	8003b24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ac6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aca:	9300      	str	r3, [sp, #0]
 8003acc:	6a3b      	ldr	r3, [r7, #32]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f000 f82b 	bl	8003b30 <I2C_WaitOnFlagUntilTimeout>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00d      	beq.n	8003afc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aee:	d103      	bne.n	8003af8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003af6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e013      	b.n	8003b24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003afc:	897b      	ldrh	r3, [r7, #10]
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	f043 0301 	orr.w	r3, r3, #1
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0e:	6a3a      	ldr	r2, [r7, #32]
 8003b10:	4906      	ldr	r1, [pc, #24]	; (8003b2c <I2C_RequestMemoryRead+0x1cc>)
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	f000 f863 	bl	8003bde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e000      	b.n	8003b24 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3718      	adds	r7, #24
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	00010002 	.word	0x00010002

08003b30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	603b      	str	r3, [r7, #0]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b40:	e025      	b.n	8003b8e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b48:	d021      	beq.n	8003b8e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b4a:	f7fe fea9 	bl	80028a0 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	683a      	ldr	r2, [r7, #0]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d302      	bcc.n	8003b60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d116      	bne.n	8003b8e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7a:	f043 0220 	orr.w	r2, r3, #32
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e023      	b.n	8003bd6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	0c1b      	lsrs	r3, r3, #16
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d10d      	bne.n	8003bb4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	43da      	mvns	r2, r3
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	bf0c      	ite	eq
 8003baa:	2301      	moveq	r3, #1
 8003bac:	2300      	movne	r3, #0
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	e00c      	b.n	8003bce <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	43da      	mvns	r2, r3
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	bf0c      	ite	eq
 8003bc6:	2301      	moveq	r3, #1
 8003bc8:	2300      	movne	r3, #0
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	461a      	mov	r2, r3
 8003bce:	79fb      	ldrb	r3, [r7, #7]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d0b6      	beq.n	8003b42 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b084      	sub	sp, #16
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	60f8      	str	r0, [r7, #12]
 8003be6:	60b9      	str	r1, [r7, #8]
 8003be8:	607a      	str	r2, [r7, #4]
 8003bea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bec:	e051      	b.n	8003c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bfc:	d123      	bne.n	8003c46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c0c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c16:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2220      	movs	r2, #32
 8003c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	f043 0204 	orr.w	r2, r3, #4
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e046      	b.n	8003cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c4c:	d021      	beq.n	8003c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c4e:	f7fe fe27 	bl	80028a0 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d302      	bcc.n	8003c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d116      	bne.n	8003c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7e:	f043 0220 	orr.w	r2, r3, #32
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e020      	b.n	8003cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	0c1b      	lsrs	r3, r3, #16
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d10c      	bne.n	8003cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	43da      	mvns	r2, r3
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	bf14      	ite	ne
 8003cae:	2301      	movne	r3, #1
 8003cb0:	2300      	moveq	r3, #0
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	e00b      	b.n	8003cce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	43da      	mvns	r2, r3
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	bf14      	ite	ne
 8003cc8:	2301      	movne	r3, #1
 8003cca:	2300      	moveq	r3, #0
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d18d      	bne.n	8003bee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003cd2:	2300      	movs	r3, #0
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ce8:	e02d      	b.n	8003d46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f000 f8ce 	bl	8003e8c <I2C_IsAcknowledgeFailed>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e02d      	b.n	8003d56 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d00:	d021      	beq.n	8003d46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d02:	f7fe fdcd 	bl	80028a0 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d302      	bcc.n	8003d18 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d116      	bne.n	8003d46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2220      	movs	r2, #32
 8003d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d32:	f043 0220 	orr.w	r2, r3, #32
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e007      	b.n	8003d56 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d50:	2b80      	cmp	r3, #128	; 0x80
 8003d52:	d1ca      	bne.n	8003cea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b084      	sub	sp, #16
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	60f8      	str	r0, [r7, #12]
 8003d66:	60b9      	str	r1, [r7, #8]
 8003d68:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d6a:	e02d      	b.n	8003dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	f000 f88d 	bl	8003e8c <I2C_IsAcknowledgeFailed>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e02d      	b.n	8003dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d82:	d021      	beq.n	8003dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d84:	f7fe fd8c 	bl	80028a0 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d302      	bcc.n	8003d9a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d116      	bne.n	8003dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2220      	movs	r2, #32
 8003da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db4:	f043 0220 	orr.w	r2, r3, #32
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e007      	b.n	8003dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	f003 0304 	and.w	r3, r3, #4
 8003dd2:	2b04      	cmp	r3, #4
 8003dd4:	d1ca      	bne.n	8003d6c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003dec:	e042      	b.n	8003e74 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	f003 0310 	and.w	r3, r3, #16
 8003df8:	2b10      	cmp	r3, #16
 8003dfa:	d119      	bne.n	8003e30 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f06f 0210 	mvn.w	r2, #16
 8003e04:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e029      	b.n	8003e84 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e30:	f7fe fd36 	bl	80028a0 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	68ba      	ldr	r2, [r7, #8]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d302      	bcc.n	8003e46 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d116      	bne.n	8003e74 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e60:	f043 0220 	orr.w	r2, r3, #32
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e007      	b.n	8003e84 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e7e:	2b40      	cmp	r3, #64	; 0x40
 8003e80:	d1b5      	bne.n	8003dee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ea2:	d11b      	bne.n	8003edc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003eac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec8:	f043 0204 	orr.w	r2, r3, #4
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e000      	b.n	8003ede <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
	...

08003eec <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8003ef0:	4b06      	ldr	r3, [pc, #24]	; (8003f0c <HAL_PWR_PVD_IRQHandler+0x20>)
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d005      	beq.n	8003f08 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8003efc:	f000 f808 	bl	8003f10 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8003f00:	4b02      	ldr	r3, [pc, #8]	; (8003f0c <HAL_PWR_PVD_IRQHandler+0x20>)
 8003f02:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003f06:	615a      	str	r2, [r3, #20]
  }
}
 8003f08:	bf00      	nop
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	40013c00 	.word	0x40013c00

08003f10 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8003f10:	b480      	push	{r7}
 8003f12:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8003f14:	bf00      	nop
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
	...

08003f20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e264      	b.n	80043fc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d075      	beq.n	800402a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f3e:	4ba3      	ldr	r3, [pc, #652]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f003 030c 	and.w	r3, r3, #12
 8003f46:	2b04      	cmp	r3, #4
 8003f48:	d00c      	beq.n	8003f64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f4a:	4ba0      	ldr	r3, [pc, #640]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f52:	2b08      	cmp	r3, #8
 8003f54:	d112      	bne.n	8003f7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f56:	4b9d      	ldr	r3, [pc, #628]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f62:	d10b      	bne.n	8003f7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f64:	4b99      	ldr	r3, [pc, #612]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d05b      	beq.n	8004028 <HAL_RCC_OscConfig+0x108>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d157      	bne.n	8004028 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e23f      	b.n	80043fc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f84:	d106      	bne.n	8003f94 <HAL_RCC_OscConfig+0x74>
 8003f86:	4b91      	ldr	r3, [pc, #580]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a90      	ldr	r2, [pc, #576]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 8003f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f90:	6013      	str	r3, [r2, #0]
 8003f92:	e01d      	b.n	8003fd0 <HAL_RCC_OscConfig+0xb0>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f9c:	d10c      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x98>
 8003f9e:	4b8b      	ldr	r3, [pc, #556]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a8a      	ldr	r2, [pc, #552]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 8003fa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fa8:	6013      	str	r3, [r2, #0]
 8003faa:	4b88      	ldr	r3, [pc, #544]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a87      	ldr	r2, [pc, #540]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 8003fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fb4:	6013      	str	r3, [r2, #0]
 8003fb6:	e00b      	b.n	8003fd0 <HAL_RCC_OscConfig+0xb0>
 8003fb8:	4b84      	ldr	r3, [pc, #528]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a83      	ldr	r2, [pc, #524]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 8003fbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fc2:	6013      	str	r3, [r2, #0]
 8003fc4:	4b81      	ldr	r3, [pc, #516]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a80      	ldr	r2, [pc, #512]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 8003fca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d013      	beq.n	8004000 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd8:	f7fe fc62 	bl	80028a0 <HAL_GetTick>
 8003fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fde:	e008      	b.n	8003ff2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fe0:	f7fe fc5e 	bl	80028a0 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b64      	cmp	r3, #100	; 0x64
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e204      	b.n	80043fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ff2:	4b76      	ldr	r3, [pc, #472]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d0f0      	beq.n	8003fe0 <HAL_RCC_OscConfig+0xc0>
 8003ffe:	e014      	b.n	800402a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004000:	f7fe fc4e 	bl	80028a0 <HAL_GetTick>
 8004004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004006:	e008      	b.n	800401a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004008:	f7fe fc4a 	bl	80028a0 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	2b64      	cmp	r3, #100	; 0x64
 8004014:	d901      	bls.n	800401a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e1f0      	b.n	80043fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800401a:	4b6c      	ldr	r3, [pc, #432]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1f0      	bne.n	8004008 <HAL_RCC_OscConfig+0xe8>
 8004026:	e000      	b.n	800402a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004028:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d063      	beq.n	80040fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004036:	4b65      	ldr	r3, [pc, #404]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f003 030c 	and.w	r3, r3, #12
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00b      	beq.n	800405a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004042:	4b62      	ldr	r3, [pc, #392]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800404a:	2b08      	cmp	r3, #8
 800404c:	d11c      	bne.n	8004088 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800404e:	4b5f      	ldr	r3, [pc, #380]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d116      	bne.n	8004088 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800405a:	4b5c      	ldr	r3, [pc, #368]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b00      	cmp	r3, #0
 8004064:	d005      	beq.n	8004072 <HAL_RCC_OscConfig+0x152>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d001      	beq.n	8004072 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e1c4      	b.n	80043fc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004072:	4b56      	ldr	r3, [pc, #344]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	00db      	lsls	r3, r3, #3
 8004080:	4952      	ldr	r1, [pc, #328]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 8004082:	4313      	orrs	r3, r2
 8004084:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004086:	e03a      	b.n	80040fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d020      	beq.n	80040d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004090:	4b4f      	ldr	r3, [pc, #316]	; (80041d0 <HAL_RCC_OscConfig+0x2b0>)
 8004092:	2201      	movs	r2, #1
 8004094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004096:	f7fe fc03 	bl	80028a0 <HAL_GetTick>
 800409a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800409c:	e008      	b.n	80040b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800409e:	f7fe fbff 	bl	80028a0 <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d901      	bls.n	80040b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e1a5      	b.n	80043fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040b0:	4b46      	ldr	r3, [pc, #280]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d0f0      	beq.n	800409e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040bc:	4b43      	ldr	r3, [pc, #268]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	00db      	lsls	r3, r3, #3
 80040ca:	4940      	ldr	r1, [pc, #256]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	600b      	str	r3, [r1, #0]
 80040d0:	e015      	b.n	80040fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040d2:	4b3f      	ldr	r3, [pc, #252]	; (80041d0 <HAL_RCC_OscConfig+0x2b0>)
 80040d4:	2200      	movs	r2, #0
 80040d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d8:	f7fe fbe2 	bl	80028a0 <HAL_GetTick>
 80040dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040de:	e008      	b.n	80040f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040e0:	f7fe fbde 	bl	80028a0 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e184      	b.n	80043fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040f2:	4b36      	ldr	r3, [pc, #216]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1f0      	bne.n	80040e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0308 	and.w	r3, r3, #8
 8004106:	2b00      	cmp	r3, #0
 8004108:	d030      	beq.n	800416c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d016      	beq.n	8004140 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004112:	4b30      	ldr	r3, [pc, #192]	; (80041d4 <HAL_RCC_OscConfig+0x2b4>)
 8004114:	2201      	movs	r2, #1
 8004116:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004118:	f7fe fbc2 	bl	80028a0 <HAL_GetTick>
 800411c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800411e:	e008      	b.n	8004132 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004120:	f7fe fbbe 	bl	80028a0 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b02      	cmp	r3, #2
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e164      	b.n	80043fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004132:	4b26      	ldr	r3, [pc, #152]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 8004134:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d0f0      	beq.n	8004120 <HAL_RCC_OscConfig+0x200>
 800413e:	e015      	b.n	800416c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004140:	4b24      	ldr	r3, [pc, #144]	; (80041d4 <HAL_RCC_OscConfig+0x2b4>)
 8004142:	2200      	movs	r2, #0
 8004144:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004146:	f7fe fbab 	bl	80028a0 <HAL_GetTick>
 800414a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800414c:	e008      	b.n	8004160 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800414e:	f7fe fba7 	bl	80028a0 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	2b02      	cmp	r3, #2
 800415a:	d901      	bls.n	8004160 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e14d      	b.n	80043fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004160:	4b1a      	ldr	r3, [pc, #104]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 8004162:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1f0      	bne.n	800414e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0304 	and.w	r3, r3, #4
 8004174:	2b00      	cmp	r3, #0
 8004176:	f000 80a0 	beq.w	80042ba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800417a:	2300      	movs	r3, #0
 800417c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800417e:	4b13      	ldr	r3, [pc, #76]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10f      	bne.n	80041aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800418a:	2300      	movs	r3, #0
 800418c:	60bb      	str	r3, [r7, #8]
 800418e:	4b0f      	ldr	r3, [pc, #60]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 8004190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004192:	4a0e      	ldr	r2, [pc, #56]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 8004194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004198:	6413      	str	r3, [r2, #64]	; 0x40
 800419a:	4b0c      	ldr	r3, [pc, #48]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 800419c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a2:	60bb      	str	r3, [r7, #8]
 80041a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041a6:	2301      	movs	r3, #1
 80041a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041aa:	4b0b      	ldr	r3, [pc, #44]	; (80041d8 <HAL_RCC_OscConfig+0x2b8>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d121      	bne.n	80041fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041b6:	4b08      	ldr	r3, [pc, #32]	; (80041d8 <HAL_RCC_OscConfig+0x2b8>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a07      	ldr	r2, [pc, #28]	; (80041d8 <HAL_RCC_OscConfig+0x2b8>)
 80041bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041c2:	f7fe fb6d 	bl	80028a0 <HAL_GetTick>
 80041c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041c8:	e011      	b.n	80041ee <HAL_RCC_OscConfig+0x2ce>
 80041ca:	bf00      	nop
 80041cc:	40023800 	.word	0x40023800
 80041d0:	42470000 	.word	0x42470000
 80041d4:	42470e80 	.word	0x42470e80
 80041d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041dc:	f7fe fb60 	bl	80028a0 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e106      	b.n	80043fc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ee:	4b85      	ldr	r3, [pc, #532]	; (8004404 <HAL_RCC_OscConfig+0x4e4>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d0f0      	beq.n	80041dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d106      	bne.n	8004210 <HAL_RCC_OscConfig+0x2f0>
 8004202:	4b81      	ldr	r3, [pc, #516]	; (8004408 <HAL_RCC_OscConfig+0x4e8>)
 8004204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004206:	4a80      	ldr	r2, [pc, #512]	; (8004408 <HAL_RCC_OscConfig+0x4e8>)
 8004208:	f043 0301 	orr.w	r3, r3, #1
 800420c:	6713      	str	r3, [r2, #112]	; 0x70
 800420e:	e01c      	b.n	800424a <HAL_RCC_OscConfig+0x32a>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	2b05      	cmp	r3, #5
 8004216:	d10c      	bne.n	8004232 <HAL_RCC_OscConfig+0x312>
 8004218:	4b7b      	ldr	r3, [pc, #492]	; (8004408 <HAL_RCC_OscConfig+0x4e8>)
 800421a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421c:	4a7a      	ldr	r2, [pc, #488]	; (8004408 <HAL_RCC_OscConfig+0x4e8>)
 800421e:	f043 0304 	orr.w	r3, r3, #4
 8004222:	6713      	str	r3, [r2, #112]	; 0x70
 8004224:	4b78      	ldr	r3, [pc, #480]	; (8004408 <HAL_RCC_OscConfig+0x4e8>)
 8004226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004228:	4a77      	ldr	r2, [pc, #476]	; (8004408 <HAL_RCC_OscConfig+0x4e8>)
 800422a:	f043 0301 	orr.w	r3, r3, #1
 800422e:	6713      	str	r3, [r2, #112]	; 0x70
 8004230:	e00b      	b.n	800424a <HAL_RCC_OscConfig+0x32a>
 8004232:	4b75      	ldr	r3, [pc, #468]	; (8004408 <HAL_RCC_OscConfig+0x4e8>)
 8004234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004236:	4a74      	ldr	r2, [pc, #464]	; (8004408 <HAL_RCC_OscConfig+0x4e8>)
 8004238:	f023 0301 	bic.w	r3, r3, #1
 800423c:	6713      	str	r3, [r2, #112]	; 0x70
 800423e:	4b72      	ldr	r3, [pc, #456]	; (8004408 <HAL_RCC_OscConfig+0x4e8>)
 8004240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004242:	4a71      	ldr	r2, [pc, #452]	; (8004408 <HAL_RCC_OscConfig+0x4e8>)
 8004244:	f023 0304 	bic.w	r3, r3, #4
 8004248:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d015      	beq.n	800427e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004252:	f7fe fb25 	bl	80028a0 <HAL_GetTick>
 8004256:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004258:	e00a      	b.n	8004270 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800425a:	f7fe fb21 	bl	80028a0 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	f241 3288 	movw	r2, #5000	; 0x1388
 8004268:	4293      	cmp	r3, r2
 800426a:	d901      	bls.n	8004270 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e0c5      	b.n	80043fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004270:	4b65      	ldr	r3, [pc, #404]	; (8004408 <HAL_RCC_OscConfig+0x4e8>)
 8004272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d0ee      	beq.n	800425a <HAL_RCC_OscConfig+0x33a>
 800427c:	e014      	b.n	80042a8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800427e:	f7fe fb0f 	bl	80028a0 <HAL_GetTick>
 8004282:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004284:	e00a      	b.n	800429c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004286:	f7fe fb0b 	bl	80028a0 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	f241 3288 	movw	r2, #5000	; 0x1388
 8004294:	4293      	cmp	r3, r2
 8004296:	d901      	bls.n	800429c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e0af      	b.n	80043fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800429c:	4b5a      	ldr	r3, [pc, #360]	; (8004408 <HAL_RCC_OscConfig+0x4e8>)
 800429e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a0:	f003 0302 	and.w	r3, r3, #2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1ee      	bne.n	8004286 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042a8:	7dfb      	ldrb	r3, [r7, #23]
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d105      	bne.n	80042ba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042ae:	4b56      	ldr	r3, [pc, #344]	; (8004408 <HAL_RCC_OscConfig+0x4e8>)
 80042b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b2:	4a55      	ldr	r2, [pc, #340]	; (8004408 <HAL_RCC_OscConfig+0x4e8>)
 80042b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f000 809b 	beq.w	80043fa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042c4:	4b50      	ldr	r3, [pc, #320]	; (8004408 <HAL_RCC_OscConfig+0x4e8>)
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f003 030c 	and.w	r3, r3, #12
 80042cc:	2b08      	cmp	r3, #8
 80042ce:	d05c      	beq.n	800438a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d141      	bne.n	800435c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042d8:	4b4c      	ldr	r3, [pc, #304]	; (800440c <HAL_RCC_OscConfig+0x4ec>)
 80042da:	2200      	movs	r2, #0
 80042dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042de:	f7fe fadf 	bl	80028a0 <HAL_GetTick>
 80042e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042e4:	e008      	b.n	80042f8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042e6:	f7fe fadb 	bl	80028a0 <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d901      	bls.n	80042f8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e081      	b.n	80043fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042f8:	4b43      	ldr	r3, [pc, #268]	; (8004408 <HAL_RCC_OscConfig+0x4e8>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d1f0      	bne.n	80042e6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	69da      	ldr	r2, [r3, #28]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a1b      	ldr	r3, [r3, #32]
 800430c:	431a      	orrs	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004312:	019b      	lsls	r3, r3, #6
 8004314:	431a      	orrs	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800431a:	085b      	lsrs	r3, r3, #1
 800431c:	3b01      	subs	r3, #1
 800431e:	041b      	lsls	r3, r3, #16
 8004320:	431a      	orrs	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004326:	061b      	lsls	r3, r3, #24
 8004328:	4937      	ldr	r1, [pc, #220]	; (8004408 <HAL_RCC_OscConfig+0x4e8>)
 800432a:	4313      	orrs	r3, r2
 800432c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800432e:	4b37      	ldr	r3, [pc, #220]	; (800440c <HAL_RCC_OscConfig+0x4ec>)
 8004330:	2201      	movs	r2, #1
 8004332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004334:	f7fe fab4 	bl	80028a0 <HAL_GetTick>
 8004338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800433a:	e008      	b.n	800434e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800433c:	f7fe fab0 	bl	80028a0 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e056      	b.n	80043fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800434e:	4b2e      	ldr	r3, [pc, #184]	; (8004408 <HAL_RCC_OscConfig+0x4e8>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d0f0      	beq.n	800433c <HAL_RCC_OscConfig+0x41c>
 800435a:	e04e      	b.n	80043fa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800435c:	4b2b      	ldr	r3, [pc, #172]	; (800440c <HAL_RCC_OscConfig+0x4ec>)
 800435e:	2200      	movs	r2, #0
 8004360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004362:	f7fe fa9d 	bl	80028a0 <HAL_GetTick>
 8004366:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004368:	e008      	b.n	800437c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800436a:	f7fe fa99 	bl	80028a0 <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	2b02      	cmp	r3, #2
 8004376:	d901      	bls.n	800437c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e03f      	b.n	80043fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800437c:	4b22      	ldr	r3, [pc, #136]	; (8004408 <HAL_RCC_OscConfig+0x4e8>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1f0      	bne.n	800436a <HAL_RCC_OscConfig+0x44a>
 8004388:	e037      	b.n	80043fa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d101      	bne.n	8004396 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e032      	b.n	80043fc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004396:	4b1c      	ldr	r3, [pc, #112]	; (8004408 <HAL_RCC_OscConfig+0x4e8>)
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d028      	beq.n	80043f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d121      	bne.n	80043f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043bc:	429a      	cmp	r2, r3
 80043be:	d11a      	bne.n	80043f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043c6:	4013      	ands	r3, r2
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043cc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d111      	bne.n	80043f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043dc:	085b      	lsrs	r3, r3, #1
 80043de:	3b01      	subs	r3, #1
 80043e0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d107      	bne.n	80043f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d001      	beq.n	80043fa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e000      	b.n	80043fc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3718      	adds	r7, #24
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	40007000 	.word	0x40007000
 8004408:	40023800 	.word	0x40023800
 800440c:	42470060 	.word	0x42470060

08004410 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d101      	bne.n	8004424 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e0cc      	b.n	80045be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004424:	4b68      	ldr	r3, [pc, #416]	; (80045c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0307 	and.w	r3, r3, #7
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	429a      	cmp	r2, r3
 8004430:	d90c      	bls.n	800444c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004432:	4b65      	ldr	r3, [pc, #404]	; (80045c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004434:	683a      	ldr	r2, [r7, #0]
 8004436:	b2d2      	uxtb	r2, r2
 8004438:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800443a:	4b63      	ldr	r3, [pc, #396]	; (80045c8 <HAL_RCC_ClockConfig+0x1b8>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0307 	and.w	r3, r3, #7
 8004442:	683a      	ldr	r2, [r7, #0]
 8004444:	429a      	cmp	r2, r3
 8004446:	d001      	beq.n	800444c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e0b8      	b.n	80045be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d020      	beq.n	800449a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0304 	and.w	r3, r3, #4
 8004460:	2b00      	cmp	r3, #0
 8004462:	d005      	beq.n	8004470 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004464:	4b59      	ldr	r3, [pc, #356]	; (80045cc <HAL_RCC_ClockConfig+0x1bc>)
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	4a58      	ldr	r2, [pc, #352]	; (80045cc <HAL_RCC_ClockConfig+0x1bc>)
 800446a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800446e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0308 	and.w	r3, r3, #8
 8004478:	2b00      	cmp	r3, #0
 800447a:	d005      	beq.n	8004488 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800447c:	4b53      	ldr	r3, [pc, #332]	; (80045cc <HAL_RCC_ClockConfig+0x1bc>)
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	4a52      	ldr	r2, [pc, #328]	; (80045cc <HAL_RCC_ClockConfig+0x1bc>)
 8004482:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004486:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004488:	4b50      	ldr	r3, [pc, #320]	; (80045cc <HAL_RCC_ClockConfig+0x1bc>)
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	494d      	ldr	r1, [pc, #308]	; (80045cc <HAL_RCC_ClockConfig+0x1bc>)
 8004496:	4313      	orrs	r3, r2
 8004498:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d044      	beq.n	8004530 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d107      	bne.n	80044be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ae:	4b47      	ldr	r3, [pc, #284]	; (80045cc <HAL_RCC_ClockConfig+0x1bc>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d119      	bne.n	80044ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e07f      	b.n	80045be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d003      	beq.n	80044ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044ca:	2b03      	cmp	r3, #3
 80044cc:	d107      	bne.n	80044de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ce:	4b3f      	ldr	r3, [pc, #252]	; (80045cc <HAL_RCC_ClockConfig+0x1bc>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d109      	bne.n	80044ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e06f      	b.n	80045be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044de:	4b3b      	ldr	r3, [pc, #236]	; (80045cc <HAL_RCC_ClockConfig+0x1bc>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e067      	b.n	80045be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044ee:	4b37      	ldr	r3, [pc, #220]	; (80045cc <HAL_RCC_ClockConfig+0x1bc>)
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f023 0203 	bic.w	r2, r3, #3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	4934      	ldr	r1, [pc, #208]	; (80045cc <HAL_RCC_ClockConfig+0x1bc>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004500:	f7fe f9ce 	bl	80028a0 <HAL_GetTick>
 8004504:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004506:	e00a      	b.n	800451e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004508:	f7fe f9ca 	bl	80028a0 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	f241 3288 	movw	r2, #5000	; 0x1388
 8004516:	4293      	cmp	r3, r2
 8004518:	d901      	bls.n	800451e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e04f      	b.n	80045be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800451e:	4b2b      	ldr	r3, [pc, #172]	; (80045cc <HAL_RCC_ClockConfig+0x1bc>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f003 020c 	and.w	r2, r3, #12
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	429a      	cmp	r2, r3
 800452e:	d1eb      	bne.n	8004508 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004530:	4b25      	ldr	r3, [pc, #148]	; (80045c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0307 	and.w	r3, r3, #7
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	429a      	cmp	r2, r3
 800453c:	d20c      	bcs.n	8004558 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800453e:	4b22      	ldr	r3, [pc, #136]	; (80045c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004540:	683a      	ldr	r2, [r7, #0]
 8004542:	b2d2      	uxtb	r2, r2
 8004544:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004546:	4b20      	ldr	r3, [pc, #128]	; (80045c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0307 	and.w	r3, r3, #7
 800454e:	683a      	ldr	r2, [r7, #0]
 8004550:	429a      	cmp	r2, r3
 8004552:	d001      	beq.n	8004558 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e032      	b.n	80045be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0304 	and.w	r3, r3, #4
 8004560:	2b00      	cmp	r3, #0
 8004562:	d008      	beq.n	8004576 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004564:	4b19      	ldr	r3, [pc, #100]	; (80045cc <HAL_RCC_ClockConfig+0x1bc>)
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	4916      	ldr	r1, [pc, #88]	; (80045cc <HAL_RCC_ClockConfig+0x1bc>)
 8004572:	4313      	orrs	r3, r2
 8004574:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0308 	and.w	r3, r3, #8
 800457e:	2b00      	cmp	r3, #0
 8004580:	d009      	beq.n	8004596 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004582:	4b12      	ldr	r3, [pc, #72]	; (80045cc <HAL_RCC_ClockConfig+0x1bc>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	490e      	ldr	r1, [pc, #56]	; (80045cc <HAL_RCC_ClockConfig+0x1bc>)
 8004592:	4313      	orrs	r3, r2
 8004594:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004596:	f000 f821 	bl	80045dc <HAL_RCC_GetSysClockFreq>
 800459a:	4602      	mov	r2, r0
 800459c:	4b0b      	ldr	r3, [pc, #44]	; (80045cc <HAL_RCC_ClockConfig+0x1bc>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	091b      	lsrs	r3, r3, #4
 80045a2:	f003 030f 	and.w	r3, r3, #15
 80045a6:	490a      	ldr	r1, [pc, #40]	; (80045d0 <HAL_RCC_ClockConfig+0x1c0>)
 80045a8:	5ccb      	ldrb	r3, [r1, r3]
 80045aa:	fa22 f303 	lsr.w	r3, r2, r3
 80045ae:	4a09      	ldr	r2, [pc, #36]	; (80045d4 <HAL_RCC_ClockConfig+0x1c4>)
 80045b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045b2:	4b09      	ldr	r3, [pc, #36]	; (80045d8 <HAL_RCC_ClockConfig+0x1c8>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7fe f92e 	bl	8002818 <HAL_InitTick>

  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	40023c00 	.word	0x40023c00
 80045cc:	40023800 	.word	0x40023800
 80045d0:	0800b350 	.word	0x0800b350
 80045d4:	20000000 	.word	0x20000000
 80045d8:	20000004 	.word	0x20000004

080045dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80045e0:	b084      	sub	sp, #16
 80045e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80045e4:	2300      	movs	r3, #0
 80045e6:	607b      	str	r3, [r7, #4]
 80045e8:	2300      	movs	r3, #0
 80045ea:	60fb      	str	r3, [r7, #12]
 80045ec:	2300      	movs	r3, #0
 80045ee:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80045f0:	2300      	movs	r3, #0
 80045f2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045f4:	4b67      	ldr	r3, [pc, #412]	; (8004794 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f003 030c 	and.w	r3, r3, #12
 80045fc:	2b08      	cmp	r3, #8
 80045fe:	d00d      	beq.n	800461c <HAL_RCC_GetSysClockFreq+0x40>
 8004600:	2b08      	cmp	r3, #8
 8004602:	f200 80bd 	bhi.w	8004780 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004606:	2b00      	cmp	r3, #0
 8004608:	d002      	beq.n	8004610 <HAL_RCC_GetSysClockFreq+0x34>
 800460a:	2b04      	cmp	r3, #4
 800460c:	d003      	beq.n	8004616 <HAL_RCC_GetSysClockFreq+0x3a>
 800460e:	e0b7      	b.n	8004780 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004610:	4b61      	ldr	r3, [pc, #388]	; (8004798 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004612:	60bb      	str	r3, [r7, #8]
       break;
 8004614:	e0b7      	b.n	8004786 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004616:	4b61      	ldr	r3, [pc, #388]	; (800479c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004618:	60bb      	str	r3, [r7, #8]
      break;
 800461a:	e0b4      	b.n	8004786 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800461c:	4b5d      	ldr	r3, [pc, #372]	; (8004794 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004624:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004626:	4b5b      	ldr	r3, [pc, #364]	; (8004794 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d04d      	beq.n	80046ce <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004632:	4b58      	ldr	r3, [pc, #352]	; (8004794 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	099b      	lsrs	r3, r3, #6
 8004638:	461a      	mov	r2, r3
 800463a:	f04f 0300 	mov.w	r3, #0
 800463e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004642:	f04f 0100 	mov.w	r1, #0
 8004646:	ea02 0800 	and.w	r8, r2, r0
 800464a:	ea03 0901 	and.w	r9, r3, r1
 800464e:	4640      	mov	r0, r8
 8004650:	4649      	mov	r1, r9
 8004652:	f04f 0200 	mov.w	r2, #0
 8004656:	f04f 0300 	mov.w	r3, #0
 800465a:	014b      	lsls	r3, r1, #5
 800465c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004660:	0142      	lsls	r2, r0, #5
 8004662:	4610      	mov	r0, r2
 8004664:	4619      	mov	r1, r3
 8004666:	ebb0 0008 	subs.w	r0, r0, r8
 800466a:	eb61 0109 	sbc.w	r1, r1, r9
 800466e:	f04f 0200 	mov.w	r2, #0
 8004672:	f04f 0300 	mov.w	r3, #0
 8004676:	018b      	lsls	r3, r1, #6
 8004678:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800467c:	0182      	lsls	r2, r0, #6
 800467e:	1a12      	subs	r2, r2, r0
 8004680:	eb63 0301 	sbc.w	r3, r3, r1
 8004684:	f04f 0000 	mov.w	r0, #0
 8004688:	f04f 0100 	mov.w	r1, #0
 800468c:	00d9      	lsls	r1, r3, #3
 800468e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004692:	00d0      	lsls	r0, r2, #3
 8004694:	4602      	mov	r2, r0
 8004696:	460b      	mov	r3, r1
 8004698:	eb12 0208 	adds.w	r2, r2, r8
 800469c:	eb43 0309 	adc.w	r3, r3, r9
 80046a0:	f04f 0000 	mov.w	r0, #0
 80046a4:	f04f 0100 	mov.w	r1, #0
 80046a8:	0259      	lsls	r1, r3, #9
 80046aa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80046ae:	0250      	lsls	r0, r2, #9
 80046b0:	4602      	mov	r2, r0
 80046b2:	460b      	mov	r3, r1
 80046b4:	4610      	mov	r0, r2
 80046b6:	4619      	mov	r1, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	461a      	mov	r2, r3
 80046bc:	f04f 0300 	mov.w	r3, #0
 80046c0:	f7fc faca 	bl	8000c58 <__aeabi_uldivmod>
 80046c4:	4602      	mov	r2, r0
 80046c6:	460b      	mov	r3, r1
 80046c8:	4613      	mov	r3, r2
 80046ca:	60fb      	str	r3, [r7, #12]
 80046cc:	e04a      	b.n	8004764 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046ce:	4b31      	ldr	r3, [pc, #196]	; (8004794 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	099b      	lsrs	r3, r3, #6
 80046d4:	461a      	mov	r2, r3
 80046d6:	f04f 0300 	mov.w	r3, #0
 80046da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80046de:	f04f 0100 	mov.w	r1, #0
 80046e2:	ea02 0400 	and.w	r4, r2, r0
 80046e6:	ea03 0501 	and.w	r5, r3, r1
 80046ea:	4620      	mov	r0, r4
 80046ec:	4629      	mov	r1, r5
 80046ee:	f04f 0200 	mov.w	r2, #0
 80046f2:	f04f 0300 	mov.w	r3, #0
 80046f6:	014b      	lsls	r3, r1, #5
 80046f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80046fc:	0142      	lsls	r2, r0, #5
 80046fe:	4610      	mov	r0, r2
 8004700:	4619      	mov	r1, r3
 8004702:	1b00      	subs	r0, r0, r4
 8004704:	eb61 0105 	sbc.w	r1, r1, r5
 8004708:	f04f 0200 	mov.w	r2, #0
 800470c:	f04f 0300 	mov.w	r3, #0
 8004710:	018b      	lsls	r3, r1, #6
 8004712:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004716:	0182      	lsls	r2, r0, #6
 8004718:	1a12      	subs	r2, r2, r0
 800471a:	eb63 0301 	sbc.w	r3, r3, r1
 800471e:	f04f 0000 	mov.w	r0, #0
 8004722:	f04f 0100 	mov.w	r1, #0
 8004726:	00d9      	lsls	r1, r3, #3
 8004728:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800472c:	00d0      	lsls	r0, r2, #3
 800472e:	4602      	mov	r2, r0
 8004730:	460b      	mov	r3, r1
 8004732:	1912      	adds	r2, r2, r4
 8004734:	eb45 0303 	adc.w	r3, r5, r3
 8004738:	f04f 0000 	mov.w	r0, #0
 800473c:	f04f 0100 	mov.w	r1, #0
 8004740:	0299      	lsls	r1, r3, #10
 8004742:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004746:	0290      	lsls	r0, r2, #10
 8004748:	4602      	mov	r2, r0
 800474a:	460b      	mov	r3, r1
 800474c:	4610      	mov	r0, r2
 800474e:	4619      	mov	r1, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	461a      	mov	r2, r3
 8004754:	f04f 0300 	mov.w	r3, #0
 8004758:	f7fc fa7e 	bl	8000c58 <__aeabi_uldivmod>
 800475c:	4602      	mov	r2, r0
 800475e:	460b      	mov	r3, r1
 8004760:	4613      	mov	r3, r2
 8004762:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004764:	4b0b      	ldr	r3, [pc, #44]	; (8004794 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	0c1b      	lsrs	r3, r3, #16
 800476a:	f003 0303 	and.w	r3, r3, #3
 800476e:	3301      	adds	r3, #1
 8004770:	005b      	lsls	r3, r3, #1
 8004772:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	fbb2 f3f3 	udiv	r3, r2, r3
 800477c:	60bb      	str	r3, [r7, #8]
      break;
 800477e:	e002      	b.n	8004786 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004780:	4b05      	ldr	r3, [pc, #20]	; (8004798 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004782:	60bb      	str	r3, [r7, #8]
      break;
 8004784:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004786:	68bb      	ldr	r3, [r7, #8]
}
 8004788:	4618      	mov	r0, r3
 800478a:	3710      	adds	r7, #16
 800478c:	46bd      	mov	sp, r7
 800478e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004792:	bf00      	nop
 8004794:	40023800 	.word	0x40023800
 8004798:	00f42400 	.word	0x00f42400
 800479c:	007a1200 	.word	0x007a1200

080047a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047a0:	b480      	push	{r7}
 80047a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047a4:	4b03      	ldr	r3, [pc, #12]	; (80047b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80047a6:	681b      	ldr	r3, [r3, #0]
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	20000000 	.word	0x20000000

080047b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047bc:	f7ff fff0 	bl	80047a0 <HAL_RCC_GetHCLKFreq>
 80047c0:	4602      	mov	r2, r0
 80047c2:	4b05      	ldr	r3, [pc, #20]	; (80047d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	0a9b      	lsrs	r3, r3, #10
 80047c8:	f003 0307 	and.w	r3, r3, #7
 80047cc:	4903      	ldr	r1, [pc, #12]	; (80047dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80047ce:	5ccb      	ldrb	r3, [r1, r3]
 80047d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	40023800 	.word	0x40023800
 80047dc:	0800b360 	.word	0x0800b360

080047e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80047e4:	f7ff ffdc 	bl	80047a0 <HAL_RCC_GetHCLKFreq>
 80047e8:	4602      	mov	r2, r0
 80047ea:	4b05      	ldr	r3, [pc, #20]	; (8004800 <HAL_RCC_GetPCLK2Freq+0x20>)
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	0b5b      	lsrs	r3, r3, #13
 80047f0:	f003 0307 	and.w	r3, r3, #7
 80047f4:	4903      	ldr	r1, [pc, #12]	; (8004804 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047f6:	5ccb      	ldrb	r3, [r1, r3]
 80047f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	40023800 	.word	0x40023800
 8004804:	0800b360 	.word	0x0800b360

08004808 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d101      	bne.n	800481a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e041      	b.n	800489e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004820:	b2db      	uxtb	r3, r3
 8004822:	2b00      	cmp	r3, #0
 8004824:	d106      	bne.n	8004834 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f7fd fe14 	bl	800245c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2202      	movs	r2, #2
 8004838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	3304      	adds	r3, #4
 8004844:	4619      	mov	r1, r3
 8004846:	4610      	mov	r0, r2
 8004848:	f000 fc54 	bl	80050f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3708      	adds	r7, #8
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
	...

080048a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d001      	beq.n	80048c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e044      	b.n	800494a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2202      	movs	r2, #2
 80048c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68da      	ldr	r2, [r3, #12]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f042 0201 	orr.w	r2, r2, #1
 80048d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a1e      	ldr	r2, [pc, #120]	; (8004958 <HAL_TIM_Base_Start_IT+0xb0>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d018      	beq.n	8004914 <HAL_TIM_Base_Start_IT+0x6c>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ea:	d013      	beq.n	8004914 <HAL_TIM_Base_Start_IT+0x6c>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a1a      	ldr	r2, [pc, #104]	; (800495c <HAL_TIM_Base_Start_IT+0xb4>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d00e      	beq.n	8004914 <HAL_TIM_Base_Start_IT+0x6c>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a19      	ldr	r2, [pc, #100]	; (8004960 <HAL_TIM_Base_Start_IT+0xb8>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d009      	beq.n	8004914 <HAL_TIM_Base_Start_IT+0x6c>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a17      	ldr	r2, [pc, #92]	; (8004964 <HAL_TIM_Base_Start_IT+0xbc>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d004      	beq.n	8004914 <HAL_TIM_Base_Start_IT+0x6c>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a16      	ldr	r2, [pc, #88]	; (8004968 <HAL_TIM_Base_Start_IT+0xc0>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d111      	bne.n	8004938 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f003 0307 	and.w	r3, r3, #7
 800491e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2b06      	cmp	r3, #6
 8004924:	d010      	beq.n	8004948 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f042 0201 	orr.w	r2, r2, #1
 8004934:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004936:	e007      	b.n	8004948 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f042 0201 	orr.w	r2, r2, #1
 8004946:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3714      	adds	r7, #20
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	40010000 	.word	0x40010000
 800495c:	40000400 	.word	0x40000400
 8004960:	40000800 	.word	0x40000800
 8004964:	40000c00 	.word	0x40000c00
 8004968:	40014000 	.word	0x40014000

0800496c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d101      	bne.n	800497e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e041      	b.n	8004a02 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d106      	bne.n	8004998 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 f839 	bl	8004a0a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2202      	movs	r2, #2
 800499c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	3304      	adds	r3, #4
 80049a8:	4619      	mov	r1, r3
 80049aa:	4610      	mov	r0, r2
 80049ac:	f000 fba2 	bl	80050f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3708      	adds	r7, #8
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b083      	sub	sp, #12
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a12:	bf00      	nop
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
	...

08004a20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d109      	bne.n	8004a44 <HAL_TIM_PWM_Start+0x24>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	bf14      	ite	ne
 8004a3c:	2301      	movne	r3, #1
 8004a3e:	2300      	moveq	r3, #0
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	e022      	b.n	8004a8a <HAL_TIM_PWM_Start+0x6a>
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	2b04      	cmp	r3, #4
 8004a48:	d109      	bne.n	8004a5e <HAL_TIM_PWM_Start+0x3e>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	bf14      	ite	ne
 8004a56:	2301      	movne	r3, #1
 8004a58:	2300      	moveq	r3, #0
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	e015      	b.n	8004a8a <HAL_TIM_PWM_Start+0x6a>
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	2b08      	cmp	r3, #8
 8004a62:	d109      	bne.n	8004a78 <HAL_TIM_PWM_Start+0x58>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	bf14      	ite	ne
 8004a70:	2301      	movne	r3, #1
 8004a72:	2300      	moveq	r3, #0
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	e008      	b.n	8004a8a <HAL_TIM_PWM_Start+0x6a>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	bf14      	ite	ne
 8004a84:	2301      	movne	r3, #1
 8004a86:	2300      	moveq	r3, #0
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e068      	b.n	8004b64 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d104      	bne.n	8004aa2 <HAL_TIM_PWM_Start+0x82>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004aa0:	e013      	b.n	8004aca <HAL_TIM_PWM_Start+0xaa>
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	2b04      	cmp	r3, #4
 8004aa6:	d104      	bne.n	8004ab2 <HAL_TIM_PWM_Start+0x92>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2202      	movs	r2, #2
 8004aac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ab0:	e00b      	b.n	8004aca <HAL_TIM_PWM_Start+0xaa>
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	2b08      	cmp	r3, #8
 8004ab6:	d104      	bne.n	8004ac2 <HAL_TIM_PWM_Start+0xa2>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2202      	movs	r2, #2
 8004abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ac0:	e003      	b.n	8004aca <HAL_TIM_PWM_Start+0xaa>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2202      	movs	r2, #2
 8004ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	6839      	ldr	r1, [r7, #0]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f000 fdb4 	bl	8005640 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a23      	ldr	r2, [pc, #140]	; (8004b6c <HAL_TIM_PWM_Start+0x14c>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d107      	bne.n	8004af2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004af0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a1d      	ldr	r2, [pc, #116]	; (8004b6c <HAL_TIM_PWM_Start+0x14c>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d018      	beq.n	8004b2e <HAL_TIM_PWM_Start+0x10e>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b04:	d013      	beq.n	8004b2e <HAL_TIM_PWM_Start+0x10e>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a19      	ldr	r2, [pc, #100]	; (8004b70 <HAL_TIM_PWM_Start+0x150>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d00e      	beq.n	8004b2e <HAL_TIM_PWM_Start+0x10e>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a17      	ldr	r2, [pc, #92]	; (8004b74 <HAL_TIM_PWM_Start+0x154>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d009      	beq.n	8004b2e <HAL_TIM_PWM_Start+0x10e>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a16      	ldr	r2, [pc, #88]	; (8004b78 <HAL_TIM_PWM_Start+0x158>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d004      	beq.n	8004b2e <HAL_TIM_PWM_Start+0x10e>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a14      	ldr	r2, [pc, #80]	; (8004b7c <HAL_TIM_PWM_Start+0x15c>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d111      	bne.n	8004b52 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f003 0307 	and.w	r3, r3, #7
 8004b38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2b06      	cmp	r3, #6
 8004b3e:	d010      	beq.n	8004b62 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f042 0201 	orr.w	r2, r2, #1
 8004b4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b50:	e007      	b.n	8004b62 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f042 0201 	orr.w	r2, r2, #1
 8004b60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b62:	2300      	movs	r3, #0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3710      	adds	r7, #16
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	40010000 	.word	0x40010000
 8004b70:	40000400 	.word	0x40000400
 8004b74:	40000800 	.word	0x40000800
 8004b78:	40000c00 	.word	0x40000c00
 8004b7c:	40014000 	.word	0x40014000

08004b80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d122      	bne.n	8004bdc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	f003 0302 	and.w	r3, r3, #2
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d11b      	bne.n	8004bdc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f06f 0202 	mvn.w	r2, #2
 8004bac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	f003 0303 	and.w	r3, r3, #3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d003      	beq.n	8004bca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 fa77 	bl	80050b6 <HAL_TIM_IC_CaptureCallback>
 8004bc8:	e005      	b.n	8004bd6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 fa69 	bl	80050a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f000 fa7a 	bl	80050ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	f003 0304 	and.w	r3, r3, #4
 8004be6:	2b04      	cmp	r3, #4
 8004be8:	d122      	bne.n	8004c30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	f003 0304 	and.w	r3, r3, #4
 8004bf4:	2b04      	cmp	r3, #4
 8004bf6:	d11b      	bne.n	8004c30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f06f 0204 	mvn.w	r2, #4
 8004c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2202      	movs	r2, #2
 8004c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 fa4d 	bl	80050b6 <HAL_TIM_IC_CaptureCallback>
 8004c1c:	e005      	b.n	8004c2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 fa3f 	bl	80050a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 fa50 	bl	80050ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	f003 0308 	and.w	r3, r3, #8
 8004c3a:	2b08      	cmp	r3, #8
 8004c3c:	d122      	bne.n	8004c84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	f003 0308 	and.w	r3, r3, #8
 8004c48:	2b08      	cmp	r3, #8
 8004c4a:	d11b      	bne.n	8004c84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f06f 0208 	mvn.w	r2, #8
 8004c54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2204      	movs	r2, #4
 8004c5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	f003 0303 	and.w	r3, r3, #3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d003      	beq.n	8004c72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 fa23 	bl	80050b6 <HAL_TIM_IC_CaptureCallback>
 8004c70:	e005      	b.n	8004c7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 fa15 	bl	80050a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f000 fa26 	bl	80050ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	f003 0310 	and.w	r3, r3, #16
 8004c8e:	2b10      	cmp	r3, #16
 8004c90:	d122      	bne.n	8004cd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	f003 0310 	and.w	r3, r3, #16
 8004c9c:	2b10      	cmp	r3, #16
 8004c9e:	d11b      	bne.n	8004cd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f06f 0210 	mvn.w	r2, #16
 8004ca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2208      	movs	r2, #8
 8004cae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	69db      	ldr	r3, [r3, #28]
 8004cb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d003      	beq.n	8004cc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 f9f9 	bl	80050b6 <HAL_TIM_IC_CaptureCallback>
 8004cc4:	e005      	b.n	8004cd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 f9eb 	bl	80050a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 f9fc 	bl	80050ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	f003 0301 	and.w	r3, r3, #1
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d10e      	bne.n	8004d04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	f003 0301 	and.w	r3, r3, #1
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d107      	bne.n	8004d04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f06f 0201 	mvn.w	r2, #1
 8004cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f7fd f938 	bl	8001f74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d0e:	2b80      	cmp	r3, #128	; 0x80
 8004d10:	d10e      	bne.n	8004d30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d1c:	2b80      	cmp	r3, #128	; 0x80
 8004d1e:	d107      	bne.n	8004d30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 fd26 	bl	800577c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d3a:	2b40      	cmp	r3, #64	; 0x40
 8004d3c:	d10e      	bne.n	8004d5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d48:	2b40      	cmp	r3, #64	; 0x40
 8004d4a:	d107      	bne.n	8004d5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 f9c1 	bl	80050de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	f003 0320 	and.w	r3, r3, #32
 8004d66:	2b20      	cmp	r3, #32
 8004d68:	d10e      	bne.n	8004d88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	f003 0320 	and.w	r3, r3, #32
 8004d74:	2b20      	cmp	r3, #32
 8004d76:	d107      	bne.n	8004d88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f06f 0220 	mvn.w	r2, #32
 8004d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 fcf0 	bl	8005768 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d88:	bf00      	nop
 8004d8a:	3708      	adds	r7, #8
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b086      	sub	sp, #24
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d101      	bne.n	8004dae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004daa:	2302      	movs	r3, #2
 8004dac:	e0ae      	b.n	8004f0c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2201      	movs	r2, #1
 8004db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2b0c      	cmp	r3, #12
 8004dba:	f200 809f 	bhi.w	8004efc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004dbe:	a201      	add	r2, pc, #4	; (adr r2, 8004dc4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc4:	08004df9 	.word	0x08004df9
 8004dc8:	08004efd 	.word	0x08004efd
 8004dcc:	08004efd 	.word	0x08004efd
 8004dd0:	08004efd 	.word	0x08004efd
 8004dd4:	08004e39 	.word	0x08004e39
 8004dd8:	08004efd 	.word	0x08004efd
 8004ddc:	08004efd 	.word	0x08004efd
 8004de0:	08004efd 	.word	0x08004efd
 8004de4:	08004e7b 	.word	0x08004e7b
 8004de8:	08004efd 	.word	0x08004efd
 8004dec:	08004efd 	.word	0x08004efd
 8004df0:	08004efd 	.word	0x08004efd
 8004df4:	08004ebb 	.word	0x08004ebb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68b9      	ldr	r1, [r7, #8]
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f000 f9f8 	bl	80051f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	699a      	ldr	r2, [r3, #24]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f042 0208 	orr.w	r2, r2, #8
 8004e12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	699a      	ldr	r2, [r3, #24]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f022 0204 	bic.w	r2, r2, #4
 8004e22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6999      	ldr	r1, [r3, #24]
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	691a      	ldr	r2, [r3, #16]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	430a      	orrs	r2, r1
 8004e34:	619a      	str	r2, [r3, #24]
      break;
 8004e36:	e064      	b.n	8004f02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68b9      	ldr	r1, [r7, #8]
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f000 fa3e 	bl	80052c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	699a      	ldr	r2, [r3, #24]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	699a      	ldr	r2, [r3, #24]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	6999      	ldr	r1, [r3, #24]
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	021a      	lsls	r2, r3, #8
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	430a      	orrs	r2, r1
 8004e76:	619a      	str	r2, [r3, #24]
      break;
 8004e78:	e043      	b.n	8004f02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68b9      	ldr	r1, [r7, #8]
 8004e80:	4618      	mov	r0, r3
 8004e82:	f000 fa89 	bl	8005398 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	69da      	ldr	r2, [r3, #28]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f042 0208 	orr.w	r2, r2, #8
 8004e94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	69da      	ldr	r2, [r3, #28]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f022 0204 	bic.w	r2, r2, #4
 8004ea4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	69d9      	ldr	r1, [r3, #28]
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	691a      	ldr	r2, [r3, #16]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	61da      	str	r2, [r3, #28]
      break;
 8004eb8:	e023      	b.n	8004f02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68b9      	ldr	r1, [r7, #8]
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f000 fad3 	bl	800546c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	69da      	ldr	r2, [r3, #28]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ed4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	69da      	ldr	r2, [r3, #28]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ee4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	69d9      	ldr	r1, [r3, #28]
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	021a      	lsls	r2, r3, #8
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	61da      	str	r2, [r3, #28]
      break;
 8004efa:	e002      	b.n	8004f02 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	75fb      	strb	r3, [r7, #23]
      break;
 8004f00:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3718      	adds	r7, #24
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d101      	bne.n	8004f30 <HAL_TIM_ConfigClockSource+0x1c>
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	e0b4      	b.n	800509a <HAL_TIM_ConfigClockSource+0x186>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2202      	movs	r2, #2
 8004f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68ba      	ldr	r2, [r7, #8]
 8004f5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f68:	d03e      	beq.n	8004fe8 <HAL_TIM_ConfigClockSource+0xd4>
 8004f6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f6e:	f200 8087 	bhi.w	8005080 <HAL_TIM_ConfigClockSource+0x16c>
 8004f72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f76:	f000 8086 	beq.w	8005086 <HAL_TIM_ConfigClockSource+0x172>
 8004f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f7e:	d87f      	bhi.n	8005080 <HAL_TIM_ConfigClockSource+0x16c>
 8004f80:	2b70      	cmp	r3, #112	; 0x70
 8004f82:	d01a      	beq.n	8004fba <HAL_TIM_ConfigClockSource+0xa6>
 8004f84:	2b70      	cmp	r3, #112	; 0x70
 8004f86:	d87b      	bhi.n	8005080 <HAL_TIM_ConfigClockSource+0x16c>
 8004f88:	2b60      	cmp	r3, #96	; 0x60
 8004f8a:	d050      	beq.n	800502e <HAL_TIM_ConfigClockSource+0x11a>
 8004f8c:	2b60      	cmp	r3, #96	; 0x60
 8004f8e:	d877      	bhi.n	8005080 <HAL_TIM_ConfigClockSource+0x16c>
 8004f90:	2b50      	cmp	r3, #80	; 0x50
 8004f92:	d03c      	beq.n	800500e <HAL_TIM_ConfigClockSource+0xfa>
 8004f94:	2b50      	cmp	r3, #80	; 0x50
 8004f96:	d873      	bhi.n	8005080 <HAL_TIM_ConfigClockSource+0x16c>
 8004f98:	2b40      	cmp	r3, #64	; 0x40
 8004f9a:	d058      	beq.n	800504e <HAL_TIM_ConfigClockSource+0x13a>
 8004f9c:	2b40      	cmp	r3, #64	; 0x40
 8004f9e:	d86f      	bhi.n	8005080 <HAL_TIM_ConfigClockSource+0x16c>
 8004fa0:	2b30      	cmp	r3, #48	; 0x30
 8004fa2:	d064      	beq.n	800506e <HAL_TIM_ConfigClockSource+0x15a>
 8004fa4:	2b30      	cmp	r3, #48	; 0x30
 8004fa6:	d86b      	bhi.n	8005080 <HAL_TIM_ConfigClockSource+0x16c>
 8004fa8:	2b20      	cmp	r3, #32
 8004faa:	d060      	beq.n	800506e <HAL_TIM_ConfigClockSource+0x15a>
 8004fac:	2b20      	cmp	r3, #32
 8004fae:	d867      	bhi.n	8005080 <HAL_TIM_ConfigClockSource+0x16c>
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d05c      	beq.n	800506e <HAL_TIM_ConfigClockSource+0x15a>
 8004fb4:	2b10      	cmp	r3, #16
 8004fb6:	d05a      	beq.n	800506e <HAL_TIM_ConfigClockSource+0x15a>
 8004fb8:	e062      	b.n	8005080 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6818      	ldr	r0, [r3, #0]
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	6899      	ldr	r1, [r3, #8]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	685a      	ldr	r2, [r3, #4]
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	f000 fb19 	bl	8005600 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004fdc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68ba      	ldr	r2, [r7, #8]
 8004fe4:	609a      	str	r2, [r3, #8]
      break;
 8004fe6:	e04f      	b.n	8005088 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6818      	ldr	r0, [r3, #0]
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	6899      	ldr	r1, [r3, #8]
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	685a      	ldr	r2, [r3, #4]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	f000 fb02 	bl	8005600 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	689a      	ldr	r2, [r3, #8]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800500a:	609a      	str	r2, [r3, #8]
      break;
 800500c:	e03c      	b.n	8005088 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6818      	ldr	r0, [r3, #0]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	6859      	ldr	r1, [r3, #4]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	461a      	mov	r2, r3
 800501c:	f000 fa76 	bl	800550c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2150      	movs	r1, #80	; 0x50
 8005026:	4618      	mov	r0, r3
 8005028:	f000 facf 	bl	80055ca <TIM_ITRx_SetConfig>
      break;
 800502c:	e02c      	b.n	8005088 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6818      	ldr	r0, [r3, #0]
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	6859      	ldr	r1, [r3, #4]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	461a      	mov	r2, r3
 800503c:	f000 fa95 	bl	800556a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2160      	movs	r1, #96	; 0x60
 8005046:	4618      	mov	r0, r3
 8005048:	f000 fabf 	bl	80055ca <TIM_ITRx_SetConfig>
      break;
 800504c:	e01c      	b.n	8005088 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6818      	ldr	r0, [r3, #0]
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	6859      	ldr	r1, [r3, #4]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	461a      	mov	r2, r3
 800505c:	f000 fa56 	bl	800550c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2140      	movs	r1, #64	; 0x40
 8005066:	4618      	mov	r0, r3
 8005068:	f000 faaf 	bl	80055ca <TIM_ITRx_SetConfig>
      break;
 800506c:	e00c      	b.n	8005088 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4619      	mov	r1, r3
 8005078:	4610      	mov	r0, r2
 800507a:	f000 faa6 	bl	80055ca <TIM_ITRx_SetConfig>
      break;
 800507e:	e003      	b.n	8005088 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	73fb      	strb	r3, [r7, #15]
      break;
 8005084:	e000      	b.n	8005088 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005086:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005098:	7bfb      	ldrb	r3, [r7, #15]
}
 800509a:	4618      	mov	r0, r3
 800509c:	3710      	adds	r7, #16
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}

080050a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050a2:	b480      	push	{r7}
 80050a4:	b083      	sub	sp, #12
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050aa:	bf00      	nop
 80050ac:	370c      	adds	r7, #12
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr

080050b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050b6:	b480      	push	{r7}
 80050b8:	b083      	sub	sp, #12
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050be:	bf00      	nop
 80050c0:	370c      	adds	r7, #12
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr

080050ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050ca:	b480      	push	{r7}
 80050cc:	b083      	sub	sp, #12
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050d2:	bf00      	nop
 80050d4:	370c      	adds	r7, #12
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr

080050de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050de:	b480      	push	{r7}
 80050e0:	b083      	sub	sp, #12
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050e6:	bf00      	nop
 80050e8:	370c      	adds	r7, #12
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
	...

080050f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a34      	ldr	r2, [pc, #208]	; (80051d8 <TIM_Base_SetConfig+0xe4>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d00f      	beq.n	800512c <TIM_Base_SetConfig+0x38>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005112:	d00b      	beq.n	800512c <TIM_Base_SetConfig+0x38>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a31      	ldr	r2, [pc, #196]	; (80051dc <TIM_Base_SetConfig+0xe8>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d007      	beq.n	800512c <TIM_Base_SetConfig+0x38>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a30      	ldr	r2, [pc, #192]	; (80051e0 <TIM_Base_SetConfig+0xec>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d003      	beq.n	800512c <TIM_Base_SetConfig+0x38>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a2f      	ldr	r2, [pc, #188]	; (80051e4 <TIM_Base_SetConfig+0xf0>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d108      	bne.n	800513e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005132:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	4313      	orrs	r3, r2
 800513c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a25      	ldr	r2, [pc, #148]	; (80051d8 <TIM_Base_SetConfig+0xe4>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d01b      	beq.n	800517e <TIM_Base_SetConfig+0x8a>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800514c:	d017      	beq.n	800517e <TIM_Base_SetConfig+0x8a>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a22      	ldr	r2, [pc, #136]	; (80051dc <TIM_Base_SetConfig+0xe8>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d013      	beq.n	800517e <TIM_Base_SetConfig+0x8a>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a21      	ldr	r2, [pc, #132]	; (80051e0 <TIM_Base_SetConfig+0xec>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d00f      	beq.n	800517e <TIM_Base_SetConfig+0x8a>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a20      	ldr	r2, [pc, #128]	; (80051e4 <TIM_Base_SetConfig+0xf0>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d00b      	beq.n	800517e <TIM_Base_SetConfig+0x8a>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a1f      	ldr	r2, [pc, #124]	; (80051e8 <TIM_Base_SetConfig+0xf4>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d007      	beq.n	800517e <TIM_Base_SetConfig+0x8a>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a1e      	ldr	r2, [pc, #120]	; (80051ec <TIM_Base_SetConfig+0xf8>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d003      	beq.n	800517e <TIM_Base_SetConfig+0x8a>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a1d      	ldr	r2, [pc, #116]	; (80051f0 <TIM_Base_SetConfig+0xfc>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d108      	bne.n	8005190 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005184:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	4313      	orrs	r3, r2
 800518e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	4313      	orrs	r3, r2
 800519c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	689a      	ldr	r2, [r3, #8]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a08      	ldr	r2, [pc, #32]	; (80051d8 <TIM_Base_SetConfig+0xe4>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d103      	bne.n	80051c4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	691a      	ldr	r2, [r3, #16]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	615a      	str	r2, [r3, #20]
}
 80051ca:	bf00      	nop
 80051cc:	3714      	adds	r7, #20
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	40010000 	.word	0x40010000
 80051dc:	40000400 	.word	0x40000400
 80051e0:	40000800 	.word	0x40000800
 80051e4:	40000c00 	.word	0x40000c00
 80051e8:	40014000 	.word	0x40014000
 80051ec:	40014400 	.word	0x40014400
 80051f0:	40014800 	.word	0x40014800

080051f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b087      	sub	sp, #28
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	f023 0201 	bic.w	r2, r3, #1
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a1b      	ldr	r3, [r3, #32]
 800520e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f023 0303 	bic.w	r3, r3, #3
 800522a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	4313      	orrs	r3, r2
 8005234:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	f023 0302 	bic.w	r3, r3, #2
 800523c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	4313      	orrs	r3, r2
 8005246:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a1c      	ldr	r2, [pc, #112]	; (80052bc <TIM_OC1_SetConfig+0xc8>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d10c      	bne.n	800526a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	f023 0308 	bic.w	r3, r3, #8
 8005256:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	4313      	orrs	r3, r2
 8005260:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	f023 0304 	bic.w	r3, r3, #4
 8005268:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a13      	ldr	r2, [pc, #76]	; (80052bc <TIM_OC1_SetConfig+0xc8>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d111      	bne.n	8005296 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005278:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005280:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	4313      	orrs	r3, r2
 800528a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	4313      	orrs	r3, r2
 8005294:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	685a      	ldr	r2, [r3, #4]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	697a      	ldr	r2, [r7, #20]
 80052ae:	621a      	str	r2, [r3, #32]
}
 80052b0:	bf00      	nop
 80052b2:	371c      	adds	r7, #28
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr
 80052bc:	40010000 	.word	0x40010000

080052c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b087      	sub	sp, #28
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a1b      	ldr	r3, [r3, #32]
 80052ce:	f023 0210 	bic.w	r2, r3, #16
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a1b      	ldr	r3, [r3, #32]
 80052da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	021b      	lsls	r3, r3, #8
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	4313      	orrs	r3, r2
 8005302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	f023 0320 	bic.w	r3, r3, #32
 800530a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	011b      	lsls	r3, r3, #4
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	4313      	orrs	r3, r2
 8005316:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a1e      	ldr	r2, [pc, #120]	; (8005394 <TIM_OC2_SetConfig+0xd4>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d10d      	bne.n	800533c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005326:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	011b      	lsls	r3, r3, #4
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	4313      	orrs	r3, r2
 8005332:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800533a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a15      	ldr	r2, [pc, #84]	; (8005394 <TIM_OC2_SetConfig+0xd4>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d113      	bne.n	800536c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800534a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005352:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	695b      	ldr	r3, [r3, #20]
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	4313      	orrs	r3, r2
 800535e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	4313      	orrs	r3, r2
 800536a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	621a      	str	r2, [r3, #32]
}
 8005386:	bf00      	nop
 8005388:	371c      	adds	r7, #28
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	40010000 	.word	0x40010000

08005398 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005398:	b480      	push	{r7}
 800539a:	b087      	sub	sp, #28
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a1b      	ldr	r3, [r3, #32]
 80053b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	69db      	ldr	r3, [r3, #28]
 80053be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f023 0303 	bic.w	r3, r3, #3
 80053ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	021b      	lsls	r3, r3, #8
 80053e8:	697a      	ldr	r2, [r7, #20]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a1d      	ldr	r2, [pc, #116]	; (8005468 <TIM_OC3_SetConfig+0xd0>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d10d      	bne.n	8005412 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	021b      	lsls	r3, r3, #8
 8005404:	697a      	ldr	r2, [r7, #20]
 8005406:	4313      	orrs	r3, r2
 8005408:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005410:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a14      	ldr	r2, [pc, #80]	; (8005468 <TIM_OC3_SetConfig+0xd0>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d113      	bne.n	8005442 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005420:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005428:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	011b      	lsls	r3, r3, #4
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	4313      	orrs	r3, r2
 8005434:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	011b      	lsls	r3, r3, #4
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	4313      	orrs	r3, r2
 8005440:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	685a      	ldr	r2, [r3, #4]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	621a      	str	r2, [r3, #32]
}
 800545c:	bf00      	nop
 800545e:	371c      	adds	r7, #28
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr
 8005468:	40010000 	.word	0x40010000

0800546c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800546c:	b480      	push	{r7}
 800546e:	b087      	sub	sp, #28
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	69db      	ldr	r3, [r3, #28]
 8005492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800549a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	021b      	lsls	r3, r3, #8
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	031b      	lsls	r3, r3, #12
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a10      	ldr	r2, [pc, #64]	; (8005508 <TIM_OC4_SetConfig+0x9c>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d109      	bne.n	80054e0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	019b      	lsls	r3, r3, #6
 80054da:	697a      	ldr	r2, [r7, #20]
 80054dc:	4313      	orrs	r3, r2
 80054de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	685a      	ldr	r2, [r3, #4]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	693a      	ldr	r2, [r7, #16]
 80054f8:	621a      	str	r2, [r3, #32]
}
 80054fa:	bf00      	nop
 80054fc:	371c      	adds	r7, #28
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	40010000 	.word	0x40010000

0800550c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800550c:	b480      	push	{r7}
 800550e:	b087      	sub	sp, #28
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6a1b      	ldr	r3, [r3, #32]
 800551c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	f023 0201 	bic.w	r2, r3, #1
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005536:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	011b      	lsls	r3, r3, #4
 800553c:	693a      	ldr	r2, [r7, #16]
 800553e:	4313      	orrs	r3, r2
 8005540:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	f023 030a 	bic.w	r3, r3, #10
 8005548:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	4313      	orrs	r3, r2
 8005550:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	693a      	ldr	r2, [r7, #16]
 8005556:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	621a      	str	r2, [r3, #32]
}
 800555e:	bf00      	nop
 8005560:	371c      	adds	r7, #28
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr

0800556a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800556a:	b480      	push	{r7}
 800556c:	b087      	sub	sp, #28
 800556e:	af00      	add	r7, sp, #0
 8005570:	60f8      	str	r0, [r7, #12]
 8005572:	60b9      	str	r1, [r7, #8]
 8005574:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6a1b      	ldr	r3, [r3, #32]
 800557a:	f023 0210 	bic.w	r2, r3, #16
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6a1b      	ldr	r3, [r3, #32]
 800558c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005594:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	031b      	lsls	r3, r3, #12
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	4313      	orrs	r3, r2
 800559e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	011b      	lsls	r3, r3, #4
 80055ac:	693a      	ldr	r2, [r7, #16]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	621a      	str	r2, [r3, #32]
}
 80055be:	bf00      	nop
 80055c0:	371c      	adds	r7, #28
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr

080055ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055ca:	b480      	push	{r7}
 80055cc:	b085      	sub	sp, #20
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
 80055d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055e2:	683a      	ldr	r2, [r7, #0]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	f043 0307 	orr.w	r3, r3, #7
 80055ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	609a      	str	r2, [r3, #8]
}
 80055f4:	bf00      	nop
 80055f6:	3714      	adds	r7, #20
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005600:	b480      	push	{r7}
 8005602:	b087      	sub	sp, #28
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	607a      	str	r2, [r7, #4]
 800560c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800561a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	021a      	lsls	r2, r3, #8
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	431a      	orrs	r2, r3
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	4313      	orrs	r3, r2
 8005628:	697a      	ldr	r2, [r7, #20]
 800562a:	4313      	orrs	r3, r2
 800562c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	697a      	ldr	r2, [r7, #20]
 8005632:	609a      	str	r2, [r3, #8]
}
 8005634:	bf00      	nop
 8005636:	371c      	adds	r7, #28
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005640:	b480      	push	{r7}
 8005642:	b087      	sub	sp, #28
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	f003 031f 	and.w	r3, r3, #31
 8005652:	2201      	movs	r2, #1
 8005654:	fa02 f303 	lsl.w	r3, r2, r3
 8005658:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6a1a      	ldr	r2, [r3, #32]
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	43db      	mvns	r3, r3
 8005662:	401a      	ands	r2, r3
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6a1a      	ldr	r2, [r3, #32]
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	f003 031f 	and.w	r3, r3, #31
 8005672:	6879      	ldr	r1, [r7, #4]
 8005674:	fa01 f303 	lsl.w	r3, r1, r3
 8005678:	431a      	orrs	r2, r3
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	621a      	str	r2, [r3, #32]
}
 800567e:	bf00      	nop
 8005680:	371c      	adds	r7, #28
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
	...

0800568c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800568c:	b480      	push	{r7}
 800568e:	b085      	sub	sp, #20
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800569c:	2b01      	cmp	r3, #1
 800569e:	d101      	bne.n	80056a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056a0:	2302      	movs	r3, #2
 80056a2:	e050      	b.n	8005746 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2202      	movs	r2, #2
 80056b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a1c      	ldr	r2, [pc, #112]	; (8005754 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d018      	beq.n	800571a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056f0:	d013      	beq.n	800571a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a18      	ldr	r2, [pc, #96]	; (8005758 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d00e      	beq.n	800571a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a16      	ldr	r2, [pc, #88]	; (800575c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d009      	beq.n	800571a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a15      	ldr	r2, [pc, #84]	; (8005760 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d004      	beq.n	800571a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a13      	ldr	r2, [pc, #76]	; (8005764 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d10c      	bne.n	8005734 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005720:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	68ba      	ldr	r2, [r7, #8]
 8005728:	4313      	orrs	r3, r2
 800572a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68ba      	ldr	r2, [r7, #8]
 8005732:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3714      	adds	r7, #20
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	40010000 	.word	0x40010000
 8005758:	40000400 	.word	0x40000400
 800575c:	40000800 	.word	0x40000800
 8005760:	40000c00 	.word	0x40000c00
 8005764:	40014000 	.word	0x40014000

08005768 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005784:	bf00      	nop
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d101      	bne.n	80057a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e03f      	b.n	8005822 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d106      	bne.n	80057bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f7fc ff5c 	bl	8002674 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2224      	movs	r2, #36	; 0x24
 80057c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68da      	ldr	r2, [r3, #12]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 fddb 	bl	8006390 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	691a      	ldr	r2, [r3, #16]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	695a      	ldr	r2, [r3, #20]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68da      	ldr	r2, [r3, #12]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005808:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2220      	movs	r2, #32
 8005814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2220      	movs	r2, #32
 800581c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3708      	adds	r7, #8
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800582a:	b580      	push	{r7, lr}
 800582c:	b08a      	sub	sp, #40	; 0x28
 800582e:	af02      	add	r7, sp, #8
 8005830:	60f8      	str	r0, [r7, #12]
 8005832:	60b9      	str	r1, [r7, #8]
 8005834:	603b      	str	r3, [r7, #0]
 8005836:	4613      	mov	r3, r2
 8005838:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800583a:	2300      	movs	r3, #0
 800583c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b20      	cmp	r3, #32
 8005848:	d17c      	bne.n	8005944 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d002      	beq.n	8005856 <HAL_UART_Transmit+0x2c>
 8005850:	88fb      	ldrh	r3, [r7, #6]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d101      	bne.n	800585a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e075      	b.n	8005946 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005860:	2b01      	cmp	r3, #1
 8005862:	d101      	bne.n	8005868 <HAL_UART_Transmit+0x3e>
 8005864:	2302      	movs	r3, #2
 8005866:	e06e      	b.n	8005946 <HAL_UART_Transmit+0x11c>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2221      	movs	r2, #33	; 0x21
 800587a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800587e:	f7fd f80f 	bl	80028a0 <HAL_GetTick>
 8005882:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	88fa      	ldrh	r2, [r7, #6]
 8005888:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	88fa      	ldrh	r2, [r7, #6]
 800588e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005898:	d108      	bne.n	80058ac <HAL_UART_Transmit+0x82>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d104      	bne.n	80058ac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80058a2:	2300      	movs	r3, #0
 80058a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	61bb      	str	r3, [r7, #24]
 80058aa:	e003      	b.n	80058b4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058b0:	2300      	movs	r3, #0
 80058b2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80058bc:	e02a      	b.n	8005914 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	9300      	str	r3, [sp, #0]
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	2200      	movs	r2, #0
 80058c6:	2180      	movs	r1, #128	; 0x80
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f000 fb1f 	bl	8005f0c <UART_WaitOnFlagUntilTimeout>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d001      	beq.n	80058d8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	e036      	b.n	8005946 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d10b      	bne.n	80058f6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	881b      	ldrh	r3, [r3, #0]
 80058e2:	461a      	mov	r2, r3
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	3302      	adds	r3, #2
 80058f2:	61bb      	str	r3, [r7, #24]
 80058f4:	e007      	b.n	8005906 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	781a      	ldrb	r2, [r3, #0]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	3301      	adds	r3, #1
 8005904:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800590a:	b29b      	uxth	r3, r3
 800590c:	3b01      	subs	r3, #1
 800590e:	b29a      	uxth	r2, r3
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005918:	b29b      	uxth	r3, r3
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1cf      	bne.n	80058be <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	9300      	str	r3, [sp, #0]
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	2200      	movs	r2, #0
 8005926:	2140      	movs	r1, #64	; 0x40
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	f000 faef 	bl	8005f0c <UART_WaitOnFlagUntilTimeout>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d001      	beq.n	8005938 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005934:	2303      	movs	r3, #3
 8005936:	e006      	b.n	8005946 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2220      	movs	r2, #32
 800593c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005940:	2300      	movs	r3, #0
 8005942:	e000      	b.n	8005946 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005944:	2302      	movs	r3, #2
  }
}
 8005946:	4618      	mov	r0, r3
 8005948:	3720      	adds	r7, #32
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}

0800594e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800594e:	b580      	push	{r7, lr}
 8005950:	b084      	sub	sp, #16
 8005952:	af00      	add	r7, sp, #0
 8005954:	60f8      	str	r0, [r7, #12]
 8005956:	60b9      	str	r1, [r7, #8]
 8005958:	4613      	mov	r3, r2
 800595a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005962:	b2db      	uxtb	r3, r3
 8005964:	2b20      	cmp	r3, #32
 8005966:	d11d      	bne.n	80059a4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d002      	beq.n	8005974 <HAL_UART_Receive_IT+0x26>
 800596e:	88fb      	ldrh	r3, [r7, #6]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d101      	bne.n	8005978 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e016      	b.n	80059a6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800597e:	2b01      	cmp	r3, #1
 8005980:	d101      	bne.n	8005986 <HAL_UART_Receive_IT+0x38>
 8005982:	2302      	movs	r3, #2
 8005984:	e00f      	b.n	80059a6 <HAL_UART_Receive_IT+0x58>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005994:	88fb      	ldrh	r3, [r7, #6]
 8005996:	461a      	mov	r2, r3
 8005998:	68b9      	ldr	r1, [r7, #8]
 800599a:	68f8      	ldr	r0, [r7, #12]
 800599c:	f000 fb24 	bl	8005fe8 <UART_Start_Receive_IT>
 80059a0:	4603      	mov	r3, r0
 80059a2:	e000      	b.n	80059a6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80059a4:	2302      	movs	r3, #2
  }
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3710      	adds	r7, #16
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
	...

080059b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b0ba      	sub	sp, #232	; 0xe8
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80059d6:	2300      	movs	r3, #0
 80059d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80059dc:	2300      	movs	r3, #0
 80059de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80059e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059e6:	f003 030f 	and.w	r3, r3, #15
 80059ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80059ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10f      	bne.n	8005a16 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059fa:	f003 0320 	and.w	r3, r3, #32
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d009      	beq.n	8005a16 <HAL_UART_IRQHandler+0x66>
 8005a02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a06:	f003 0320 	and.w	r3, r3, #32
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d003      	beq.n	8005a16 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 fc03 	bl	800621a <UART_Receive_IT>
      return;
 8005a14:	e256      	b.n	8005ec4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005a16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	f000 80de 	beq.w	8005bdc <HAL_UART_IRQHandler+0x22c>
 8005a20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a24:	f003 0301 	and.w	r3, r3, #1
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d106      	bne.n	8005a3a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005a2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a30:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f000 80d1 	beq.w	8005bdc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a3e:	f003 0301 	and.w	r3, r3, #1
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00b      	beq.n	8005a5e <HAL_UART_IRQHandler+0xae>
 8005a46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d005      	beq.n	8005a5e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a56:	f043 0201 	orr.w	r2, r3, #1
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a62:	f003 0304 	and.w	r3, r3, #4
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00b      	beq.n	8005a82 <HAL_UART_IRQHandler+0xd2>
 8005a6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a6e:	f003 0301 	and.w	r3, r3, #1
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d005      	beq.n	8005a82 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7a:	f043 0202 	orr.w	r2, r3, #2
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a86:	f003 0302 	and.w	r3, r3, #2
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00b      	beq.n	8005aa6 <HAL_UART_IRQHandler+0xf6>
 8005a8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a92:	f003 0301 	and.w	r3, r3, #1
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d005      	beq.n	8005aa6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9e:	f043 0204 	orr.w	r2, r3, #4
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aaa:	f003 0308 	and.w	r3, r3, #8
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d011      	beq.n	8005ad6 <HAL_UART_IRQHandler+0x126>
 8005ab2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ab6:	f003 0320 	and.w	r3, r3, #32
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d105      	bne.n	8005aca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005abe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d005      	beq.n	8005ad6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ace:	f043 0208 	orr.w	r2, r3, #8
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	f000 81ed 	beq.w	8005eba <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ae4:	f003 0320 	and.w	r3, r3, #32
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d008      	beq.n	8005afe <HAL_UART_IRQHandler+0x14e>
 8005aec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005af0:	f003 0320 	and.w	r3, r3, #32
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d002      	beq.n	8005afe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 fb8e 	bl	800621a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	695b      	ldr	r3, [r3, #20]
 8005b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b08:	2b40      	cmp	r3, #64	; 0x40
 8005b0a:	bf0c      	ite	eq
 8005b0c:	2301      	moveq	r3, #1
 8005b0e:	2300      	movne	r3, #0
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1a:	f003 0308 	and.w	r3, r3, #8
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d103      	bne.n	8005b2a <HAL_UART_IRQHandler+0x17a>
 8005b22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d04f      	beq.n	8005bca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 fa96 	bl	800605c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	695b      	ldr	r3, [r3, #20]
 8005b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b3a:	2b40      	cmp	r3, #64	; 0x40
 8005b3c:	d141      	bne.n	8005bc2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	3314      	adds	r3, #20
 8005b44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b4c:	e853 3f00 	ldrex	r3, [r3]
 8005b50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005b54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	3314      	adds	r3, #20
 8005b66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005b6a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005b6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005b76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005b7a:	e841 2300 	strex	r3, r2, [r1]
 8005b7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005b82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1d9      	bne.n	8005b3e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d013      	beq.n	8005bba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b96:	4a7d      	ldr	r2, [pc, #500]	; (8005d8c <HAL_UART_IRQHandler+0x3dc>)
 8005b98:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f7fd f80b 	bl	8002bba <HAL_DMA_Abort_IT>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d016      	beq.n	8005bd8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005bb4:	4610      	mov	r0, r2
 8005bb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bb8:	e00e      	b.n	8005bd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 f990 	bl	8005ee0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bc0:	e00a      	b.n	8005bd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 f98c 	bl	8005ee0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bc8:	e006      	b.n	8005bd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 f988 	bl	8005ee0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005bd6:	e170      	b.n	8005eba <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bd8:	bf00      	nop
    return;
 8005bda:	e16e      	b.n	8005eba <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	f040 814a 	bne.w	8005e7a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bea:	f003 0310 	and.w	r3, r3, #16
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	f000 8143 	beq.w	8005e7a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005bf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bf8:	f003 0310 	and.w	r3, r3, #16
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	f000 813c 	beq.w	8005e7a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c02:	2300      	movs	r3, #0
 8005c04:	60bb      	str	r3, [r7, #8]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	60bb      	str	r3, [r7, #8]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	60bb      	str	r3, [r7, #8]
 8005c16:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c22:	2b40      	cmp	r3, #64	; 0x40
 8005c24:	f040 80b4 	bne.w	8005d90 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005c34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	f000 8140 	beq.w	8005ebe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c46:	429a      	cmp	r2, r3
 8005c48:	f080 8139 	bcs.w	8005ebe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c52:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c58:	69db      	ldr	r3, [r3, #28]
 8005c5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c5e:	f000 8088 	beq.w	8005d72 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	330c      	adds	r3, #12
 8005c68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c70:	e853 3f00 	ldrex	r3, [r3]
 8005c74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005c78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	330c      	adds	r3, #12
 8005c8a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005c8e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005c92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c96:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005c9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c9e:	e841 2300 	strex	r3, r2, [r1]
 8005ca2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005ca6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d1d9      	bne.n	8005c62 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	3314      	adds	r3, #20
 8005cb4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cb8:	e853 3f00 	ldrex	r3, [r3]
 8005cbc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005cbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005cc0:	f023 0301 	bic.w	r3, r3, #1
 8005cc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	3314      	adds	r3, #20
 8005cce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005cd2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005cd6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005cda:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005cde:	e841 2300 	strex	r3, r2, [r1]
 8005ce2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005ce4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d1e1      	bne.n	8005cae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	3314      	adds	r3, #20
 8005cf0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cf4:	e853 3f00 	ldrex	r3, [r3]
 8005cf8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005cfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	3314      	adds	r3, #20
 8005d0a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005d0e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005d10:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d12:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005d14:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005d16:	e841 2300 	strex	r3, r2, [r1]
 8005d1a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005d1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d1e3      	bne.n	8005cea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2220      	movs	r2, #32
 8005d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	330c      	adds	r3, #12
 8005d36:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d3a:	e853 3f00 	ldrex	r3, [r3]
 8005d3e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005d40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d42:	f023 0310 	bic.w	r3, r3, #16
 8005d46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	330c      	adds	r3, #12
 8005d50:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005d54:	65ba      	str	r2, [r7, #88]	; 0x58
 8005d56:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d58:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d5c:	e841 2300 	strex	r3, r2, [r1]
 8005d60:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005d62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d1e3      	bne.n	8005d30 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f7fc feb4 	bl	8002ada <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	4619      	mov	r1, r3
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 f8b6 	bl	8005ef4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d88:	e099      	b.n	8005ebe <HAL_UART_IRQHandler+0x50e>
 8005d8a:	bf00      	nop
 8005d8c:	08006123 	.word	0x08006123
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	f000 808b 	beq.w	8005ec2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005dac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f000 8086 	beq.w	8005ec2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	330c      	adds	r3, #12
 8005dbc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc0:	e853 3f00 	ldrex	r3, [r3]
 8005dc4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005dcc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	330c      	adds	r3, #12
 8005dd6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005dda:	647a      	str	r2, [r7, #68]	; 0x44
 8005ddc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dde:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005de0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005de2:	e841 2300 	strex	r3, r2, [r1]
 8005de6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1e3      	bne.n	8005db6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	3314      	adds	r3, #20
 8005df4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df8:	e853 3f00 	ldrex	r3, [r3]
 8005dfc:	623b      	str	r3, [r7, #32]
   return(result);
 8005dfe:	6a3b      	ldr	r3, [r7, #32]
 8005e00:	f023 0301 	bic.w	r3, r3, #1
 8005e04:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	3314      	adds	r3, #20
 8005e0e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005e12:	633a      	str	r2, [r7, #48]	; 0x30
 8005e14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e1a:	e841 2300 	strex	r3, r2, [r1]
 8005e1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1e3      	bne.n	8005dee <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2220      	movs	r2, #32
 8005e2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	330c      	adds	r3, #12
 8005e3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	e853 3f00 	ldrex	r3, [r3]
 8005e42:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f023 0310 	bic.w	r3, r3, #16
 8005e4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	330c      	adds	r3, #12
 8005e54:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005e58:	61fa      	str	r2, [r7, #28]
 8005e5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e5c:	69b9      	ldr	r1, [r7, #24]
 8005e5e:	69fa      	ldr	r2, [r7, #28]
 8005e60:	e841 2300 	strex	r3, r2, [r1]
 8005e64:	617b      	str	r3, [r7, #20]
   return(result);
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d1e3      	bne.n	8005e34 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e70:	4619      	mov	r1, r3
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 f83e 	bl	8005ef4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e78:	e023      	b.n	8005ec2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d009      	beq.n	8005e9a <HAL_UART_IRQHandler+0x4ea>
 8005e86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d003      	beq.n	8005e9a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 f959 	bl	800614a <UART_Transmit_IT>
    return;
 8005e98:	e014      	b.n	8005ec4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00e      	beq.n	8005ec4 <HAL_UART_IRQHandler+0x514>
 8005ea6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d008      	beq.n	8005ec4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 f999 	bl	80061ea <UART_EndTransmit_IT>
    return;
 8005eb8:	e004      	b.n	8005ec4 <HAL_UART_IRQHandler+0x514>
    return;
 8005eba:	bf00      	nop
 8005ebc:	e002      	b.n	8005ec4 <HAL_UART_IRQHandler+0x514>
      return;
 8005ebe:	bf00      	nop
 8005ec0:	e000      	b.n	8005ec4 <HAL_UART_IRQHandler+0x514>
      return;
 8005ec2:	bf00      	nop
  }
}
 8005ec4:	37e8      	adds	r7, #232	; 0xe8
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop

08005ecc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005ed4:	bf00      	nop
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005ee8:	bf00      	nop
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	460b      	mov	r3, r1
 8005efe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f00:	bf00      	nop
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b090      	sub	sp, #64	; 0x40
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	603b      	str	r3, [r7, #0]
 8005f18:	4613      	mov	r3, r2
 8005f1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f1c:	e050      	b.n	8005fc0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f24:	d04c      	beq.n	8005fc0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005f26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d007      	beq.n	8005f3c <UART_WaitOnFlagUntilTimeout+0x30>
 8005f2c:	f7fc fcb8 	bl	80028a0 <HAL_GetTick>
 8005f30:	4602      	mov	r2, r0
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d241      	bcs.n	8005fc0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	330c      	adds	r3, #12
 8005f42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f46:	e853 3f00 	ldrex	r3, [r3]
 8005f4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	330c      	adds	r3, #12
 8005f5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f5c:	637a      	str	r2, [r7, #52]	; 0x34
 8005f5e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f64:	e841 2300 	strex	r3, r2, [r1]
 8005f68:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d1e5      	bne.n	8005f3c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	3314      	adds	r3, #20
 8005f76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	e853 3f00 	ldrex	r3, [r3]
 8005f7e:	613b      	str	r3, [r7, #16]
   return(result);
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	f023 0301 	bic.w	r3, r3, #1
 8005f86:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	3314      	adds	r3, #20
 8005f8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f90:	623a      	str	r2, [r7, #32]
 8005f92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f94:	69f9      	ldr	r1, [r7, #28]
 8005f96:	6a3a      	ldr	r2, [r7, #32]
 8005f98:	e841 2300 	strex	r3, r2, [r1]
 8005f9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d1e5      	bne.n	8005f70 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2220      	movs	r2, #32
 8005fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2220      	movs	r2, #32
 8005fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	e00f      	b.n	8005fe0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	4013      	ands	r3, r2
 8005fca:	68ba      	ldr	r2, [r7, #8]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	bf0c      	ite	eq
 8005fd0:	2301      	moveq	r3, #1
 8005fd2:	2300      	movne	r3, #0
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	79fb      	ldrb	r3, [r7, #7]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d09f      	beq.n	8005f1e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3740      	adds	r7, #64	; 0x40
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	68ba      	ldr	r2, [r7, #8]
 8005ffa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	88fa      	ldrh	r2, [r7, #6]
 8006000:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	88fa      	ldrh	r2, [r7, #6]
 8006006:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2222      	movs	r2, #34	; 0x22
 8006012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68da      	ldr	r2, [r3, #12]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800602c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	695a      	ldr	r2, [r3, #20]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f042 0201 	orr.w	r2, r2, #1
 800603c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68da      	ldr	r2, [r3, #12]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f042 0220 	orr.w	r2, r2, #32
 800604c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3714      	adds	r7, #20
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800605c:	b480      	push	{r7}
 800605e:	b095      	sub	sp, #84	; 0x54
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	330c      	adds	r3, #12
 800606a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800606c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800606e:	e853 3f00 	ldrex	r3, [r3]
 8006072:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006076:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800607a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	330c      	adds	r3, #12
 8006082:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006084:	643a      	str	r2, [r7, #64]	; 0x40
 8006086:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006088:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800608a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800608c:	e841 2300 	strex	r3, r2, [r1]
 8006090:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006094:	2b00      	cmp	r3, #0
 8006096:	d1e5      	bne.n	8006064 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	3314      	adds	r3, #20
 800609e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a0:	6a3b      	ldr	r3, [r7, #32]
 80060a2:	e853 3f00 	ldrex	r3, [r3]
 80060a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	f023 0301 	bic.w	r3, r3, #1
 80060ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	3314      	adds	r3, #20
 80060b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060c0:	e841 2300 	strex	r3, r2, [r1]
 80060c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d1e5      	bne.n	8006098 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d119      	bne.n	8006108 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	330c      	adds	r3, #12
 80060da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	e853 3f00 	ldrex	r3, [r3]
 80060e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	f023 0310 	bic.w	r3, r3, #16
 80060ea:	647b      	str	r3, [r7, #68]	; 0x44
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	330c      	adds	r3, #12
 80060f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060f4:	61ba      	str	r2, [r7, #24]
 80060f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f8:	6979      	ldr	r1, [r7, #20]
 80060fa:	69ba      	ldr	r2, [r7, #24]
 80060fc:	e841 2300 	strex	r3, r2, [r1]
 8006100:	613b      	str	r3, [r7, #16]
   return(result);
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d1e5      	bne.n	80060d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2220      	movs	r2, #32
 800610c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006116:	bf00      	nop
 8006118:	3754      	adds	r7, #84	; 0x54
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr

08006122 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b084      	sub	sp, #16
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800612e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2200      	movs	r2, #0
 8006134:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2200      	movs	r2, #0
 800613a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f7ff fecf 	bl	8005ee0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006142:	bf00      	nop
 8006144:	3710      	adds	r7, #16
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800614a:	b480      	push	{r7}
 800614c:	b085      	sub	sp, #20
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006158:	b2db      	uxtb	r3, r3
 800615a:	2b21      	cmp	r3, #33	; 0x21
 800615c:	d13e      	bne.n	80061dc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006166:	d114      	bne.n	8006192 <UART_Transmit_IT+0x48>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d110      	bne.n	8006192 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6a1b      	ldr	r3, [r3, #32]
 8006174:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	881b      	ldrh	r3, [r3, #0]
 800617a:	461a      	mov	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006184:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a1b      	ldr	r3, [r3, #32]
 800618a:	1c9a      	adds	r2, r3, #2
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	621a      	str	r2, [r3, #32]
 8006190:	e008      	b.n	80061a4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a1b      	ldr	r3, [r3, #32]
 8006196:	1c59      	adds	r1, r3, #1
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	6211      	str	r1, [r2, #32]
 800619c:	781a      	ldrb	r2, [r3, #0]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	3b01      	subs	r3, #1
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	4619      	mov	r1, r3
 80061b2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d10f      	bne.n	80061d8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	68da      	ldr	r2, [r3, #12]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68da      	ldr	r2, [r3, #12]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80061d8:	2300      	movs	r3, #0
 80061da:	e000      	b.n	80061de <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80061dc:	2302      	movs	r3, #2
  }
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3714      	adds	r7, #20
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr

080061ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b082      	sub	sp, #8
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68da      	ldr	r2, [r3, #12]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006200:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2220      	movs	r2, #32
 8006206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f7ff fe5e 	bl	8005ecc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	3708      	adds	r7, #8
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}

0800621a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800621a:	b580      	push	{r7, lr}
 800621c:	b08c      	sub	sp, #48	; 0x30
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006228:	b2db      	uxtb	r3, r3
 800622a:	2b22      	cmp	r3, #34	; 0x22
 800622c:	f040 80ab 	bne.w	8006386 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006238:	d117      	bne.n	800626a <UART_Receive_IT+0x50>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d113      	bne.n	800626a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006242:	2300      	movs	r3, #0
 8006244:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800624a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	b29b      	uxth	r3, r3
 8006254:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006258:	b29a      	uxth	r2, r3
 800625a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006262:	1c9a      	adds	r2, r3, #2
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	629a      	str	r2, [r3, #40]	; 0x28
 8006268:	e026      	b.n	80062b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800626e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006270:	2300      	movs	r3, #0
 8006272:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800627c:	d007      	beq.n	800628e <UART_Receive_IT+0x74>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d10a      	bne.n	800629c <UART_Receive_IT+0x82>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d106      	bne.n	800629c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	b2da      	uxtb	r2, r3
 8006296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006298:	701a      	strb	r2, [r3, #0]
 800629a:	e008      	b.n	80062ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062a8:	b2da      	uxtb	r2, r3
 80062aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b2:	1c5a      	adds	r2, r3, #1
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062bc:	b29b      	uxth	r3, r3
 80062be:	3b01      	subs	r3, #1
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	4619      	mov	r1, r3
 80062c6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d15a      	bne.n	8006382 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68da      	ldr	r2, [r3, #12]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f022 0220 	bic.w	r2, r2, #32
 80062da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68da      	ldr	r2, [r3, #12]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	695a      	ldr	r2, [r3, #20]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f022 0201 	bic.w	r2, r2, #1
 80062fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2220      	movs	r2, #32
 8006300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006308:	2b01      	cmp	r3, #1
 800630a:	d135      	bne.n	8006378 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	330c      	adds	r3, #12
 8006318:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	e853 3f00 	ldrex	r3, [r3]
 8006320:	613b      	str	r3, [r7, #16]
   return(result);
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	f023 0310 	bic.w	r3, r3, #16
 8006328:	627b      	str	r3, [r7, #36]	; 0x24
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	330c      	adds	r3, #12
 8006330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006332:	623a      	str	r2, [r7, #32]
 8006334:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006336:	69f9      	ldr	r1, [r7, #28]
 8006338:	6a3a      	ldr	r2, [r7, #32]
 800633a:	e841 2300 	strex	r3, r2, [r1]
 800633e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d1e5      	bne.n	8006312 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 0310 	and.w	r3, r3, #16
 8006350:	2b10      	cmp	r3, #16
 8006352:	d10a      	bne.n	800636a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006354:	2300      	movs	r3, #0
 8006356:	60fb      	str	r3, [r7, #12]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	60fb      	str	r3, [r7, #12]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	60fb      	str	r3, [r7, #12]
 8006368:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800636e:	4619      	mov	r1, r3
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f7ff fdbf 	bl	8005ef4 <HAL_UARTEx_RxEventCallback>
 8006376:	e002      	b.n	800637e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f7fb fe15 	bl	8001fa8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800637e:	2300      	movs	r3, #0
 8006380:	e002      	b.n	8006388 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006382:	2300      	movs	r3, #0
 8006384:	e000      	b.n	8006388 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006386:	2302      	movs	r3, #2
  }
}
 8006388:	4618      	mov	r0, r3
 800638a:	3730      	adds	r7, #48	; 0x30
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006394:	b09f      	sub	sp, #124	; 0x7c
 8006396:	af00      	add	r7, sp, #0
 8006398:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800639a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	691b      	ldr	r3, [r3, #16]
 80063a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80063a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063a6:	68d9      	ldr	r1, [r3, #12]
 80063a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	ea40 0301 	orr.w	r3, r0, r1
 80063b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80063b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063b4:	689a      	ldr	r2, [r3, #8]
 80063b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	431a      	orrs	r2, r3
 80063bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063be:	695b      	ldr	r3, [r3, #20]
 80063c0:	431a      	orrs	r2, r3
 80063c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063c4:	69db      	ldr	r3, [r3, #28]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80063ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80063d4:	f021 010c 	bic.w	r1, r1, #12
 80063d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063de:	430b      	orrs	r3, r1
 80063e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80063e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	695b      	ldr	r3, [r3, #20]
 80063e8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80063ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063ee:	6999      	ldr	r1, [r3, #24]
 80063f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	ea40 0301 	orr.w	r3, r0, r1
 80063f8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80063fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	4bc5      	ldr	r3, [pc, #788]	; (8006714 <UART_SetConfig+0x384>)
 8006400:	429a      	cmp	r2, r3
 8006402:	d004      	beq.n	800640e <UART_SetConfig+0x7e>
 8006404:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	4bc3      	ldr	r3, [pc, #780]	; (8006718 <UART_SetConfig+0x388>)
 800640a:	429a      	cmp	r2, r3
 800640c:	d103      	bne.n	8006416 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800640e:	f7fe f9e7 	bl	80047e0 <HAL_RCC_GetPCLK2Freq>
 8006412:	6778      	str	r0, [r7, #116]	; 0x74
 8006414:	e002      	b.n	800641c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006416:	f7fe f9cf 	bl	80047b8 <HAL_RCC_GetPCLK1Freq>
 800641a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800641c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800641e:	69db      	ldr	r3, [r3, #28]
 8006420:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006424:	f040 80b6 	bne.w	8006594 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006428:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800642a:	461c      	mov	r4, r3
 800642c:	f04f 0500 	mov.w	r5, #0
 8006430:	4622      	mov	r2, r4
 8006432:	462b      	mov	r3, r5
 8006434:	1891      	adds	r1, r2, r2
 8006436:	6439      	str	r1, [r7, #64]	; 0x40
 8006438:	415b      	adcs	r3, r3
 800643a:	647b      	str	r3, [r7, #68]	; 0x44
 800643c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006440:	1912      	adds	r2, r2, r4
 8006442:	eb45 0303 	adc.w	r3, r5, r3
 8006446:	f04f 0000 	mov.w	r0, #0
 800644a:	f04f 0100 	mov.w	r1, #0
 800644e:	00d9      	lsls	r1, r3, #3
 8006450:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006454:	00d0      	lsls	r0, r2, #3
 8006456:	4602      	mov	r2, r0
 8006458:	460b      	mov	r3, r1
 800645a:	1911      	adds	r1, r2, r4
 800645c:	6639      	str	r1, [r7, #96]	; 0x60
 800645e:	416b      	adcs	r3, r5
 8006460:	667b      	str	r3, [r7, #100]	; 0x64
 8006462:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	461a      	mov	r2, r3
 8006468:	f04f 0300 	mov.w	r3, #0
 800646c:	1891      	adds	r1, r2, r2
 800646e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006470:	415b      	adcs	r3, r3
 8006472:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006474:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006478:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800647c:	f7fa fbec 	bl	8000c58 <__aeabi_uldivmod>
 8006480:	4602      	mov	r2, r0
 8006482:	460b      	mov	r3, r1
 8006484:	4ba5      	ldr	r3, [pc, #660]	; (800671c <UART_SetConfig+0x38c>)
 8006486:	fba3 2302 	umull	r2, r3, r3, r2
 800648a:	095b      	lsrs	r3, r3, #5
 800648c:	011e      	lsls	r6, r3, #4
 800648e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006490:	461c      	mov	r4, r3
 8006492:	f04f 0500 	mov.w	r5, #0
 8006496:	4622      	mov	r2, r4
 8006498:	462b      	mov	r3, r5
 800649a:	1891      	adds	r1, r2, r2
 800649c:	6339      	str	r1, [r7, #48]	; 0x30
 800649e:	415b      	adcs	r3, r3
 80064a0:	637b      	str	r3, [r7, #52]	; 0x34
 80064a2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80064a6:	1912      	adds	r2, r2, r4
 80064a8:	eb45 0303 	adc.w	r3, r5, r3
 80064ac:	f04f 0000 	mov.w	r0, #0
 80064b0:	f04f 0100 	mov.w	r1, #0
 80064b4:	00d9      	lsls	r1, r3, #3
 80064b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80064ba:	00d0      	lsls	r0, r2, #3
 80064bc:	4602      	mov	r2, r0
 80064be:	460b      	mov	r3, r1
 80064c0:	1911      	adds	r1, r2, r4
 80064c2:	65b9      	str	r1, [r7, #88]	; 0x58
 80064c4:	416b      	adcs	r3, r5
 80064c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	461a      	mov	r2, r3
 80064ce:	f04f 0300 	mov.w	r3, #0
 80064d2:	1891      	adds	r1, r2, r2
 80064d4:	62b9      	str	r1, [r7, #40]	; 0x28
 80064d6:	415b      	adcs	r3, r3
 80064d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80064de:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80064e2:	f7fa fbb9 	bl	8000c58 <__aeabi_uldivmod>
 80064e6:	4602      	mov	r2, r0
 80064e8:	460b      	mov	r3, r1
 80064ea:	4b8c      	ldr	r3, [pc, #560]	; (800671c <UART_SetConfig+0x38c>)
 80064ec:	fba3 1302 	umull	r1, r3, r3, r2
 80064f0:	095b      	lsrs	r3, r3, #5
 80064f2:	2164      	movs	r1, #100	; 0x64
 80064f4:	fb01 f303 	mul.w	r3, r1, r3
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	00db      	lsls	r3, r3, #3
 80064fc:	3332      	adds	r3, #50	; 0x32
 80064fe:	4a87      	ldr	r2, [pc, #540]	; (800671c <UART_SetConfig+0x38c>)
 8006500:	fba2 2303 	umull	r2, r3, r2, r3
 8006504:	095b      	lsrs	r3, r3, #5
 8006506:	005b      	lsls	r3, r3, #1
 8006508:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800650c:	441e      	add	r6, r3
 800650e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006510:	4618      	mov	r0, r3
 8006512:	f04f 0100 	mov.w	r1, #0
 8006516:	4602      	mov	r2, r0
 8006518:	460b      	mov	r3, r1
 800651a:	1894      	adds	r4, r2, r2
 800651c:	623c      	str	r4, [r7, #32]
 800651e:	415b      	adcs	r3, r3
 8006520:	627b      	str	r3, [r7, #36]	; 0x24
 8006522:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006526:	1812      	adds	r2, r2, r0
 8006528:	eb41 0303 	adc.w	r3, r1, r3
 800652c:	f04f 0400 	mov.w	r4, #0
 8006530:	f04f 0500 	mov.w	r5, #0
 8006534:	00dd      	lsls	r5, r3, #3
 8006536:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800653a:	00d4      	lsls	r4, r2, #3
 800653c:	4622      	mov	r2, r4
 800653e:	462b      	mov	r3, r5
 8006540:	1814      	adds	r4, r2, r0
 8006542:	653c      	str	r4, [r7, #80]	; 0x50
 8006544:	414b      	adcs	r3, r1
 8006546:	657b      	str	r3, [r7, #84]	; 0x54
 8006548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	461a      	mov	r2, r3
 800654e:	f04f 0300 	mov.w	r3, #0
 8006552:	1891      	adds	r1, r2, r2
 8006554:	61b9      	str	r1, [r7, #24]
 8006556:	415b      	adcs	r3, r3
 8006558:	61fb      	str	r3, [r7, #28]
 800655a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800655e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006562:	f7fa fb79 	bl	8000c58 <__aeabi_uldivmod>
 8006566:	4602      	mov	r2, r0
 8006568:	460b      	mov	r3, r1
 800656a:	4b6c      	ldr	r3, [pc, #432]	; (800671c <UART_SetConfig+0x38c>)
 800656c:	fba3 1302 	umull	r1, r3, r3, r2
 8006570:	095b      	lsrs	r3, r3, #5
 8006572:	2164      	movs	r1, #100	; 0x64
 8006574:	fb01 f303 	mul.w	r3, r1, r3
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	00db      	lsls	r3, r3, #3
 800657c:	3332      	adds	r3, #50	; 0x32
 800657e:	4a67      	ldr	r2, [pc, #412]	; (800671c <UART_SetConfig+0x38c>)
 8006580:	fba2 2303 	umull	r2, r3, r2, r3
 8006584:	095b      	lsrs	r3, r3, #5
 8006586:	f003 0207 	and.w	r2, r3, #7
 800658a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4432      	add	r2, r6
 8006590:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006592:	e0b9      	b.n	8006708 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006594:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006596:	461c      	mov	r4, r3
 8006598:	f04f 0500 	mov.w	r5, #0
 800659c:	4622      	mov	r2, r4
 800659e:	462b      	mov	r3, r5
 80065a0:	1891      	adds	r1, r2, r2
 80065a2:	6139      	str	r1, [r7, #16]
 80065a4:	415b      	adcs	r3, r3
 80065a6:	617b      	str	r3, [r7, #20]
 80065a8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80065ac:	1912      	adds	r2, r2, r4
 80065ae:	eb45 0303 	adc.w	r3, r5, r3
 80065b2:	f04f 0000 	mov.w	r0, #0
 80065b6:	f04f 0100 	mov.w	r1, #0
 80065ba:	00d9      	lsls	r1, r3, #3
 80065bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80065c0:	00d0      	lsls	r0, r2, #3
 80065c2:	4602      	mov	r2, r0
 80065c4:	460b      	mov	r3, r1
 80065c6:	eb12 0804 	adds.w	r8, r2, r4
 80065ca:	eb43 0905 	adc.w	r9, r3, r5
 80065ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	4618      	mov	r0, r3
 80065d4:	f04f 0100 	mov.w	r1, #0
 80065d8:	f04f 0200 	mov.w	r2, #0
 80065dc:	f04f 0300 	mov.w	r3, #0
 80065e0:	008b      	lsls	r3, r1, #2
 80065e2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80065e6:	0082      	lsls	r2, r0, #2
 80065e8:	4640      	mov	r0, r8
 80065ea:	4649      	mov	r1, r9
 80065ec:	f7fa fb34 	bl	8000c58 <__aeabi_uldivmod>
 80065f0:	4602      	mov	r2, r0
 80065f2:	460b      	mov	r3, r1
 80065f4:	4b49      	ldr	r3, [pc, #292]	; (800671c <UART_SetConfig+0x38c>)
 80065f6:	fba3 2302 	umull	r2, r3, r3, r2
 80065fa:	095b      	lsrs	r3, r3, #5
 80065fc:	011e      	lsls	r6, r3, #4
 80065fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006600:	4618      	mov	r0, r3
 8006602:	f04f 0100 	mov.w	r1, #0
 8006606:	4602      	mov	r2, r0
 8006608:	460b      	mov	r3, r1
 800660a:	1894      	adds	r4, r2, r2
 800660c:	60bc      	str	r4, [r7, #8]
 800660e:	415b      	adcs	r3, r3
 8006610:	60fb      	str	r3, [r7, #12]
 8006612:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006616:	1812      	adds	r2, r2, r0
 8006618:	eb41 0303 	adc.w	r3, r1, r3
 800661c:	f04f 0400 	mov.w	r4, #0
 8006620:	f04f 0500 	mov.w	r5, #0
 8006624:	00dd      	lsls	r5, r3, #3
 8006626:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800662a:	00d4      	lsls	r4, r2, #3
 800662c:	4622      	mov	r2, r4
 800662e:	462b      	mov	r3, r5
 8006630:	1814      	adds	r4, r2, r0
 8006632:	64bc      	str	r4, [r7, #72]	; 0x48
 8006634:	414b      	adcs	r3, r1
 8006636:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006638:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	4618      	mov	r0, r3
 800663e:	f04f 0100 	mov.w	r1, #0
 8006642:	f04f 0200 	mov.w	r2, #0
 8006646:	f04f 0300 	mov.w	r3, #0
 800664a:	008b      	lsls	r3, r1, #2
 800664c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006650:	0082      	lsls	r2, r0, #2
 8006652:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006656:	f7fa faff 	bl	8000c58 <__aeabi_uldivmod>
 800665a:	4602      	mov	r2, r0
 800665c:	460b      	mov	r3, r1
 800665e:	4b2f      	ldr	r3, [pc, #188]	; (800671c <UART_SetConfig+0x38c>)
 8006660:	fba3 1302 	umull	r1, r3, r3, r2
 8006664:	095b      	lsrs	r3, r3, #5
 8006666:	2164      	movs	r1, #100	; 0x64
 8006668:	fb01 f303 	mul.w	r3, r1, r3
 800666c:	1ad3      	subs	r3, r2, r3
 800666e:	011b      	lsls	r3, r3, #4
 8006670:	3332      	adds	r3, #50	; 0x32
 8006672:	4a2a      	ldr	r2, [pc, #168]	; (800671c <UART_SetConfig+0x38c>)
 8006674:	fba2 2303 	umull	r2, r3, r2, r3
 8006678:	095b      	lsrs	r3, r3, #5
 800667a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800667e:	441e      	add	r6, r3
 8006680:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006682:	4618      	mov	r0, r3
 8006684:	f04f 0100 	mov.w	r1, #0
 8006688:	4602      	mov	r2, r0
 800668a:	460b      	mov	r3, r1
 800668c:	1894      	adds	r4, r2, r2
 800668e:	603c      	str	r4, [r7, #0]
 8006690:	415b      	adcs	r3, r3
 8006692:	607b      	str	r3, [r7, #4]
 8006694:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006698:	1812      	adds	r2, r2, r0
 800669a:	eb41 0303 	adc.w	r3, r1, r3
 800669e:	f04f 0400 	mov.w	r4, #0
 80066a2:	f04f 0500 	mov.w	r5, #0
 80066a6:	00dd      	lsls	r5, r3, #3
 80066a8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80066ac:	00d4      	lsls	r4, r2, #3
 80066ae:	4622      	mov	r2, r4
 80066b0:	462b      	mov	r3, r5
 80066b2:	eb12 0a00 	adds.w	sl, r2, r0
 80066b6:	eb43 0b01 	adc.w	fp, r3, r1
 80066ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	4618      	mov	r0, r3
 80066c0:	f04f 0100 	mov.w	r1, #0
 80066c4:	f04f 0200 	mov.w	r2, #0
 80066c8:	f04f 0300 	mov.w	r3, #0
 80066cc:	008b      	lsls	r3, r1, #2
 80066ce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80066d2:	0082      	lsls	r2, r0, #2
 80066d4:	4650      	mov	r0, sl
 80066d6:	4659      	mov	r1, fp
 80066d8:	f7fa fabe 	bl	8000c58 <__aeabi_uldivmod>
 80066dc:	4602      	mov	r2, r0
 80066de:	460b      	mov	r3, r1
 80066e0:	4b0e      	ldr	r3, [pc, #56]	; (800671c <UART_SetConfig+0x38c>)
 80066e2:	fba3 1302 	umull	r1, r3, r3, r2
 80066e6:	095b      	lsrs	r3, r3, #5
 80066e8:	2164      	movs	r1, #100	; 0x64
 80066ea:	fb01 f303 	mul.w	r3, r1, r3
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	011b      	lsls	r3, r3, #4
 80066f2:	3332      	adds	r3, #50	; 0x32
 80066f4:	4a09      	ldr	r2, [pc, #36]	; (800671c <UART_SetConfig+0x38c>)
 80066f6:	fba2 2303 	umull	r2, r3, r2, r3
 80066fa:	095b      	lsrs	r3, r3, #5
 80066fc:	f003 020f 	and.w	r2, r3, #15
 8006700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4432      	add	r2, r6
 8006706:	609a      	str	r2, [r3, #8]
}
 8006708:	bf00      	nop
 800670a:	377c      	adds	r7, #124	; 0x7c
 800670c:	46bd      	mov	sp, r7
 800670e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006712:	bf00      	nop
 8006714:	40011000 	.word	0x40011000
 8006718:	40011400 	.word	0x40011400
 800671c:	51eb851f 	.word	0x51eb851f

08006720 <__errno>:
 8006720:	4b01      	ldr	r3, [pc, #4]	; (8006728 <__errno+0x8>)
 8006722:	6818      	ldr	r0, [r3, #0]
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop
 8006728:	2000000c 	.word	0x2000000c

0800672c <__libc_init_array>:
 800672c:	b570      	push	{r4, r5, r6, lr}
 800672e:	4d0d      	ldr	r5, [pc, #52]	; (8006764 <__libc_init_array+0x38>)
 8006730:	4c0d      	ldr	r4, [pc, #52]	; (8006768 <__libc_init_array+0x3c>)
 8006732:	1b64      	subs	r4, r4, r5
 8006734:	10a4      	asrs	r4, r4, #2
 8006736:	2600      	movs	r6, #0
 8006738:	42a6      	cmp	r6, r4
 800673a:	d109      	bne.n	8006750 <__libc_init_array+0x24>
 800673c:	4d0b      	ldr	r5, [pc, #44]	; (800676c <__libc_init_array+0x40>)
 800673e:	4c0c      	ldr	r4, [pc, #48]	; (8006770 <__libc_init_array+0x44>)
 8006740:	f004 fdf0 	bl	800b324 <_init>
 8006744:	1b64      	subs	r4, r4, r5
 8006746:	10a4      	asrs	r4, r4, #2
 8006748:	2600      	movs	r6, #0
 800674a:	42a6      	cmp	r6, r4
 800674c:	d105      	bne.n	800675a <__libc_init_array+0x2e>
 800674e:	bd70      	pop	{r4, r5, r6, pc}
 8006750:	f855 3b04 	ldr.w	r3, [r5], #4
 8006754:	4798      	blx	r3
 8006756:	3601      	adds	r6, #1
 8006758:	e7ee      	b.n	8006738 <__libc_init_array+0xc>
 800675a:	f855 3b04 	ldr.w	r3, [r5], #4
 800675e:	4798      	blx	r3
 8006760:	3601      	adds	r6, #1
 8006762:	e7f2      	b.n	800674a <__libc_init_array+0x1e>
 8006764:	0800b970 	.word	0x0800b970
 8006768:	0800b970 	.word	0x0800b970
 800676c:	0800b970 	.word	0x0800b970
 8006770:	0800b974 	.word	0x0800b974

08006774 <memset>:
 8006774:	4402      	add	r2, r0
 8006776:	4603      	mov	r3, r0
 8006778:	4293      	cmp	r3, r2
 800677a:	d100      	bne.n	800677e <memset+0xa>
 800677c:	4770      	bx	lr
 800677e:	f803 1b01 	strb.w	r1, [r3], #1
 8006782:	e7f9      	b.n	8006778 <memset+0x4>

08006784 <__cvt>:
 8006784:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006788:	ec55 4b10 	vmov	r4, r5, d0
 800678c:	2d00      	cmp	r5, #0
 800678e:	460e      	mov	r6, r1
 8006790:	4619      	mov	r1, r3
 8006792:	462b      	mov	r3, r5
 8006794:	bfbb      	ittet	lt
 8006796:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800679a:	461d      	movlt	r5, r3
 800679c:	2300      	movge	r3, #0
 800679e:	232d      	movlt	r3, #45	; 0x2d
 80067a0:	700b      	strb	r3, [r1, #0]
 80067a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067a4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80067a8:	4691      	mov	r9, r2
 80067aa:	f023 0820 	bic.w	r8, r3, #32
 80067ae:	bfbc      	itt	lt
 80067b0:	4622      	movlt	r2, r4
 80067b2:	4614      	movlt	r4, r2
 80067b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80067b8:	d005      	beq.n	80067c6 <__cvt+0x42>
 80067ba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80067be:	d100      	bne.n	80067c2 <__cvt+0x3e>
 80067c0:	3601      	adds	r6, #1
 80067c2:	2102      	movs	r1, #2
 80067c4:	e000      	b.n	80067c8 <__cvt+0x44>
 80067c6:	2103      	movs	r1, #3
 80067c8:	ab03      	add	r3, sp, #12
 80067ca:	9301      	str	r3, [sp, #4]
 80067cc:	ab02      	add	r3, sp, #8
 80067ce:	9300      	str	r3, [sp, #0]
 80067d0:	ec45 4b10 	vmov	d0, r4, r5
 80067d4:	4653      	mov	r3, sl
 80067d6:	4632      	mov	r2, r6
 80067d8:	f000 fcea 	bl	80071b0 <_dtoa_r>
 80067dc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80067e0:	4607      	mov	r7, r0
 80067e2:	d102      	bne.n	80067ea <__cvt+0x66>
 80067e4:	f019 0f01 	tst.w	r9, #1
 80067e8:	d022      	beq.n	8006830 <__cvt+0xac>
 80067ea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80067ee:	eb07 0906 	add.w	r9, r7, r6
 80067f2:	d110      	bne.n	8006816 <__cvt+0x92>
 80067f4:	783b      	ldrb	r3, [r7, #0]
 80067f6:	2b30      	cmp	r3, #48	; 0x30
 80067f8:	d10a      	bne.n	8006810 <__cvt+0x8c>
 80067fa:	2200      	movs	r2, #0
 80067fc:	2300      	movs	r3, #0
 80067fe:	4620      	mov	r0, r4
 8006800:	4629      	mov	r1, r5
 8006802:	f7fa f969 	bl	8000ad8 <__aeabi_dcmpeq>
 8006806:	b918      	cbnz	r0, 8006810 <__cvt+0x8c>
 8006808:	f1c6 0601 	rsb	r6, r6, #1
 800680c:	f8ca 6000 	str.w	r6, [sl]
 8006810:	f8da 3000 	ldr.w	r3, [sl]
 8006814:	4499      	add	r9, r3
 8006816:	2200      	movs	r2, #0
 8006818:	2300      	movs	r3, #0
 800681a:	4620      	mov	r0, r4
 800681c:	4629      	mov	r1, r5
 800681e:	f7fa f95b 	bl	8000ad8 <__aeabi_dcmpeq>
 8006822:	b108      	cbz	r0, 8006828 <__cvt+0xa4>
 8006824:	f8cd 900c 	str.w	r9, [sp, #12]
 8006828:	2230      	movs	r2, #48	; 0x30
 800682a:	9b03      	ldr	r3, [sp, #12]
 800682c:	454b      	cmp	r3, r9
 800682e:	d307      	bcc.n	8006840 <__cvt+0xbc>
 8006830:	9b03      	ldr	r3, [sp, #12]
 8006832:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006834:	1bdb      	subs	r3, r3, r7
 8006836:	4638      	mov	r0, r7
 8006838:	6013      	str	r3, [r2, #0]
 800683a:	b004      	add	sp, #16
 800683c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006840:	1c59      	adds	r1, r3, #1
 8006842:	9103      	str	r1, [sp, #12]
 8006844:	701a      	strb	r2, [r3, #0]
 8006846:	e7f0      	b.n	800682a <__cvt+0xa6>

08006848 <__exponent>:
 8006848:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800684a:	4603      	mov	r3, r0
 800684c:	2900      	cmp	r1, #0
 800684e:	bfb8      	it	lt
 8006850:	4249      	neglt	r1, r1
 8006852:	f803 2b02 	strb.w	r2, [r3], #2
 8006856:	bfb4      	ite	lt
 8006858:	222d      	movlt	r2, #45	; 0x2d
 800685a:	222b      	movge	r2, #43	; 0x2b
 800685c:	2909      	cmp	r1, #9
 800685e:	7042      	strb	r2, [r0, #1]
 8006860:	dd2a      	ble.n	80068b8 <__exponent+0x70>
 8006862:	f10d 0407 	add.w	r4, sp, #7
 8006866:	46a4      	mov	ip, r4
 8006868:	270a      	movs	r7, #10
 800686a:	46a6      	mov	lr, r4
 800686c:	460a      	mov	r2, r1
 800686e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006872:	fb07 1516 	mls	r5, r7, r6, r1
 8006876:	3530      	adds	r5, #48	; 0x30
 8006878:	2a63      	cmp	r2, #99	; 0x63
 800687a:	f104 34ff 	add.w	r4, r4, #4294967295
 800687e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006882:	4631      	mov	r1, r6
 8006884:	dcf1      	bgt.n	800686a <__exponent+0x22>
 8006886:	3130      	adds	r1, #48	; 0x30
 8006888:	f1ae 0502 	sub.w	r5, lr, #2
 800688c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006890:	1c44      	adds	r4, r0, #1
 8006892:	4629      	mov	r1, r5
 8006894:	4561      	cmp	r1, ip
 8006896:	d30a      	bcc.n	80068ae <__exponent+0x66>
 8006898:	f10d 0209 	add.w	r2, sp, #9
 800689c:	eba2 020e 	sub.w	r2, r2, lr
 80068a0:	4565      	cmp	r5, ip
 80068a2:	bf88      	it	hi
 80068a4:	2200      	movhi	r2, #0
 80068a6:	4413      	add	r3, r2
 80068a8:	1a18      	subs	r0, r3, r0
 80068aa:	b003      	add	sp, #12
 80068ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80068b2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80068b6:	e7ed      	b.n	8006894 <__exponent+0x4c>
 80068b8:	2330      	movs	r3, #48	; 0x30
 80068ba:	3130      	adds	r1, #48	; 0x30
 80068bc:	7083      	strb	r3, [r0, #2]
 80068be:	70c1      	strb	r1, [r0, #3]
 80068c0:	1d03      	adds	r3, r0, #4
 80068c2:	e7f1      	b.n	80068a8 <__exponent+0x60>

080068c4 <_printf_float>:
 80068c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068c8:	ed2d 8b02 	vpush	{d8}
 80068cc:	b08d      	sub	sp, #52	; 0x34
 80068ce:	460c      	mov	r4, r1
 80068d0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80068d4:	4616      	mov	r6, r2
 80068d6:	461f      	mov	r7, r3
 80068d8:	4605      	mov	r5, r0
 80068da:	f001 fa55 	bl	8007d88 <_localeconv_r>
 80068de:	f8d0 a000 	ldr.w	sl, [r0]
 80068e2:	4650      	mov	r0, sl
 80068e4:	f7f9 fc7c 	bl	80001e0 <strlen>
 80068e8:	2300      	movs	r3, #0
 80068ea:	930a      	str	r3, [sp, #40]	; 0x28
 80068ec:	6823      	ldr	r3, [r4, #0]
 80068ee:	9305      	str	r3, [sp, #20]
 80068f0:	f8d8 3000 	ldr.w	r3, [r8]
 80068f4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80068f8:	3307      	adds	r3, #7
 80068fa:	f023 0307 	bic.w	r3, r3, #7
 80068fe:	f103 0208 	add.w	r2, r3, #8
 8006902:	f8c8 2000 	str.w	r2, [r8]
 8006906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800690e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006912:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006916:	9307      	str	r3, [sp, #28]
 8006918:	f8cd 8018 	str.w	r8, [sp, #24]
 800691c:	ee08 0a10 	vmov	s16, r0
 8006920:	4b9f      	ldr	r3, [pc, #636]	; (8006ba0 <_printf_float+0x2dc>)
 8006922:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006926:	f04f 32ff 	mov.w	r2, #4294967295
 800692a:	f7fa f907 	bl	8000b3c <__aeabi_dcmpun>
 800692e:	bb88      	cbnz	r0, 8006994 <_printf_float+0xd0>
 8006930:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006934:	4b9a      	ldr	r3, [pc, #616]	; (8006ba0 <_printf_float+0x2dc>)
 8006936:	f04f 32ff 	mov.w	r2, #4294967295
 800693a:	f7fa f8e1 	bl	8000b00 <__aeabi_dcmple>
 800693e:	bb48      	cbnz	r0, 8006994 <_printf_float+0xd0>
 8006940:	2200      	movs	r2, #0
 8006942:	2300      	movs	r3, #0
 8006944:	4640      	mov	r0, r8
 8006946:	4649      	mov	r1, r9
 8006948:	f7fa f8d0 	bl	8000aec <__aeabi_dcmplt>
 800694c:	b110      	cbz	r0, 8006954 <_printf_float+0x90>
 800694e:	232d      	movs	r3, #45	; 0x2d
 8006950:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006954:	4b93      	ldr	r3, [pc, #588]	; (8006ba4 <_printf_float+0x2e0>)
 8006956:	4894      	ldr	r0, [pc, #592]	; (8006ba8 <_printf_float+0x2e4>)
 8006958:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800695c:	bf94      	ite	ls
 800695e:	4698      	movls	r8, r3
 8006960:	4680      	movhi	r8, r0
 8006962:	2303      	movs	r3, #3
 8006964:	6123      	str	r3, [r4, #16]
 8006966:	9b05      	ldr	r3, [sp, #20]
 8006968:	f023 0204 	bic.w	r2, r3, #4
 800696c:	6022      	str	r2, [r4, #0]
 800696e:	f04f 0900 	mov.w	r9, #0
 8006972:	9700      	str	r7, [sp, #0]
 8006974:	4633      	mov	r3, r6
 8006976:	aa0b      	add	r2, sp, #44	; 0x2c
 8006978:	4621      	mov	r1, r4
 800697a:	4628      	mov	r0, r5
 800697c:	f000 f9d8 	bl	8006d30 <_printf_common>
 8006980:	3001      	adds	r0, #1
 8006982:	f040 8090 	bne.w	8006aa6 <_printf_float+0x1e2>
 8006986:	f04f 30ff 	mov.w	r0, #4294967295
 800698a:	b00d      	add	sp, #52	; 0x34
 800698c:	ecbd 8b02 	vpop	{d8}
 8006990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006994:	4642      	mov	r2, r8
 8006996:	464b      	mov	r3, r9
 8006998:	4640      	mov	r0, r8
 800699a:	4649      	mov	r1, r9
 800699c:	f7fa f8ce 	bl	8000b3c <__aeabi_dcmpun>
 80069a0:	b140      	cbz	r0, 80069b4 <_printf_float+0xf0>
 80069a2:	464b      	mov	r3, r9
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	bfbc      	itt	lt
 80069a8:	232d      	movlt	r3, #45	; 0x2d
 80069aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80069ae:	487f      	ldr	r0, [pc, #508]	; (8006bac <_printf_float+0x2e8>)
 80069b0:	4b7f      	ldr	r3, [pc, #508]	; (8006bb0 <_printf_float+0x2ec>)
 80069b2:	e7d1      	b.n	8006958 <_printf_float+0x94>
 80069b4:	6863      	ldr	r3, [r4, #4]
 80069b6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80069ba:	9206      	str	r2, [sp, #24]
 80069bc:	1c5a      	adds	r2, r3, #1
 80069be:	d13f      	bne.n	8006a40 <_printf_float+0x17c>
 80069c0:	2306      	movs	r3, #6
 80069c2:	6063      	str	r3, [r4, #4]
 80069c4:	9b05      	ldr	r3, [sp, #20]
 80069c6:	6861      	ldr	r1, [r4, #4]
 80069c8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80069cc:	2300      	movs	r3, #0
 80069ce:	9303      	str	r3, [sp, #12]
 80069d0:	ab0a      	add	r3, sp, #40	; 0x28
 80069d2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80069d6:	ab09      	add	r3, sp, #36	; 0x24
 80069d8:	ec49 8b10 	vmov	d0, r8, r9
 80069dc:	9300      	str	r3, [sp, #0]
 80069de:	6022      	str	r2, [r4, #0]
 80069e0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80069e4:	4628      	mov	r0, r5
 80069e6:	f7ff fecd 	bl	8006784 <__cvt>
 80069ea:	9b06      	ldr	r3, [sp, #24]
 80069ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069ee:	2b47      	cmp	r3, #71	; 0x47
 80069f0:	4680      	mov	r8, r0
 80069f2:	d108      	bne.n	8006a06 <_printf_float+0x142>
 80069f4:	1cc8      	adds	r0, r1, #3
 80069f6:	db02      	blt.n	80069fe <_printf_float+0x13a>
 80069f8:	6863      	ldr	r3, [r4, #4]
 80069fa:	4299      	cmp	r1, r3
 80069fc:	dd41      	ble.n	8006a82 <_printf_float+0x1be>
 80069fe:	f1ab 0b02 	sub.w	fp, fp, #2
 8006a02:	fa5f fb8b 	uxtb.w	fp, fp
 8006a06:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006a0a:	d820      	bhi.n	8006a4e <_printf_float+0x18a>
 8006a0c:	3901      	subs	r1, #1
 8006a0e:	465a      	mov	r2, fp
 8006a10:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006a14:	9109      	str	r1, [sp, #36]	; 0x24
 8006a16:	f7ff ff17 	bl	8006848 <__exponent>
 8006a1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a1c:	1813      	adds	r3, r2, r0
 8006a1e:	2a01      	cmp	r2, #1
 8006a20:	4681      	mov	r9, r0
 8006a22:	6123      	str	r3, [r4, #16]
 8006a24:	dc02      	bgt.n	8006a2c <_printf_float+0x168>
 8006a26:	6822      	ldr	r2, [r4, #0]
 8006a28:	07d2      	lsls	r2, r2, #31
 8006a2a:	d501      	bpl.n	8006a30 <_printf_float+0x16c>
 8006a2c:	3301      	adds	r3, #1
 8006a2e:	6123      	str	r3, [r4, #16]
 8006a30:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d09c      	beq.n	8006972 <_printf_float+0xae>
 8006a38:	232d      	movs	r3, #45	; 0x2d
 8006a3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a3e:	e798      	b.n	8006972 <_printf_float+0xae>
 8006a40:	9a06      	ldr	r2, [sp, #24]
 8006a42:	2a47      	cmp	r2, #71	; 0x47
 8006a44:	d1be      	bne.n	80069c4 <_printf_float+0x100>
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d1bc      	bne.n	80069c4 <_printf_float+0x100>
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e7b9      	b.n	80069c2 <_printf_float+0xfe>
 8006a4e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006a52:	d118      	bne.n	8006a86 <_printf_float+0x1c2>
 8006a54:	2900      	cmp	r1, #0
 8006a56:	6863      	ldr	r3, [r4, #4]
 8006a58:	dd0b      	ble.n	8006a72 <_printf_float+0x1ae>
 8006a5a:	6121      	str	r1, [r4, #16]
 8006a5c:	b913      	cbnz	r3, 8006a64 <_printf_float+0x1a0>
 8006a5e:	6822      	ldr	r2, [r4, #0]
 8006a60:	07d0      	lsls	r0, r2, #31
 8006a62:	d502      	bpl.n	8006a6a <_printf_float+0x1a6>
 8006a64:	3301      	adds	r3, #1
 8006a66:	440b      	add	r3, r1
 8006a68:	6123      	str	r3, [r4, #16]
 8006a6a:	65a1      	str	r1, [r4, #88]	; 0x58
 8006a6c:	f04f 0900 	mov.w	r9, #0
 8006a70:	e7de      	b.n	8006a30 <_printf_float+0x16c>
 8006a72:	b913      	cbnz	r3, 8006a7a <_printf_float+0x1b6>
 8006a74:	6822      	ldr	r2, [r4, #0]
 8006a76:	07d2      	lsls	r2, r2, #31
 8006a78:	d501      	bpl.n	8006a7e <_printf_float+0x1ba>
 8006a7a:	3302      	adds	r3, #2
 8006a7c:	e7f4      	b.n	8006a68 <_printf_float+0x1a4>
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e7f2      	b.n	8006a68 <_printf_float+0x1a4>
 8006a82:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006a86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a88:	4299      	cmp	r1, r3
 8006a8a:	db05      	blt.n	8006a98 <_printf_float+0x1d4>
 8006a8c:	6823      	ldr	r3, [r4, #0]
 8006a8e:	6121      	str	r1, [r4, #16]
 8006a90:	07d8      	lsls	r0, r3, #31
 8006a92:	d5ea      	bpl.n	8006a6a <_printf_float+0x1a6>
 8006a94:	1c4b      	adds	r3, r1, #1
 8006a96:	e7e7      	b.n	8006a68 <_printf_float+0x1a4>
 8006a98:	2900      	cmp	r1, #0
 8006a9a:	bfd4      	ite	le
 8006a9c:	f1c1 0202 	rsble	r2, r1, #2
 8006aa0:	2201      	movgt	r2, #1
 8006aa2:	4413      	add	r3, r2
 8006aa4:	e7e0      	b.n	8006a68 <_printf_float+0x1a4>
 8006aa6:	6823      	ldr	r3, [r4, #0]
 8006aa8:	055a      	lsls	r2, r3, #21
 8006aaa:	d407      	bmi.n	8006abc <_printf_float+0x1f8>
 8006aac:	6923      	ldr	r3, [r4, #16]
 8006aae:	4642      	mov	r2, r8
 8006ab0:	4631      	mov	r1, r6
 8006ab2:	4628      	mov	r0, r5
 8006ab4:	47b8      	blx	r7
 8006ab6:	3001      	adds	r0, #1
 8006ab8:	d12c      	bne.n	8006b14 <_printf_float+0x250>
 8006aba:	e764      	b.n	8006986 <_printf_float+0xc2>
 8006abc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006ac0:	f240 80e0 	bls.w	8006c84 <_printf_float+0x3c0>
 8006ac4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ac8:	2200      	movs	r2, #0
 8006aca:	2300      	movs	r3, #0
 8006acc:	f7fa f804 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ad0:	2800      	cmp	r0, #0
 8006ad2:	d034      	beq.n	8006b3e <_printf_float+0x27a>
 8006ad4:	4a37      	ldr	r2, [pc, #220]	; (8006bb4 <_printf_float+0x2f0>)
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	4631      	mov	r1, r6
 8006ada:	4628      	mov	r0, r5
 8006adc:	47b8      	blx	r7
 8006ade:	3001      	adds	r0, #1
 8006ae0:	f43f af51 	beq.w	8006986 <_printf_float+0xc2>
 8006ae4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	db02      	blt.n	8006af2 <_printf_float+0x22e>
 8006aec:	6823      	ldr	r3, [r4, #0]
 8006aee:	07d8      	lsls	r0, r3, #31
 8006af0:	d510      	bpl.n	8006b14 <_printf_float+0x250>
 8006af2:	ee18 3a10 	vmov	r3, s16
 8006af6:	4652      	mov	r2, sl
 8006af8:	4631      	mov	r1, r6
 8006afa:	4628      	mov	r0, r5
 8006afc:	47b8      	blx	r7
 8006afe:	3001      	adds	r0, #1
 8006b00:	f43f af41 	beq.w	8006986 <_printf_float+0xc2>
 8006b04:	f04f 0800 	mov.w	r8, #0
 8006b08:	f104 091a 	add.w	r9, r4, #26
 8006b0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b0e:	3b01      	subs	r3, #1
 8006b10:	4543      	cmp	r3, r8
 8006b12:	dc09      	bgt.n	8006b28 <_printf_float+0x264>
 8006b14:	6823      	ldr	r3, [r4, #0]
 8006b16:	079b      	lsls	r3, r3, #30
 8006b18:	f100 8105 	bmi.w	8006d26 <_printf_float+0x462>
 8006b1c:	68e0      	ldr	r0, [r4, #12]
 8006b1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b20:	4298      	cmp	r0, r3
 8006b22:	bfb8      	it	lt
 8006b24:	4618      	movlt	r0, r3
 8006b26:	e730      	b.n	800698a <_printf_float+0xc6>
 8006b28:	2301      	movs	r3, #1
 8006b2a:	464a      	mov	r2, r9
 8006b2c:	4631      	mov	r1, r6
 8006b2e:	4628      	mov	r0, r5
 8006b30:	47b8      	blx	r7
 8006b32:	3001      	adds	r0, #1
 8006b34:	f43f af27 	beq.w	8006986 <_printf_float+0xc2>
 8006b38:	f108 0801 	add.w	r8, r8, #1
 8006b3c:	e7e6      	b.n	8006b0c <_printf_float+0x248>
 8006b3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	dc39      	bgt.n	8006bb8 <_printf_float+0x2f4>
 8006b44:	4a1b      	ldr	r2, [pc, #108]	; (8006bb4 <_printf_float+0x2f0>)
 8006b46:	2301      	movs	r3, #1
 8006b48:	4631      	mov	r1, r6
 8006b4a:	4628      	mov	r0, r5
 8006b4c:	47b8      	blx	r7
 8006b4e:	3001      	adds	r0, #1
 8006b50:	f43f af19 	beq.w	8006986 <_printf_float+0xc2>
 8006b54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	d102      	bne.n	8006b62 <_printf_float+0x29e>
 8006b5c:	6823      	ldr	r3, [r4, #0]
 8006b5e:	07d9      	lsls	r1, r3, #31
 8006b60:	d5d8      	bpl.n	8006b14 <_printf_float+0x250>
 8006b62:	ee18 3a10 	vmov	r3, s16
 8006b66:	4652      	mov	r2, sl
 8006b68:	4631      	mov	r1, r6
 8006b6a:	4628      	mov	r0, r5
 8006b6c:	47b8      	blx	r7
 8006b6e:	3001      	adds	r0, #1
 8006b70:	f43f af09 	beq.w	8006986 <_printf_float+0xc2>
 8006b74:	f04f 0900 	mov.w	r9, #0
 8006b78:	f104 0a1a 	add.w	sl, r4, #26
 8006b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b7e:	425b      	negs	r3, r3
 8006b80:	454b      	cmp	r3, r9
 8006b82:	dc01      	bgt.n	8006b88 <_printf_float+0x2c4>
 8006b84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b86:	e792      	b.n	8006aae <_printf_float+0x1ea>
 8006b88:	2301      	movs	r3, #1
 8006b8a:	4652      	mov	r2, sl
 8006b8c:	4631      	mov	r1, r6
 8006b8e:	4628      	mov	r0, r5
 8006b90:	47b8      	blx	r7
 8006b92:	3001      	adds	r0, #1
 8006b94:	f43f aef7 	beq.w	8006986 <_printf_float+0xc2>
 8006b98:	f109 0901 	add.w	r9, r9, #1
 8006b9c:	e7ee      	b.n	8006b7c <_printf_float+0x2b8>
 8006b9e:	bf00      	nop
 8006ba0:	7fefffff 	.word	0x7fefffff
 8006ba4:	0800b36c 	.word	0x0800b36c
 8006ba8:	0800b370 	.word	0x0800b370
 8006bac:	0800b378 	.word	0x0800b378
 8006bb0:	0800b374 	.word	0x0800b374
 8006bb4:	0800b37c 	.word	0x0800b37c
 8006bb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006bba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	bfa8      	it	ge
 8006bc0:	461a      	movge	r2, r3
 8006bc2:	2a00      	cmp	r2, #0
 8006bc4:	4691      	mov	r9, r2
 8006bc6:	dc37      	bgt.n	8006c38 <_printf_float+0x374>
 8006bc8:	f04f 0b00 	mov.w	fp, #0
 8006bcc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006bd0:	f104 021a 	add.w	r2, r4, #26
 8006bd4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006bd6:	9305      	str	r3, [sp, #20]
 8006bd8:	eba3 0309 	sub.w	r3, r3, r9
 8006bdc:	455b      	cmp	r3, fp
 8006bde:	dc33      	bgt.n	8006c48 <_printf_float+0x384>
 8006be0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006be4:	429a      	cmp	r2, r3
 8006be6:	db3b      	blt.n	8006c60 <_printf_float+0x39c>
 8006be8:	6823      	ldr	r3, [r4, #0]
 8006bea:	07da      	lsls	r2, r3, #31
 8006bec:	d438      	bmi.n	8006c60 <_printf_float+0x39c>
 8006bee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006bf0:	9b05      	ldr	r3, [sp, #20]
 8006bf2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006bf4:	1ad3      	subs	r3, r2, r3
 8006bf6:	eba2 0901 	sub.w	r9, r2, r1
 8006bfa:	4599      	cmp	r9, r3
 8006bfc:	bfa8      	it	ge
 8006bfe:	4699      	movge	r9, r3
 8006c00:	f1b9 0f00 	cmp.w	r9, #0
 8006c04:	dc35      	bgt.n	8006c72 <_printf_float+0x3ae>
 8006c06:	f04f 0800 	mov.w	r8, #0
 8006c0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c0e:	f104 0a1a 	add.w	sl, r4, #26
 8006c12:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c16:	1a9b      	subs	r3, r3, r2
 8006c18:	eba3 0309 	sub.w	r3, r3, r9
 8006c1c:	4543      	cmp	r3, r8
 8006c1e:	f77f af79 	ble.w	8006b14 <_printf_float+0x250>
 8006c22:	2301      	movs	r3, #1
 8006c24:	4652      	mov	r2, sl
 8006c26:	4631      	mov	r1, r6
 8006c28:	4628      	mov	r0, r5
 8006c2a:	47b8      	blx	r7
 8006c2c:	3001      	adds	r0, #1
 8006c2e:	f43f aeaa 	beq.w	8006986 <_printf_float+0xc2>
 8006c32:	f108 0801 	add.w	r8, r8, #1
 8006c36:	e7ec      	b.n	8006c12 <_printf_float+0x34e>
 8006c38:	4613      	mov	r3, r2
 8006c3a:	4631      	mov	r1, r6
 8006c3c:	4642      	mov	r2, r8
 8006c3e:	4628      	mov	r0, r5
 8006c40:	47b8      	blx	r7
 8006c42:	3001      	adds	r0, #1
 8006c44:	d1c0      	bne.n	8006bc8 <_printf_float+0x304>
 8006c46:	e69e      	b.n	8006986 <_printf_float+0xc2>
 8006c48:	2301      	movs	r3, #1
 8006c4a:	4631      	mov	r1, r6
 8006c4c:	4628      	mov	r0, r5
 8006c4e:	9205      	str	r2, [sp, #20]
 8006c50:	47b8      	blx	r7
 8006c52:	3001      	adds	r0, #1
 8006c54:	f43f ae97 	beq.w	8006986 <_printf_float+0xc2>
 8006c58:	9a05      	ldr	r2, [sp, #20]
 8006c5a:	f10b 0b01 	add.w	fp, fp, #1
 8006c5e:	e7b9      	b.n	8006bd4 <_printf_float+0x310>
 8006c60:	ee18 3a10 	vmov	r3, s16
 8006c64:	4652      	mov	r2, sl
 8006c66:	4631      	mov	r1, r6
 8006c68:	4628      	mov	r0, r5
 8006c6a:	47b8      	blx	r7
 8006c6c:	3001      	adds	r0, #1
 8006c6e:	d1be      	bne.n	8006bee <_printf_float+0x32a>
 8006c70:	e689      	b.n	8006986 <_printf_float+0xc2>
 8006c72:	9a05      	ldr	r2, [sp, #20]
 8006c74:	464b      	mov	r3, r9
 8006c76:	4442      	add	r2, r8
 8006c78:	4631      	mov	r1, r6
 8006c7a:	4628      	mov	r0, r5
 8006c7c:	47b8      	blx	r7
 8006c7e:	3001      	adds	r0, #1
 8006c80:	d1c1      	bne.n	8006c06 <_printf_float+0x342>
 8006c82:	e680      	b.n	8006986 <_printf_float+0xc2>
 8006c84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c86:	2a01      	cmp	r2, #1
 8006c88:	dc01      	bgt.n	8006c8e <_printf_float+0x3ca>
 8006c8a:	07db      	lsls	r3, r3, #31
 8006c8c:	d538      	bpl.n	8006d00 <_printf_float+0x43c>
 8006c8e:	2301      	movs	r3, #1
 8006c90:	4642      	mov	r2, r8
 8006c92:	4631      	mov	r1, r6
 8006c94:	4628      	mov	r0, r5
 8006c96:	47b8      	blx	r7
 8006c98:	3001      	adds	r0, #1
 8006c9a:	f43f ae74 	beq.w	8006986 <_printf_float+0xc2>
 8006c9e:	ee18 3a10 	vmov	r3, s16
 8006ca2:	4652      	mov	r2, sl
 8006ca4:	4631      	mov	r1, r6
 8006ca6:	4628      	mov	r0, r5
 8006ca8:	47b8      	blx	r7
 8006caa:	3001      	adds	r0, #1
 8006cac:	f43f ae6b 	beq.w	8006986 <_printf_float+0xc2>
 8006cb0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	f7f9 ff0e 	bl	8000ad8 <__aeabi_dcmpeq>
 8006cbc:	b9d8      	cbnz	r0, 8006cf6 <_printf_float+0x432>
 8006cbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cc0:	f108 0201 	add.w	r2, r8, #1
 8006cc4:	3b01      	subs	r3, #1
 8006cc6:	4631      	mov	r1, r6
 8006cc8:	4628      	mov	r0, r5
 8006cca:	47b8      	blx	r7
 8006ccc:	3001      	adds	r0, #1
 8006cce:	d10e      	bne.n	8006cee <_printf_float+0x42a>
 8006cd0:	e659      	b.n	8006986 <_printf_float+0xc2>
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	4652      	mov	r2, sl
 8006cd6:	4631      	mov	r1, r6
 8006cd8:	4628      	mov	r0, r5
 8006cda:	47b8      	blx	r7
 8006cdc:	3001      	adds	r0, #1
 8006cde:	f43f ae52 	beq.w	8006986 <_printf_float+0xc2>
 8006ce2:	f108 0801 	add.w	r8, r8, #1
 8006ce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ce8:	3b01      	subs	r3, #1
 8006cea:	4543      	cmp	r3, r8
 8006cec:	dcf1      	bgt.n	8006cd2 <_printf_float+0x40e>
 8006cee:	464b      	mov	r3, r9
 8006cf0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006cf4:	e6dc      	b.n	8006ab0 <_printf_float+0x1ec>
 8006cf6:	f04f 0800 	mov.w	r8, #0
 8006cfa:	f104 0a1a 	add.w	sl, r4, #26
 8006cfe:	e7f2      	b.n	8006ce6 <_printf_float+0x422>
 8006d00:	2301      	movs	r3, #1
 8006d02:	4642      	mov	r2, r8
 8006d04:	e7df      	b.n	8006cc6 <_printf_float+0x402>
 8006d06:	2301      	movs	r3, #1
 8006d08:	464a      	mov	r2, r9
 8006d0a:	4631      	mov	r1, r6
 8006d0c:	4628      	mov	r0, r5
 8006d0e:	47b8      	blx	r7
 8006d10:	3001      	adds	r0, #1
 8006d12:	f43f ae38 	beq.w	8006986 <_printf_float+0xc2>
 8006d16:	f108 0801 	add.w	r8, r8, #1
 8006d1a:	68e3      	ldr	r3, [r4, #12]
 8006d1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d1e:	1a5b      	subs	r3, r3, r1
 8006d20:	4543      	cmp	r3, r8
 8006d22:	dcf0      	bgt.n	8006d06 <_printf_float+0x442>
 8006d24:	e6fa      	b.n	8006b1c <_printf_float+0x258>
 8006d26:	f04f 0800 	mov.w	r8, #0
 8006d2a:	f104 0919 	add.w	r9, r4, #25
 8006d2e:	e7f4      	b.n	8006d1a <_printf_float+0x456>

08006d30 <_printf_common>:
 8006d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d34:	4616      	mov	r6, r2
 8006d36:	4699      	mov	r9, r3
 8006d38:	688a      	ldr	r2, [r1, #8]
 8006d3a:	690b      	ldr	r3, [r1, #16]
 8006d3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d40:	4293      	cmp	r3, r2
 8006d42:	bfb8      	it	lt
 8006d44:	4613      	movlt	r3, r2
 8006d46:	6033      	str	r3, [r6, #0]
 8006d48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d4c:	4607      	mov	r7, r0
 8006d4e:	460c      	mov	r4, r1
 8006d50:	b10a      	cbz	r2, 8006d56 <_printf_common+0x26>
 8006d52:	3301      	adds	r3, #1
 8006d54:	6033      	str	r3, [r6, #0]
 8006d56:	6823      	ldr	r3, [r4, #0]
 8006d58:	0699      	lsls	r1, r3, #26
 8006d5a:	bf42      	ittt	mi
 8006d5c:	6833      	ldrmi	r3, [r6, #0]
 8006d5e:	3302      	addmi	r3, #2
 8006d60:	6033      	strmi	r3, [r6, #0]
 8006d62:	6825      	ldr	r5, [r4, #0]
 8006d64:	f015 0506 	ands.w	r5, r5, #6
 8006d68:	d106      	bne.n	8006d78 <_printf_common+0x48>
 8006d6a:	f104 0a19 	add.w	sl, r4, #25
 8006d6e:	68e3      	ldr	r3, [r4, #12]
 8006d70:	6832      	ldr	r2, [r6, #0]
 8006d72:	1a9b      	subs	r3, r3, r2
 8006d74:	42ab      	cmp	r3, r5
 8006d76:	dc26      	bgt.n	8006dc6 <_printf_common+0x96>
 8006d78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d7c:	1e13      	subs	r3, r2, #0
 8006d7e:	6822      	ldr	r2, [r4, #0]
 8006d80:	bf18      	it	ne
 8006d82:	2301      	movne	r3, #1
 8006d84:	0692      	lsls	r2, r2, #26
 8006d86:	d42b      	bmi.n	8006de0 <_printf_common+0xb0>
 8006d88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d8c:	4649      	mov	r1, r9
 8006d8e:	4638      	mov	r0, r7
 8006d90:	47c0      	blx	r8
 8006d92:	3001      	adds	r0, #1
 8006d94:	d01e      	beq.n	8006dd4 <_printf_common+0xa4>
 8006d96:	6823      	ldr	r3, [r4, #0]
 8006d98:	68e5      	ldr	r5, [r4, #12]
 8006d9a:	6832      	ldr	r2, [r6, #0]
 8006d9c:	f003 0306 	and.w	r3, r3, #6
 8006da0:	2b04      	cmp	r3, #4
 8006da2:	bf08      	it	eq
 8006da4:	1aad      	subeq	r5, r5, r2
 8006da6:	68a3      	ldr	r3, [r4, #8]
 8006da8:	6922      	ldr	r2, [r4, #16]
 8006daa:	bf0c      	ite	eq
 8006dac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006db0:	2500      	movne	r5, #0
 8006db2:	4293      	cmp	r3, r2
 8006db4:	bfc4      	itt	gt
 8006db6:	1a9b      	subgt	r3, r3, r2
 8006db8:	18ed      	addgt	r5, r5, r3
 8006dba:	2600      	movs	r6, #0
 8006dbc:	341a      	adds	r4, #26
 8006dbe:	42b5      	cmp	r5, r6
 8006dc0:	d11a      	bne.n	8006df8 <_printf_common+0xc8>
 8006dc2:	2000      	movs	r0, #0
 8006dc4:	e008      	b.n	8006dd8 <_printf_common+0xa8>
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	4652      	mov	r2, sl
 8006dca:	4649      	mov	r1, r9
 8006dcc:	4638      	mov	r0, r7
 8006dce:	47c0      	blx	r8
 8006dd0:	3001      	adds	r0, #1
 8006dd2:	d103      	bne.n	8006ddc <_printf_common+0xac>
 8006dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ddc:	3501      	adds	r5, #1
 8006dde:	e7c6      	b.n	8006d6e <_printf_common+0x3e>
 8006de0:	18e1      	adds	r1, r4, r3
 8006de2:	1c5a      	adds	r2, r3, #1
 8006de4:	2030      	movs	r0, #48	; 0x30
 8006de6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006dea:	4422      	add	r2, r4
 8006dec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006df0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006df4:	3302      	adds	r3, #2
 8006df6:	e7c7      	b.n	8006d88 <_printf_common+0x58>
 8006df8:	2301      	movs	r3, #1
 8006dfa:	4622      	mov	r2, r4
 8006dfc:	4649      	mov	r1, r9
 8006dfe:	4638      	mov	r0, r7
 8006e00:	47c0      	blx	r8
 8006e02:	3001      	adds	r0, #1
 8006e04:	d0e6      	beq.n	8006dd4 <_printf_common+0xa4>
 8006e06:	3601      	adds	r6, #1
 8006e08:	e7d9      	b.n	8006dbe <_printf_common+0x8e>
	...

08006e0c <_printf_i>:
 8006e0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e10:	460c      	mov	r4, r1
 8006e12:	4691      	mov	r9, r2
 8006e14:	7e27      	ldrb	r7, [r4, #24]
 8006e16:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006e18:	2f78      	cmp	r7, #120	; 0x78
 8006e1a:	4680      	mov	r8, r0
 8006e1c:	469a      	mov	sl, r3
 8006e1e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e22:	d807      	bhi.n	8006e34 <_printf_i+0x28>
 8006e24:	2f62      	cmp	r7, #98	; 0x62
 8006e26:	d80a      	bhi.n	8006e3e <_printf_i+0x32>
 8006e28:	2f00      	cmp	r7, #0
 8006e2a:	f000 80d8 	beq.w	8006fde <_printf_i+0x1d2>
 8006e2e:	2f58      	cmp	r7, #88	; 0x58
 8006e30:	f000 80a3 	beq.w	8006f7a <_printf_i+0x16e>
 8006e34:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006e38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e3c:	e03a      	b.n	8006eb4 <_printf_i+0xa8>
 8006e3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e42:	2b15      	cmp	r3, #21
 8006e44:	d8f6      	bhi.n	8006e34 <_printf_i+0x28>
 8006e46:	a001      	add	r0, pc, #4	; (adr r0, 8006e4c <_printf_i+0x40>)
 8006e48:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006e4c:	08006ea5 	.word	0x08006ea5
 8006e50:	08006eb9 	.word	0x08006eb9
 8006e54:	08006e35 	.word	0x08006e35
 8006e58:	08006e35 	.word	0x08006e35
 8006e5c:	08006e35 	.word	0x08006e35
 8006e60:	08006e35 	.word	0x08006e35
 8006e64:	08006eb9 	.word	0x08006eb9
 8006e68:	08006e35 	.word	0x08006e35
 8006e6c:	08006e35 	.word	0x08006e35
 8006e70:	08006e35 	.word	0x08006e35
 8006e74:	08006e35 	.word	0x08006e35
 8006e78:	08006fc5 	.word	0x08006fc5
 8006e7c:	08006ee9 	.word	0x08006ee9
 8006e80:	08006fa7 	.word	0x08006fa7
 8006e84:	08006e35 	.word	0x08006e35
 8006e88:	08006e35 	.word	0x08006e35
 8006e8c:	08006fe7 	.word	0x08006fe7
 8006e90:	08006e35 	.word	0x08006e35
 8006e94:	08006ee9 	.word	0x08006ee9
 8006e98:	08006e35 	.word	0x08006e35
 8006e9c:	08006e35 	.word	0x08006e35
 8006ea0:	08006faf 	.word	0x08006faf
 8006ea4:	680b      	ldr	r3, [r1, #0]
 8006ea6:	1d1a      	adds	r2, r3, #4
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	600a      	str	r2, [r1, #0]
 8006eac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006eb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e0a3      	b.n	8007000 <_printf_i+0x1f4>
 8006eb8:	6825      	ldr	r5, [r4, #0]
 8006eba:	6808      	ldr	r0, [r1, #0]
 8006ebc:	062e      	lsls	r6, r5, #24
 8006ebe:	f100 0304 	add.w	r3, r0, #4
 8006ec2:	d50a      	bpl.n	8006eda <_printf_i+0xce>
 8006ec4:	6805      	ldr	r5, [r0, #0]
 8006ec6:	600b      	str	r3, [r1, #0]
 8006ec8:	2d00      	cmp	r5, #0
 8006eca:	da03      	bge.n	8006ed4 <_printf_i+0xc8>
 8006ecc:	232d      	movs	r3, #45	; 0x2d
 8006ece:	426d      	negs	r5, r5
 8006ed0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ed4:	485e      	ldr	r0, [pc, #376]	; (8007050 <_printf_i+0x244>)
 8006ed6:	230a      	movs	r3, #10
 8006ed8:	e019      	b.n	8006f0e <_printf_i+0x102>
 8006eda:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006ede:	6805      	ldr	r5, [r0, #0]
 8006ee0:	600b      	str	r3, [r1, #0]
 8006ee2:	bf18      	it	ne
 8006ee4:	b22d      	sxthne	r5, r5
 8006ee6:	e7ef      	b.n	8006ec8 <_printf_i+0xbc>
 8006ee8:	680b      	ldr	r3, [r1, #0]
 8006eea:	6825      	ldr	r5, [r4, #0]
 8006eec:	1d18      	adds	r0, r3, #4
 8006eee:	6008      	str	r0, [r1, #0]
 8006ef0:	0628      	lsls	r0, r5, #24
 8006ef2:	d501      	bpl.n	8006ef8 <_printf_i+0xec>
 8006ef4:	681d      	ldr	r5, [r3, #0]
 8006ef6:	e002      	b.n	8006efe <_printf_i+0xf2>
 8006ef8:	0669      	lsls	r1, r5, #25
 8006efa:	d5fb      	bpl.n	8006ef4 <_printf_i+0xe8>
 8006efc:	881d      	ldrh	r5, [r3, #0]
 8006efe:	4854      	ldr	r0, [pc, #336]	; (8007050 <_printf_i+0x244>)
 8006f00:	2f6f      	cmp	r7, #111	; 0x6f
 8006f02:	bf0c      	ite	eq
 8006f04:	2308      	moveq	r3, #8
 8006f06:	230a      	movne	r3, #10
 8006f08:	2100      	movs	r1, #0
 8006f0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f0e:	6866      	ldr	r6, [r4, #4]
 8006f10:	60a6      	str	r6, [r4, #8]
 8006f12:	2e00      	cmp	r6, #0
 8006f14:	bfa2      	ittt	ge
 8006f16:	6821      	ldrge	r1, [r4, #0]
 8006f18:	f021 0104 	bicge.w	r1, r1, #4
 8006f1c:	6021      	strge	r1, [r4, #0]
 8006f1e:	b90d      	cbnz	r5, 8006f24 <_printf_i+0x118>
 8006f20:	2e00      	cmp	r6, #0
 8006f22:	d04d      	beq.n	8006fc0 <_printf_i+0x1b4>
 8006f24:	4616      	mov	r6, r2
 8006f26:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f2a:	fb03 5711 	mls	r7, r3, r1, r5
 8006f2e:	5dc7      	ldrb	r7, [r0, r7]
 8006f30:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006f34:	462f      	mov	r7, r5
 8006f36:	42bb      	cmp	r3, r7
 8006f38:	460d      	mov	r5, r1
 8006f3a:	d9f4      	bls.n	8006f26 <_printf_i+0x11a>
 8006f3c:	2b08      	cmp	r3, #8
 8006f3e:	d10b      	bne.n	8006f58 <_printf_i+0x14c>
 8006f40:	6823      	ldr	r3, [r4, #0]
 8006f42:	07df      	lsls	r7, r3, #31
 8006f44:	d508      	bpl.n	8006f58 <_printf_i+0x14c>
 8006f46:	6923      	ldr	r3, [r4, #16]
 8006f48:	6861      	ldr	r1, [r4, #4]
 8006f4a:	4299      	cmp	r1, r3
 8006f4c:	bfde      	ittt	le
 8006f4e:	2330      	movle	r3, #48	; 0x30
 8006f50:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006f54:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006f58:	1b92      	subs	r2, r2, r6
 8006f5a:	6122      	str	r2, [r4, #16]
 8006f5c:	f8cd a000 	str.w	sl, [sp]
 8006f60:	464b      	mov	r3, r9
 8006f62:	aa03      	add	r2, sp, #12
 8006f64:	4621      	mov	r1, r4
 8006f66:	4640      	mov	r0, r8
 8006f68:	f7ff fee2 	bl	8006d30 <_printf_common>
 8006f6c:	3001      	adds	r0, #1
 8006f6e:	d14c      	bne.n	800700a <_printf_i+0x1fe>
 8006f70:	f04f 30ff 	mov.w	r0, #4294967295
 8006f74:	b004      	add	sp, #16
 8006f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f7a:	4835      	ldr	r0, [pc, #212]	; (8007050 <_printf_i+0x244>)
 8006f7c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006f80:	6823      	ldr	r3, [r4, #0]
 8006f82:	680e      	ldr	r6, [r1, #0]
 8006f84:	061f      	lsls	r7, r3, #24
 8006f86:	f856 5b04 	ldr.w	r5, [r6], #4
 8006f8a:	600e      	str	r6, [r1, #0]
 8006f8c:	d514      	bpl.n	8006fb8 <_printf_i+0x1ac>
 8006f8e:	07d9      	lsls	r1, r3, #31
 8006f90:	bf44      	itt	mi
 8006f92:	f043 0320 	orrmi.w	r3, r3, #32
 8006f96:	6023      	strmi	r3, [r4, #0]
 8006f98:	b91d      	cbnz	r5, 8006fa2 <_printf_i+0x196>
 8006f9a:	6823      	ldr	r3, [r4, #0]
 8006f9c:	f023 0320 	bic.w	r3, r3, #32
 8006fa0:	6023      	str	r3, [r4, #0]
 8006fa2:	2310      	movs	r3, #16
 8006fa4:	e7b0      	b.n	8006f08 <_printf_i+0xfc>
 8006fa6:	6823      	ldr	r3, [r4, #0]
 8006fa8:	f043 0320 	orr.w	r3, r3, #32
 8006fac:	6023      	str	r3, [r4, #0]
 8006fae:	2378      	movs	r3, #120	; 0x78
 8006fb0:	4828      	ldr	r0, [pc, #160]	; (8007054 <_printf_i+0x248>)
 8006fb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006fb6:	e7e3      	b.n	8006f80 <_printf_i+0x174>
 8006fb8:	065e      	lsls	r6, r3, #25
 8006fba:	bf48      	it	mi
 8006fbc:	b2ad      	uxthmi	r5, r5
 8006fbe:	e7e6      	b.n	8006f8e <_printf_i+0x182>
 8006fc0:	4616      	mov	r6, r2
 8006fc2:	e7bb      	b.n	8006f3c <_printf_i+0x130>
 8006fc4:	680b      	ldr	r3, [r1, #0]
 8006fc6:	6826      	ldr	r6, [r4, #0]
 8006fc8:	6960      	ldr	r0, [r4, #20]
 8006fca:	1d1d      	adds	r5, r3, #4
 8006fcc:	600d      	str	r5, [r1, #0]
 8006fce:	0635      	lsls	r5, r6, #24
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	d501      	bpl.n	8006fd8 <_printf_i+0x1cc>
 8006fd4:	6018      	str	r0, [r3, #0]
 8006fd6:	e002      	b.n	8006fde <_printf_i+0x1d2>
 8006fd8:	0671      	lsls	r1, r6, #25
 8006fda:	d5fb      	bpl.n	8006fd4 <_printf_i+0x1c8>
 8006fdc:	8018      	strh	r0, [r3, #0]
 8006fde:	2300      	movs	r3, #0
 8006fe0:	6123      	str	r3, [r4, #16]
 8006fe2:	4616      	mov	r6, r2
 8006fe4:	e7ba      	b.n	8006f5c <_printf_i+0x150>
 8006fe6:	680b      	ldr	r3, [r1, #0]
 8006fe8:	1d1a      	adds	r2, r3, #4
 8006fea:	600a      	str	r2, [r1, #0]
 8006fec:	681e      	ldr	r6, [r3, #0]
 8006fee:	6862      	ldr	r2, [r4, #4]
 8006ff0:	2100      	movs	r1, #0
 8006ff2:	4630      	mov	r0, r6
 8006ff4:	f7f9 f8fc 	bl	80001f0 <memchr>
 8006ff8:	b108      	cbz	r0, 8006ffe <_printf_i+0x1f2>
 8006ffa:	1b80      	subs	r0, r0, r6
 8006ffc:	6060      	str	r0, [r4, #4]
 8006ffe:	6863      	ldr	r3, [r4, #4]
 8007000:	6123      	str	r3, [r4, #16]
 8007002:	2300      	movs	r3, #0
 8007004:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007008:	e7a8      	b.n	8006f5c <_printf_i+0x150>
 800700a:	6923      	ldr	r3, [r4, #16]
 800700c:	4632      	mov	r2, r6
 800700e:	4649      	mov	r1, r9
 8007010:	4640      	mov	r0, r8
 8007012:	47d0      	blx	sl
 8007014:	3001      	adds	r0, #1
 8007016:	d0ab      	beq.n	8006f70 <_printf_i+0x164>
 8007018:	6823      	ldr	r3, [r4, #0]
 800701a:	079b      	lsls	r3, r3, #30
 800701c:	d413      	bmi.n	8007046 <_printf_i+0x23a>
 800701e:	68e0      	ldr	r0, [r4, #12]
 8007020:	9b03      	ldr	r3, [sp, #12]
 8007022:	4298      	cmp	r0, r3
 8007024:	bfb8      	it	lt
 8007026:	4618      	movlt	r0, r3
 8007028:	e7a4      	b.n	8006f74 <_printf_i+0x168>
 800702a:	2301      	movs	r3, #1
 800702c:	4632      	mov	r2, r6
 800702e:	4649      	mov	r1, r9
 8007030:	4640      	mov	r0, r8
 8007032:	47d0      	blx	sl
 8007034:	3001      	adds	r0, #1
 8007036:	d09b      	beq.n	8006f70 <_printf_i+0x164>
 8007038:	3501      	adds	r5, #1
 800703a:	68e3      	ldr	r3, [r4, #12]
 800703c:	9903      	ldr	r1, [sp, #12]
 800703e:	1a5b      	subs	r3, r3, r1
 8007040:	42ab      	cmp	r3, r5
 8007042:	dcf2      	bgt.n	800702a <_printf_i+0x21e>
 8007044:	e7eb      	b.n	800701e <_printf_i+0x212>
 8007046:	2500      	movs	r5, #0
 8007048:	f104 0619 	add.w	r6, r4, #25
 800704c:	e7f5      	b.n	800703a <_printf_i+0x22e>
 800704e:	bf00      	nop
 8007050:	0800b37e 	.word	0x0800b37e
 8007054:	0800b38f 	.word	0x0800b38f

08007058 <siprintf>:
 8007058:	b40e      	push	{r1, r2, r3}
 800705a:	b500      	push	{lr}
 800705c:	b09c      	sub	sp, #112	; 0x70
 800705e:	ab1d      	add	r3, sp, #116	; 0x74
 8007060:	9002      	str	r0, [sp, #8]
 8007062:	9006      	str	r0, [sp, #24]
 8007064:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007068:	4809      	ldr	r0, [pc, #36]	; (8007090 <siprintf+0x38>)
 800706a:	9107      	str	r1, [sp, #28]
 800706c:	9104      	str	r1, [sp, #16]
 800706e:	4909      	ldr	r1, [pc, #36]	; (8007094 <siprintf+0x3c>)
 8007070:	f853 2b04 	ldr.w	r2, [r3], #4
 8007074:	9105      	str	r1, [sp, #20]
 8007076:	6800      	ldr	r0, [r0, #0]
 8007078:	9301      	str	r3, [sp, #4]
 800707a:	a902      	add	r1, sp, #8
 800707c:	f001 fb32 	bl	80086e4 <_svfiprintf_r>
 8007080:	9b02      	ldr	r3, [sp, #8]
 8007082:	2200      	movs	r2, #0
 8007084:	701a      	strb	r2, [r3, #0]
 8007086:	b01c      	add	sp, #112	; 0x70
 8007088:	f85d eb04 	ldr.w	lr, [sp], #4
 800708c:	b003      	add	sp, #12
 800708e:	4770      	bx	lr
 8007090:	2000000c 	.word	0x2000000c
 8007094:	ffff0208 	.word	0xffff0208

08007098 <quorem>:
 8007098:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800709c:	6903      	ldr	r3, [r0, #16]
 800709e:	690c      	ldr	r4, [r1, #16]
 80070a0:	42a3      	cmp	r3, r4
 80070a2:	4607      	mov	r7, r0
 80070a4:	f2c0 8081 	blt.w	80071aa <quorem+0x112>
 80070a8:	3c01      	subs	r4, #1
 80070aa:	f101 0814 	add.w	r8, r1, #20
 80070ae:	f100 0514 	add.w	r5, r0, #20
 80070b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070b6:	9301      	str	r3, [sp, #4]
 80070b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80070bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070c0:	3301      	adds	r3, #1
 80070c2:	429a      	cmp	r2, r3
 80070c4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80070c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80070cc:	fbb2 f6f3 	udiv	r6, r2, r3
 80070d0:	d331      	bcc.n	8007136 <quorem+0x9e>
 80070d2:	f04f 0e00 	mov.w	lr, #0
 80070d6:	4640      	mov	r0, r8
 80070d8:	46ac      	mov	ip, r5
 80070da:	46f2      	mov	sl, lr
 80070dc:	f850 2b04 	ldr.w	r2, [r0], #4
 80070e0:	b293      	uxth	r3, r2
 80070e2:	fb06 e303 	mla	r3, r6, r3, lr
 80070e6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	ebaa 0303 	sub.w	r3, sl, r3
 80070f0:	0c12      	lsrs	r2, r2, #16
 80070f2:	f8dc a000 	ldr.w	sl, [ip]
 80070f6:	fb06 e202 	mla	r2, r6, r2, lr
 80070fa:	fa13 f38a 	uxtah	r3, r3, sl
 80070fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007102:	fa1f fa82 	uxth.w	sl, r2
 8007106:	f8dc 2000 	ldr.w	r2, [ip]
 800710a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800710e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007112:	b29b      	uxth	r3, r3
 8007114:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007118:	4581      	cmp	r9, r0
 800711a:	f84c 3b04 	str.w	r3, [ip], #4
 800711e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007122:	d2db      	bcs.n	80070dc <quorem+0x44>
 8007124:	f855 300b 	ldr.w	r3, [r5, fp]
 8007128:	b92b      	cbnz	r3, 8007136 <quorem+0x9e>
 800712a:	9b01      	ldr	r3, [sp, #4]
 800712c:	3b04      	subs	r3, #4
 800712e:	429d      	cmp	r5, r3
 8007130:	461a      	mov	r2, r3
 8007132:	d32e      	bcc.n	8007192 <quorem+0xfa>
 8007134:	613c      	str	r4, [r7, #16]
 8007136:	4638      	mov	r0, r7
 8007138:	f001 f8be 	bl	80082b8 <__mcmp>
 800713c:	2800      	cmp	r0, #0
 800713e:	db24      	blt.n	800718a <quorem+0xf2>
 8007140:	3601      	adds	r6, #1
 8007142:	4628      	mov	r0, r5
 8007144:	f04f 0c00 	mov.w	ip, #0
 8007148:	f858 2b04 	ldr.w	r2, [r8], #4
 800714c:	f8d0 e000 	ldr.w	lr, [r0]
 8007150:	b293      	uxth	r3, r2
 8007152:	ebac 0303 	sub.w	r3, ip, r3
 8007156:	0c12      	lsrs	r2, r2, #16
 8007158:	fa13 f38e 	uxtah	r3, r3, lr
 800715c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007160:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007164:	b29b      	uxth	r3, r3
 8007166:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800716a:	45c1      	cmp	r9, r8
 800716c:	f840 3b04 	str.w	r3, [r0], #4
 8007170:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007174:	d2e8      	bcs.n	8007148 <quorem+0xb0>
 8007176:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800717a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800717e:	b922      	cbnz	r2, 800718a <quorem+0xf2>
 8007180:	3b04      	subs	r3, #4
 8007182:	429d      	cmp	r5, r3
 8007184:	461a      	mov	r2, r3
 8007186:	d30a      	bcc.n	800719e <quorem+0x106>
 8007188:	613c      	str	r4, [r7, #16]
 800718a:	4630      	mov	r0, r6
 800718c:	b003      	add	sp, #12
 800718e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007192:	6812      	ldr	r2, [r2, #0]
 8007194:	3b04      	subs	r3, #4
 8007196:	2a00      	cmp	r2, #0
 8007198:	d1cc      	bne.n	8007134 <quorem+0x9c>
 800719a:	3c01      	subs	r4, #1
 800719c:	e7c7      	b.n	800712e <quorem+0x96>
 800719e:	6812      	ldr	r2, [r2, #0]
 80071a0:	3b04      	subs	r3, #4
 80071a2:	2a00      	cmp	r2, #0
 80071a4:	d1f0      	bne.n	8007188 <quorem+0xf0>
 80071a6:	3c01      	subs	r4, #1
 80071a8:	e7eb      	b.n	8007182 <quorem+0xea>
 80071aa:	2000      	movs	r0, #0
 80071ac:	e7ee      	b.n	800718c <quorem+0xf4>
	...

080071b0 <_dtoa_r>:
 80071b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071b4:	ed2d 8b02 	vpush	{d8}
 80071b8:	ec57 6b10 	vmov	r6, r7, d0
 80071bc:	b095      	sub	sp, #84	; 0x54
 80071be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80071c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80071c4:	9105      	str	r1, [sp, #20]
 80071c6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80071ca:	4604      	mov	r4, r0
 80071cc:	9209      	str	r2, [sp, #36]	; 0x24
 80071ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80071d0:	b975      	cbnz	r5, 80071f0 <_dtoa_r+0x40>
 80071d2:	2010      	movs	r0, #16
 80071d4:	f000 fddc 	bl	8007d90 <malloc>
 80071d8:	4602      	mov	r2, r0
 80071da:	6260      	str	r0, [r4, #36]	; 0x24
 80071dc:	b920      	cbnz	r0, 80071e8 <_dtoa_r+0x38>
 80071de:	4bb2      	ldr	r3, [pc, #712]	; (80074a8 <_dtoa_r+0x2f8>)
 80071e0:	21ea      	movs	r1, #234	; 0xea
 80071e2:	48b2      	ldr	r0, [pc, #712]	; (80074ac <_dtoa_r+0x2fc>)
 80071e4:	f001 fb8e 	bl	8008904 <__assert_func>
 80071e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80071ec:	6005      	str	r5, [r0, #0]
 80071ee:	60c5      	str	r5, [r0, #12]
 80071f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071f2:	6819      	ldr	r1, [r3, #0]
 80071f4:	b151      	cbz	r1, 800720c <_dtoa_r+0x5c>
 80071f6:	685a      	ldr	r2, [r3, #4]
 80071f8:	604a      	str	r2, [r1, #4]
 80071fa:	2301      	movs	r3, #1
 80071fc:	4093      	lsls	r3, r2
 80071fe:	608b      	str	r3, [r1, #8]
 8007200:	4620      	mov	r0, r4
 8007202:	f000 fe1b 	bl	8007e3c <_Bfree>
 8007206:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007208:	2200      	movs	r2, #0
 800720a:	601a      	str	r2, [r3, #0]
 800720c:	1e3b      	subs	r3, r7, #0
 800720e:	bfb9      	ittee	lt
 8007210:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007214:	9303      	strlt	r3, [sp, #12]
 8007216:	2300      	movge	r3, #0
 8007218:	f8c8 3000 	strge.w	r3, [r8]
 800721c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007220:	4ba3      	ldr	r3, [pc, #652]	; (80074b0 <_dtoa_r+0x300>)
 8007222:	bfbc      	itt	lt
 8007224:	2201      	movlt	r2, #1
 8007226:	f8c8 2000 	strlt.w	r2, [r8]
 800722a:	ea33 0309 	bics.w	r3, r3, r9
 800722e:	d11b      	bne.n	8007268 <_dtoa_r+0xb8>
 8007230:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007232:	f242 730f 	movw	r3, #9999	; 0x270f
 8007236:	6013      	str	r3, [r2, #0]
 8007238:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800723c:	4333      	orrs	r3, r6
 800723e:	f000 857a 	beq.w	8007d36 <_dtoa_r+0xb86>
 8007242:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007244:	b963      	cbnz	r3, 8007260 <_dtoa_r+0xb0>
 8007246:	4b9b      	ldr	r3, [pc, #620]	; (80074b4 <_dtoa_r+0x304>)
 8007248:	e024      	b.n	8007294 <_dtoa_r+0xe4>
 800724a:	4b9b      	ldr	r3, [pc, #620]	; (80074b8 <_dtoa_r+0x308>)
 800724c:	9300      	str	r3, [sp, #0]
 800724e:	3308      	adds	r3, #8
 8007250:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007252:	6013      	str	r3, [r2, #0]
 8007254:	9800      	ldr	r0, [sp, #0]
 8007256:	b015      	add	sp, #84	; 0x54
 8007258:	ecbd 8b02 	vpop	{d8}
 800725c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007260:	4b94      	ldr	r3, [pc, #592]	; (80074b4 <_dtoa_r+0x304>)
 8007262:	9300      	str	r3, [sp, #0]
 8007264:	3303      	adds	r3, #3
 8007266:	e7f3      	b.n	8007250 <_dtoa_r+0xa0>
 8007268:	ed9d 7b02 	vldr	d7, [sp, #8]
 800726c:	2200      	movs	r2, #0
 800726e:	ec51 0b17 	vmov	r0, r1, d7
 8007272:	2300      	movs	r3, #0
 8007274:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007278:	f7f9 fc2e 	bl	8000ad8 <__aeabi_dcmpeq>
 800727c:	4680      	mov	r8, r0
 800727e:	b158      	cbz	r0, 8007298 <_dtoa_r+0xe8>
 8007280:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007282:	2301      	movs	r3, #1
 8007284:	6013      	str	r3, [r2, #0]
 8007286:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007288:	2b00      	cmp	r3, #0
 800728a:	f000 8551 	beq.w	8007d30 <_dtoa_r+0xb80>
 800728e:	488b      	ldr	r0, [pc, #556]	; (80074bc <_dtoa_r+0x30c>)
 8007290:	6018      	str	r0, [r3, #0]
 8007292:	1e43      	subs	r3, r0, #1
 8007294:	9300      	str	r3, [sp, #0]
 8007296:	e7dd      	b.n	8007254 <_dtoa_r+0xa4>
 8007298:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800729c:	aa12      	add	r2, sp, #72	; 0x48
 800729e:	a913      	add	r1, sp, #76	; 0x4c
 80072a0:	4620      	mov	r0, r4
 80072a2:	f001 f8ad 	bl	8008400 <__d2b>
 80072a6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80072aa:	4683      	mov	fp, r0
 80072ac:	2d00      	cmp	r5, #0
 80072ae:	d07c      	beq.n	80073aa <_dtoa_r+0x1fa>
 80072b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072b2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80072b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072ba:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80072be:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80072c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80072c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80072ca:	4b7d      	ldr	r3, [pc, #500]	; (80074c0 <_dtoa_r+0x310>)
 80072cc:	2200      	movs	r2, #0
 80072ce:	4630      	mov	r0, r6
 80072d0:	4639      	mov	r1, r7
 80072d2:	f7f8 ffe1 	bl	8000298 <__aeabi_dsub>
 80072d6:	a36e      	add	r3, pc, #440	; (adr r3, 8007490 <_dtoa_r+0x2e0>)
 80072d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072dc:	f7f9 f994 	bl	8000608 <__aeabi_dmul>
 80072e0:	a36d      	add	r3, pc, #436	; (adr r3, 8007498 <_dtoa_r+0x2e8>)
 80072e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e6:	f7f8 ffd9 	bl	800029c <__adddf3>
 80072ea:	4606      	mov	r6, r0
 80072ec:	4628      	mov	r0, r5
 80072ee:	460f      	mov	r7, r1
 80072f0:	f7f9 f920 	bl	8000534 <__aeabi_i2d>
 80072f4:	a36a      	add	r3, pc, #424	; (adr r3, 80074a0 <_dtoa_r+0x2f0>)
 80072f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072fa:	f7f9 f985 	bl	8000608 <__aeabi_dmul>
 80072fe:	4602      	mov	r2, r0
 8007300:	460b      	mov	r3, r1
 8007302:	4630      	mov	r0, r6
 8007304:	4639      	mov	r1, r7
 8007306:	f7f8 ffc9 	bl	800029c <__adddf3>
 800730a:	4606      	mov	r6, r0
 800730c:	460f      	mov	r7, r1
 800730e:	f7f9 fc2b 	bl	8000b68 <__aeabi_d2iz>
 8007312:	2200      	movs	r2, #0
 8007314:	4682      	mov	sl, r0
 8007316:	2300      	movs	r3, #0
 8007318:	4630      	mov	r0, r6
 800731a:	4639      	mov	r1, r7
 800731c:	f7f9 fbe6 	bl	8000aec <__aeabi_dcmplt>
 8007320:	b148      	cbz	r0, 8007336 <_dtoa_r+0x186>
 8007322:	4650      	mov	r0, sl
 8007324:	f7f9 f906 	bl	8000534 <__aeabi_i2d>
 8007328:	4632      	mov	r2, r6
 800732a:	463b      	mov	r3, r7
 800732c:	f7f9 fbd4 	bl	8000ad8 <__aeabi_dcmpeq>
 8007330:	b908      	cbnz	r0, 8007336 <_dtoa_r+0x186>
 8007332:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007336:	f1ba 0f16 	cmp.w	sl, #22
 800733a:	d854      	bhi.n	80073e6 <_dtoa_r+0x236>
 800733c:	4b61      	ldr	r3, [pc, #388]	; (80074c4 <_dtoa_r+0x314>)
 800733e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007346:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800734a:	f7f9 fbcf 	bl	8000aec <__aeabi_dcmplt>
 800734e:	2800      	cmp	r0, #0
 8007350:	d04b      	beq.n	80073ea <_dtoa_r+0x23a>
 8007352:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007356:	2300      	movs	r3, #0
 8007358:	930e      	str	r3, [sp, #56]	; 0x38
 800735a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800735c:	1b5d      	subs	r5, r3, r5
 800735e:	1e6b      	subs	r3, r5, #1
 8007360:	9304      	str	r3, [sp, #16]
 8007362:	bf43      	ittte	mi
 8007364:	2300      	movmi	r3, #0
 8007366:	f1c5 0801 	rsbmi	r8, r5, #1
 800736a:	9304      	strmi	r3, [sp, #16]
 800736c:	f04f 0800 	movpl.w	r8, #0
 8007370:	f1ba 0f00 	cmp.w	sl, #0
 8007374:	db3b      	blt.n	80073ee <_dtoa_r+0x23e>
 8007376:	9b04      	ldr	r3, [sp, #16]
 8007378:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800737c:	4453      	add	r3, sl
 800737e:	9304      	str	r3, [sp, #16]
 8007380:	2300      	movs	r3, #0
 8007382:	9306      	str	r3, [sp, #24]
 8007384:	9b05      	ldr	r3, [sp, #20]
 8007386:	2b09      	cmp	r3, #9
 8007388:	d869      	bhi.n	800745e <_dtoa_r+0x2ae>
 800738a:	2b05      	cmp	r3, #5
 800738c:	bfc4      	itt	gt
 800738e:	3b04      	subgt	r3, #4
 8007390:	9305      	strgt	r3, [sp, #20]
 8007392:	9b05      	ldr	r3, [sp, #20]
 8007394:	f1a3 0302 	sub.w	r3, r3, #2
 8007398:	bfcc      	ite	gt
 800739a:	2500      	movgt	r5, #0
 800739c:	2501      	movle	r5, #1
 800739e:	2b03      	cmp	r3, #3
 80073a0:	d869      	bhi.n	8007476 <_dtoa_r+0x2c6>
 80073a2:	e8df f003 	tbb	[pc, r3]
 80073a6:	4e2c      	.short	0x4e2c
 80073a8:	5a4c      	.short	0x5a4c
 80073aa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80073ae:	441d      	add	r5, r3
 80073b0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80073b4:	2b20      	cmp	r3, #32
 80073b6:	bfc1      	itttt	gt
 80073b8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80073bc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80073c0:	fa09 f303 	lslgt.w	r3, r9, r3
 80073c4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80073c8:	bfda      	itte	le
 80073ca:	f1c3 0320 	rsble	r3, r3, #32
 80073ce:	fa06 f003 	lslle.w	r0, r6, r3
 80073d2:	4318      	orrgt	r0, r3
 80073d4:	f7f9 f89e 	bl	8000514 <__aeabi_ui2d>
 80073d8:	2301      	movs	r3, #1
 80073da:	4606      	mov	r6, r0
 80073dc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80073e0:	3d01      	subs	r5, #1
 80073e2:	9310      	str	r3, [sp, #64]	; 0x40
 80073e4:	e771      	b.n	80072ca <_dtoa_r+0x11a>
 80073e6:	2301      	movs	r3, #1
 80073e8:	e7b6      	b.n	8007358 <_dtoa_r+0x1a8>
 80073ea:	900e      	str	r0, [sp, #56]	; 0x38
 80073ec:	e7b5      	b.n	800735a <_dtoa_r+0x1aa>
 80073ee:	f1ca 0300 	rsb	r3, sl, #0
 80073f2:	9306      	str	r3, [sp, #24]
 80073f4:	2300      	movs	r3, #0
 80073f6:	eba8 080a 	sub.w	r8, r8, sl
 80073fa:	930d      	str	r3, [sp, #52]	; 0x34
 80073fc:	e7c2      	b.n	8007384 <_dtoa_r+0x1d4>
 80073fe:	2300      	movs	r3, #0
 8007400:	9308      	str	r3, [sp, #32]
 8007402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007404:	2b00      	cmp	r3, #0
 8007406:	dc39      	bgt.n	800747c <_dtoa_r+0x2cc>
 8007408:	f04f 0901 	mov.w	r9, #1
 800740c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007410:	464b      	mov	r3, r9
 8007412:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007416:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007418:	2200      	movs	r2, #0
 800741a:	6042      	str	r2, [r0, #4]
 800741c:	2204      	movs	r2, #4
 800741e:	f102 0614 	add.w	r6, r2, #20
 8007422:	429e      	cmp	r6, r3
 8007424:	6841      	ldr	r1, [r0, #4]
 8007426:	d92f      	bls.n	8007488 <_dtoa_r+0x2d8>
 8007428:	4620      	mov	r0, r4
 800742a:	f000 fcc7 	bl	8007dbc <_Balloc>
 800742e:	9000      	str	r0, [sp, #0]
 8007430:	2800      	cmp	r0, #0
 8007432:	d14b      	bne.n	80074cc <_dtoa_r+0x31c>
 8007434:	4b24      	ldr	r3, [pc, #144]	; (80074c8 <_dtoa_r+0x318>)
 8007436:	4602      	mov	r2, r0
 8007438:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800743c:	e6d1      	b.n	80071e2 <_dtoa_r+0x32>
 800743e:	2301      	movs	r3, #1
 8007440:	e7de      	b.n	8007400 <_dtoa_r+0x250>
 8007442:	2300      	movs	r3, #0
 8007444:	9308      	str	r3, [sp, #32]
 8007446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007448:	eb0a 0903 	add.w	r9, sl, r3
 800744c:	f109 0301 	add.w	r3, r9, #1
 8007450:	2b01      	cmp	r3, #1
 8007452:	9301      	str	r3, [sp, #4]
 8007454:	bfb8      	it	lt
 8007456:	2301      	movlt	r3, #1
 8007458:	e7dd      	b.n	8007416 <_dtoa_r+0x266>
 800745a:	2301      	movs	r3, #1
 800745c:	e7f2      	b.n	8007444 <_dtoa_r+0x294>
 800745e:	2501      	movs	r5, #1
 8007460:	2300      	movs	r3, #0
 8007462:	9305      	str	r3, [sp, #20]
 8007464:	9508      	str	r5, [sp, #32]
 8007466:	f04f 39ff 	mov.w	r9, #4294967295
 800746a:	2200      	movs	r2, #0
 800746c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007470:	2312      	movs	r3, #18
 8007472:	9209      	str	r2, [sp, #36]	; 0x24
 8007474:	e7cf      	b.n	8007416 <_dtoa_r+0x266>
 8007476:	2301      	movs	r3, #1
 8007478:	9308      	str	r3, [sp, #32]
 800747a:	e7f4      	b.n	8007466 <_dtoa_r+0x2b6>
 800747c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007480:	f8cd 9004 	str.w	r9, [sp, #4]
 8007484:	464b      	mov	r3, r9
 8007486:	e7c6      	b.n	8007416 <_dtoa_r+0x266>
 8007488:	3101      	adds	r1, #1
 800748a:	6041      	str	r1, [r0, #4]
 800748c:	0052      	lsls	r2, r2, #1
 800748e:	e7c6      	b.n	800741e <_dtoa_r+0x26e>
 8007490:	636f4361 	.word	0x636f4361
 8007494:	3fd287a7 	.word	0x3fd287a7
 8007498:	8b60c8b3 	.word	0x8b60c8b3
 800749c:	3fc68a28 	.word	0x3fc68a28
 80074a0:	509f79fb 	.word	0x509f79fb
 80074a4:	3fd34413 	.word	0x3fd34413
 80074a8:	0800b3ad 	.word	0x0800b3ad
 80074ac:	0800b3c4 	.word	0x0800b3c4
 80074b0:	7ff00000 	.word	0x7ff00000
 80074b4:	0800b3a9 	.word	0x0800b3a9
 80074b8:	0800b3a0 	.word	0x0800b3a0
 80074bc:	0800b37d 	.word	0x0800b37d
 80074c0:	3ff80000 	.word	0x3ff80000
 80074c4:	0800b4c0 	.word	0x0800b4c0
 80074c8:	0800b423 	.word	0x0800b423
 80074cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074ce:	9a00      	ldr	r2, [sp, #0]
 80074d0:	601a      	str	r2, [r3, #0]
 80074d2:	9b01      	ldr	r3, [sp, #4]
 80074d4:	2b0e      	cmp	r3, #14
 80074d6:	f200 80ad 	bhi.w	8007634 <_dtoa_r+0x484>
 80074da:	2d00      	cmp	r5, #0
 80074dc:	f000 80aa 	beq.w	8007634 <_dtoa_r+0x484>
 80074e0:	f1ba 0f00 	cmp.w	sl, #0
 80074e4:	dd36      	ble.n	8007554 <_dtoa_r+0x3a4>
 80074e6:	4ac3      	ldr	r2, [pc, #780]	; (80077f4 <_dtoa_r+0x644>)
 80074e8:	f00a 030f 	and.w	r3, sl, #15
 80074ec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80074f0:	ed93 7b00 	vldr	d7, [r3]
 80074f4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80074f8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80074fc:	eeb0 8a47 	vmov.f32	s16, s14
 8007500:	eef0 8a67 	vmov.f32	s17, s15
 8007504:	d016      	beq.n	8007534 <_dtoa_r+0x384>
 8007506:	4bbc      	ldr	r3, [pc, #752]	; (80077f8 <_dtoa_r+0x648>)
 8007508:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800750c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007510:	f7f9 f9a4 	bl	800085c <__aeabi_ddiv>
 8007514:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007518:	f007 070f 	and.w	r7, r7, #15
 800751c:	2503      	movs	r5, #3
 800751e:	4eb6      	ldr	r6, [pc, #728]	; (80077f8 <_dtoa_r+0x648>)
 8007520:	b957      	cbnz	r7, 8007538 <_dtoa_r+0x388>
 8007522:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007526:	ec53 2b18 	vmov	r2, r3, d8
 800752a:	f7f9 f997 	bl	800085c <__aeabi_ddiv>
 800752e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007532:	e029      	b.n	8007588 <_dtoa_r+0x3d8>
 8007534:	2502      	movs	r5, #2
 8007536:	e7f2      	b.n	800751e <_dtoa_r+0x36e>
 8007538:	07f9      	lsls	r1, r7, #31
 800753a:	d508      	bpl.n	800754e <_dtoa_r+0x39e>
 800753c:	ec51 0b18 	vmov	r0, r1, d8
 8007540:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007544:	f7f9 f860 	bl	8000608 <__aeabi_dmul>
 8007548:	ec41 0b18 	vmov	d8, r0, r1
 800754c:	3501      	adds	r5, #1
 800754e:	107f      	asrs	r7, r7, #1
 8007550:	3608      	adds	r6, #8
 8007552:	e7e5      	b.n	8007520 <_dtoa_r+0x370>
 8007554:	f000 80a6 	beq.w	80076a4 <_dtoa_r+0x4f4>
 8007558:	f1ca 0600 	rsb	r6, sl, #0
 800755c:	4ba5      	ldr	r3, [pc, #660]	; (80077f4 <_dtoa_r+0x644>)
 800755e:	4fa6      	ldr	r7, [pc, #664]	; (80077f8 <_dtoa_r+0x648>)
 8007560:	f006 020f 	and.w	r2, r6, #15
 8007564:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800756c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007570:	f7f9 f84a 	bl	8000608 <__aeabi_dmul>
 8007574:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007578:	1136      	asrs	r6, r6, #4
 800757a:	2300      	movs	r3, #0
 800757c:	2502      	movs	r5, #2
 800757e:	2e00      	cmp	r6, #0
 8007580:	f040 8085 	bne.w	800768e <_dtoa_r+0x4de>
 8007584:	2b00      	cmp	r3, #0
 8007586:	d1d2      	bne.n	800752e <_dtoa_r+0x37e>
 8007588:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800758a:	2b00      	cmp	r3, #0
 800758c:	f000 808c 	beq.w	80076a8 <_dtoa_r+0x4f8>
 8007590:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007594:	4b99      	ldr	r3, [pc, #612]	; (80077fc <_dtoa_r+0x64c>)
 8007596:	2200      	movs	r2, #0
 8007598:	4630      	mov	r0, r6
 800759a:	4639      	mov	r1, r7
 800759c:	f7f9 faa6 	bl	8000aec <__aeabi_dcmplt>
 80075a0:	2800      	cmp	r0, #0
 80075a2:	f000 8081 	beq.w	80076a8 <_dtoa_r+0x4f8>
 80075a6:	9b01      	ldr	r3, [sp, #4]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d07d      	beq.n	80076a8 <_dtoa_r+0x4f8>
 80075ac:	f1b9 0f00 	cmp.w	r9, #0
 80075b0:	dd3c      	ble.n	800762c <_dtoa_r+0x47c>
 80075b2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80075b6:	9307      	str	r3, [sp, #28]
 80075b8:	2200      	movs	r2, #0
 80075ba:	4b91      	ldr	r3, [pc, #580]	; (8007800 <_dtoa_r+0x650>)
 80075bc:	4630      	mov	r0, r6
 80075be:	4639      	mov	r1, r7
 80075c0:	f7f9 f822 	bl	8000608 <__aeabi_dmul>
 80075c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075c8:	3501      	adds	r5, #1
 80075ca:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80075ce:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80075d2:	4628      	mov	r0, r5
 80075d4:	f7f8 ffae 	bl	8000534 <__aeabi_i2d>
 80075d8:	4632      	mov	r2, r6
 80075da:	463b      	mov	r3, r7
 80075dc:	f7f9 f814 	bl	8000608 <__aeabi_dmul>
 80075e0:	4b88      	ldr	r3, [pc, #544]	; (8007804 <_dtoa_r+0x654>)
 80075e2:	2200      	movs	r2, #0
 80075e4:	f7f8 fe5a 	bl	800029c <__adddf3>
 80075e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80075ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075f0:	9303      	str	r3, [sp, #12]
 80075f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d15c      	bne.n	80076b2 <_dtoa_r+0x502>
 80075f8:	4b83      	ldr	r3, [pc, #524]	; (8007808 <_dtoa_r+0x658>)
 80075fa:	2200      	movs	r2, #0
 80075fc:	4630      	mov	r0, r6
 80075fe:	4639      	mov	r1, r7
 8007600:	f7f8 fe4a 	bl	8000298 <__aeabi_dsub>
 8007604:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007608:	4606      	mov	r6, r0
 800760a:	460f      	mov	r7, r1
 800760c:	f7f9 fa8c 	bl	8000b28 <__aeabi_dcmpgt>
 8007610:	2800      	cmp	r0, #0
 8007612:	f040 8296 	bne.w	8007b42 <_dtoa_r+0x992>
 8007616:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800761a:	4630      	mov	r0, r6
 800761c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007620:	4639      	mov	r1, r7
 8007622:	f7f9 fa63 	bl	8000aec <__aeabi_dcmplt>
 8007626:	2800      	cmp	r0, #0
 8007628:	f040 8288 	bne.w	8007b3c <_dtoa_r+0x98c>
 800762c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007630:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007634:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007636:	2b00      	cmp	r3, #0
 8007638:	f2c0 8158 	blt.w	80078ec <_dtoa_r+0x73c>
 800763c:	f1ba 0f0e 	cmp.w	sl, #14
 8007640:	f300 8154 	bgt.w	80078ec <_dtoa_r+0x73c>
 8007644:	4b6b      	ldr	r3, [pc, #428]	; (80077f4 <_dtoa_r+0x644>)
 8007646:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800764a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800764e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007650:	2b00      	cmp	r3, #0
 8007652:	f280 80e3 	bge.w	800781c <_dtoa_r+0x66c>
 8007656:	9b01      	ldr	r3, [sp, #4]
 8007658:	2b00      	cmp	r3, #0
 800765a:	f300 80df 	bgt.w	800781c <_dtoa_r+0x66c>
 800765e:	f040 826d 	bne.w	8007b3c <_dtoa_r+0x98c>
 8007662:	4b69      	ldr	r3, [pc, #420]	; (8007808 <_dtoa_r+0x658>)
 8007664:	2200      	movs	r2, #0
 8007666:	4640      	mov	r0, r8
 8007668:	4649      	mov	r1, r9
 800766a:	f7f8 ffcd 	bl	8000608 <__aeabi_dmul>
 800766e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007672:	f7f9 fa4f 	bl	8000b14 <__aeabi_dcmpge>
 8007676:	9e01      	ldr	r6, [sp, #4]
 8007678:	4637      	mov	r7, r6
 800767a:	2800      	cmp	r0, #0
 800767c:	f040 8243 	bne.w	8007b06 <_dtoa_r+0x956>
 8007680:	9d00      	ldr	r5, [sp, #0]
 8007682:	2331      	movs	r3, #49	; 0x31
 8007684:	f805 3b01 	strb.w	r3, [r5], #1
 8007688:	f10a 0a01 	add.w	sl, sl, #1
 800768c:	e23f      	b.n	8007b0e <_dtoa_r+0x95e>
 800768e:	07f2      	lsls	r2, r6, #31
 8007690:	d505      	bpl.n	800769e <_dtoa_r+0x4ee>
 8007692:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007696:	f7f8 ffb7 	bl	8000608 <__aeabi_dmul>
 800769a:	3501      	adds	r5, #1
 800769c:	2301      	movs	r3, #1
 800769e:	1076      	asrs	r6, r6, #1
 80076a0:	3708      	adds	r7, #8
 80076a2:	e76c      	b.n	800757e <_dtoa_r+0x3ce>
 80076a4:	2502      	movs	r5, #2
 80076a6:	e76f      	b.n	8007588 <_dtoa_r+0x3d8>
 80076a8:	9b01      	ldr	r3, [sp, #4]
 80076aa:	f8cd a01c 	str.w	sl, [sp, #28]
 80076ae:	930c      	str	r3, [sp, #48]	; 0x30
 80076b0:	e78d      	b.n	80075ce <_dtoa_r+0x41e>
 80076b2:	9900      	ldr	r1, [sp, #0]
 80076b4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80076b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076b8:	4b4e      	ldr	r3, [pc, #312]	; (80077f4 <_dtoa_r+0x644>)
 80076ba:	ed9d 7b02 	vldr	d7, [sp, #8]
 80076be:	4401      	add	r1, r0
 80076c0:	9102      	str	r1, [sp, #8]
 80076c2:	9908      	ldr	r1, [sp, #32]
 80076c4:	eeb0 8a47 	vmov.f32	s16, s14
 80076c8:	eef0 8a67 	vmov.f32	s17, s15
 80076cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80076d4:	2900      	cmp	r1, #0
 80076d6:	d045      	beq.n	8007764 <_dtoa_r+0x5b4>
 80076d8:	494c      	ldr	r1, [pc, #304]	; (800780c <_dtoa_r+0x65c>)
 80076da:	2000      	movs	r0, #0
 80076dc:	f7f9 f8be 	bl	800085c <__aeabi_ddiv>
 80076e0:	ec53 2b18 	vmov	r2, r3, d8
 80076e4:	f7f8 fdd8 	bl	8000298 <__aeabi_dsub>
 80076e8:	9d00      	ldr	r5, [sp, #0]
 80076ea:	ec41 0b18 	vmov	d8, r0, r1
 80076ee:	4639      	mov	r1, r7
 80076f0:	4630      	mov	r0, r6
 80076f2:	f7f9 fa39 	bl	8000b68 <__aeabi_d2iz>
 80076f6:	900c      	str	r0, [sp, #48]	; 0x30
 80076f8:	f7f8 ff1c 	bl	8000534 <__aeabi_i2d>
 80076fc:	4602      	mov	r2, r0
 80076fe:	460b      	mov	r3, r1
 8007700:	4630      	mov	r0, r6
 8007702:	4639      	mov	r1, r7
 8007704:	f7f8 fdc8 	bl	8000298 <__aeabi_dsub>
 8007708:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800770a:	3330      	adds	r3, #48	; 0x30
 800770c:	f805 3b01 	strb.w	r3, [r5], #1
 8007710:	ec53 2b18 	vmov	r2, r3, d8
 8007714:	4606      	mov	r6, r0
 8007716:	460f      	mov	r7, r1
 8007718:	f7f9 f9e8 	bl	8000aec <__aeabi_dcmplt>
 800771c:	2800      	cmp	r0, #0
 800771e:	d165      	bne.n	80077ec <_dtoa_r+0x63c>
 8007720:	4632      	mov	r2, r6
 8007722:	463b      	mov	r3, r7
 8007724:	4935      	ldr	r1, [pc, #212]	; (80077fc <_dtoa_r+0x64c>)
 8007726:	2000      	movs	r0, #0
 8007728:	f7f8 fdb6 	bl	8000298 <__aeabi_dsub>
 800772c:	ec53 2b18 	vmov	r2, r3, d8
 8007730:	f7f9 f9dc 	bl	8000aec <__aeabi_dcmplt>
 8007734:	2800      	cmp	r0, #0
 8007736:	f040 80b9 	bne.w	80078ac <_dtoa_r+0x6fc>
 800773a:	9b02      	ldr	r3, [sp, #8]
 800773c:	429d      	cmp	r5, r3
 800773e:	f43f af75 	beq.w	800762c <_dtoa_r+0x47c>
 8007742:	4b2f      	ldr	r3, [pc, #188]	; (8007800 <_dtoa_r+0x650>)
 8007744:	ec51 0b18 	vmov	r0, r1, d8
 8007748:	2200      	movs	r2, #0
 800774a:	f7f8 ff5d 	bl	8000608 <__aeabi_dmul>
 800774e:	4b2c      	ldr	r3, [pc, #176]	; (8007800 <_dtoa_r+0x650>)
 8007750:	ec41 0b18 	vmov	d8, r0, r1
 8007754:	2200      	movs	r2, #0
 8007756:	4630      	mov	r0, r6
 8007758:	4639      	mov	r1, r7
 800775a:	f7f8 ff55 	bl	8000608 <__aeabi_dmul>
 800775e:	4606      	mov	r6, r0
 8007760:	460f      	mov	r7, r1
 8007762:	e7c4      	b.n	80076ee <_dtoa_r+0x53e>
 8007764:	ec51 0b17 	vmov	r0, r1, d7
 8007768:	f7f8 ff4e 	bl	8000608 <__aeabi_dmul>
 800776c:	9b02      	ldr	r3, [sp, #8]
 800776e:	9d00      	ldr	r5, [sp, #0]
 8007770:	930c      	str	r3, [sp, #48]	; 0x30
 8007772:	ec41 0b18 	vmov	d8, r0, r1
 8007776:	4639      	mov	r1, r7
 8007778:	4630      	mov	r0, r6
 800777a:	f7f9 f9f5 	bl	8000b68 <__aeabi_d2iz>
 800777e:	9011      	str	r0, [sp, #68]	; 0x44
 8007780:	f7f8 fed8 	bl	8000534 <__aeabi_i2d>
 8007784:	4602      	mov	r2, r0
 8007786:	460b      	mov	r3, r1
 8007788:	4630      	mov	r0, r6
 800778a:	4639      	mov	r1, r7
 800778c:	f7f8 fd84 	bl	8000298 <__aeabi_dsub>
 8007790:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007792:	3330      	adds	r3, #48	; 0x30
 8007794:	f805 3b01 	strb.w	r3, [r5], #1
 8007798:	9b02      	ldr	r3, [sp, #8]
 800779a:	429d      	cmp	r5, r3
 800779c:	4606      	mov	r6, r0
 800779e:	460f      	mov	r7, r1
 80077a0:	f04f 0200 	mov.w	r2, #0
 80077a4:	d134      	bne.n	8007810 <_dtoa_r+0x660>
 80077a6:	4b19      	ldr	r3, [pc, #100]	; (800780c <_dtoa_r+0x65c>)
 80077a8:	ec51 0b18 	vmov	r0, r1, d8
 80077ac:	f7f8 fd76 	bl	800029c <__adddf3>
 80077b0:	4602      	mov	r2, r0
 80077b2:	460b      	mov	r3, r1
 80077b4:	4630      	mov	r0, r6
 80077b6:	4639      	mov	r1, r7
 80077b8:	f7f9 f9b6 	bl	8000b28 <__aeabi_dcmpgt>
 80077bc:	2800      	cmp	r0, #0
 80077be:	d175      	bne.n	80078ac <_dtoa_r+0x6fc>
 80077c0:	ec53 2b18 	vmov	r2, r3, d8
 80077c4:	4911      	ldr	r1, [pc, #68]	; (800780c <_dtoa_r+0x65c>)
 80077c6:	2000      	movs	r0, #0
 80077c8:	f7f8 fd66 	bl	8000298 <__aeabi_dsub>
 80077cc:	4602      	mov	r2, r0
 80077ce:	460b      	mov	r3, r1
 80077d0:	4630      	mov	r0, r6
 80077d2:	4639      	mov	r1, r7
 80077d4:	f7f9 f98a 	bl	8000aec <__aeabi_dcmplt>
 80077d8:	2800      	cmp	r0, #0
 80077da:	f43f af27 	beq.w	800762c <_dtoa_r+0x47c>
 80077de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80077e0:	1e6b      	subs	r3, r5, #1
 80077e2:	930c      	str	r3, [sp, #48]	; 0x30
 80077e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80077e8:	2b30      	cmp	r3, #48	; 0x30
 80077ea:	d0f8      	beq.n	80077de <_dtoa_r+0x62e>
 80077ec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80077f0:	e04a      	b.n	8007888 <_dtoa_r+0x6d8>
 80077f2:	bf00      	nop
 80077f4:	0800b4c0 	.word	0x0800b4c0
 80077f8:	0800b498 	.word	0x0800b498
 80077fc:	3ff00000 	.word	0x3ff00000
 8007800:	40240000 	.word	0x40240000
 8007804:	401c0000 	.word	0x401c0000
 8007808:	40140000 	.word	0x40140000
 800780c:	3fe00000 	.word	0x3fe00000
 8007810:	4baf      	ldr	r3, [pc, #700]	; (8007ad0 <_dtoa_r+0x920>)
 8007812:	f7f8 fef9 	bl	8000608 <__aeabi_dmul>
 8007816:	4606      	mov	r6, r0
 8007818:	460f      	mov	r7, r1
 800781a:	e7ac      	b.n	8007776 <_dtoa_r+0x5c6>
 800781c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007820:	9d00      	ldr	r5, [sp, #0]
 8007822:	4642      	mov	r2, r8
 8007824:	464b      	mov	r3, r9
 8007826:	4630      	mov	r0, r6
 8007828:	4639      	mov	r1, r7
 800782a:	f7f9 f817 	bl	800085c <__aeabi_ddiv>
 800782e:	f7f9 f99b 	bl	8000b68 <__aeabi_d2iz>
 8007832:	9002      	str	r0, [sp, #8]
 8007834:	f7f8 fe7e 	bl	8000534 <__aeabi_i2d>
 8007838:	4642      	mov	r2, r8
 800783a:	464b      	mov	r3, r9
 800783c:	f7f8 fee4 	bl	8000608 <__aeabi_dmul>
 8007840:	4602      	mov	r2, r0
 8007842:	460b      	mov	r3, r1
 8007844:	4630      	mov	r0, r6
 8007846:	4639      	mov	r1, r7
 8007848:	f7f8 fd26 	bl	8000298 <__aeabi_dsub>
 800784c:	9e02      	ldr	r6, [sp, #8]
 800784e:	9f01      	ldr	r7, [sp, #4]
 8007850:	3630      	adds	r6, #48	; 0x30
 8007852:	f805 6b01 	strb.w	r6, [r5], #1
 8007856:	9e00      	ldr	r6, [sp, #0]
 8007858:	1bae      	subs	r6, r5, r6
 800785a:	42b7      	cmp	r7, r6
 800785c:	4602      	mov	r2, r0
 800785e:	460b      	mov	r3, r1
 8007860:	d137      	bne.n	80078d2 <_dtoa_r+0x722>
 8007862:	f7f8 fd1b 	bl	800029c <__adddf3>
 8007866:	4642      	mov	r2, r8
 8007868:	464b      	mov	r3, r9
 800786a:	4606      	mov	r6, r0
 800786c:	460f      	mov	r7, r1
 800786e:	f7f9 f95b 	bl	8000b28 <__aeabi_dcmpgt>
 8007872:	b9c8      	cbnz	r0, 80078a8 <_dtoa_r+0x6f8>
 8007874:	4642      	mov	r2, r8
 8007876:	464b      	mov	r3, r9
 8007878:	4630      	mov	r0, r6
 800787a:	4639      	mov	r1, r7
 800787c:	f7f9 f92c 	bl	8000ad8 <__aeabi_dcmpeq>
 8007880:	b110      	cbz	r0, 8007888 <_dtoa_r+0x6d8>
 8007882:	9b02      	ldr	r3, [sp, #8]
 8007884:	07d9      	lsls	r1, r3, #31
 8007886:	d40f      	bmi.n	80078a8 <_dtoa_r+0x6f8>
 8007888:	4620      	mov	r0, r4
 800788a:	4659      	mov	r1, fp
 800788c:	f000 fad6 	bl	8007e3c <_Bfree>
 8007890:	2300      	movs	r3, #0
 8007892:	702b      	strb	r3, [r5, #0]
 8007894:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007896:	f10a 0001 	add.w	r0, sl, #1
 800789a:	6018      	str	r0, [r3, #0]
 800789c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800789e:	2b00      	cmp	r3, #0
 80078a0:	f43f acd8 	beq.w	8007254 <_dtoa_r+0xa4>
 80078a4:	601d      	str	r5, [r3, #0]
 80078a6:	e4d5      	b.n	8007254 <_dtoa_r+0xa4>
 80078a8:	f8cd a01c 	str.w	sl, [sp, #28]
 80078ac:	462b      	mov	r3, r5
 80078ae:	461d      	mov	r5, r3
 80078b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078b4:	2a39      	cmp	r2, #57	; 0x39
 80078b6:	d108      	bne.n	80078ca <_dtoa_r+0x71a>
 80078b8:	9a00      	ldr	r2, [sp, #0]
 80078ba:	429a      	cmp	r2, r3
 80078bc:	d1f7      	bne.n	80078ae <_dtoa_r+0x6fe>
 80078be:	9a07      	ldr	r2, [sp, #28]
 80078c0:	9900      	ldr	r1, [sp, #0]
 80078c2:	3201      	adds	r2, #1
 80078c4:	9207      	str	r2, [sp, #28]
 80078c6:	2230      	movs	r2, #48	; 0x30
 80078c8:	700a      	strb	r2, [r1, #0]
 80078ca:	781a      	ldrb	r2, [r3, #0]
 80078cc:	3201      	adds	r2, #1
 80078ce:	701a      	strb	r2, [r3, #0]
 80078d0:	e78c      	b.n	80077ec <_dtoa_r+0x63c>
 80078d2:	4b7f      	ldr	r3, [pc, #508]	; (8007ad0 <_dtoa_r+0x920>)
 80078d4:	2200      	movs	r2, #0
 80078d6:	f7f8 fe97 	bl	8000608 <__aeabi_dmul>
 80078da:	2200      	movs	r2, #0
 80078dc:	2300      	movs	r3, #0
 80078de:	4606      	mov	r6, r0
 80078e0:	460f      	mov	r7, r1
 80078e2:	f7f9 f8f9 	bl	8000ad8 <__aeabi_dcmpeq>
 80078e6:	2800      	cmp	r0, #0
 80078e8:	d09b      	beq.n	8007822 <_dtoa_r+0x672>
 80078ea:	e7cd      	b.n	8007888 <_dtoa_r+0x6d8>
 80078ec:	9a08      	ldr	r2, [sp, #32]
 80078ee:	2a00      	cmp	r2, #0
 80078f0:	f000 80c4 	beq.w	8007a7c <_dtoa_r+0x8cc>
 80078f4:	9a05      	ldr	r2, [sp, #20]
 80078f6:	2a01      	cmp	r2, #1
 80078f8:	f300 80a8 	bgt.w	8007a4c <_dtoa_r+0x89c>
 80078fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80078fe:	2a00      	cmp	r2, #0
 8007900:	f000 80a0 	beq.w	8007a44 <_dtoa_r+0x894>
 8007904:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007908:	9e06      	ldr	r6, [sp, #24]
 800790a:	4645      	mov	r5, r8
 800790c:	9a04      	ldr	r2, [sp, #16]
 800790e:	2101      	movs	r1, #1
 8007910:	441a      	add	r2, r3
 8007912:	4620      	mov	r0, r4
 8007914:	4498      	add	r8, r3
 8007916:	9204      	str	r2, [sp, #16]
 8007918:	f000 fb4c 	bl	8007fb4 <__i2b>
 800791c:	4607      	mov	r7, r0
 800791e:	2d00      	cmp	r5, #0
 8007920:	dd0b      	ble.n	800793a <_dtoa_r+0x78a>
 8007922:	9b04      	ldr	r3, [sp, #16]
 8007924:	2b00      	cmp	r3, #0
 8007926:	dd08      	ble.n	800793a <_dtoa_r+0x78a>
 8007928:	42ab      	cmp	r3, r5
 800792a:	9a04      	ldr	r2, [sp, #16]
 800792c:	bfa8      	it	ge
 800792e:	462b      	movge	r3, r5
 8007930:	eba8 0803 	sub.w	r8, r8, r3
 8007934:	1aed      	subs	r5, r5, r3
 8007936:	1ad3      	subs	r3, r2, r3
 8007938:	9304      	str	r3, [sp, #16]
 800793a:	9b06      	ldr	r3, [sp, #24]
 800793c:	b1fb      	cbz	r3, 800797e <_dtoa_r+0x7ce>
 800793e:	9b08      	ldr	r3, [sp, #32]
 8007940:	2b00      	cmp	r3, #0
 8007942:	f000 809f 	beq.w	8007a84 <_dtoa_r+0x8d4>
 8007946:	2e00      	cmp	r6, #0
 8007948:	dd11      	ble.n	800796e <_dtoa_r+0x7be>
 800794a:	4639      	mov	r1, r7
 800794c:	4632      	mov	r2, r6
 800794e:	4620      	mov	r0, r4
 8007950:	f000 fbec 	bl	800812c <__pow5mult>
 8007954:	465a      	mov	r2, fp
 8007956:	4601      	mov	r1, r0
 8007958:	4607      	mov	r7, r0
 800795a:	4620      	mov	r0, r4
 800795c:	f000 fb40 	bl	8007fe0 <__multiply>
 8007960:	4659      	mov	r1, fp
 8007962:	9007      	str	r0, [sp, #28]
 8007964:	4620      	mov	r0, r4
 8007966:	f000 fa69 	bl	8007e3c <_Bfree>
 800796a:	9b07      	ldr	r3, [sp, #28]
 800796c:	469b      	mov	fp, r3
 800796e:	9b06      	ldr	r3, [sp, #24]
 8007970:	1b9a      	subs	r2, r3, r6
 8007972:	d004      	beq.n	800797e <_dtoa_r+0x7ce>
 8007974:	4659      	mov	r1, fp
 8007976:	4620      	mov	r0, r4
 8007978:	f000 fbd8 	bl	800812c <__pow5mult>
 800797c:	4683      	mov	fp, r0
 800797e:	2101      	movs	r1, #1
 8007980:	4620      	mov	r0, r4
 8007982:	f000 fb17 	bl	8007fb4 <__i2b>
 8007986:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007988:	2b00      	cmp	r3, #0
 800798a:	4606      	mov	r6, r0
 800798c:	dd7c      	ble.n	8007a88 <_dtoa_r+0x8d8>
 800798e:	461a      	mov	r2, r3
 8007990:	4601      	mov	r1, r0
 8007992:	4620      	mov	r0, r4
 8007994:	f000 fbca 	bl	800812c <__pow5mult>
 8007998:	9b05      	ldr	r3, [sp, #20]
 800799a:	2b01      	cmp	r3, #1
 800799c:	4606      	mov	r6, r0
 800799e:	dd76      	ble.n	8007a8e <_dtoa_r+0x8de>
 80079a0:	2300      	movs	r3, #0
 80079a2:	9306      	str	r3, [sp, #24]
 80079a4:	6933      	ldr	r3, [r6, #16]
 80079a6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80079aa:	6918      	ldr	r0, [r3, #16]
 80079ac:	f000 fab2 	bl	8007f14 <__hi0bits>
 80079b0:	f1c0 0020 	rsb	r0, r0, #32
 80079b4:	9b04      	ldr	r3, [sp, #16]
 80079b6:	4418      	add	r0, r3
 80079b8:	f010 001f 	ands.w	r0, r0, #31
 80079bc:	f000 8086 	beq.w	8007acc <_dtoa_r+0x91c>
 80079c0:	f1c0 0320 	rsb	r3, r0, #32
 80079c4:	2b04      	cmp	r3, #4
 80079c6:	dd7f      	ble.n	8007ac8 <_dtoa_r+0x918>
 80079c8:	f1c0 001c 	rsb	r0, r0, #28
 80079cc:	9b04      	ldr	r3, [sp, #16]
 80079ce:	4403      	add	r3, r0
 80079d0:	4480      	add	r8, r0
 80079d2:	4405      	add	r5, r0
 80079d4:	9304      	str	r3, [sp, #16]
 80079d6:	f1b8 0f00 	cmp.w	r8, #0
 80079da:	dd05      	ble.n	80079e8 <_dtoa_r+0x838>
 80079dc:	4659      	mov	r1, fp
 80079de:	4642      	mov	r2, r8
 80079e0:	4620      	mov	r0, r4
 80079e2:	f000 fbfd 	bl	80081e0 <__lshift>
 80079e6:	4683      	mov	fp, r0
 80079e8:	9b04      	ldr	r3, [sp, #16]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	dd05      	ble.n	80079fa <_dtoa_r+0x84a>
 80079ee:	4631      	mov	r1, r6
 80079f0:	461a      	mov	r2, r3
 80079f2:	4620      	mov	r0, r4
 80079f4:	f000 fbf4 	bl	80081e0 <__lshift>
 80079f8:	4606      	mov	r6, r0
 80079fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d069      	beq.n	8007ad4 <_dtoa_r+0x924>
 8007a00:	4631      	mov	r1, r6
 8007a02:	4658      	mov	r0, fp
 8007a04:	f000 fc58 	bl	80082b8 <__mcmp>
 8007a08:	2800      	cmp	r0, #0
 8007a0a:	da63      	bge.n	8007ad4 <_dtoa_r+0x924>
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	4659      	mov	r1, fp
 8007a10:	220a      	movs	r2, #10
 8007a12:	4620      	mov	r0, r4
 8007a14:	f000 fa34 	bl	8007e80 <__multadd>
 8007a18:	9b08      	ldr	r3, [sp, #32]
 8007a1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a1e:	4683      	mov	fp, r0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f000 818f 	beq.w	8007d44 <_dtoa_r+0xb94>
 8007a26:	4639      	mov	r1, r7
 8007a28:	2300      	movs	r3, #0
 8007a2a:	220a      	movs	r2, #10
 8007a2c:	4620      	mov	r0, r4
 8007a2e:	f000 fa27 	bl	8007e80 <__multadd>
 8007a32:	f1b9 0f00 	cmp.w	r9, #0
 8007a36:	4607      	mov	r7, r0
 8007a38:	f300 808e 	bgt.w	8007b58 <_dtoa_r+0x9a8>
 8007a3c:	9b05      	ldr	r3, [sp, #20]
 8007a3e:	2b02      	cmp	r3, #2
 8007a40:	dc50      	bgt.n	8007ae4 <_dtoa_r+0x934>
 8007a42:	e089      	b.n	8007b58 <_dtoa_r+0x9a8>
 8007a44:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007a4a:	e75d      	b.n	8007908 <_dtoa_r+0x758>
 8007a4c:	9b01      	ldr	r3, [sp, #4]
 8007a4e:	1e5e      	subs	r6, r3, #1
 8007a50:	9b06      	ldr	r3, [sp, #24]
 8007a52:	42b3      	cmp	r3, r6
 8007a54:	bfbf      	itttt	lt
 8007a56:	9b06      	ldrlt	r3, [sp, #24]
 8007a58:	9606      	strlt	r6, [sp, #24]
 8007a5a:	1af2      	sublt	r2, r6, r3
 8007a5c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007a5e:	bfb6      	itet	lt
 8007a60:	189b      	addlt	r3, r3, r2
 8007a62:	1b9e      	subge	r6, r3, r6
 8007a64:	930d      	strlt	r3, [sp, #52]	; 0x34
 8007a66:	9b01      	ldr	r3, [sp, #4]
 8007a68:	bfb8      	it	lt
 8007a6a:	2600      	movlt	r6, #0
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	bfb5      	itete	lt
 8007a70:	eba8 0503 	sublt.w	r5, r8, r3
 8007a74:	9b01      	ldrge	r3, [sp, #4]
 8007a76:	2300      	movlt	r3, #0
 8007a78:	4645      	movge	r5, r8
 8007a7a:	e747      	b.n	800790c <_dtoa_r+0x75c>
 8007a7c:	9e06      	ldr	r6, [sp, #24]
 8007a7e:	9f08      	ldr	r7, [sp, #32]
 8007a80:	4645      	mov	r5, r8
 8007a82:	e74c      	b.n	800791e <_dtoa_r+0x76e>
 8007a84:	9a06      	ldr	r2, [sp, #24]
 8007a86:	e775      	b.n	8007974 <_dtoa_r+0x7c4>
 8007a88:	9b05      	ldr	r3, [sp, #20]
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	dc18      	bgt.n	8007ac0 <_dtoa_r+0x910>
 8007a8e:	9b02      	ldr	r3, [sp, #8]
 8007a90:	b9b3      	cbnz	r3, 8007ac0 <_dtoa_r+0x910>
 8007a92:	9b03      	ldr	r3, [sp, #12]
 8007a94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a98:	b9a3      	cbnz	r3, 8007ac4 <_dtoa_r+0x914>
 8007a9a:	9b03      	ldr	r3, [sp, #12]
 8007a9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007aa0:	0d1b      	lsrs	r3, r3, #20
 8007aa2:	051b      	lsls	r3, r3, #20
 8007aa4:	b12b      	cbz	r3, 8007ab2 <_dtoa_r+0x902>
 8007aa6:	9b04      	ldr	r3, [sp, #16]
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	9304      	str	r3, [sp, #16]
 8007aac:	f108 0801 	add.w	r8, r8, #1
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	9306      	str	r3, [sp, #24]
 8007ab4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	f47f af74 	bne.w	80079a4 <_dtoa_r+0x7f4>
 8007abc:	2001      	movs	r0, #1
 8007abe:	e779      	b.n	80079b4 <_dtoa_r+0x804>
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	e7f6      	b.n	8007ab2 <_dtoa_r+0x902>
 8007ac4:	9b02      	ldr	r3, [sp, #8]
 8007ac6:	e7f4      	b.n	8007ab2 <_dtoa_r+0x902>
 8007ac8:	d085      	beq.n	80079d6 <_dtoa_r+0x826>
 8007aca:	4618      	mov	r0, r3
 8007acc:	301c      	adds	r0, #28
 8007ace:	e77d      	b.n	80079cc <_dtoa_r+0x81c>
 8007ad0:	40240000 	.word	0x40240000
 8007ad4:	9b01      	ldr	r3, [sp, #4]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	dc38      	bgt.n	8007b4c <_dtoa_r+0x99c>
 8007ada:	9b05      	ldr	r3, [sp, #20]
 8007adc:	2b02      	cmp	r3, #2
 8007ade:	dd35      	ble.n	8007b4c <_dtoa_r+0x99c>
 8007ae0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007ae4:	f1b9 0f00 	cmp.w	r9, #0
 8007ae8:	d10d      	bne.n	8007b06 <_dtoa_r+0x956>
 8007aea:	4631      	mov	r1, r6
 8007aec:	464b      	mov	r3, r9
 8007aee:	2205      	movs	r2, #5
 8007af0:	4620      	mov	r0, r4
 8007af2:	f000 f9c5 	bl	8007e80 <__multadd>
 8007af6:	4601      	mov	r1, r0
 8007af8:	4606      	mov	r6, r0
 8007afa:	4658      	mov	r0, fp
 8007afc:	f000 fbdc 	bl	80082b8 <__mcmp>
 8007b00:	2800      	cmp	r0, #0
 8007b02:	f73f adbd 	bgt.w	8007680 <_dtoa_r+0x4d0>
 8007b06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b08:	9d00      	ldr	r5, [sp, #0]
 8007b0a:	ea6f 0a03 	mvn.w	sl, r3
 8007b0e:	f04f 0800 	mov.w	r8, #0
 8007b12:	4631      	mov	r1, r6
 8007b14:	4620      	mov	r0, r4
 8007b16:	f000 f991 	bl	8007e3c <_Bfree>
 8007b1a:	2f00      	cmp	r7, #0
 8007b1c:	f43f aeb4 	beq.w	8007888 <_dtoa_r+0x6d8>
 8007b20:	f1b8 0f00 	cmp.w	r8, #0
 8007b24:	d005      	beq.n	8007b32 <_dtoa_r+0x982>
 8007b26:	45b8      	cmp	r8, r7
 8007b28:	d003      	beq.n	8007b32 <_dtoa_r+0x982>
 8007b2a:	4641      	mov	r1, r8
 8007b2c:	4620      	mov	r0, r4
 8007b2e:	f000 f985 	bl	8007e3c <_Bfree>
 8007b32:	4639      	mov	r1, r7
 8007b34:	4620      	mov	r0, r4
 8007b36:	f000 f981 	bl	8007e3c <_Bfree>
 8007b3a:	e6a5      	b.n	8007888 <_dtoa_r+0x6d8>
 8007b3c:	2600      	movs	r6, #0
 8007b3e:	4637      	mov	r7, r6
 8007b40:	e7e1      	b.n	8007b06 <_dtoa_r+0x956>
 8007b42:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007b44:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007b48:	4637      	mov	r7, r6
 8007b4a:	e599      	b.n	8007680 <_dtoa_r+0x4d0>
 8007b4c:	9b08      	ldr	r3, [sp, #32]
 8007b4e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	f000 80fd 	beq.w	8007d52 <_dtoa_r+0xba2>
 8007b58:	2d00      	cmp	r5, #0
 8007b5a:	dd05      	ble.n	8007b68 <_dtoa_r+0x9b8>
 8007b5c:	4639      	mov	r1, r7
 8007b5e:	462a      	mov	r2, r5
 8007b60:	4620      	mov	r0, r4
 8007b62:	f000 fb3d 	bl	80081e0 <__lshift>
 8007b66:	4607      	mov	r7, r0
 8007b68:	9b06      	ldr	r3, [sp, #24]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d05c      	beq.n	8007c28 <_dtoa_r+0xa78>
 8007b6e:	6879      	ldr	r1, [r7, #4]
 8007b70:	4620      	mov	r0, r4
 8007b72:	f000 f923 	bl	8007dbc <_Balloc>
 8007b76:	4605      	mov	r5, r0
 8007b78:	b928      	cbnz	r0, 8007b86 <_dtoa_r+0x9d6>
 8007b7a:	4b80      	ldr	r3, [pc, #512]	; (8007d7c <_dtoa_r+0xbcc>)
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007b82:	f7ff bb2e 	b.w	80071e2 <_dtoa_r+0x32>
 8007b86:	693a      	ldr	r2, [r7, #16]
 8007b88:	3202      	adds	r2, #2
 8007b8a:	0092      	lsls	r2, r2, #2
 8007b8c:	f107 010c 	add.w	r1, r7, #12
 8007b90:	300c      	adds	r0, #12
 8007b92:	f000 f905 	bl	8007da0 <memcpy>
 8007b96:	2201      	movs	r2, #1
 8007b98:	4629      	mov	r1, r5
 8007b9a:	4620      	mov	r0, r4
 8007b9c:	f000 fb20 	bl	80081e0 <__lshift>
 8007ba0:	9b00      	ldr	r3, [sp, #0]
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	9301      	str	r3, [sp, #4]
 8007ba6:	9b00      	ldr	r3, [sp, #0]
 8007ba8:	444b      	add	r3, r9
 8007baa:	9307      	str	r3, [sp, #28]
 8007bac:	9b02      	ldr	r3, [sp, #8]
 8007bae:	f003 0301 	and.w	r3, r3, #1
 8007bb2:	46b8      	mov	r8, r7
 8007bb4:	9306      	str	r3, [sp, #24]
 8007bb6:	4607      	mov	r7, r0
 8007bb8:	9b01      	ldr	r3, [sp, #4]
 8007bba:	4631      	mov	r1, r6
 8007bbc:	3b01      	subs	r3, #1
 8007bbe:	4658      	mov	r0, fp
 8007bc0:	9302      	str	r3, [sp, #8]
 8007bc2:	f7ff fa69 	bl	8007098 <quorem>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	3330      	adds	r3, #48	; 0x30
 8007bca:	9004      	str	r0, [sp, #16]
 8007bcc:	4641      	mov	r1, r8
 8007bce:	4658      	mov	r0, fp
 8007bd0:	9308      	str	r3, [sp, #32]
 8007bd2:	f000 fb71 	bl	80082b8 <__mcmp>
 8007bd6:	463a      	mov	r2, r7
 8007bd8:	4681      	mov	r9, r0
 8007bda:	4631      	mov	r1, r6
 8007bdc:	4620      	mov	r0, r4
 8007bde:	f000 fb87 	bl	80082f0 <__mdiff>
 8007be2:	68c2      	ldr	r2, [r0, #12]
 8007be4:	9b08      	ldr	r3, [sp, #32]
 8007be6:	4605      	mov	r5, r0
 8007be8:	bb02      	cbnz	r2, 8007c2c <_dtoa_r+0xa7c>
 8007bea:	4601      	mov	r1, r0
 8007bec:	4658      	mov	r0, fp
 8007bee:	f000 fb63 	bl	80082b8 <__mcmp>
 8007bf2:	9b08      	ldr	r3, [sp, #32]
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	4629      	mov	r1, r5
 8007bf8:	4620      	mov	r0, r4
 8007bfa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007bfe:	f000 f91d 	bl	8007e3c <_Bfree>
 8007c02:	9b05      	ldr	r3, [sp, #20]
 8007c04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c06:	9d01      	ldr	r5, [sp, #4]
 8007c08:	ea43 0102 	orr.w	r1, r3, r2
 8007c0c:	9b06      	ldr	r3, [sp, #24]
 8007c0e:	430b      	orrs	r3, r1
 8007c10:	9b08      	ldr	r3, [sp, #32]
 8007c12:	d10d      	bne.n	8007c30 <_dtoa_r+0xa80>
 8007c14:	2b39      	cmp	r3, #57	; 0x39
 8007c16:	d029      	beq.n	8007c6c <_dtoa_r+0xabc>
 8007c18:	f1b9 0f00 	cmp.w	r9, #0
 8007c1c:	dd01      	ble.n	8007c22 <_dtoa_r+0xa72>
 8007c1e:	9b04      	ldr	r3, [sp, #16]
 8007c20:	3331      	adds	r3, #49	; 0x31
 8007c22:	9a02      	ldr	r2, [sp, #8]
 8007c24:	7013      	strb	r3, [r2, #0]
 8007c26:	e774      	b.n	8007b12 <_dtoa_r+0x962>
 8007c28:	4638      	mov	r0, r7
 8007c2a:	e7b9      	b.n	8007ba0 <_dtoa_r+0x9f0>
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	e7e2      	b.n	8007bf6 <_dtoa_r+0xa46>
 8007c30:	f1b9 0f00 	cmp.w	r9, #0
 8007c34:	db06      	blt.n	8007c44 <_dtoa_r+0xa94>
 8007c36:	9905      	ldr	r1, [sp, #20]
 8007c38:	ea41 0909 	orr.w	r9, r1, r9
 8007c3c:	9906      	ldr	r1, [sp, #24]
 8007c3e:	ea59 0101 	orrs.w	r1, r9, r1
 8007c42:	d120      	bne.n	8007c86 <_dtoa_r+0xad6>
 8007c44:	2a00      	cmp	r2, #0
 8007c46:	ddec      	ble.n	8007c22 <_dtoa_r+0xa72>
 8007c48:	4659      	mov	r1, fp
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	4620      	mov	r0, r4
 8007c4e:	9301      	str	r3, [sp, #4]
 8007c50:	f000 fac6 	bl	80081e0 <__lshift>
 8007c54:	4631      	mov	r1, r6
 8007c56:	4683      	mov	fp, r0
 8007c58:	f000 fb2e 	bl	80082b8 <__mcmp>
 8007c5c:	2800      	cmp	r0, #0
 8007c5e:	9b01      	ldr	r3, [sp, #4]
 8007c60:	dc02      	bgt.n	8007c68 <_dtoa_r+0xab8>
 8007c62:	d1de      	bne.n	8007c22 <_dtoa_r+0xa72>
 8007c64:	07da      	lsls	r2, r3, #31
 8007c66:	d5dc      	bpl.n	8007c22 <_dtoa_r+0xa72>
 8007c68:	2b39      	cmp	r3, #57	; 0x39
 8007c6a:	d1d8      	bne.n	8007c1e <_dtoa_r+0xa6e>
 8007c6c:	9a02      	ldr	r2, [sp, #8]
 8007c6e:	2339      	movs	r3, #57	; 0x39
 8007c70:	7013      	strb	r3, [r2, #0]
 8007c72:	462b      	mov	r3, r5
 8007c74:	461d      	mov	r5, r3
 8007c76:	3b01      	subs	r3, #1
 8007c78:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007c7c:	2a39      	cmp	r2, #57	; 0x39
 8007c7e:	d050      	beq.n	8007d22 <_dtoa_r+0xb72>
 8007c80:	3201      	adds	r2, #1
 8007c82:	701a      	strb	r2, [r3, #0]
 8007c84:	e745      	b.n	8007b12 <_dtoa_r+0x962>
 8007c86:	2a00      	cmp	r2, #0
 8007c88:	dd03      	ble.n	8007c92 <_dtoa_r+0xae2>
 8007c8a:	2b39      	cmp	r3, #57	; 0x39
 8007c8c:	d0ee      	beq.n	8007c6c <_dtoa_r+0xabc>
 8007c8e:	3301      	adds	r3, #1
 8007c90:	e7c7      	b.n	8007c22 <_dtoa_r+0xa72>
 8007c92:	9a01      	ldr	r2, [sp, #4]
 8007c94:	9907      	ldr	r1, [sp, #28]
 8007c96:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007c9a:	428a      	cmp	r2, r1
 8007c9c:	d02a      	beq.n	8007cf4 <_dtoa_r+0xb44>
 8007c9e:	4659      	mov	r1, fp
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	220a      	movs	r2, #10
 8007ca4:	4620      	mov	r0, r4
 8007ca6:	f000 f8eb 	bl	8007e80 <__multadd>
 8007caa:	45b8      	cmp	r8, r7
 8007cac:	4683      	mov	fp, r0
 8007cae:	f04f 0300 	mov.w	r3, #0
 8007cb2:	f04f 020a 	mov.w	r2, #10
 8007cb6:	4641      	mov	r1, r8
 8007cb8:	4620      	mov	r0, r4
 8007cba:	d107      	bne.n	8007ccc <_dtoa_r+0xb1c>
 8007cbc:	f000 f8e0 	bl	8007e80 <__multadd>
 8007cc0:	4680      	mov	r8, r0
 8007cc2:	4607      	mov	r7, r0
 8007cc4:	9b01      	ldr	r3, [sp, #4]
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	9301      	str	r3, [sp, #4]
 8007cca:	e775      	b.n	8007bb8 <_dtoa_r+0xa08>
 8007ccc:	f000 f8d8 	bl	8007e80 <__multadd>
 8007cd0:	4639      	mov	r1, r7
 8007cd2:	4680      	mov	r8, r0
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	220a      	movs	r2, #10
 8007cd8:	4620      	mov	r0, r4
 8007cda:	f000 f8d1 	bl	8007e80 <__multadd>
 8007cde:	4607      	mov	r7, r0
 8007ce0:	e7f0      	b.n	8007cc4 <_dtoa_r+0xb14>
 8007ce2:	f1b9 0f00 	cmp.w	r9, #0
 8007ce6:	9a00      	ldr	r2, [sp, #0]
 8007ce8:	bfcc      	ite	gt
 8007cea:	464d      	movgt	r5, r9
 8007cec:	2501      	movle	r5, #1
 8007cee:	4415      	add	r5, r2
 8007cf0:	f04f 0800 	mov.w	r8, #0
 8007cf4:	4659      	mov	r1, fp
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	4620      	mov	r0, r4
 8007cfa:	9301      	str	r3, [sp, #4]
 8007cfc:	f000 fa70 	bl	80081e0 <__lshift>
 8007d00:	4631      	mov	r1, r6
 8007d02:	4683      	mov	fp, r0
 8007d04:	f000 fad8 	bl	80082b8 <__mcmp>
 8007d08:	2800      	cmp	r0, #0
 8007d0a:	dcb2      	bgt.n	8007c72 <_dtoa_r+0xac2>
 8007d0c:	d102      	bne.n	8007d14 <_dtoa_r+0xb64>
 8007d0e:	9b01      	ldr	r3, [sp, #4]
 8007d10:	07db      	lsls	r3, r3, #31
 8007d12:	d4ae      	bmi.n	8007c72 <_dtoa_r+0xac2>
 8007d14:	462b      	mov	r3, r5
 8007d16:	461d      	mov	r5, r3
 8007d18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d1c:	2a30      	cmp	r2, #48	; 0x30
 8007d1e:	d0fa      	beq.n	8007d16 <_dtoa_r+0xb66>
 8007d20:	e6f7      	b.n	8007b12 <_dtoa_r+0x962>
 8007d22:	9a00      	ldr	r2, [sp, #0]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d1a5      	bne.n	8007c74 <_dtoa_r+0xac4>
 8007d28:	f10a 0a01 	add.w	sl, sl, #1
 8007d2c:	2331      	movs	r3, #49	; 0x31
 8007d2e:	e779      	b.n	8007c24 <_dtoa_r+0xa74>
 8007d30:	4b13      	ldr	r3, [pc, #76]	; (8007d80 <_dtoa_r+0xbd0>)
 8007d32:	f7ff baaf 	b.w	8007294 <_dtoa_r+0xe4>
 8007d36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	f47f aa86 	bne.w	800724a <_dtoa_r+0x9a>
 8007d3e:	4b11      	ldr	r3, [pc, #68]	; (8007d84 <_dtoa_r+0xbd4>)
 8007d40:	f7ff baa8 	b.w	8007294 <_dtoa_r+0xe4>
 8007d44:	f1b9 0f00 	cmp.w	r9, #0
 8007d48:	dc03      	bgt.n	8007d52 <_dtoa_r+0xba2>
 8007d4a:	9b05      	ldr	r3, [sp, #20]
 8007d4c:	2b02      	cmp	r3, #2
 8007d4e:	f73f aec9 	bgt.w	8007ae4 <_dtoa_r+0x934>
 8007d52:	9d00      	ldr	r5, [sp, #0]
 8007d54:	4631      	mov	r1, r6
 8007d56:	4658      	mov	r0, fp
 8007d58:	f7ff f99e 	bl	8007098 <quorem>
 8007d5c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007d60:	f805 3b01 	strb.w	r3, [r5], #1
 8007d64:	9a00      	ldr	r2, [sp, #0]
 8007d66:	1aaa      	subs	r2, r5, r2
 8007d68:	4591      	cmp	r9, r2
 8007d6a:	ddba      	ble.n	8007ce2 <_dtoa_r+0xb32>
 8007d6c:	4659      	mov	r1, fp
 8007d6e:	2300      	movs	r3, #0
 8007d70:	220a      	movs	r2, #10
 8007d72:	4620      	mov	r0, r4
 8007d74:	f000 f884 	bl	8007e80 <__multadd>
 8007d78:	4683      	mov	fp, r0
 8007d7a:	e7eb      	b.n	8007d54 <_dtoa_r+0xba4>
 8007d7c:	0800b423 	.word	0x0800b423
 8007d80:	0800b37c 	.word	0x0800b37c
 8007d84:	0800b3a0 	.word	0x0800b3a0

08007d88 <_localeconv_r>:
 8007d88:	4800      	ldr	r0, [pc, #0]	; (8007d8c <_localeconv_r+0x4>)
 8007d8a:	4770      	bx	lr
 8007d8c:	20000160 	.word	0x20000160

08007d90 <malloc>:
 8007d90:	4b02      	ldr	r3, [pc, #8]	; (8007d9c <malloc+0xc>)
 8007d92:	4601      	mov	r1, r0
 8007d94:	6818      	ldr	r0, [r3, #0]
 8007d96:	f000 bbef 	b.w	8008578 <_malloc_r>
 8007d9a:	bf00      	nop
 8007d9c:	2000000c 	.word	0x2000000c

08007da0 <memcpy>:
 8007da0:	440a      	add	r2, r1
 8007da2:	4291      	cmp	r1, r2
 8007da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007da8:	d100      	bne.n	8007dac <memcpy+0xc>
 8007daa:	4770      	bx	lr
 8007dac:	b510      	push	{r4, lr}
 8007dae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007db2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007db6:	4291      	cmp	r1, r2
 8007db8:	d1f9      	bne.n	8007dae <memcpy+0xe>
 8007dba:	bd10      	pop	{r4, pc}

08007dbc <_Balloc>:
 8007dbc:	b570      	push	{r4, r5, r6, lr}
 8007dbe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007dc0:	4604      	mov	r4, r0
 8007dc2:	460d      	mov	r5, r1
 8007dc4:	b976      	cbnz	r6, 8007de4 <_Balloc+0x28>
 8007dc6:	2010      	movs	r0, #16
 8007dc8:	f7ff ffe2 	bl	8007d90 <malloc>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	6260      	str	r0, [r4, #36]	; 0x24
 8007dd0:	b920      	cbnz	r0, 8007ddc <_Balloc+0x20>
 8007dd2:	4b18      	ldr	r3, [pc, #96]	; (8007e34 <_Balloc+0x78>)
 8007dd4:	4818      	ldr	r0, [pc, #96]	; (8007e38 <_Balloc+0x7c>)
 8007dd6:	2166      	movs	r1, #102	; 0x66
 8007dd8:	f000 fd94 	bl	8008904 <__assert_func>
 8007ddc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007de0:	6006      	str	r6, [r0, #0]
 8007de2:	60c6      	str	r6, [r0, #12]
 8007de4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007de6:	68f3      	ldr	r3, [r6, #12]
 8007de8:	b183      	cbz	r3, 8007e0c <_Balloc+0x50>
 8007dea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007dec:	68db      	ldr	r3, [r3, #12]
 8007dee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007df2:	b9b8      	cbnz	r0, 8007e24 <_Balloc+0x68>
 8007df4:	2101      	movs	r1, #1
 8007df6:	fa01 f605 	lsl.w	r6, r1, r5
 8007dfa:	1d72      	adds	r2, r6, #5
 8007dfc:	0092      	lsls	r2, r2, #2
 8007dfe:	4620      	mov	r0, r4
 8007e00:	f000 fb5a 	bl	80084b8 <_calloc_r>
 8007e04:	b160      	cbz	r0, 8007e20 <_Balloc+0x64>
 8007e06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007e0a:	e00e      	b.n	8007e2a <_Balloc+0x6e>
 8007e0c:	2221      	movs	r2, #33	; 0x21
 8007e0e:	2104      	movs	r1, #4
 8007e10:	4620      	mov	r0, r4
 8007e12:	f000 fb51 	bl	80084b8 <_calloc_r>
 8007e16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e18:	60f0      	str	r0, [r6, #12]
 8007e1a:	68db      	ldr	r3, [r3, #12]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d1e4      	bne.n	8007dea <_Balloc+0x2e>
 8007e20:	2000      	movs	r0, #0
 8007e22:	bd70      	pop	{r4, r5, r6, pc}
 8007e24:	6802      	ldr	r2, [r0, #0]
 8007e26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007e30:	e7f7      	b.n	8007e22 <_Balloc+0x66>
 8007e32:	bf00      	nop
 8007e34:	0800b3ad 	.word	0x0800b3ad
 8007e38:	0800b434 	.word	0x0800b434

08007e3c <_Bfree>:
 8007e3c:	b570      	push	{r4, r5, r6, lr}
 8007e3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007e40:	4605      	mov	r5, r0
 8007e42:	460c      	mov	r4, r1
 8007e44:	b976      	cbnz	r6, 8007e64 <_Bfree+0x28>
 8007e46:	2010      	movs	r0, #16
 8007e48:	f7ff ffa2 	bl	8007d90 <malloc>
 8007e4c:	4602      	mov	r2, r0
 8007e4e:	6268      	str	r0, [r5, #36]	; 0x24
 8007e50:	b920      	cbnz	r0, 8007e5c <_Bfree+0x20>
 8007e52:	4b09      	ldr	r3, [pc, #36]	; (8007e78 <_Bfree+0x3c>)
 8007e54:	4809      	ldr	r0, [pc, #36]	; (8007e7c <_Bfree+0x40>)
 8007e56:	218a      	movs	r1, #138	; 0x8a
 8007e58:	f000 fd54 	bl	8008904 <__assert_func>
 8007e5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e60:	6006      	str	r6, [r0, #0]
 8007e62:	60c6      	str	r6, [r0, #12]
 8007e64:	b13c      	cbz	r4, 8007e76 <_Bfree+0x3a>
 8007e66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007e68:	6862      	ldr	r2, [r4, #4]
 8007e6a:	68db      	ldr	r3, [r3, #12]
 8007e6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007e70:	6021      	str	r1, [r4, #0]
 8007e72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007e76:	bd70      	pop	{r4, r5, r6, pc}
 8007e78:	0800b3ad 	.word	0x0800b3ad
 8007e7c:	0800b434 	.word	0x0800b434

08007e80 <__multadd>:
 8007e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e84:	690e      	ldr	r6, [r1, #16]
 8007e86:	4607      	mov	r7, r0
 8007e88:	4698      	mov	r8, r3
 8007e8a:	460c      	mov	r4, r1
 8007e8c:	f101 0014 	add.w	r0, r1, #20
 8007e90:	2300      	movs	r3, #0
 8007e92:	6805      	ldr	r5, [r0, #0]
 8007e94:	b2a9      	uxth	r1, r5
 8007e96:	fb02 8101 	mla	r1, r2, r1, r8
 8007e9a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007e9e:	0c2d      	lsrs	r5, r5, #16
 8007ea0:	fb02 c505 	mla	r5, r2, r5, ip
 8007ea4:	b289      	uxth	r1, r1
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007eac:	429e      	cmp	r6, r3
 8007eae:	f840 1b04 	str.w	r1, [r0], #4
 8007eb2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007eb6:	dcec      	bgt.n	8007e92 <__multadd+0x12>
 8007eb8:	f1b8 0f00 	cmp.w	r8, #0
 8007ebc:	d022      	beq.n	8007f04 <__multadd+0x84>
 8007ebe:	68a3      	ldr	r3, [r4, #8]
 8007ec0:	42b3      	cmp	r3, r6
 8007ec2:	dc19      	bgt.n	8007ef8 <__multadd+0x78>
 8007ec4:	6861      	ldr	r1, [r4, #4]
 8007ec6:	4638      	mov	r0, r7
 8007ec8:	3101      	adds	r1, #1
 8007eca:	f7ff ff77 	bl	8007dbc <_Balloc>
 8007ece:	4605      	mov	r5, r0
 8007ed0:	b928      	cbnz	r0, 8007ede <__multadd+0x5e>
 8007ed2:	4602      	mov	r2, r0
 8007ed4:	4b0d      	ldr	r3, [pc, #52]	; (8007f0c <__multadd+0x8c>)
 8007ed6:	480e      	ldr	r0, [pc, #56]	; (8007f10 <__multadd+0x90>)
 8007ed8:	21b5      	movs	r1, #181	; 0xb5
 8007eda:	f000 fd13 	bl	8008904 <__assert_func>
 8007ede:	6922      	ldr	r2, [r4, #16]
 8007ee0:	3202      	adds	r2, #2
 8007ee2:	f104 010c 	add.w	r1, r4, #12
 8007ee6:	0092      	lsls	r2, r2, #2
 8007ee8:	300c      	adds	r0, #12
 8007eea:	f7ff ff59 	bl	8007da0 <memcpy>
 8007eee:	4621      	mov	r1, r4
 8007ef0:	4638      	mov	r0, r7
 8007ef2:	f7ff ffa3 	bl	8007e3c <_Bfree>
 8007ef6:	462c      	mov	r4, r5
 8007ef8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007efc:	3601      	adds	r6, #1
 8007efe:	f8c3 8014 	str.w	r8, [r3, #20]
 8007f02:	6126      	str	r6, [r4, #16]
 8007f04:	4620      	mov	r0, r4
 8007f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f0a:	bf00      	nop
 8007f0c:	0800b423 	.word	0x0800b423
 8007f10:	0800b434 	.word	0x0800b434

08007f14 <__hi0bits>:
 8007f14:	0c03      	lsrs	r3, r0, #16
 8007f16:	041b      	lsls	r3, r3, #16
 8007f18:	b9d3      	cbnz	r3, 8007f50 <__hi0bits+0x3c>
 8007f1a:	0400      	lsls	r0, r0, #16
 8007f1c:	2310      	movs	r3, #16
 8007f1e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007f22:	bf04      	itt	eq
 8007f24:	0200      	lsleq	r0, r0, #8
 8007f26:	3308      	addeq	r3, #8
 8007f28:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007f2c:	bf04      	itt	eq
 8007f2e:	0100      	lsleq	r0, r0, #4
 8007f30:	3304      	addeq	r3, #4
 8007f32:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007f36:	bf04      	itt	eq
 8007f38:	0080      	lsleq	r0, r0, #2
 8007f3a:	3302      	addeq	r3, #2
 8007f3c:	2800      	cmp	r0, #0
 8007f3e:	db05      	blt.n	8007f4c <__hi0bits+0x38>
 8007f40:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007f44:	f103 0301 	add.w	r3, r3, #1
 8007f48:	bf08      	it	eq
 8007f4a:	2320      	moveq	r3, #32
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	4770      	bx	lr
 8007f50:	2300      	movs	r3, #0
 8007f52:	e7e4      	b.n	8007f1e <__hi0bits+0xa>

08007f54 <__lo0bits>:
 8007f54:	6803      	ldr	r3, [r0, #0]
 8007f56:	f013 0207 	ands.w	r2, r3, #7
 8007f5a:	4601      	mov	r1, r0
 8007f5c:	d00b      	beq.n	8007f76 <__lo0bits+0x22>
 8007f5e:	07da      	lsls	r2, r3, #31
 8007f60:	d424      	bmi.n	8007fac <__lo0bits+0x58>
 8007f62:	0798      	lsls	r0, r3, #30
 8007f64:	bf49      	itett	mi
 8007f66:	085b      	lsrmi	r3, r3, #1
 8007f68:	089b      	lsrpl	r3, r3, #2
 8007f6a:	2001      	movmi	r0, #1
 8007f6c:	600b      	strmi	r3, [r1, #0]
 8007f6e:	bf5c      	itt	pl
 8007f70:	600b      	strpl	r3, [r1, #0]
 8007f72:	2002      	movpl	r0, #2
 8007f74:	4770      	bx	lr
 8007f76:	b298      	uxth	r0, r3
 8007f78:	b9b0      	cbnz	r0, 8007fa8 <__lo0bits+0x54>
 8007f7a:	0c1b      	lsrs	r3, r3, #16
 8007f7c:	2010      	movs	r0, #16
 8007f7e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007f82:	bf04      	itt	eq
 8007f84:	0a1b      	lsreq	r3, r3, #8
 8007f86:	3008      	addeq	r0, #8
 8007f88:	071a      	lsls	r2, r3, #28
 8007f8a:	bf04      	itt	eq
 8007f8c:	091b      	lsreq	r3, r3, #4
 8007f8e:	3004      	addeq	r0, #4
 8007f90:	079a      	lsls	r2, r3, #30
 8007f92:	bf04      	itt	eq
 8007f94:	089b      	lsreq	r3, r3, #2
 8007f96:	3002      	addeq	r0, #2
 8007f98:	07da      	lsls	r2, r3, #31
 8007f9a:	d403      	bmi.n	8007fa4 <__lo0bits+0x50>
 8007f9c:	085b      	lsrs	r3, r3, #1
 8007f9e:	f100 0001 	add.w	r0, r0, #1
 8007fa2:	d005      	beq.n	8007fb0 <__lo0bits+0x5c>
 8007fa4:	600b      	str	r3, [r1, #0]
 8007fa6:	4770      	bx	lr
 8007fa8:	4610      	mov	r0, r2
 8007faa:	e7e8      	b.n	8007f7e <__lo0bits+0x2a>
 8007fac:	2000      	movs	r0, #0
 8007fae:	4770      	bx	lr
 8007fb0:	2020      	movs	r0, #32
 8007fb2:	4770      	bx	lr

08007fb4 <__i2b>:
 8007fb4:	b510      	push	{r4, lr}
 8007fb6:	460c      	mov	r4, r1
 8007fb8:	2101      	movs	r1, #1
 8007fba:	f7ff feff 	bl	8007dbc <_Balloc>
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	b928      	cbnz	r0, 8007fce <__i2b+0x1a>
 8007fc2:	4b05      	ldr	r3, [pc, #20]	; (8007fd8 <__i2b+0x24>)
 8007fc4:	4805      	ldr	r0, [pc, #20]	; (8007fdc <__i2b+0x28>)
 8007fc6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007fca:	f000 fc9b 	bl	8008904 <__assert_func>
 8007fce:	2301      	movs	r3, #1
 8007fd0:	6144      	str	r4, [r0, #20]
 8007fd2:	6103      	str	r3, [r0, #16]
 8007fd4:	bd10      	pop	{r4, pc}
 8007fd6:	bf00      	nop
 8007fd8:	0800b423 	.word	0x0800b423
 8007fdc:	0800b434 	.word	0x0800b434

08007fe0 <__multiply>:
 8007fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fe4:	4614      	mov	r4, r2
 8007fe6:	690a      	ldr	r2, [r1, #16]
 8007fe8:	6923      	ldr	r3, [r4, #16]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	bfb8      	it	lt
 8007fee:	460b      	movlt	r3, r1
 8007ff0:	460d      	mov	r5, r1
 8007ff2:	bfbc      	itt	lt
 8007ff4:	4625      	movlt	r5, r4
 8007ff6:	461c      	movlt	r4, r3
 8007ff8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007ffc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008000:	68ab      	ldr	r3, [r5, #8]
 8008002:	6869      	ldr	r1, [r5, #4]
 8008004:	eb0a 0709 	add.w	r7, sl, r9
 8008008:	42bb      	cmp	r3, r7
 800800a:	b085      	sub	sp, #20
 800800c:	bfb8      	it	lt
 800800e:	3101      	addlt	r1, #1
 8008010:	f7ff fed4 	bl	8007dbc <_Balloc>
 8008014:	b930      	cbnz	r0, 8008024 <__multiply+0x44>
 8008016:	4602      	mov	r2, r0
 8008018:	4b42      	ldr	r3, [pc, #264]	; (8008124 <__multiply+0x144>)
 800801a:	4843      	ldr	r0, [pc, #268]	; (8008128 <__multiply+0x148>)
 800801c:	f240 115d 	movw	r1, #349	; 0x15d
 8008020:	f000 fc70 	bl	8008904 <__assert_func>
 8008024:	f100 0614 	add.w	r6, r0, #20
 8008028:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800802c:	4633      	mov	r3, r6
 800802e:	2200      	movs	r2, #0
 8008030:	4543      	cmp	r3, r8
 8008032:	d31e      	bcc.n	8008072 <__multiply+0x92>
 8008034:	f105 0c14 	add.w	ip, r5, #20
 8008038:	f104 0314 	add.w	r3, r4, #20
 800803c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008040:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008044:	9202      	str	r2, [sp, #8]
 8008046:	ebac 0205 	sub.w	r2, ip, r5
 800804a:	3a15      	subs	r2, #21
 800804c:	f022 0203 	bic.w	r2, r2, #3
 8008050:	3204      	adds	r2, #4
 8008052:	f105 0115 	add.w	r1, r5, #21
 8008056:	458c      	cmp	ip, r1
 8008058:	bf38      	it	cc
 800805a:	2204      	movcc	r2, #4
 800805c:	9201      	str	r2, [sp, #4]
 800805e:	9a02      	ldr	r2, [sp, #8]
 8008060:	9303      	str	r3, [sp, #12]
 8008062:	429a      	cmp	r2, r3
 8008064:	d808      	bhi.n	8008078 <__multiply+0x98>
 8008066:	2f00      	cmp	r7, #0
 8008068:	dc55      	bgt.n	8008116 <__multiply+0x136>
 800806a:	6107      	str	r7, [r0, #16]
 800806c:	b005      	add	sp, #20
 800806e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008072:	f843 2b04 	str.w	r2, [r3], #4
 8008076:	e7db      	b.n	8008030 <__multiply+0x50>
 8008078:	f8b3 a000 	ldrh.w	sl, [r3]
 800807c:	f1ba 0f00 	cmp.w	sl, #0
 8008080:	d020      	beq.n	80080c4 <__multiply+0xe4>
 8008082:	f105 0e14 	add.w	lr, r5, #20
 8008086:	46b1      	mov	r9, r6
 8008088:	2200      	movs	r2, #0
 800808a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800808e:	f8d9 b000 	ldr.w	fp, [r9]
 8008092:	b2a1      	uxth	r1, r4
 8008094:	fa1f fb8b 	uxth.w	fp, fp
 8008098:	fb0a b101 	mla	r1, sl, r1, fp
 800809c:	4411      	add	r1, r2
 800809e:	f8d9 2000 	ldr.w	r2, [r9]
 80080a2:	0c24      	lsrs	r4, r4, #16
 80080a4:	0c12      	lsrs	r2, r2, #16
 80080a6:	fb0a 2404 	mla	r4, sl, r4, r2
 80080aa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80080ae:	b289      	uxth	r1, r1
 80080b0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80080b4:	45f4      	cmp	ip, lr
 80080b6:	f849 1b04 	str.w	r1, [r9], #4
 80080ba:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80080be:	d8e4      	bhi.n	800808a <__multiply+0xaa>
 80080c0:	9901      	ldr	r1, [sp, #4]
 80080c2:	5072      	str	r2, [r6, r1]
 80080c4:	9a03      	ldr	r2, [sp, #12]
 80080c6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80080ca:	3304      	adds	r3, #4
 80080cc:	f1b9 0f00 	cmp.w	r9, #0
 80080d0:	d01f      	beq.n	8008112 <__multiply+0x132>
 80080d2:	6834      	ldr	r4, [r6, #0]
 80080d4:	f105 0114 	add.w	r1, r5, #20
 80080d8:	46b6      	mov	lr, r6
 80080da:	f04f 0a00 	mov.w	sl, #0
 80080de:	880a      	ldrh	r2, [r1, #0]
 80080e0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80080e4:	fb09 b202 	mla	r2, r9, r2, fp
 80080e8:	4492      	add	sl, r2
 80080ea:	b2a4      	uxth	r4, r4
 80080ec:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80080f0:	f84e 4b04 	str.w	r4, [lr], #4
 80080f4:	f851 4b04 	ldr.w	r4, [r1], #4
 80080f8:	f8be 2000 	ldrh.w	r2, [lr]
 80080fc:	0c24      	lsrs	r4, r4, #16
 80080fe:	fb09 2404 	mla	r4, r9, r4, r2
 8008102:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008106:	458c      	cmp	ip, r1
 8008108:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800810c:	d8e7      	bhi.n	80080de <__multiply+0xfe>
 800810e:	9a01      	ldr	r2, [sp, #4]
 8008110:	50b4      	str	r4, [r6, r2]
 8008112:	3604      	adds	r6, #4
 8008114:	e7a3      	b.n	800805e <__multiply+0x7e>
 8008116:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800811a:	2b00      	cmp	r3, #0
 800811c:	d1a5      	bne.n	800806a <__multiply+0x8a>
 800811e:	3f01      	subs	r7, #1
 8008120:	e7a1      	b.n	8008066 <__multiply+0x86>
 8008122:	bf00      	nop
 8008124:	0800b423 	.word	0x0800b423
 8008128:	0800b434 	.word	0x0800b434

0800812c <__pow5mult>:
 800812c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008130:	4615      	mov	r5, r2
 8008132:	f012 0203 	ands.w	r2, r2, #3
 8008136:	4606      	mov	r6, r0
 8008138:	460f      	mov	r7, r1
 800813a:	d007      	beq.n	800814c <__pow5mult+0x20>
 800813c:	4c25      	ldr	r4, [pc, #148]	; (80081d4 <__pow5mult+0xa8>)
 800813e:	3a01      	subs	r2, #1
 8008140:	2300      	movs	r3, #0
 8008142:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008146:	f7ff fe9b 	bl	8007e80 <__multadd>
 800814a:	4607      	mov	r7, r0
 800814c:	10ad      	asrs	r5, r5, #2
 800814e:	d03d      	beq.n	80081cc <__pow5mult+0xa0>
 8008150:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008152:	b97c      	cbnz	r4, 8008174 <__pow5mult+0x48>
 8008154:	2010      	movs	r0, #16
 8008156:	f7ff fe1b 	bl	8007d90 <malloc>
 800815a:	4602      	mov	r2, r0
 800815c:	6270      	str	r0, [r6, #36]	; 0x24
 800815e:	b928      	cbnz	r0, 800816c <__pow5mult+0x40>
 8008160:	4b1d      	ldr	r3, [pc, #116]	; (80081d8 <__pow5mult+0xac>)
 8008162:	481e      	ldr	r0, [pc, #120]	; (80081dc <__pow5mult+0xb0>)
 8008164:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008168:	f000 fbcc 	bl	8008904 <__assert_func>
 800816c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008170:	6004      	str	r4, [r0, #0]
 8008172:	60c4      	str	r4, [r0, #12]
 8008174:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008178:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800817c:	b94c      	cbnz	r4, 8008192 <__pow5mult+0x66>
 800817e:	f240 2171 	movw	r1, #625	; 0x271
 8008182:	4630      	mov	r0, r6
 8008184:	f7ff ff16 	bl	8007fb4 <__i2b>
 8008188:	2300      	movs	r3, #0
 800818a:	f8c8 0008 	str.w	r0, [r8, #8]
 800818e:	4604      	mov	r4, r0
 8008190:	6003      	str	r3, [r0, #0]
 8008192:	f04f 0900 	mov.w	r9, #0
 8008196:	07eb      	lsls	r3, r5, #31
 8008198:	d50a      	bpl.n	80081b0 <__pow5mult+0x84>
 800819a:	4639      	mov	r1, r7
 800819c:	4622      	mov	r2, r4
 800819e:	4630      	mov	r0, r6
 80081a0:	f7ff ff1e 	bl	8007fe0 <__multiply>
 80081a4:	4639      	mov	r1, r7
 80081a6:	4680      	mov	r8, r0
 80081a8:	4630      	mov	r0, r6
 80081aa:	f7ff fe47 	bl	8007e3c <_Bfree>
 80081ae:	4647      	mov	r7, r8
 80081b0:	106d      	asrs	r5, r5, #1
 80081b2:	d00b      	beq.n	80081cc <__pow5mult+0xa0>
 80081b4:	6820      	ldr	r0, [r4, #0]
 80081b6:	b938      	cbnz	r0, 80081c8 <__pow5mult+0x9c>
 80081b8:	4622      	mov	r2, r4
 80081ba:	4621      	mov	r1, r4
 80081bc:	4630      	mov	r0, r6
 80081be:	f7ff ff0f 	bl	8007fe0 <__multiply>
 80081c2:	6020      	str	r0, [r4, #0]
 80081c4:	f8c0 9000 	str.w	r9, [r0]
 80081c8:	4604      	mov	r4, r0
 80081ca:	e7e4      	b.n	8008196 <__pow5mult+0x6a>
 80081cc:	4638      	mov	r0, r7
 80081ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081d2:	bf00      	nop
 80081d4:	0800b588 	.word	0x0800b588
 80081d8:	0800b3ad 	.word	0x0800b3ad
 80081dc:	0800b434 	.word	0x0800b434

080081e0 <__lshift>:
 80081e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081e4:	460c      	mov	r4, r1
 80081e6:	6849      	ldr	r1, [r1, #4]
 80081e8:	6923      	ldr	r3, [r4, #16]
 80081ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80081ee:	68a3      	ldr	r3, [r4, #8]
 80081f0:	4607      	mov	r7, r0
 80081f2:	4691      	mov	r9, r2
 80081f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80081f8:	f108 0601 	add.w	r6, r8, #1
 80081fc:	42b3      	cmp	r3, r6
 80081fe:	db0b      	blt.n	8008218 <__lshift+0x38>
 8008200:	4638      	mov	r0, r7
 8008202:	f7ff fddb 	bl	8007dbc <_Balloc>
 8008206:	4605      	mov	r5, r0
 8008208:	b948      	cbnz	r0, 800821e <__lshift+0x3e>
 800820a:	4602      	mov	r2, r0
 800820c:	4b28      	ldr	r3, [pc, #160]	; (80082b0 <__lshift+0xd0>)
 800820e:	4829      	ldr	r0, [pc, #164]	; (80082b4 <__lshift+0xd4>)
 8008210:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008214:	f000 fb76 	bl	8008904 <__assert_func>
 8008218:	3101      	adds	r1, #1
 800821a:	005b      	lsls	r3, r3, #1
 800821c:	e7ee      	b.n	80081fc <__lshift+0x1c>
 800821e:	2300      	movs	r3, #0
 8008220:	f100 0114 	add.w	r1, r0, #20
 8008224:	f100 0210 	add.w	r2, r0, #16
 8008228:	4618      	mov	r0, r3
 800822a:	4553      	cmp	r3, sl
 800822c:	db33      	blt.n	8008296 <__lshift+0xb6>
 800822e:	6920      	ldr	r0, [r4, #16]
 8008230:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008234:	f104 0314 	add.w	r3, r4, #20
 8008238:	f019 091f 	ands.w	r9, r9, #31
 800823c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008240:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008244:	d02b      	beq.n	800829e <__lshift+0xbe>
 8008246:	f1c9 0e20 	rsb	lr, r9, #32
 800824a:	468a      	mov	sl, r1
 800824c:	2200      	movs	r2, #0
 800824e:	6818      	ldr	r0, [r3, #0]
 8008250:	fa00 f009 	lsl.w	r0, r0, r9
 8008254:	4302      	orrs	r2, r0
 8008256:	f84a 2b04 	str.w	r2, [sl], #4
 800825a:	f853 2b04 	ldr.w	r2, [r3], #4
 800825e:	459c      	cmp	ip, r3
 8008260:	fa22 f20e 	lsr.w	r2, r2, lr
 8008264:	d8f3      	bhi.n	800824e <__lshift+0x6e>
 8008266:	ebac 0304 	sub.w	r3, ip, r4
 800826a:	3b15      	subs	r3, #21
 800826c:	f023 0303 	bic.w	r3, r3, #3
 8008270:	3304      	adds	r3, #4
 8008272:	f104 0015 	add.w	r0, r4, #21
 8008276:	4584      	cmp	ip, r0
 8008278:	bf38      	it	cc
 800827a:	2304      	movcc	r3, #4
 800827c:	50ca      	str	r2, [r1, r3]
 800827e:	b10a      	cbz	r2, 8008284 <__lshift+0xa4>
 8008280:	f108 0602 	add.w	r6, r8, #2
 8008284:	3e01      	subs	r6, #1
 8008286:	4638      	mov	r0, r7
 8008288:	612e      	str	r6, [r5, #16]
 800828a:	4621      	mov	r1, r4
 800828c:	f7ff fdd6 	bl	8007e3c <_Bfree>
 8008290:	4628      	mov	r0, r5
 8008292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008296:	f842 0f04 	str.w	r0, [r2, #4]!
 800829a:	3301      	adds	r3, #1
 800829c:	e7c5      	b.n	800822a <__lshift+0x4a>
 800829e:	3904      	subs	r1, #4
 80082a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80082a4:	f841 2f04 	str.w	r2, [r1, #4]!
 80082a8:	459c      	cmp	ip, r3
 80082aa:	d8f9      	bhi.n	80082a0 <__lshift+0xc0>
 80082ac:	e7ea      	b.n	8008284 <__lshift+0xa4>
 80082ae:	bf00      	nop
 80082b0:	0800b423 	.word	0x0800b423
 80082b4:	0800b434 	.word	0x0800b434

080082b8 <__mcmp>:
 80082b8:	b530      	push	{r4, r5, lr}
 80082ba:	6902      	ldr	r2, [r0, #16]
 80082bc:	690c      	ldr	r4, [r1, #16]
 80082be:	1b12      	subs	r2, r2, r4
 80082c0:	d10e      	bne.n	80082e0 <__mcmp+0x28>
 80082c2:	f100 0314 	add.w	r3, r0, #20
 80082c6:	3114      	adds	r1, #20
 80082c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80082cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80082d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80082d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80082d8:	42a5      	cmp	r5, r4
 80082da:	d003      	beq.n	80082e4 <__mcmp+0x2c>
 80082dc:	d305      	bcc.n	80082ea <__mcmp+0x32>
 80082de:	2201      	movs	r2, #1
 80082e0:	4610      	mov	r0, r2
 80082e2:	bd30      	pop	{r4, r5, pc}
 80082e4:	4283      	cmp	r3, r0
 80082e6:	d3f3      	bcc.n	80082d0 <__mcmp+0x18>
 80082e8:	e7fa      	b.n	80082e0 <__mcmp+0x28>
 80082ea:	f04f 32ff 	mov.w	r2, #4294967295
 80082ee:	e7f7      	b.n	80082e0 <__mcmp+0x28>

080082f0 <__mdiff>:
 80082f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082f4:	460c      	mov	r4, r1
 80082f6:	4606      	mov	r6, r0
 80082f8:	4611      	mov	r1, r2
 80082fa:	4620      	mov	r0, r4
 80082fc:	4617      	mov	r7, r2
 80082fe:	f7ff ffdb 	bl	80082b8 <__mcmp>
 8008302:	1e05      	subs	r5, r0, #0
 8008304:	d110      	bne.n	8008328 <__mdiff+0x38>
 8008306:	4629      	mov	r1, r5
 8008308:	4630      	mov	r0, r6
 800830a:	f7ff fd57 	bl	8007dbc <_Balloc>
 800830e:	b930      	cbnz	r0, 800831e <__mdiff+0x2e>
 8008310:	4b39      	ldr	r3, [pc, #228]	; (80083f8 <__mdiff+0x108>)
 8008312:	4602      	mov	r2, r0
 8008314:	f240 2132 	movw	r1, #562	; 0x232
 8008318:	4838      	ldr	r0, [pc, #224]	; (80083fc <__mdiff+0x10c>)
 800831a:	f000 faf3 	bl	8008904 <__assert_func>
 800831e:	2301      	movs	r3, #1
 8008320:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008324:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008328:	bfa4      	itt	ge
 800832a:	463b      	movge	r3, r7
 800832c:	4627      	movge	r7, r4
 800832e:	4630      	mov	r0, r6
 8008330:	6879      	ldr	r1, [r7, #4]
 8008332:	bfa6      	itte	ge
 8008334:	461c      	movge	r4, r3
 8008336:	2500      	movge	r5, #0
 8008338:	2501      	movlt	r5, #1
 800833a:	f7ff fd3f 	bl	8007dbc <_Balloc>
 800833e:	b920      	cbnz	r0, 800834a <__mdiff+0x5a>
 8008340:	4b2d      	ldr	r3, [pc, #180]	; (80083f8 <__mdiff+0x108>)
 8008342:	4602      	mov	r2, r0
 8008344:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008348:	e7e6      	b.n	8008318 <__mdiff+0x28>
 800834a:	693e      	ldr	r6, [r7, #16]
 800834c:	60c5      	str	r5, [r0, #12]
 800834e:	6925      	ldr	r5, [r4, #16]
 8008350:	f107 0114 	add.w	r1, r7, #20
 8008354:	f104 0914 	add.w	r9, r4, #20
 8008358:	f100 0e14 	add.w	lr, r0, #20
 800835c:	f107 0210 	add.w	r2, r7, #16
 8008360:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008364:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008368:	46f2      	mov	sl, lr
 800836a:	2700      	movs	r7, #0
 800836c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008370:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008374:	fa1f f883 	uxth.w	r8, r3
 8008378:	fa17 f78b 	uxtah	r7, r7, fp
 800837c:	0c1b      	lsrs	r3, r3, #16
 800837e:	eba7 0808 	sub.w	r8, r7, r8
 8008382:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008386:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800838a:	fa1f f888 	uxth.w	r8, r8
 800838e:	141f      	asrs	r7, r3, #16
 8008390:	454d      	cmp	r5, r9
 8008392:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008396:	f84a 3b04 	str.w	r3, [sl], #4
 800839a:	d8e7      	bhi.n	800836c <__mdiff+0x7c>
 800839c:	1b2b      	subs	r3, r5, r4
 800839e:	3b15      	subs	r3, #21
 80083a0:	f023 0303 	bic.w	r3, r3, #3
 80083a4:	3304      	adds	r3, #4
 80083a6:	3415      	adds	r4, #21
 80083a8:	42a5      	cmp	r5, r4
 80083aa:	bf38      	it	cc
 80083ac:	2304      	movcc	r3, #4
 80083ae:	4419      	add	r1, r3
 80083b0:	4473      	add	r3, lr
 80083b2:	469e      	mov	lr, r3
 80083b4:	460d      	mov	r5, r1
 80083b6:	4565      	cmp	r5, ip
 80083b8:	d30e      	bcc.n	80083d8 <__mdiff+0xe8>
 80083ba:	f10c 0203 	add.w	r2, ip, #3
 80083be:	1a52      	subs	r2, r2, r1
 80083c0:	f022 0203 	bic.w	r2, r2, #3
 80083c4:	3903      	subs	r1, #3
 80083c6:	458c      	cmp	ip, r1
 80083c8:	bf38      	it	cc
 80083ca:	2200      	movcc	r2, #0
 80083cc:	441a      	add	r2, r3
 80083ce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80083d2:	b17b      	cbz	r3, 80083f4 <__mdiff+0x104>
 80083d4:	6106      	str	r6, [r0, #16]
 80083d6:	e7a5      	b.n	8008324 <__mdiff+0x34>
 80083d8:	f855 8b04 	ldr.w	r8, [r5], #4
 80083dc:	fa17 f488 	uxtah	r4, r7, r8
 80083e0:	1422      	asrs	r2, r4, #16
 80083e2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80083e6:	b2a4      	uxth	r4, r4
 80083e8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80083ec:	f84e 4b04 	str.w	r4, [lr], #4
 80083f0:	1417      	asrs	r7, r2, #16
 80083f2:	e7e0      	b.n	80083b6 <__mdiff+0xc6>
 80083f4:	3e01      	subs	r6, #1
 80083f6:	e7ea      	b.n	80083ce <__mdiff+0xde>
 80083f8:	0800b423 	.word	0x0800b423
 80083fc:	0800b434 	.word	0x0800b434

08008400 <__d2b>:
 8008400:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008404:	4689      	mov	r9, r1
 8008406:	2101      	movs	r1, #1
 8008408:	ec57 6b10 	vmov	r6, r7, d0
 800840c:	4690      	mov	r8, r2
 800840e:	f7ff fcd5 	bl	8007dbc <_Balloc>
 8008412:	4604      	mov	r4, r0
 8008414:	b930      	cbnz	r0, 8008424 <__d2b+0x24>
 8008416:	4602      	mov	r2, r0
 8008418:	4b25      	ldr	r3, [pc, #148]	; (80084b0 <__d2b+0xb0>)
 800841a:	4826      	ldr	r0, [pc, #152]	; (80084b4 <__d2b+0xb4>)
 800841c:	f240 310a 	movw	r1, #778	; 0x30a
 8008420:	f000 fa70 	bl	8008904 <__assert_func>
 8008424:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008428:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800842c:	bb35      	cbnz	r5, 800847c <__d2b+0x7c>
 800842e:	2e00      	cmp	r6, #0
 8008430:	9301      	str	r3, [sp, #4]
 8008432:	d028      	beq.n	8008486 <__d2b+0x86>
 8008434:	4668      	mov	r0, sp
 8008436:	9600      	str	r6, [sp, #0]
 8008438:	f7ff fd8c 	bl	8007f54 <__lo0bits>
 800843c:	9900      	ldr	r1, [sp, #0]
 800843e:	b300      	cbz	r0, 8008482 <__d2b+0x82>
 8008440:	9a01      	ldr	r2, [sp, #4]
 8008442:	f1c0 0320 	rsb	r3, r0, #32
 8008446:	fa02 f303 	lsl.w	r3, r2, r3
 800844a:	430b      	orrs	r3, r1
 800844c:	40c2      	lsrs	r2, r0
 800844e:	6163      	str	r3, [r4, #20]
 8008450:	9201      	str	r2, [sp, #4]
 8008452:	9b01      	ldr	r3, [sp, #4]
 8008454:	61a3      	str	r3, [r4, #24]
 8008456:	2b00      	cmp	r3, #0
 8008458:	bf14      	ite	ne
 800845a:	2202      	movne	r2, #2
 800845c:	2201      	moveq	r2, #1
 800845e:	6122      	str	r2, [r4, #16]
 8008460:	b1d5      	cbz	r5, 8008498 <__d2b+0x98>
 8008462:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008466:	4405      	add	r5, r0
 8008468:	f8c9 5000 	str.w	r5, [r9]
 800846c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008470:	f8c8 0000 	str.w	r0, [r8]
 8008474:	4620      	mov	r0, r4
 8008476:	b003      	add	sp, #12
 8008478:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800847c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008480:	e7d5      	b.n	800842e <__d2b+0x2e>
 8008482:	6161      	str	r1, [r4, #20]
 8008484:	e7e5      	b.n	8008452 <__d2b+0x52>
 8008486:	a801      	add	r0, sp, #4
 8008488:	f7ff fd64 	bl	8007f54 <__lo0bits>
 800848c:	9b01      	ldr	r3, [sp, #4]
 800848e:	6163      	str	r3, [r4, #20]
 8008490:	2201      	movs	r2, #1
 8008492:	6122      	str	r2, [r4, #16]
 8008494:	3020      	adds	r0, #32
 8008496:	e7e3      	b.n	8008460 <__d2b+0x60>
 8008498:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800849c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80084a0:	f8c9 0000 	str.w	r0, [r9]
 80084a4:	6918      	ldr	r0, [r3, #16]
 80084a6:	f7ff fd35 	bl	8007f14 <__hi0bits>
 80084aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80084ae:	e7df      	b.n	8008470 <__d2b+0x70>
 80084b0:	0800b423 	.word	0x0800b423
 80084b4:	0800b434 	.word	0x0800b434

080084b8 <_calloc_r>:
 80084b8:	b513      	push	{r0, r1, r4, lr}
 80084ba:	434a      	muls	r2, r1
 80084bc:	4611      	mov	r1, r2
 80084be:	9201      	str	r2, [sp, #4]
 80084c0:	f000 f85a 	bl	8008578 <_malloc_r>
 80084c4:	4604      	mov	r4, r0
 80084c6:	b118      	cbz	r0, 80084d0 <_calloc_r+0x18>
 80084c8:	9a01      	ldr	r2, [sp, #4]
 80084ca:	2100      	movs	r1, #0
 80084cc:	f7fe f952 	bl	8006774 <memset>
 80084d0:	4620      	mov	r0, r4
 80084d2:	b002      	add	sp, #8
 80084d4:	bd10      	pop	{r4, pc}
	...

080084d8 <_free_r>:
 80084d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084da:	2900      	cmp	r1, #0
 80084dc:	d048      	beq.n	8008570 <_free_r+0x98>
 80084de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084e2:	9001      	str	r0, [sp, #4]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	f1a1 0404 	sub.w	r4, r1, #4
 80084ea:	bfb8      	it	lt
 80084ec:	18e4      	addlt	r4, r4, r3
 80084ee:	f000 fa65 	bl	80089bc <__malloc_lock>
 80084f2:	4a20      	ldr	r2, [pc, #128]	; (8008574 <_free_r+0x9c>)
 80084f4:	9801      	ldr	r0, [sp, #4]
 80084f6:	6813      	ldr	r3, [r2, #0]
 80084f8:	4615      	mov	r5, r2
 80084fa:	b933      	cbnz	r3, 800850a <_free_r+0x32>
 80084fc:	6063      	str	r3, [r4, #4]
 80084fe:	6014      	str	r4, [r2, #0]
 8008500:	b003      	add	sp, #12
 8008502:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008506:	f000 ba5f 	b.w	80089c8 <__malloc_unlock>
 800850a:	42a3      	cmp	r3, r4
 800850c:	d90b      	bls.n	8008526 <_free_r+0x4e>
 800850e:	6821      	ldr	r1, [r4, #0]
 8008510:	1862      	adds	r2, r4, r1
 8008512:	4293      	cmp	r3, r2
 8008514:	bf04      	itt	eq
 8008516:	681a      	ldreq	r2, [r3, #0]
 8008518:	685b      	ldreq	r3, [r3, #4]
 800851a:	6063      	str	r3, [r4, #4]
 800851c:	bf04      	itt	eq
 800851e:	1852      	addeq	r2, r2, r1
 8008520:	6022      	streq	r2, [r4, #0]
 8008522:	602c      	str	r4, [r5, #0]
 8008524:	e7ec      	b.n	8008500 <_free_r+0x28>
 8008526:	461a      	mov	r2, r3
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	b10b      	cbz	r3, 8008530 <_free_r+0x58>
 800852c:	42a3      	cmp	r3, r4
 800852e:	d9fa      	bls.n	8008526 <_free_r+0x4e>
 8008530:	6811      	ldr	r1, [r2, #0]
 8008532:	1855      	adds	r5, r2, r1
 8008534:	42a5      	cmp	r5, r4
 8008536:	d10b      	bne.n	8008550 <_free_r+0x78>
 8008538:	6824      	ldr	r4, [r4, #0]
 800853a:	4421      	add	r1, r4
 800853c:	1854      	adds	r4, r2, r1
 800853e:	42a3      	cmp	r3, r4
 8008540:	6011      	str	r1, [r2, #0]
 8008542:	d1dd      	bne.n	8008500 <_free_r+0x28>
 8008544:	681c      	ldr	r4, [r3, #0]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	6053      	str	r3, [r2, #4]
 800854a:	4421      	add	r1, r4
 800854c:	6011      	str	r1, [r2, #0]
 800854e:	e7d7      	b.n	8008500 <_free_r+0x28>
 8008550:	d902      	bls.n	8008558 <_free_r+0x80>
 8008552:	230c      	movs	r3, #12
 8008554:	6003      	str	r3, [r0, #0]
 8008556:	e7d3      	b.n	8008500 <_free_r+0x28>
 8008558:	6825      	ldr	r5, [r4, #0]
 800855a:	1961      	adds	r1, r4, r5
 800855c:	428b      	cmp	r3, r1
 800855e:	bf04      	itt	eq
 8008560:	6819      	ldreq	r1, [r3, #0]
 8008562:	685b      	ldreq	r3, [r3, #4]
 8008564:	6063      	str	r3, [r4, #4]
 8008566:	bf04      	itt	eq
 8008568:	1949      	addeq	r1, r1, r5
 800856a:	6021      	streq	r1, [r4, #0]
 800856c:	6054      	str	r4, [r2, #4]
 800856e:	e7c7      	b.n	8008500 <_free_r+0x28>
 8008570:	b003      	add	sp, #12
 8008572:	bd30      	pop	{r4, r5, pc}
 8008574:	2000020c 	.word	0x2000020c

08008578 <_malloc_r>:
 8008578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800857a:	1ccd      	adds	r5, r1, #3
 800857c:	f025 0503 	bic.w	r5, r5, #3
 8008580:	3508      	adds	r5, #8
 8008582:	2d0c      	cmp	r5, #12
 8008584:	bf38      	it	cc
 8008586:	250c      	movcc	r5, #12
 8008588:	2d00      	cmp	r5, #0
 800858a:	4606      	mov	r6, r0
 800858c:	db01      	blt.n	8008592 <_malloc_r+0x1a>
 800858e:	42a9      	cmp	r1, r5
 8008590:	d903      	bls.n	800859a <_malloc_r+0x22>
 8008592:	230c      	movs	r3, #12
 8008594:	6033      	str	r3, [r6, #0]
 8008596:	2000      	movs	r0, #0
 8008598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800859a:	f000 fa0f 	bl	80089bc <__malloc_lock>
 800859e:	4921      	ldr	r1, [pc, #132]	; (8008624 <_malloc_r+0xac>)
 80085a0:	680a      	ldr	r2, [r1, #0]
 80085a2:	4614      	mov	r4, r2
 80085a4:	b99c      	cbnz	r4, 80085ce <_malloc_r+0x56>
 80085a6:	4f20      	ldr	r7, [pc, #128]	; (8008628 <_malloc_r+0xb0>)
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	b923      	cbnz	r3, 80085b6 <_malloc_r+0x3e>
 80085ac:	4621      	mov	r1, r4
 80085ae:	4630      	mov	r0, r6
 80085b0:	f000 f998 	bl	80088e4 <_sbrk_r>
 80085b4:	6038      	str	r0, [r7, #0]
 80085b6:	4629      	mov	r1, r5
 80085b8:	4630      	mov	r0, r6
 80085ba:	f000 f993 	bl	80088e4 <_sbrk_r>
 80085be:	1c43      	adds	r3, r0, #1
 80085c0:	d123      	bne.n	800860a <_malloc_r+0x92>
 80085c2:	230c      	movs	r3, #12
 80085c4:	6033      	str	r3, [r6, #0]
 80085c6:	4630      	mov	r0, r6
 80085c8:	f000 f9fe 	bl	80089c8 <__malloc_unlock>
 80085cc:	e7e3      	b.n	8008596 <_malloc_r+0x1e>
 80085ce:	6823      	ldr	r3, [r4, #0]
 80085d0:	1b5b      	subs	r3, r3, r5
 80085d2:	d417      	bmi.n	8008604 <_malloc_r+0x8c>
 80085d4:	2b0b      	cmp	r3, #11
 80085d6:	d903      	bls.n	80085e0 <_malloc_r+0x68>
 80085d8:	6023      	str	r3, [r4, #0]
 80085da:	441c      	add	r4, r3
 80085dc:	6025      	str	r5, [r4, #0]
 80085de:	e004      	b.n	80085ea <_malloc_r+0x72>
 80085e0:	6863      	ldr	r3, [r4, #4]
 80085e2:	42a2      	cmp	r2, r4
 80085e4:	bf0c      	ite	eq
 80085e6:	600b      	streq	r3, [r1, #0]
 80085e8:	6053      	strne	r3, [r2, #4]
 80085ea:	4630      	mov	r0, r6
 80085ec:	f000 f9ec 	bl	80089c8 <__malloc_unlock>
 80085f0:	f104 000b 	add.w	r0, r4, #11
 80085f4:	1d23      	adds	r3, r4, #4
 80085f6:	f020 0007 	bic.w	r0, r0, #7
 80085fa:	1ac2      	subs	r2, r0, r3
 80085fc:	d0cc      	beq.n	8008598 <_malloc_r+0x20>
 80085fe:	1a1b      	subs	r3, r3, r0
 8008600:	50a3      	str	r3, [r4, r2]
 8008602:	e7c9      	b.n	8008598 <_malloc_r+0x20>
 8008604:	4622      	mov	r2, r4
 8008606:	6864      	ldr	r4, [r4, #4]
 8008608:	e7cc      	b.n	80085a4 <_malloc_r+0x2c>
 800860a:	1cc4      	adds	r4, r0, #3
 800860c:	f024 0403 	bic.w	r4, r4, #3
 8008610:	42a0      	cmp	r0, r4
 8008612:	d0e3      	beq.n	80085dc <_malloc_r+0x64>
 8008614:	1a21      	subs	r1, r4, r0
 8008616:	4630      	mov	r0, r6
 8008618:	f000 f964 	bl	80088e4 <_sbrk_r>
 800861c:	3001      	adds	r0, #1
 800861e:	d1dd      	bne.n	80085dc <_malloc_r+0x64>
 8008620:	e7cf      	b.n	80085c2 <_malloc_r+0x4a>
 8008622:	bf00      	nop
 8008624:	2000020c 	.word	0x2000020c
 8008628:	20000210 	.word	0x20000210

0800862c <__ssputs_r>:
 800862c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008630:	688e      	ldr	r6, [r1, #8]
 8008632:	429e      	cmp	r6, r3
 8008634:	4682      	mov	sl, r0
 8008636:	460c      	mov	r4, r1
 8008638:	4690      	mov	r8, r2
 800863a:	461f      	mov	r7, r3
 800863c:	d838      	bhi.n	80086b0 <__ssputs_r+0x84>
 800863e:	898a      	ldrh	r2, [r1, #12]
 8008640:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008644:	d032      	beq.n	80086ac <__ssputs_r+0x80>
 8008646:	6825      	ldr	r5, [r4, #0]
 8008648:	6909      	ldr	r1, [r1, #16]
 800864a:	eba5 0901 	sub.w	r9, r5, r1
 800864e:	6965      	ldr	r5, [r4, #20]
 8008650:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008654:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008658:	3301      	adds	r3, #1
 800865a:	444b      	add	r3, r9
 800865c:	106d      	asrs	r5, r5, #1
 800865e:	429d      	cmp	r5, r3
 8008660:	bf38      	it	cc
 8008662:	461d      	movcc	r5, r3
 8008664:	0553      	lsls	r3, r2, #21
 8008666:	d531      	bpl.n	80086cc <__ssputs_r+0xa0>
 8008668:	4629      	mov	r1, r5
 800866a:	f7ff ff85 	bl	8008578 <_malloc_r>
 800866e:	4606      	mov	r6, r0
 8008670:	b950      	cbnz	r0, 8008688 <__ssputs_r+0x5c>
 8008672:	230c      	movs	r3, #12
 8008674:	f8ca 3000 	str.w	r3, [sl]
 8008678:	89a3      	ldrh	r3, [r4, #12]
 800867a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800867e:	81a3      	strh	r3, [r4, #12]
 8008680:	f04f 30ff 	mov.w	r0, #4294967295
 8008684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008688:	6921      	ldr	r1, [r4, #16]
 800868a:	464a      	mov	r2, r9
 800868c:	f7ff fb88 	bl	8007da0 <memcpy>
 8008690:	89a3      	ldrh	r3, [r4, #12]
 8008692:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800869a:	81a3      	strh	r3, [r4, #12]
 800869c:	6126      	str	r6, [r4, #16]
 800869e:	6165      	str	r5, [r4, #20]
 80086a0:	444e      	add	r6, r9
 80086a2:	eba5 0509 	sub.w	r5, r5, r9
 80086a6:	6026      	str	r6, [r4, #0]
 80086a8:	60a5      	str	r5, [r4, #8]
 80086aa:	463e      	mov	r6, r7
 80086ac:	42be      	cmp	r6, r7
 80086ae:	d900      	bls.n	80086b2 <__ssputs_r+0x86>
 80086b0:	463e      	mov	r6, r7
 80086b2:	4632      	mov	r2, r6
 80086b4:	6820      	ldr	r0, [r4, #0]
 80086b6:	4641      	mov	r1, r8
 80086b8:	f000 f966 	bl	8008988 <memmove>
 80086bc:	68a3      	ldr	r3, [r4, #8]
 80086be:	6822      	ldr	r2, [r4, #0]
 80086c0:	1b9b      	subs	r3, r3, r6
 80086c2:	4432      	add	r2, r6
 80086c4:	60a3      	str	r3, [r4, #8]
 80086c6:	6022      	str	r2, [r4, #0]
 80086c8:	2000      	movs	r0, #0
 80086ca:	e7db      	b.n	8008684 <__ssputs_r+0x58>
 80086cc:	462a      	mov	r2, r5
 80086ce:	f000 f981 	bl	80089d4 <_realloc_r>
 80086d2:	4606      	mov	r6, r0
 80086d4:	2800      	cmp	r0, #0
 80086d6:	d1e1      	bne.n	800869c <__ssputs_r+0x70>
 80086d8:	6921      	ldr	r1, [r4, #16]
 80086da:	4650      	mov	r0, sl
 80086dc:	f7ff fefc 	bl	80084d8 <_free_r>
 80086e0:	e7c7      	b.n	8008672 <__ssputs_r+0x46>
	...

080086e4 <_svfiprintf_r>:
 80086e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086e8:	4698      	mov	r8, r3
 80086ea:	898b      	ldrh	r3, [r1, #12]
 80086ec:	061b      	lsls	r3, r3, #24
 80086ee:	b09d      	sub	sp, #116	; 0x74
 80086f0:	4607      	mov	r7, r0
 80086f2:	460d      	mov	r5, r1
 80086f4:	4614      	mov	r4, r2
 80086f6:	d50e      	bpl.n	8008716 <_svfiprintf_r+0x32>
 80086f8:	690b      	ldr	r3, [r1, #16]
 80086fa:	b963      	cbnz	r3, 8008716 <_svfiprintf_r+0x32>
 80086fc:	2140      	movs	r1, #64	; 0x40
 80086fe:	f7ff ff3b 	bl	8008578 <_malloc_r>
 8008702:	6028      	str	r0, [r5, #0]
 8008704:	6128      	str	r0, [r5, #16]
 8008706:	b920      	cbnz	r0, 8008712 <_svfiprintf_r+0x2e>
 8008708:	230c      	movs	r3, #12
 800870a:	603b      	str	r3, [r7, #0]
 800870c:	f04f 30ff 	mov.w	r0, #4294967295
 8008710:	e0d1      	b.n	80088b6 <_svfiprintf_r+0x1d2>
 8008712:	2340      	movs	r3, #64	; 0x40
 8008714:	616b      	str	r3, [r5, #20]
 8008716:	2300      	movs	r3, #0
 8008718:	9309      	str	r3, [sp, #36]	; 0x24
 800871a:	2320      	movs	r3, #32
 800871c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008720:	f8cd 800c 	str.w	r8, [sp, #12]
 8008724:	2330      	movs	r3, #48	; 0x30
 8008726:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80088d0 <_svfiprintf_r+0x1ec>
 800872a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800872e:	f04f 0901 	mov.w	r9, #1
 8008732:	4623      	mov	r3, r4
 8008734:	469a      	mov	sl, r3
 8008736:	f813 2b01 	ldrb.w	r2, [r3], #1
 800873a:	b10a      	cbz	r2, 8008740 <_svfiprintf_r+0x5c>
 800873c:	2a25      	cmp	r2, #37	; 0x25
 800873e:	d1f9      	bne.n	8008734 <_svfiprintf_r+0x50>
 8008740:	ebba 0b04 	subs.w	fp, sl, r4
 8008744:	d00b      	beq.n	800875e <_svfiprintf_r+0x7a>
 8008746:	465b      	mov	r3, fp
 8008748:	4622      	mov	r2, r4
 800874a:	4629      	mov	r1, r5
 800874c:	4638      	mov	r0, r7
 800874e:	f7ff ff6d 	bl	800862c <__ssputs_r>
 8008752:	3001      	adds	r0, #1
 8008754:	f000 80aa 	beq.w	80088ac <_svfiprintf_r+0x1c8>
 8008758:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800875a:	445a      	add	r2, fp
 800875c:	9209      	str	r2, [sp, #36]	; 0x24
 800875e:	f89a 3000 	ldrb.w	r3, [sl]
 8008762:	2b00      	cmp	r3, #0
 8008764:	f000 80a2 	beq.w	80088ac <_svfiprintf_r+0x1c8>
 8008768:	2300      	movs	r3, #0
 800876a:	f04f 32ff 	mov.w	r2, #4294967295
 800876e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008772:	f10a 0a01 	add.w	sl, sl, #1
 8008776:	9304      	str	r3, [sp, #16]
 8008778:	9307      	str	r3, [sp, #28]
 800877a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800877e:	931a      	str	r3, [sp, #104]	; 0x68
 8008780:	4654      	mov	r4, sl
 8008782:	2205      	movs	r2, #5
 8008784:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008788:	4851      	ldr	r0, [pc, #324]	; (80088d0 <_svfiprintf_r+0x1ec>)
 800878a:	f7f7 fd31 	bl	80001f0 <memchr>
 800878e:	9a04      	ldr	r2, [sp, #16]
 8008790:	b9d8      	cbnz	r0, 80087ca <_svfiprintf_r+0xe6>
 8008792:	06d0      	lsls	r0, r2, #27
 8008794:	bf44      	itt	mi
 8008796:	2320      	movmi	r3, #32
 8008798:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800879c:	0711      	lsls	r1, r2, #28
 800879e:	bf44      	itt	mi
 80087a0:	232b      	movmi	r3, #43	; 0x2b
 80087a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087a6:	f89a 3000 	ldrb.w	r3, [sl]
 80087aa:	2b2a      	cmp	r3, #42	; 0x2a
 80087ac:	d015      	beq.n	80087da <_svfiprintf_r+0xf6>
 80087ae:	9a07      	ldr	r2, [sp, #28]
 80087b0:	4654      	mov	r4, sl
 80087b2:	2000      	movs	r0, #0
 80087b4:	f04f 0c0a 	mov.w	ip, #10
 80087b8:	4621      	mov	r1, r4
 80087ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087be:	3b30      	subs	r3, #48	; 0x30
 80087c0:	2b09      	cmp	r3, #9
 80087c2:	d94e      	bls.n	8008862 <_svfiprintf_r+0x17e>
 80087c4:	b1b0      	cbz	r0, 80087f4 <_svfiprintf_r+0x110>
 80087c6:	9207      	str	r2, [sp, #28]
 80087c8:	e014      	b.n	80087f4 <_svfiprintf_r+0x110>
 80087ca:	eba0 0308 	sub.w	r3, r0, r8
 80087ce:	fa09 f303 	lsl.w	r3, r9, r3
 80087d2:	4313      	orrs	r3, r2
 80087d4:	9304      	str	r3, [sp, #16]
 80087d6:	46a2      	mov	sl, r4
 80087d8:	e7d2      	b.n	8008780 <_svfiprintf_r+0x9c>
 80087da:	9b03      	ldr	r3, [sp, #12]
 80087dc:	1d19      	adds	r1, r3, #4
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	9103      	str	r1, [sp, #12]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	bfbb      	ittet	lt
 80087e6:	425b      	neglt	r3, r3
 80087e8:	f042 0202 	orrlt.w	r2, r2, #2
 80087ec:	9307      	strge	r3, [sp, #28]
 80087ee:	9307      	strlt	r3, [sp, #28]
 80087f0:	bfb8      	it	lt
 80087f2:	9204      	strlt	r2, [sp, #16]
 80087f4:	7823      	ldrb	r3, [r4, #0]
 80087f6:	2b2e      	cmp	r3, #46	; 0x2e
 80087f8:	d10c      	bne.n	8008814 <_svfiprintf_r+0x130>
 80087fa:	7863      	ldrb	r3, [r4, #1]
 80087fc:	2b2a      	cmp	r3, #42	; 0x2a
 80087fe:	d135      	bne.n	800886c <_svfiprintf_r+0x188>
 8008800:	9b03      	ldr	r3, [sp, #12]
 8008802:	1d1a      	adds	r2, r3, #4
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	9203      	str	r2, [sp, #12]
 8008808:	2b00      	cmp	r3, #0
 800880a:	bfb8      	it	lt
 800880c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008810:	3402      	adds	r4, #2
 8008812:	9305      	str	r3, [sp, #20]
 8008814:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80088e0 <_svfiprintf_r+0x1fc>
 8008818:	7821      	ldrb	r1, [r4, #0]
 800881a:	2203      	movs	r2, #3
 800881c:	4650      	mov	r0, sl
 800881e:	f7f7 fce7 	bl	80001f0 <memchr>
 8008822:	b140      	cbz	r0, 8008836 <_svfiprintf_r+0x152>
 8008824:	2340      	movs	r3, #64	; 0x40
 8008826:	eba0 000a 	sub.w	r0, r0, sl
 800882a:	fa03 f000 	lsl.w	r0, r3, r0
 800882e:	9b04      	ldr	r3, [sp, #16]
 8008830:	4303      	orrs	r3, r0
 8008832:	3401      	adds	r4, #1
 8008834:	9304      	str	r3, [sp, #16]
 8008836:	f814 1b01 	ldrb.w	r1, [r4], #1
 800883a:	4826      	ldr	r0, [pc, #152]	; (80088d4 <_svfiprintf_r+0x1f0>)
 800883c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008840:	2206      	movs	r2, #6
 8008842:	f7f7 fcd5 	bl	80001f0 <memchr>
 8008846:	2800      	cmp	r0, #0
 8008848:	d038      	beq.n	80088bc <_svfiprintf_r+0x1d8>
 800884a:	4b23      	ldr	r3, [pc, #140]	; (80088d8 <_svfiprintf_r+0x1f4>)
 800884c:	bb1b      	cbnz	r3, 8008896 <_svfiprintf_r+0x1b2>
 800884e:	9b03      	ldr	r3, [sp, #12]
 8008850:	3307      	adds	r3, #7
 8008852:	f023 0307 	bic.w	r3, r3, #7
 8008856:	3308      	adds	r3, #8
 8008858:	9303      	str	r3, [sp, #12]
 800885a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800885c:	4433      	add	r3, r6
 800885e:	9309      	str	r3, [sp, #36]	; 0x24
 8008860:	e767      	b.n	8008732 <_svfiprintf_r+0x4e>
 8008862:	fb0c 3202 	mla	r2, ip, r2, r3
 8008866:	460c      	mov	r4, r1
 8008868:	2001      	movs	r0, #1
 800886a:	e7a5      	b.n	80087b8 <_svfiprintf_r+0xd4>
 800886c:	2300      	movs	r3, #0
 800886e:	3401      	adds	r4, #1
 8008870:	9305      	str	r3, [sp, #20]
 8008872:	4619      	mov	r1, r3
 8008874:	f04f 0c0a 	mov.w	ip, #10
 8008878:	4620      	mov	r0, r4
 800887a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800887e:	3a30      	subs	r2, #48	; 0x30
 8008880:	2a09      	cmp	r2, #9
 8008882:	d903      	bls.n	800888c <_svfiprintf_r+0x1a8>
 8008884:	2b00      	cmp	r3, #0
 8008886:	d0c5      	beq.n	8008814 <_svfiprintf_r+0x130>
 8008888:	9105      	str	r1, [sp, #20]
 800888a:	e7c3      	b.n	8008814 <_svfiprintf_r+0x130>
 800888c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008890:	4604      	mov	r4, r0
 8008892:	2301      	movs	r3, #1
 8008894:	e7f0      	b.n	8008878 <_svfiprintf_r+0x194>
 8008896:	ab03      	add	r3, sp, #12
 8008898:	9300      	str	r3, [sp, #0]
 800889a:	462a      	mov	r2, r5
 800889c:	4b0f      	ldr	r3, [pc, #60]	; (80088dc <_svfiprintf_r+0x1f8>)
 800889e:	a904      	add	r1, sp, #16
 80088a0:	4638      	mov	r0, r7
 80088a2:	f7fe f80f 	bl	80068c4 <_printf_float>
 80088a6:	1c42      	adds	r2, r0, #1
 80088a8:	4606      	mov	r6, r0
 80088aa:	d1d6      	bne.n	800885a <_svfiprintf_r+0x176>
 80088ac:	89ab      	ldrh	r3, [r5, #12]
 80088ae:	065b      	lsls	r3, r3, #25
 80088b0:	f53f af2c 	bmi.w	800870c <_svfiprintf_r+0x28>
 80088b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088b6:	b01d      	add	sp, #116	; 0x74
 80088b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088bc:	ab03      	add	r3, sp, #12
 80088be:	9300      	str	r3, [sp, #0]
 80088c0:	462a      	mov	r2, r5
 80088c2:	4b06      	ldr	r3, [pc, #24]	; (80088dc <_svfiprintf_r+0x1f8>)
 80088c4:	a904      	add	r1, sp, #16
 80088c6:	4638      	mov	r0, r7
 80088c8:	f7fe faa0 	bl	8006e0c <_printf_i>
 80088cc:	e7eb      	b.n	80088a6 <_svfiprintf_r+0x1c2>
 80088ce:	bf00      	nop
 80088d0:	0800b594 	.word	0x0800b594
 80088d4:	0800b59e 	.word	0x0800b59e
 80088d8:	080068c5 	.word	0x080068c5
 80088dc:	0800862d 	.word	0x0800862d
 80088e0:	0800b59a 	.word	0x0800b59a

080088e4 <_sbrk_r>:
 80088e4:	b538      	push	{r3, r4, r5, lr}
 80088e6:	4d06      	ldr	r5, [pc, #24]	; (8008900 <_sbrk_r+0x1c>)
 80088e8:	2300      	movs	r3, #0
 80088ea:	4604      	mov	r4, r0
 80088ec:	4608      	mov	r0, r1
 80088ee:	602b      	str	r3, [r5, #0]
 80088f0:	f7f9 fcac 	bl	800224c <_sbrk>
 80088f4:	1c43      	adds	r3, r0, #1
 80088f6:	d102      	bne.n	80088fe <_sbrk_r+0x1a>
 80088f8:	682b      	ldr	r3, [r5, #0]
 80088fa:	b103      	cbz	r3, 80088fe <_sbrk_r+0x1a>
 80088fc:	6023      	str	r3, [r4, #0]
 80088fe:	bd38      	pop	{r3, r4, r5, pc}
 8008900:	200004dc 	.word	0x200004dc

08008904 <__assert_func>:
 8008904:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008906:	4614      	mov	r4, r2
 8008908:	461a      	mov	r2, r3
 800890a:	4b09      	ldr	r3, [pc, #36]	; (8008930 <__assert_func+0x2c>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4605      	mov	r5, r0
 8008910:	68d8      	ldr	r0, [r3, #12]
 8008912:	b14c      	cbz	r4, 8008928 <__assert_func+0x24>
 8008914:	4b07      	ldr	r3, [pc, #28]	; (8008934 <__assert_func+0x30>)
 8008916:	9100      	str	r1, [sp, #0]
 8008918:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800891c:	4906      	ldr	r1, [pc, #24]	; (8008938 <__assert_func+0x34>)
 800891e:	462b      	mov	r3, r5
 8008920:	f000 f80e 	bl	8008940 <fiprintf>
 8008924:	f000 faa4 	bl	8008e70 <abort>
 8008928:	4b04      	ldr	r3, [pc, #16]	; (800893c <__assert_func+0x38>)
 800892a:	461c      	mov	r4, r3
 800892c:	e7f3      	b.n	8008916 <__assert_func+0x12>
 800892e:	bf00      	nop
 8008930:	2000000c 	.word	0x2000000c
 8008934:	0800b5a5 	.word	0x0800b5a5
 8008938:	0800b5b2 	.word	0x0800b5b2
 800893c:	0800b5e0 	.word	0x0800b5e0

08008940 <fiprintf>:
 8008940:	b40e      	push	{r1, r2, r3}
 8008942:	b503      	push	{r0, r1, lr}
 8008944:	4601      	mov	r1, r0
 8008946:	ab03      	add	r3, sp, #12
 8008948:	4805      	ldr	r0, [pc, #20]	; (8008960 <fiprintf+0x20>)
 800894a:	f853 2b04 	ldr.w	r2, [r3], #4
 800894e:	6800      	ldr	r0, [r0, #0]
 8008950:	9301      	str	r3, [sp, #4]
 8008952:	f000 f88f 	bl	8008a74 <_vfiprintf_r>
 8008956:	b002      	add	sp, #8
 8008958:	f85d eb04 	ldr.w	lr, [sp], #4
 800895c:	b003      	add	sp, #12
 800895e:	4770      	bx	lr
 8008960:	2000000c 	.word	0x2000000c

08008964 <__ascii_mbtowc>:
 8008964:	b082      	sub	sp, #8
 8008966:	b901      	cbnz	r1, 800896a <__ascii_mbtowc+0x6>
 8008968:	a901      	add	r1, sp, #4
 800896a:	b142      	cbz	r2, 800897e <__ascii_mbtowc+0x1a>
 800896c:	b14b      	cbz	r3, 8008982 <__ascii_mbtowc+0x1e>
 800896e:	7813      	ldrb	r3, [r2, #0]
 8008970:	600b      	str	r3, [r1, #0]
 8008972:	7812      	ldrb	r2, [r2, #0]
 8008974:	1e10      	subs	r0, r2, #0
 8008976:	bf18      	it	ne
 8008978:	2001      	movne	r0, #1
 800897a:	b002      	add	sp, #8
 800897c:	4770      	bx	lr
 800897e:	4610      	mov	r0, r2
 8008980:	e7fb      	b.n	800897a <__ascii_mbtowc+0x16>
 8008982:	f06f 0001 	mvn.w	r0, #1
 8008986:	e7f8      	b.n	800897a <__ascii_mbtowc+0x16>

08008988 <memmove>:
 8008988:	4288      	cmp	r0, r1
 800898a:	b510      	push	{r4, lr}
 800898c:	eb01 0402 	add.w	r4, r1, r2
 8008990:	d902      	bls.n	8008998 <memmove+0x10>
 8008992:	4284      	cmp	r4, r0
 8008994:	4623      	mov	r3, r4
 8008996:	d807      	bhi.n	80089a8 <memmove+0x20>
 8008998:	1e43      	subs	r3, r0, #1
 800899a:	42a1      	cmp	r1, r4
 800899c:	d008      	beq.n	80089b0 <memmove+0x28>
 800899e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80089a6:	e7f8      	b.n	800899a <memmove+0x12>
 80089a8:	4402      	add	r2, r0
 80089aa:	4601      	mov	r1, r0
 80089ac:	428a      	cmp	r2, r1
 80089ae:	d100      	bne.n	80089b2 <memmove+0x2a>
 80089b0:	bd10      	pop	{r4, pc}
 80089b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80089b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80089ba:	e7f7      	b.n	80089ac <memmove+0x24>

080089bc <__malloc_lock>:
 80089bc:	4801      	ldr	r0, [pc, #4]	; (80089c4 <__malloc_lock+0x8>)
 80089be:	f000 bc17 	b.w	80091f0 <__retarget_lock_acquire_recursive>
 80089c2:	bf00      	nop
 80089c4:	200004e4 	.word	0x200004e4

080089c8 <__malloc_unlock>:
 80089c8:	4801      	ldr	r0, [pc, #4]	; (80089d0 <__malloc_unlock+0x8>)
 80089ca:	f000 bc12 	b.w	80091f2 <__retarget_lock_release_recursive>
 80089ce:	bf00      	nop
 80089d0:	200004e4 	.word	0x200004e4

080089d4 <_realloc_r>:
 80089d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089d6:	4607      	mov	r7, r0
 80089d8:	4614      	mov	r4, r2
 80089da:	460e      	mov	r6, r1
 80089dc:	b921      	cbnz	r1, 80089e8 <_realloc_r+0x14>
 80089de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80089e2:	4611      	mov	r1, r2
 80089e4:	f7ff bdc8 	b.w	8008578 <_malloc_r>
 80089e8:	b922      	cbnz	r2, 80089f4 <_realloc_r+0x20>
 80089ea:	f7ff fd75 	bl	80084d8 <_free_r>
 80089ee:	4625      	mov	r5, r4
 80089f0:	4628      	mov	r0, r5
 80089f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089f4:	f000 fc62 	bl	80092bc <_malloc_usable_size_r>
 80089f8:	42a0      	cmp	r0, r4
 80089fa:	d20f      	bcs.n	8008a1c <_realloc_r+0x48>
 80089fc:	4621      	mov	r1, r4
 80089fe:	4638      	mov	r0, r7
 8008a00:	f7ff fdba 	bl	8008578 <_malloc_r>
 8008a04:	4605      	mov	r5, r0
 8008a06:	2800      	cmp	r0, #0
 8008a08:	d0f2      	beq.n	80089f0 <_realloc_r+0x1c>
 8008a0a:	4631      	mov	r1, r6
 8008a0c:	4622      	mov	r2, r4
 8008a0e:	f7ff f9c7 	bl	8007da0 <memcpy>
 8008a12:	4631      	mov	r1, r6
 8008a14:	4638      	mov	r0, r7
 8008a16:	f7ff fd5f 	bl	80084d8 <_free_r>
 8008a1a:	e7e9      	b.n	80089f0 <_realloc_r+0x1c>
 8008a1c:	4635      	mov	r5, r6
 8008a1e:	e7e7      	b.n	80089f0 <_realloc_r+0x1c>

08008a20 <__sfputc_r>:
 8008a20:	6893      	ldr	r3, [r2, #8]
 8008a22:	3b01      	subs	r3, #1
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	b410      	push	{r4}
 8008a28:	6093      	str	r3, [r2, #8]
 8008a2a:	da08      	bge.n	8008a3e <__sfputc_r+0x1e>
 8008a2c:	6994      	ldr	r4, [r2, #24]
 8008a2e:	42a3      	cmp	r3, r4
 8008a30:	db01      	blt.n	8008a36 <__sfputc_r+0x16>
 8008a32:	290a      	cmp	r1, #10
 8008a34:	d103      	bne.n	8008a3e <__sfputc_r+0x1e>
 8008a36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a3a:	f000 b94b 	b.w	8008cd4 <__swbuf_r>
 8008a3e:	6813      	ldr	r3, [r2, #0]
 8008a40:	1c58      	adds	r0, r3, #1
 8008a42:	6010      	str	r0, [r2, #0]
 8008a44:	7019      	strb	r1, [r3, #0]
 8008a46:	4608      	mov	r0, r1
 8008a48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a4c:	4770      	bx	lr

08008a4e <__sfputs_r>:
 8008a4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a50:	4606      	mov	r6, r0
 8008a52:	460f      	mov	r7, r1
 8008a54:	4614      	mov	r4, r2
 8008a56:	18d5      	adds	r5, r2, r3
 8008a58:	42ac      	cmp	r4, r5
 8008a5a:	d101      	bne.n	8008a60 <__sfputs_r+0x12>
 8008a5c:	2000      	movs	r0, #0
 8008a5e:	e007      	b.n	8008a70 <__sfputs_r+0x22>
 8008a60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a64:	463a      	mov	r2, r7
 8008a66:	4630      	mov	r0, r6
 8008a68:	f7ff ffda 	bl	8008a20 <__sfputc_r>
 8008a6c:	1c43      	adds	r3, r0, #1
 8008a6e:	d1f3      	bne.n	8008a58 <__sfputs_r+0xa>
 8008a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008a74 <_vfiprintf_r>:
 8008a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a78:	460d      	mov	r5, r1
 8008a7a:	b09d      	sub	sp, #116	; 0x74
 8008a7c:	4614      	mov	r4, r2
 8008a7e:	4698      	mov	r8, r3
 8008a80:	4606      	mov	r6, r0
 8008a82:	b118      	cbz	r0, 8008a8c <_vfiprintf_r+0x18>
 8008a84:	6983      	ldr	r3, [r0, #24]
 8008a86:	b90b      	cbnz	r3, 8008a8c <_vfiprintf_r+0x18>
 8008a88:	f000 fb14 	bl	80090b4 <__sinit>
 8008a8c:	4b89      	ldr	r3, [pc, #548]	; (8008cb4 <_vfiprintf_r+0x240>)
 8008a8e:	429d      	cmp	r5, r3
 8008a90:	d11b      	bne.n	8008aca <_vfiprintf_r+0x56>
 8008a92:	6875      	ldr	r5, [r6, #4]
 8008a94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a96:	07d9      	lsls	r1, r3, #31
 8008a98:	d405      	bmi.n	8008aa6 <_vfiprintf_r+0x32>
 8008a9a:	89ab      	ldrh	r3, [r5, #12]
 8008a9c:	059a      	lsls	r2, r3, #22
 8008a9e:	d402      	bmi.n	8008aa6 <_vfiprintf_r+0x32>
 8008aa0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008aa2:	f000 fba5 	bl	80091f0 <__retarget_lock_acquire_recursive>
 8008aa6:	89ab      	ldrh	r3, [r5, #12]
 8008aa8:	071b      	lsls	r3, r3, #28
 8008aaa:	d501      	bpl.n	8008ab0 <_vfiprintf_r+0x3c>
 8008aac:	692b      	ldr	r3, [r5, #16]
 8008aae:	b9eb      	cbnz	r3, 8008aec <_vfiprintf_r+0x78>
 8008ab0:	4629      	mov	r1, r5
 8008ab2:	4630      	mov	r0, r6
 8008ab4:	f000 f96e 	bl	8008d94 <__swsetup_r>
 8008ab8:	b1c0      	cbz	r0, 8008aec <_vfiprintf_r+0x78>
 8008aba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008abc:	07dc      	lsls	r4, r3, #31
 8008abe:	d50e      	bpl.n	8008ade <_vfiprintf_r+0x6a>
 8008ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ac4:	b01d      	add	sp, #116	; 0x74
 8008ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aca:	4b7b      	ldr	r3, [pc, #492]	; (8008cb8 <_vfiprintf_r+0x244>)
 8008acc:	429d      	cmp	r5, r3
 8008ace:	d101      	bne.n	8008ad4 <_vfiprintf_r+0x60>
 8008ad0:	68b5      	ldr	r5, [r6, #8]
 8008ad2:	e7df      	b.n	8008a94 <_vfiprintf_r+0x20>
 8008ad4:	4b79      	ldr	r3, [pc, #484]	; (8008cbc <_vfiprintf_r+0x248>)
 8008ad6:	429d      	cmp	r5, r3
 8008ad8:	bf08      	it	eq
 8008ada:	68f5      	ldreq	r5, [r6, #12]
 8008adc:	e7da      	b.n	8008a94 <_vfiprintf_r+0x20>
 8008ade:	89ab      	ldrh	r3, [r5, #12]
 8008ae0:	0598      	lsls	r0, r3, #22
 8008ae2:	d4ed      	bmi.n	8008ac0 <_vfiprintf_r+0x4c>
 8008ae4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ae6:	f000 fb84 	bl	80091f2 <__retarget_lock_release_recursive>
 8008aea:	e7e9      	b.n	8008ac0 <_vfiprintf_r+0x4c>
 8008aec:	2300      	movs	r3, #0
 8008aee:	9309      	str	r3, [sp, #36]	; 0x24
 8008af0:	2320      	movs	r3, #32
 8008af2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008af6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008afa:	2330      	movs	r3, #48	; 0x30
 8008afc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008cc0 <_vfiprintf_r+0x24c>
 8008b00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b04:	f04f 0901 	mov.w	r9, #1
 8008b08:	4623      	mov	r3, r4
 8008b0a:	469a      	mov	sl, r3
 8008b0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b10:	b10a      	cbz	r2, 8008b16 <_vfiprintf_r+0xa2>
 8008b12:	2a25      	cmp	r2, #37	; 0x25
 8008b14:	d1f9      	bne.n	8008b0a <_vfiprintf_r+0x96>
 8008b16:	ebba 0b04 	subs.w	fp, sl, r4
 8008b1a:	d00b      	beq.n	8008b34 <_vfiprintf_r+0xc0>
 8008b1c:	465b      	mov	r3, fp
 8008b1e:	4622      	mov	r2, r4
 8008b20:	4629      	mov	r1, r5
 8008b22:	4630      	mov	r0, r6
 8008b24:	f7ff ff93 	bl	8008a4e <__sfputs_r>
 8008b28:	3001      	adds	r0, #1
 8008b2a:	f000 80aa 	beq.w	8008c82 <_vfiprintf_r+0x20e>
 8008b2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b30:	445a      	add	r2, fp
 8008b32:	9209      	str	r2, [sp, #36]	; 0x24
 8008b34:	f89a 3000 	ldrb.w	r3, [sl]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	f000 80a2 	beq.w	8008c82 <_vfiprintf_r+0x20e>
 8008b3e:	2300      	movs	r3, #0
 8008b40:	f04f 32ff 	mov.w	r2, #4294967295
 8008b44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b48:	f10a 0a01 	add.w	sl, sl, #1
 8008b4c:	9304      	str	r3, [sp, #16]
 8008b4e:	9307      	str	r3, [sp, #28]
 8008b50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b54:	931a      	str	r3, [sp, #104]	; 0x68
 8008b56:	4654      	mov	r4, sl
 8008b58:	2205      	movs	r2, #5
 8008b5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b5e:	4858      	ldr	r0, [pc, #352]	; (8008cc0 <_vfiprintf_r+0x24c>)
 8008b60:	f7f7 fb46 	bl	80001f0 <memchr>
 8008b64:	9a04      	ldr	r2, [sp, #16]
 8008b66:	b9d8      	cbnz	r0, 8008ba0 <_vfiprintf_r+0x12c>
 8008b68:	06d1      	lsls	r1, r2, #27
 8008b6a:	bf44      	itt	mi
 8008b6c:	2320      	movmi	r3, #32
 8008b6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b72:	0713      	lsls	r3, r2, #28
 8008b74:	bf44      	itt	mi
 8008b76:	232b      	movmi	r3, #43	; 0x2b
 8008b78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b7c:	f89a 3000 	ldrb.w	r3, [sl]
 8008b80:	2b2a      	cmp	r3, #42	; 0x2a
 8008b82:	d015      	beq.n	8008bb0 <_vfiprintf_r+0x13c>
 8008b84:	9a07      	ldr	r2, [sp, #28]
 8008b86:	4654      	mov	r4, sl
 8008b88:	2000      	movs	r0, #0
 8008b8a:	f04f 0c0a 	mov.w	ip, #10
 8008b8e:	4621      	mov	r1, r4
 8008b90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b94:	3b30      	subs	r3, #48	; 0x30
 8008b96:	2b09      	cmp	r3, #9
 8008b98:	d94e      	bls.n	8008c38 <_vfiprintf_r+0x1c4>
 8008b9a:	b1b0      	cbz	r0, 8008bca <_vfiprintf_r+0x156>
 8008b9c:	9207      	str	r2, [sp, #28]
 8008b9e:	e014      	b.n	8008bca <_vfiprintf_r+0x156>
 8008ba0:	eba0 0308 	sub.w	r3, r0, r8
 8008ba4:	fa09 f303 	lsl.w	r3, r9, r3
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	9304      	str	r3, [sp, #16]
 8008bac:	46a2      	mov	sl, r4
 8008bae:	e7d2      	b.n	8008b56 <_vfiprintf_r+0xe2>
 8008bb0:	9b03      	ldr	r3, [sp, #12]
 8008bb2:	1d19      	adds	r1, r3, #4
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	9103      	str	r1, [sp, #12]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	bfbb      	ittet	lt
 8008bbc:	425b      	neglt	r3, r3
 8008bbe:	f042 0202 	orrlt.w	r2, r2, #2
 8008bc2:	9307      	strge	r3, [sp, #28]
 8008bc4:	9307      	strlt	r3, [sp, #28]
 8008bc6:	bfb8      	it	lt
 8008bc8:	9204      	strlt	r2, [sp, #16]
 8008bca:	7823      	ldrb	r3, [r4, #0]
 8008bcc:	2b2e      	cmp	r3, #46	; 0x2e
 8008bce:	d10c      	bne.n	8008bea <_vfiprintf_r+0x176>
 8008bd0:	7863      	ldrb	r3, [r4, #1]
 8008bd2:	2b2a      	cmp	r3, #42	; 0x2a
 8008bd4:	d135      	bne.n	8008c42 <_vfiprintf_r+0x1ce>
 8008bd6:	9b03      	ldr	r3, [sp, #12]
 8008bd8:	1d1a      	adds	r2, r3, #4
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	9203      	str	r2, [sp, #12]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	bfb8      	it	lt
 8008be2:	f04f 33ff 	movlt.w	r3, #4294967295
 8008be6:	3402      	adds	r4, #2
 8008be8:	9305      	str	r3, [sp, #20]
 8008bea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008cd0 <_vfiprintf_r+0x25c>
 8008bee:	7821      	ldrb	r1, [r4, #0]
 8008bf0:	2203      	movs	r2, #3
 8008bf2:	4650      	mov	r0, sl
 8008bf4:	f7f7 fafc 	bl	80001f0 <memchr>
 8008bf8:	b140      	cbz	r0, 8008c0c <_vfiprintf_r+0x198>
 8008bfa:	2340      	movs	r3, #64	; 0x40
 8008bfc:	eba0 000a 	sub.w	r0, r0, sl
 8008c00:	fa03 f000 	lsl.w	r0, r3, r0
 8008c04:	9b04      	ldr	r3, [sp, #16]
 8008c06:	4303      	orrs	r3, r0
 8008c08:	3401      	adds	r4, #1
 8008c0a:	9304      	str	r3, [sp, #16]
 8008c0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c10:	482c      	ldr	r0, [pc, #176]	; (8008cc4 <_vfiprintf_r+0x250>)
 8008c12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c16:	2206      	movs	r2, #6
 8008c18:	f7f7 faea 	bl	80001f0 <memchr>
 8008c1c:	2800      	cmp	r0, #0
 8008c1e:	d03f      	beq.n	8008ca0 <_vfiprintf_r+0x22c>
 8008c20:	4b29      	ldr	r3, [pc, #164]	; (8008cc8 <_vfiprintf_r+0x254>)
 8008c22:	bb1b      	cbnz	r3, 8008c6c <_vfiprintf_r+0x1f8>
 8008c24:	9b03      	ldr	r3, [sp, #12]
 8008c26:	3307      	adds	r3, #7
 8008c28:	f023 0307 	bic.w	r3, r3, #7
 8008c2c:	3308      	adds	r3, #8
 8008c2e:	9303      	str	r3, [sp, #12]
 8008c30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c32:	443b      	add	r3, r7
 8008c34:	9309      	str	r3, [sp, #36]	; 0x24
 8008c36:	e767      	b.n	8008b08 <_vfiprintf_r+0x94>
 8008c38:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c3c:	460c      	mov	r4, r1
 8008c3e:	2001      	movs	r0, #1
 8008c40:	e7a5      	b.n	8008b8e <_vfiprintf_r+0x11a>
 8008c42:	2300      	movs	r3, #0
 8008c44:	3401      	adds	r4, #1
 8008c46:	9305      	str	r3, [sp, #20]
 8008c48:	4619      	mov	r1, r3
 8008c4a:	f04f 0c0a 	mov.w	ip, #10
 8008c4e:	4620      	mov	r0, r4
 8008c50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c54:	3a30      	subs	r2, #48	; 0x30
 8008c56:	2a09      	cmp	r2, #9
 8008c58:	d903      	bls.n	8008c62 <_vfiprintf_r+0x1ee>
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d0c5      	beq.n	8008bea <_vfiprintf_r+0x176>
 8008c5e:	9105      	str	r1, [sp, #20]
 8008c60:	e7c3      	b.n	8008bea <_vfiprintf_r+0x176>
 8008c62:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c66:	4604      	mov	r4, r0
 8008c68:	2301      	movs	r3, #1
 8008c6a:	e7f0      	b.n	8008c4e <_vfiprintf_r+0x1da>
 8008c6c:	ab03      	add	r3, sp, #12
 8008c6e:	9300      	str	r3, [sp, #0]
 8008c70:	462a      	mov	r2, r5
 8008c72:	4b16      	ldr	r3, [pc, #88]	; (8008ccc <_vfiprintf_r+0x258>)
 8008c74:	a904      	add	r1, sp, #16
 8008c76:	4630      	mov	r0, r6
 8008c78:	f7fd fe24 	bl	80068c4 <_printf_float>
 8008c7c:	4607      	mov	r7, r0
 8008c7e:	1c78      	adds	r0, r7, #1
 8008c80:	d1d6      	bne.n	8008c30 <_vfiprintf_r+0x1bc>
 8008c82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c84:	07d9      	lsls	r1, r3, #31
 8008c86:	d405      	bmi.n	8008c94 <_vfiprintf_r+0x220>
 8008c88:	89ab      	ldrh	r3, [r5, #12]
 8008c8a:	059a      	lsls	r2, r3, #22
 8008c8c:	d402      	bmi.n	8008c94 <_vfiprintf_r+0x220>
 8008c8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c90:	f000 faaf 	bl	80091f2 <__retarget_lock_release_recursive>
 8008c94:	89ab      	ldrh	r3, [r5, #12]
 8008c96:	065b      	lsls	r3, r3, #25
 8008c98:	f53f af12 	bmi.w	8008ac0 <_vfiprintf_r+0x4c>
 8008c9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c9e:	e711      	b.n	8008ac4 <_vfiprintf_r+0x50>
 8008ca0:	ab03      	add	r3, sp, #12
 8008ca2:	9300      	str	r3, [sp, #0]
 8008ca4:	462a      	mov	r2, r5
 8008ca6:	4b09      	ldr	r3, [pc, #36]	; (8008ccc <_vfiprintf_r+0x258>)
 8008ca8:	a904      	add	r1, sp, #16
 8008caa:	4630      	mov	r0, r6
 8008cac:	f7fe f8ae 	bl	8006e0c <_printf_i>
 8008cb0:	e7e4      	b.n	8008c7c <_vfiprintf_r+0x208>
 8008cb2:	bf00      	nop
 8008cb4:	0800b70c 	.word	0x0800b70c
 8008cb8:	0800b72c 	.word	0x0800b72c
 8008cbc:	0800b6ec 	.word	0x0800b6ec
 8008cc0:	0800b594 	.word	0x0800b594
 8008cc4:	0800b59e 	.word	0x0800b59e
 8008cc8:	080068c5 	.word	0x080068c5
 8008ccc:	08008a4f 	.word	0x08008a4f
 8008cd0:	0800b59a 	.word	0x0800b59a

08008cd4 <__swbuf_r>:
 8008cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cd6:	460e      	mov	r6, r1
 8008cd8:	4614      	mov	r4, r2
 8008cda:	4605      	mov	r5, r0
 8008cdc:	b118      	cbz	r0, 8008ce6 <__swbuf_r+0x12>
 8008cde:	6983      	ldr	r3, [r0, #24]
 8008ce0:	b90b      	cbnz	r3, 8008ce6 <__swbuf_r+0x12>
 8008ce2:	f000 f9e7 	bl	80090b4 <__sinit>
 8008ce6:	4b21      	ldr	r3, [pc, #132]	; (8008d6c <__swbuf_r+0x98>)
 8008ce8:	429c      	cmp	r4, r3
 8008cea:	d12b      	bne.n	8008d44 <__swbuf_r+0x70>
 8008cec:	686c      	ldr	r4, [r5, #4]
 8008cee:	69a3      	ldr	r3, [r4, #24]
 8008cf0:	60a3      	str	r3, [r4, #8]
 8008cf2:	89a3      	ldrh	r3, [r4, #12]
 8008cf4:	071a      	lsls	r2, r3, #28
 8008cf6:	d52f      	bpl.n	8008d58 <__swbuf_r+0x84>
 8008cf8:	6923      	ldr	r3, [r4, #16]
 8008cfa:	b36b      	cbz	r3, 8008d58 <__swbuf_r+0x84>
 8008cfc:	6923      	ldr	r3, [r4, #16]
 8008cfe:	6820      	ldr	r0, [r4, #0]
 8008d00:	1ac0      	subs	r0, r0, r3
 8008d02:	6963      	ldr	r3, [r4, #20]
 8008d04:	b2f6      	uxtb	r6, r6
 8008d06:	4283      	cmp	r3, r0
 8008d08:	4637      	mov	r7, r6
 8008d0a:	dc04      	bgt.n	8008d16 <__swbuf_r+0x42>
 8008d0c:	4621      	mov	r1, r4
 8008d0e:	4628      	mov	r0, r5
 8008d10:	f000 f93c 	bl	8008f8c <_fflush_r>
 8008d14:	bb30      	cbnz	r0, 8008d64 <__swbuf_r+0x90>
 8008d16:	68a3      	ldr	r3, [r4, #8]
 8008d18:	3b01      	subs	r3, #1
 8008d1a:	60a3      	str	r3, [r4, #8]
 8008d1c:	6823      	ldr	r3, [r4, #0]
 8008d1e:	1c5a      	adds	r2, r3, #1
 8008d20:	6022      	str	r2, [r4, #0]
 8008d22:	701e      	strb	r6, [r3, #0]
 8008d24:	6963      	ldr	r3, [r4, #20]
 8008d26:	3001      	adds	r0, #1
 8008d28:	4283      	cmp	r3, r0
 8008d2a:	d004      	beq.n	8008d36 <__swbuf_r+0x62>
 8008d2c:	89a3      	ldrh	r3, [r4, #12]
 8008d2e:	07db      	lsls	r3, r3, #31
 8008d30:	d506      	bpl.n	8008d40 <__swbuf_r+0x6c>
 8008d32:	2e0a      	cmp	r6, #10
 8008d34:	d104      	bne.n	8008d40 <__swbuf_r+0x6c>
 8008d36:	4621      	mov	r1, r4
 8008d38:	4628      	mov	r0, r5
 8008d3a:	f000 f927 	bl	8008f8c <_fflush_r>
 8008d3e:	b988      	cbnz	r0, 8008d64 <__swbuf_r+0x90>
 8008d40:	4638      	mov	r0, r7
 8008d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d44:	4b0a      	ldr	r3, [pc, #40]	; (8008d70 <__swbuf_r+0x9c>)
 8008d46:	429c      	cmp	r4, r3
 8008d48:	d101      	bne.n	8008d4e <__swbuf_r+0x7a>
 8008d4a:	68ac      	ldr	r4, [r5, #8]
 8008d4c:	e7cf      	b.n	8008cee <__swbuf_r+0x1a>
 8008d4e:	4b09      	ldr	r3, [pc, #36]	; (8008d74 <__swbuf_r+0xa0>)
 8008d50:	429c      	cmp	r4, r3
 8008d52:	bf08      	it	eq
 8008d54:	68ec      	ldreq	r4, [r5, #12]
 8008d56:	e7ca      	b.n	8008cee <__swbuf_r+0x1a>
 8008d58:	4621      	mov	r1, r4
 8008d5a:	4628      	mov	r0, r5
 8008d5c:	f000 f81a 	bl	8008d94 <__swsetup_r>
 8008d60:	2800      	cmp	r0, #0
 8008d62:	d0cb      	beq.n	8008cfc <__swbuf_r+0x28>
 8008d64:	f04f 37ff 	mov.w	r7, #4294967295
 8008d68:	e7ea      	b.n	8008d40 <__swbuf_r+0x6c>
 8008d6a:	bf00      	nop
 8008d6c:	0800b70c 	.word	0x0800b70c
 8008d70:	0800b72c 	.word	0x0800b72c
 8008d74:	0800b6ec 	.word	0x0800b6ec

08008d78 <__ascii_wctomb>:
 8008d78:	b149      	cbz	r1, 8008d8e <__ascii_wctomb+0x16>
 8008d7a:	2aff      	cmp	r2, #255	; 0xff
 8008d7c:	bf85      	ittet	hi
 8008d7e:	238a      	movhi	r3, #138	; 0x8a
 8008d80:	6003      	strhi	r3, [r0, #0]
 8008d82:	700a      	strbls	r2, [r1, #0]
 8008d84:	f04f 30ff 	movhi.w	r0, #4294967295
 8008d88:	bf98      	it	ls
 8008d8a:	2001      	movls	r0, #1
 8008d8c:	4770      	bx	lr
 8008d8e:	4608      	mov	r0, r1
 8008d90:	4770      	bx	lr
	...

08008d94 <__swsetup_r>:
 8008d94:	4b32      	ldr	r3, [pc, #200]	; (8008e60 <__swsetup_r+0xcc>)
 8008d96:	b570      	push	{r4, r5, r6, lr}
 8008d98:	681d      	ldr	r5, [r3, #0]
 8008d9a:	4606      	mov	r6, r0
 8008d9c:	460c      	mov	r4, r1
 8008d9e:	b125      	cbz	r5, 8008daa <__swsetup_r+0x16>
 8008da0:	69ab      	ldr	r3, [r5, #24]
 8008da2:	b913      	cbnz	r3, 8008daa <__swsetup_r+0x16>
 8008da4:	4628      	mov	r0, r5
 8008da6:	f000 f985 	bl	80090b4 <__sinit>
 8008daa:	4b2e      	ldr	r3, [pc, #184]	; (8008e64 <__swsetup_r+0xd0>)
 8008dac:	429c      	cmp	r4, r3
 8008dae:	d10f      	bne.n	8008dd0 <__swsetup_r+0x3c>
 8008db0:	686c      	ldr	r4, [r5, #4]
 8008db2:	89a3      	ldrh	r3, [r4, #12]
 8008db4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008db8:	0719      	lsls	r1, r3, #28
 8008dba:	d42c      	bmi.n	8008e16 <__swsetup_r+0x82>
 8008dbc:	06dd      	lsls	r5, r3, #27
 8008dbe:	d411      	bmi.n	8008de4 <__swsetup_r+0x50>
 8008dc0:	2309      	movs	r3, #9
 8008dc2:	6033      	str	r3, [r6, #0]
 8008dc4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008dc8:	81a3      	strh	r3, [r4, #12]
 8008dca:	f04f 30ff 	mov.w	r0, #4294967295
 8008dce:	e03e      	b.n	8008e4e <__swsetup_r+0xba>
 8008dd0:	4b25      	ldr	r3, [pc, #148]	; (8008e68 <__swsetup_r+0xd4>)
 8008dd2:	429c      	cmp	r4, r3
 8008dd4:	d101      	bne.n	8008dda <__swsetup_r+0x46>
 8008dd6:	68ac      	ldr	r4, [r5, #8]
 8008dd8:	e7eb      	b.n	8008db2 <__swsetup_r+0x1e>
 8008dda:	4b24      	ldr	r3, [pc, #144]	; (8008e6c <__swsetup_r+0xd8>)
 8008ddc:	429c      	cmp	r4, r3
 8008dde:	bf08      	it	eq
 8008de0:	68ec      	ldreq	r4, [r5, #12]
 8008de2:	e7e6      	b.n	8008db2 <__swsetup_r+0x1e>
 8008de4:	0758      	lsls	r0, r3, #29
 8008de6:	d512      	bpl.n	8008e0e <__swsetup_r+0x7a>
 8008de8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008dea:	b141      	cbz	r1, 8008dfe <__swsetup_r+0x6a>
 8008dec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008df0:	4299      	cmp	r1, r3
 8008df2:	d002      	beq.n	8008dfa <__swsetup_r+0x66>
 8008df4:	4630      	mov	r0, r6
 8008df6:	f7ff fb6f 	bl	80084d8 <_free_r>
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	6363      	str	r3, [r4, #52]	; 0x34
 8008dfe:	89a3      	ldrh	r3, [r4, #12]
 8008e00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008e04:	81a3      	strh	r3, [r4, #12]
 8008e06:	2300      	movs	r3, #0
 8008e08:	6063      	str	r3, [r4, #4]
 8008e0a:	6923      	ldr	r3, [r4, #16]
 8008e0c:	6023      	str	r3, [r4, #0]
 8008e0e:	89a3      	ldrh	r3, [r4, #12]
 8008e10:	f043 0308 	orr.w	r3, r3, #8
 8008e14:	81a3      	strh	r3, [r4, #12]
 8008e16:	6923      	ldr	r3, [r4, #16]
 8008e18:	b94b      	cbnz	r3, 8008e2e <__swsetup_r+0x9a>
 8008e1a:	89a3      	ldrh	r3, [r4, #12]
 8008e1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008e20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e24:	d003      	beq.n	8008e2e <__swsetup_r+0x9a>
 8008e26:	4621      	mov	r1, r4
 8008e28:	4630      	mov	r0, r6
 8008e2a:	f000 fa07 	bl	800923c <__smakebuf_r>
 8008e2e:	89a0      	ldrh	r0, [r4, #12]
 8008e30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e34:	f010 0301 	ands.w	r3, r0, #1
 8008e38:	d00a      	beq.n	8008e50 <__swsetup_r+0xbc>
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	60a3      	str	r3, [r4, #8]
 8008e3e:	6963      	ldr	r3, [r4, #20]
 8008e40:	425b      	negs	r3, r3
 8008e42:	61a3      	str	r3, [r4, #24]
 8008e44:	6923      	ldr	r3, [r4, #16]
 8008e46:	b943      	cbnz	r3, 8008e5a <__swsetup_r+0xc6>
 8008e48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008e4c:	d1ba      	bne.n	8008dc4 <__swsetup_r+0x30>
 8008e4e:	bd70      	pop	{r4, r5, r6, pc}
 8008e50:	0781      	lsls	r1, r0, #30
 8008e52:	bf58      	it	pl
 8008e54:	6963      	ldrpl	r3, [r4, #20]
 8008e56:	60a3      	str	r3, [r4, #8]
 8008e58:	e7f4      	b.n	8008e44 <__swsetup_r+0xb0>
 8008e5a:	2000      	movs	r0, #0
 8008e5c:	e7f7      	b.n	8008e4e <__swsetup_r+0xba>
 8008e5e:	bf00      	nop
 8008e60:	2000000c 	.word	0x2000000c
 8008e64:	0800b70c 	.word	0x0800b70c
 8008e68:	0800b72c 	.word	0x0800b72c
 8008e6c:	0800b6ec 	.word	0x0800b6ec

08008e70 <abort>:
 8008e70:	b508      	push	{r3, lr}
 8008e72:	2006      	movs	r0, #6
 8008e74:	f000 fa52 	bl	800931c <raise>
 8008e78:	2001      	movs	r0, #1
 8008e7a:	f7f9 f970 	bl	800215e <_exit>
	...

08008e80 <__sflush_r>:
 8008e80:	898a      	ldrh	r2, [r1, #12]
 8008e82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e86:	4605      	mov	r5, r0
 8008e88:	0710      	lsls	r0, r2, #28
 8008e8a:	460c      	mov	r4, r1
 8008e8c:	d458      	bmi.n	8008f40 <__sflush_r+0xc0>
 8008e8e:	684b      	ldr	r3, [r1, #4]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	dc05      	bgt.n	8008ea0 <__sflush_r+0x20>
 8008e94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	dc02      	bgt.n	8008ea0 <__sflush_r+0x20>
 8008e9a:	2000      	movs	r0, #0
 8008e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ea0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ea2:	2e00      	cmp	r6, #0
 8008ea4:	d0f9      	beq.n	8008e9a <__sflush_r+0x1a>
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008eac:	682f      	ldr	r7, [r5, #0]
 8008eae:	602b      	str	r3, [r5, #0]
 8008eb0:	d032      	beq.n	8008f18 <__sflush_r+0x98>
 8008eb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008eb4:	89a3      	ldrh	r3, [r4, #12]
 8008eb6:	075a      	lsls	r2, r3, #29
 8008eb8:	d505      	bpl.n	8008ec6 <__sflush_r+0x46>
 8008eba:	6863      	ldr	r3, [r4, #4]
 8008ebc:	1ac0      	subs	r0, r0, r3
 8008ebe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ec0:	b10b      	cbz	r3, 8008ec6 <__sflush_r+0x46>
 8008ec2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ec4:	1ac0      	subs	r0, r0, r3
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	4602      	mov	r2, r0
 8008eca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ecc:	6a21      	ldr	r1, [r4, #32]
 8008ece:	4628      	mov	r0, r5
 8008ed0:	47b0      	blx	r6
 8008ed2:	1c43      	adds	r3, r0, #1
 8008ed4:	89a3      	ldrh	r3, [r4, #12]
 8008ed6:	d106      	bne.n	8008ee6 <__sflush_r+0x66>
 8008ed8:	6829      	ldr	r1, [r5, #0]
 8008eda:	291d      	cmp	r1, #29
 8008edc:	d82c      	bhi.n	8008f38 <__sflush_r+0xb8>
 8008ede:	4a2a      	ldr	r2, [pc, #168]	; (8008f88 <__sflush_r+0x108>)
 8008ee0:	40ca      	lsrs	r2, r1
 8008ee2:	07d6      	lsls	r6, r2, #31
 8008ee4:	d528      	bpl.n	8008f38 <__sflush_r+0xb8>
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	6062      	str	r2, [r4, #4]
 8008eea:	04d9      	lsls	r1, r3, #19
 8008eec:	6922      	ldr	r2, [r4, #16]
 8008eee:	6022      	str	r2, [r4, #0]
 8008ef0:	d504      	bpl.n	8008efc <__sflush_r+0x7c>
 8008ef2:	1c42      	adds	r2, r0, #1
 8008ef4:	d101      	bne.n	8008efa <__sflush_r+0x7a>
 8008ef6:	682b      	ldr	r3, [r5, #0]
 8008ef8:	b903      	cbnz	r3, 8008efc <__sflush_r+0x7c>
 8008efa:	6560      	str	r0, [r4, #84]	; 0x54
 8008efc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008efe:	602f      	str	r7, [r5, #0]
 8008f00:	2900      	cmp	r1, #0
 8008f02:	d0ca      	beq.n	8008e9a <__sflush_r+0x1a>
 8008f04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f08:	4299      	cmp	r1, r3
 8008f0a:	d002      	beq.n	8008f12 <__sflush_r+0x92>
 8008f0c:	4628      	mov	r0, r5
 8008f0e:	f7ff fae3 	bl	80084d8 <_free_r>
 8008f12:	2000      	movs	r0, #0
 8008f14:	6360      	str	r0, [r4, #52]	; 0x34
 8008f16:	e7c1      	b.n	8008e9c <__sflush_r+0x1c>
 8008f18:	6a21      	ldr	r1, [r4, #32]
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	4628      	mov	r0, r5
 8008f1e:	47b0      	blx	r6
 8008f20:	1c41      	adds	r1, r0, #1
 8008f22:	d1c7      	bne.n	8008eb4 <__sflush_r+0x34>
 8008f24:	682b      	ldr	r3, [r5, #0]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d0c4      	beq.n	8008eb4 <__sflush_r+0x34>
 8008f2a:	2b1d      	cmp	r3, #29
 8008f2c:	d001      	beq.n	8008f32 <__sflush_r+0xb2>
 8008f2e:	2b16      	cmp	r3, #22
 8008f30:	d101      	bne.n	8008f36 <__sflush_r+0xb6>
 8008f32:	602f      	str	r7, [r5, #0]
 8008f34:	e7b1      	b.n	8008e9a <__sflush_r+0x1a>
 8008f36:	89a3      	ldrh	r3, [r4, #12]
 8008f38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f3c:	81a3      	strh	r3, [r4, #12]
 8008f3e:	e7ad      	b.n	8008e9c <__sflush_r+0x1c>
 8008f40:	690f      	ldr	r7, [r1, #16]
 8008f42:	2f00      	cmp	r7, #0
 8008f44:	d0a9      	beq.n	8008e9a <__sflush_r+0x1a>
 8008f46:	0793      	lsls	r3, r2, #30
 8008f48:	680e      	ldr	r6, [r1, #0]
 8008f4a:	bf08      	it	eq
 8008f4c:	694b      	ldreq	r3, [r1, #20]
 8008f4e:	600f      	str	r7, [r1, #0]
 8008f50:	bf18      	it	ne
 8008f52:	2300      	movne	r3, #0
 8008f54:	eba6 0807 	sub.w	r8, r6, r7
 8008f58:	608b      	str	r3, [r1, #8]
 8008f5a:	f1b8 0f00 	cmp.w	r8, #0
 8008f5e:	dd9c      	ble.n	8008e9a <__sflush_r+0x1a>
 8008f60:	6a21      	ldr	r1, [r4, #32]
 8008f62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008f64:	4643      	mov	r3, r8
 8008f66:	463a      	mov	r2, r7
 8008f68:	4628      	mov	r0, r5
 8008f6a:	47b0      	blx	r6
 8008f6c:	2800      	cmp	r0, #0
 8008f6e:	dc06      	bgt.n	8008f7e <__sflush_r+0xfe>
 8008f70:	89a3      	ldrh	r3, [r4, #12]
 8008f72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f76:	81a3      	strh	r3, [r4, #12]
 8008f78:	f04f 30ff 	mov.w	r0, #4294967295
 8008f7c:	e78e      	b.n	8008e9c <__sflush_r+0x1c>
 8008f7e:	4407      	add	r7, r0
 8008f80:	eba8 0800 	sub.w	r8, r8, r0
 8008f84:	e7e9      	b.n	8008f5a <__sflush_r+0xda>
 8008f86:	bf00      	nop
 8008f88:	20400001 	.word	0x20400001

08008f8c <_fflush_r>:
 8008f8c:	b538      	push	{r3, r4, r5, lr}
 8008f8e:	690b      	ldr	r3, [r1, #16]
 8008f90:	4605      	mov	r5, r0
 8008f92:	460c      	mov	r4, r1
 8008f94:	b913      	cbnz	r3, 8008f9c <_fflush_r+0x10>
 8008f96:	2500      	movs	r5, #0
 8008f98:	4628      	mov	r0, r5
 8008f9a:	bd38      	pop	{r3, r4, r5, pc}
 8008f9c:	b118      	cbz	r0, 8008fa6 <_fflush_r+0x1a>
 8008f9e:	6983      	ldr	r3, [r0, #24]
 8008fa0:	b90b      	cbnz	r3, 8008fa6 <_fflush_r+0x1a>
 8008fa2:	f000 f887 	bl	80090b4 <__sinit>
 8008fa6:	4b14      	ldr	r3, [pc, #80]	; (8008ff8 <_fflush_r+0x6c>)
 8008fa8:	429c      	cmp	r4, r3
 8008faa:	d11b      	bne.n	8008fe4 <_fflush_r+0x58>
 8008fac:	686c      	ldr	r4, [r5, #4]
 8008fae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d0ef      	beq.n	8008f96 <_fflush_r+0xa>
 8008fb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008fb8:	07d0      	lsls	r0, r2, #31
 8008fba:	d404      	bmi.n	8008fc6 <_fflush_r+0x3a>
 8008fbc:	0599      	lsls	r1, r3, #22
 8008fbe:	d402      	bmi.n	8008fc6 <_fflush_r+0x3a>
 8008fc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fc2:	f000 f915 	bl	80091f0 <__retarget_lock_acquire_recursive>
 8008fc6:	4628      	mov	r0, r5
 8008fc8:	4621      	mov	r1, r4
 8008fca:	f7ff ff59 	bl	8008e80 <__sflush_r>
 8008fce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008fd0:	07da      	lsls	r2, r3, #31
 8008fd2:	4605      	mov	r5, r0
 8008fd4:	d4e0      	bmi.n	8008f98 <_fflush_r+0xc>
 8008fd6:	89a3      	ldrh	r3, [r4, #12]
 8008fd8:	059b      	lsls	r3, r3, #22
 8008fda:	d4dd      	bmi.n	8008f98 <_fflush_r+0xc>
 8008fdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fde:	f000 f908 	bl	80091f2 <__retarget_lock_release_recursive>
 8008fe2:	e7d9      	b.n	8008f98 <_fflush_r+0xc>
 8008fe4:	4b05      	ldr	r3, [pc, #20]	; (8008ffc <_fflush_r+0x70>)
 8008fe6:	429c      	cmp	r4, r3
 8008fe8:	d101      	bne.n	8008fee <_fflush_r+0x62>
 8008fea:	68ac      	ldr	r4, [r5, #8]
 8008fec:	e7df      	b.n	8008fae <_fflush_r+0x22>
 8008fee:	4b04      	ldr	r3, [pc, #16]	; (8009000 <_fflush_r+0x74>)
 8008ff0:	429c      	cmp	r4, r3
 8008ff2:	bf08      	it	eq
 8008ff4:	68ec      	ldreq	r4, [r5, #12]
 8008ff6:	e7da      	b.n	8008fae <_fflush_r+0x22>
 8008ff8:	0800b70c 	.word	0x0800b70c
 8008ffc:	0800b72c 	.word	0x0800b72c
 8009000:	0800b6ec 	.word	0x0800b6ec

08009004 <std>:
 8009004:	2300      	movs	r3, #0
 8009006:	b510      	push	{r4, lr}
 8009008:	4604      	mov	r4, r0
 800900a:	e9c0 3300 	strd	r3, r3, [r0]
 800900e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009012:	6083      	str	r3, [r0, #8]
 8009014:	8181      	strh	r1, [r0, #12]
 8009016:	6643      	str	r3, [r0, #100]	; 0x64
 8009018:	81c2      	strh	r2, [r0, #14]
 800901a:	6183      	str	r3, [r0, #24]
 800901c:	4619      	mov	r1, r3
 800901e:	2208      	movs	r2, #8
 8009020:	305c      	adds	r0, #92	; 0x5c
 8009022:	f7fd fba7 	bl	8006774 <memset>
 8009026:	4b05      	ldr	r3, [pc, #20]	; (800903c <std+0x38>)
 8009028:	6263      	str	r3, [r4, #36]	; 0x24
 800902a:	4b05      	ldr	r3, [pc, #20]	; (8009040 <std+0x3c>)
 800902c:	62a3      	str	r3, [r4, #40]	; 0x28
 800902e:	4b05      	ldr	r3, [pc, #20]	; (8009044 <std+0x40>)
 8009030:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009032:	4b05      	ldr	r3, [pc, #20]	; (8009048 <std+0x44>)
 8009034:	6224      	str	r4, [r4, #32]
 8009036:	6323      	str	r3, [r4, #48]	; 0x30
 8009038:	bd10      	pop	{r4, pc}
 800903a:	bf00      	nop
 800903c:	08009355 	.word	0x08009355
 8009040:	08009377 	.word	0x08009377
 8009044:	080093af 	.word	0x080093af
 8009048:	080093d3 	.word	0x080093d3

0800904c <_cleanup_r>:
 800904c:	4901      	ldr	r1, [pc, #4]	; (8009054 <_cleanup_r+0x8>)
 800904e:	f000 b8af 	b.w	80091b0 <_fwalk_reent>
 8009052:	bf00      	nop
 8009054:	08008f8d 	.word	0x08008f8d

08009058 <__sfmoreglue>:
 8009058:	b570      	push	{r4, r5, r6, lr}
 800905a:	1e4a      	subs	r2, r1, #1
 800905c:	2568      	movs	r5, #104	; 0x68
 800905e:	4355      	muls	r5, r2
 8009060:	460e      	mov	r6, r1
 8009062:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009066:	f7ff fa87 	bl	8008578 <_malloc_r>
 800906a:	4604      	mov	r4, r0
 800906c:	b140      	cbz	r0, 8009080 <__sfmoreglue+0x28>
 800906e:	2100      	movs	r1, #0
 8009070:	e9c0 1600 	strd	r1, r6, [r0]
 8009074:	300c      	adds	r0, #12
 8009076:	60a0      	str	r0, [r4, #8]
 8009078:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800907c:	f7fd fb7a 	bl	8006774 <memset>
 8009080:	4620      	mov	r0, r4
 8009082:	bd70      	pop	{r4, r5, r6, pc}

08009084 <__sfp_lock_acquire>:
 8009084:	4801      	ldr	r0, [pc, #4]	; (800908c <__sfp_lock_acquire+0x8>)
 8009086:	f000 b8b3 	b.w	80091f0 <__retarget_lock_acquire_recursive>
 800908a:	bf00      	nop
 800908c:	200004e8 	.word	0x200004e8

08009090 <__sfp_lock_release>:
 8009090:	4801      	ldr	r0, [pc, #4]	; (8009098 <__sfp_lock_release+0x8>)
 8009092:	f000 b8ae 	b.w	80091f2 <__retarget_lock_release_recursive>
 8009096:	bf00      	nop
 8009098:	200004e8 	.word	0x200004e8

0800909c <__sinit_lock_acquire>:
 800909c:	4801      	ldr	r0, [pc, #4]	; (80090a4 <__sinit_lock_acquire+0x8>)
 800909e:	f000 b8a7 	b.w	80091f0 <__retarget_lock_acquire_recursive>
 80090a2:	bf00      	nop
 80090a4:	200004e3 	.word	0x200004e3

080090a8 <__sinit_lock_release>:
 80090a8:	4801      	ldr	r0, [pc, #4]	; (80090b0 <__sinit_lock_release+0x8>)
 80090aa:	f000 b8a2 	b.w	80091f2 <__retarget_lock_release_recursive>
 80090ae:	bf00      	nop
 80090b0:	200004e3 	.word	0x200004e3

080090b4 <__sinit>:
 80090b4:	b510      	push	{r4, lr}
 80090b6:	4604      	mov	r4, r0
 80090b8:	f7ff fff0 	bl	800909c <__sinit_lock_acquire>
 80090bc:	69a3      	ldr	r3, [r4, #24]
 80090be:	b11b      	cbz	r3, 80090c8 <__sinit+0x14>
 80090c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090c4:	f7ff bff0 	b.w	80090a8 <__sinit_lock_release>
 80090c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80090cc:	6523      	str	r3, [r4, #80]	; 0x50
 80090ce:	4b13      	ldr	r3, [pc, #76]	; (800911c <__sinit+0x68>)
 80090d0:	4a13      	ldr	r2, [pc, #76]	; (8009120 <__sinit+0x6c>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	62a2      	str	r2, [r4, #40]	; 0x28
 80090d6:	42a3      	cmp	r3, r4
 80090d8:	bf04      	itt	eq
 80090da:	2301      	moveq	r3, #1
 80090dc:	61a3      	streq	r3, [r4, #24]
 80090de:	4620      	mov	r0, r4
 80090e0:	f000 f820 	bl	8009124 <__sfp>
 80090e4:	6060      	str	r0, [r4, #4]
 80090e6:	4620      	mov	r0, r4
 80090e8:	f000 f81c 	bl	8009124 <__sfp>
 80090ec:	60a0      	str	r0, [r4, #8]
 80090ee:	4620      	mov	r0, r4
 80090f0:	f000 f818 	bl	8009124 <__sfp>
 80090f4:	2200      	movs	r2, #0
 80090f6:	60e0      	str	r0, [r4, #12]
 80090f8:	2104      	movs	r1, #4
 80090fa:	6860      	ldr	r0, [r4, #4]
 80090fc:	f7ff ff82 	bl	8009004 <std>
 8009100:	68a0      	ldr	r0, [r4, #8]
 8009102:	2201      	movs	r2, #1
 8009104:	2109      	movs	r1, #9
 8009106:	f7ff ff7d 	bl	8009004 <std>
 800910a:	68e0      	ldr	r0, [r4, #12]
 800910c:	2202      	movs	r2, #2
 800910e:	2112      	movs	r1, #18
 8009110:	f7ff ff78 	bl	8009004 <std>
 8009114:	2301      	movs	r3, #1
 8009116:	61a3      	str	r3, [r4, #24]
 8009118:	e7d2      	b.n	80090c0 <__sinit+0xc>
 800911a:	bf00      	nop
 800911c:	0800b368 	.word	0x0800b368
 8009120:	0800904d 	.word	0x0800904d

08009124 <__sfp>:
 8009124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009126:	4607      	mov	r7, r0
 8009128:	f7ff ffac 	bl	8009084 <__sfp_lock_acquire>
 800912c:	4b1e      	ldr	r3, [pc, #120]	; (80091a8 <__sfp+0x84>)
 800912e:	681e      	ldr	r6, [r3, #0]
 8009130:	69b3      	ldr	r3, [r6, #24]
 8009132:	b913      	cbnz	r3, 800913a <__sfp+0x16>
 8009134:	4630      	mov	r0, r6
 8009136:	f7ff ffbd 	bl	80090b4 <__sinit>
 800913a:	3648      	adds	r6, #72	; 0x48
 800913c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009140:	3b01      	subs	r3, #1
 8009142:	d503      	bpl.n	800914c <__sfp+0x28>
 8009144:	6833      	ldr	r3, [r6, #0]
 8009146:	b30b      	cbz	r3, 800918c <__sfp+0x68>
 8009148:	6836      	ldr	r6, [r6, #0]
 800914a:	e7f7      	b.n	800913c <__sfp+0x18>
 800914c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009150:	b9d5      	cbnz	r5, 8009188 <__sfp+0x64>
 8009152:	4b16      	ldr	r3, [pc, #88]	; (80091ac <__sfp+0x88>)
 8009154:	60e3      	str	r3, [r4, #12]
 8009156:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800915a:	6665      	str	r5, [r4, #100]	; 0x64
 800915c:	f000 f847 	bl	80091ee <__retarget_lock_init_recursive>
 8009160:	f7ff ff96 	bl	8009090 <__sfp_lock_release>
 8009164:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009168:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800916c:	6025      	str	r5, [r4, #0]
 800916e:	61a5      	str	r5, [r4, #24]
 8009170:	2208      	movs	r2, #8
 8009172:	4629      	mov	r1, r5
 8009174:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009178:	f7fd fafc 	bl	8006774 <memset>
 800917c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009180:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009184:	4620      	mov	r0, r4
 8009186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009188:	3468      	adds	r4, #104	; 0x68
 800918a:	e7d9      	b.n	8009140 <__sfp+0x1c>
 800918c:	2104      	movs	r1, #4
 800918e:	4638      	mov	r0, r7
 8009190:	f7ff ff62 	bl	8009058 <__sfmoreglue>
 8009194:	4604      	mov	r4, r0
 8009196:	6030      	str	r0, [r6, #0]
 8009198:	2800      	cmp	r0, #0
 800919a:	d1d5      	bne.n	8009148 <__sfp+0x24>
 800919c:	f7ff ff78 	bl	8009090 <__sfp_lock_release>
 80091a0:	230c      	movs	r3, #12
 80091a2:	603b      	str	r3, [r7, #0]
 80091a4:	e7ee      	b.n	8009184 <__sfp+0x60>
 80091a6:	bf00      	nop
 80091a8:	0800b368 	.word	0x0800b368
 80091ac:	ffff0001 	.word	0xffff0001

080091b0 <_fwalk_reent>:
 80091b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091b4:	4606      	mov	r6, r0
 80091b6:	4688      	mov	r8, r1
 80091b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80091bc:	2700      	movs	r7, #0
 80091be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80091c2:	f1b9 0901 	subs.w	r9, r9, #1
 80091c6:	d505      	bpl.n	80091d4 <_fwalk_reent+0x24>
 80091c8:	6824      	ldr	r4, [r4, #0]
 80091ca:	2c00      	cmp	r4, #0
 80091cc:	d1f7      	bne.n	80091be <_fwalk_reent+0xe>
 80091ce:	4638      	mov	r0, r7
 80091d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091d4:	89ab      	ldrh	r3, [r5, #12]
 80091d6:	2b01      	cmp	r3, #1
 80091d8:	d907      	bls.n	80091ea <_fwalk_reent+0x3a>
 80091da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80091de:	3301      	adds	r3, #1
 80091e0:	d003      	beq.n	80091ea <_fwalk_reent+0x3a>
 80091e2:	4629      	mov	r1, r5
 80091e4:	4630      	mov	r0, r6
 80091e6:	47c0      	blx	r8
 80091e8:	4307      	orrs	r7, r0
 80091ea:	3568      	adds	r5, #104	; 0x68
 80091ec:	e7e9      	b.n	80091c2 <_fwalk_reent+0x12>

080091ee <__retarget_lock_init_recursive>:
 80091ee:	4770      	bx	lr

080091f0 <__retarget_lock_acquire_recursive>:
 80091f0:	4770      	bx	lr

080091f2 <__retarget_lock_release_recursive>:
 80091f2:	4770      	bx	lr

080091f4 <__swhatbuf_r>:
 80091f4:	b570      	push	{r4, r5, r6, lr}
 80091f6:	460e      	mov	r6, r1
 80091f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091fc:	2900      	cmp	r1, #0
 80091fe:	b096      	sub	sp, #88	; 0x58
 8009200:	4614      	mov	r4, r2
 8009202:	461d      	mov	r5, r3
 8009204:	da07      	bge.n	8009216 <__swhatbuf_r+0x22>
 8009206:	2300      	movs	r3, #0
 8009208:	602b      	str	r3, [r5, #0]
 800920a:	89b3      	ldrh	r3, [r6, #12]
 800920c:	061a      	lsls	r2, r3, #24
 800920e:	d410      	bmi.n	8009232 <__swhatbuf_r+0x3e>
 8009210:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009214:	e00e      	b.n	8009234 <__swhatbuf_r+0x40>
 8009216:	466a      	mov	r2, sp
 8009218:	f000 f902 	bl	8009420 <_fstat_r>
 800921c:	2800      	cmp	r0, #0
 800921e:	dbf2      	blt.n	8009206 <__swhatbuf_r+0x12>
 8009220:	9a01      	ldr	r2, [sp, #4]
 8009222:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009226:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800922a:	425a      	negs	r2, r3
 800922c:	415a      	adcs	r2, r3
 800922e:	602a      	str	r2, [r5, #0]
 8009230:	e7ee      	b.n	8009210 <__swhatbuf_r+0x1c>
 8009232:	2340      	movs	r3, #64	; 0x40
 8009234:	2000      	movs	r0, #0
 8009236:	6023      	str	r3, [r4, #0]
 8009238:	b016      	add	sp, #88	; 0x58
 800923a:	bd70      	pop	{r4, r5, r6, pc}

0800923c <__smakebuf_r>:
 800923c:	898b      	ldrh	r3, [r1, #12]
 800923e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009240:	079d      	lsls	r5, r3, #30
 8009242:	4606      	mov	r6, r0
 8009244:	460c      	mov	r4, r1
 8009246:	d507      	bpl.n	8009258 <__smakebuf_r+0x1c>
 8009248:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800924c:	6023      	str	r3, [r4, #0]
 800924e:	6123      	str	r3, [r4, #16]
 8009250:	2301      	movs	r3, #1
 8009252:	6163      	str	r3, [r4, #20]
 8009254:	b002      	add	sp, #8
 8009256:	bd70      	pop	{r4, r5, r6, pc}
 8009258:	ab01      	add	r3, sp, #4
 800925a:	466a      	mov	r2, sp
 800925c:	f7ff ffca 	bl	80091f4 <__swhatbuf_r>
 8009260:	9900      	ldr	r1, [sp, #0]
 8009262:	4605      	mov	r5, r0
 8009264:	4630      	mov	r0, r6
 8009266:	f7ff f987 	bl	8008578 <_malloc_r>
 800926a:	b948      	cbnz	r0, 8009280 <__smakebuf_r+0x44>
 800926c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009270:	059a      	lsls	r2, r3, #22
 8009272:	d4ef      	bmi.n	8009254 <__smakebuf_r+0x18>
 8009274:	f023 0303 	bic.w	r3, r3, #3
 8009278:	f043 0302 	orr.w	r3, r3, #2
 800927c:	81a3      	strh	r3, [r4, #12]
 800927e:	e7e3      	b.n	8009248 <__smakebuf_r+0xc>
 8009280:	4b0d      	ldr	r3, [pc, #52]	; (80092b8 <__smakebuf_r+0x7c>)
 8009282:	62b3      	str	r3, [r6, #40]	; 0x28
 8009284:	89a3      	ldrh	r3, [r4, #12]
 8009286:	6020      	str	r0, [r4, #0]
 8009288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800928c:	81a3      	strh	r3, [r4, #12]
 800928e:	9b00      	ldr	r3, [sp, #0]
 8009290:	6163      	str	r3, [r4, #20]
 8009292:	9b01      	ldr	r3, [sp, #4]
 8009294:	6120      	str	r0, [r4, #16]
 8009296:	b15b      	cbz	r3, 80092b0 <__smakebuf_r+0x74>
 8009298:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800929c:	4630      	mov	r0, r6
 800929e:	f000 f8d1 	bl	8009444 <_isatty_r>
 80092a2:	b128      	cbz	r0, 80092b0 <__smakebuf_r+0x74>
 80092a4:	89a3      	ldrh	r3, [r4, #12]
 80092a6:	f023 0303 	bic.w	r3, r3, #3
 80092aa:	f043 0301 	orr.w	r3, r3, #1
 80092ae:	81a3      	strh	r3, [r4, #12]
 80092b0:	89a0      	ldrh	r0, [r4, #12]
 80092b2:	4305      	orrs	r5, r0
 80092b4:	81a5      	strh	r5, [r4, #12]
 80092b6:	e7cd      	b.n	8009254 <__smakebuf_r+0x18>
 80092b8:	0800904d 	.word	0x0800904d

080092bc <_malloc_usable_size_r>:
 80092bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092c0:	1f18      	subs	r0, r3, #4
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	bfbc      	itt	lt
 80092c6:	580b      	ldrlt	r3, [r1, r0]
 80092c8:	18c0      	addlt	r0, r0, r3
 80092ca:	4770      	bx	lr

080092cc <_raise_r>:
 80092cc:	291f      	cmp	r1, #31
 80092ce:	b538      	push	{r3, r4, r5, lr}
 80092d0:	4604      	mov	r4, r0
 80092d2:	460d      	mov	r5, r1
 80092d4:	d904      	bls.n	80092e0 <_raise_r+0x14>
 80092d6:	2316      	movs	r3, #22
 80092d8:	6003      	str	r3, [r0, #0]
 80092da:	f04f 30ff 	mov.w	r0, #4294967295
 80092de:	bd38      	pop	{r3, r4, r5, pc}
 80092e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80092e2:	b112      	cbz	r2, 80092ea <_raise_r+0x1e>
 80092e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80092e8:	b94b      	cbnz	r3, 80092fe <_raise_r+0x32>
 80092ea:	4620      	mov	r0, r4
 80092ec:	f000 f830 	bl	8009350 <_getpid_r>
 80092f0:	462a      	mov	r2, r5
 80092f2:	4601      	mov	r1, r0
 80092f4:	4620      	mov	r0, r4
 80092f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092fa:	f000 b817 	b.w	800932c <_kill_r>
 80092fe:	2b01      	cmp	r3, #1
 8009300:	d00a      	beq.n	8009318 <_raise_r+0x4c>
 8009302:	1c59      	adds	r1, r3, #1
 8009304:	d103      	bne.n	800930e <_raise_r+0x42>
 8009306:	2316      	movs	r3, #22
 8009308:	6003      	str	r3, [r0, #0]
 800930a:	2001      	movs	r0, #1
 800930c:	e7e7      	b.n	80092de <_raise_r+0x12>
 800930e:	2400      	movs	r4, #0
 8009310:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009314:	4628      	mov	r0, r5
 8009316:	4798      	blx	r3
 8009318:	2000      	movs	r0, #0
 800931a:	e7e0      	b.n	80092de <_raise_r+0x12>

0800931c <raise>:
 800931c:	4b02      	ldr	r3, [pc, #8]	; (8009328 <raise+0xc>)
 800931e:	4601      	mov	r1, r0
 8009320:	6818      	ldr	r0, [r3, #0]
 8009322:	f7ff bfd3 	b.w	80092cc <_raise_r>
 8009326:	bf00      	nop
 8009328:	2000000c 	.word	0x2000000c

0800932c <_kill_r>:
 800932c:	b538      	push	{r3, r4, r5, lr}
 800932e:	4d07      	ldr	r5, [pc, #28]	; (800934c <_kill_r+0x20>)
 8009330:	2300      	movs	r3, #0
 8009332:	4604      	mov	r4, r0
 8009334:	4608      	mov	r0, r1
 8009336:	4611      	mov	r1, r2
 8009338:	602b      	str	r3, [r5, #0]
 800933a:	f7f8 ff00 	bl	800213e <_kill>
 800933e:	1c43      	adds	r3, r0, #1
 8009340:	d102      	bne.n	8009348 <_kill_r+0x1c>
 8009342:	682b      	ldr	r3, [r5, #0]
 8009344:	b103      	cbz	r3, 8009348 <_kill_r+0x1c>
 8009346:	6023      	str	r3, [r4, #0]
 8009348:	bd38      	pop	{r3, r4, r5, pc}
 800934a:	bf00      	nop
 800934c:	200004dc 	.word	0x200004dc

08009350 <_getpid_r>:
 8009350:	f7f8 beed 	b.w	800212e <_getpid>

08009354 <__sread>:
 8009354:	b510      	push	{r4, lr}
 8009356:	460c      	mov	r4, r1
 8009358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800935c:	f000 f894 	bl	8009488 <_read_r>
 8009360:	2800      	cmp	r0, #0
 8009362:	bfab      	itete	ge
 8009364:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009366:	89a3      	ldrhlt	r3, [r4, #12]
 8009368:	181b      	addge	r3, r3, r0
 800936a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800936e:	bfac      	ite	ge
 8009370:	6563      	strge	r3, [r4, #84]	; 0x54
 8009372:	81a3      	strhlt	r3, [r4, #12]
 8009374:	bd10      	pop	{r4, pc}

08009376 <__swrite>:
 8009376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800937a:	461f      	mov	r7, r3
 800937c:	898b      	ldrh	r3, [r1, #12]
 800937e:	05db      	lsls	r3, r3, #23
 8009380:	4605      	mov	r5, r0
 8009382:	460c      	mov	r4, r1
 8009384:	4616      	mov	r6, r2
 8009386:	d505      	bpl.n	8009394 <__swrite+0x1e>
 8009388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800938c:	2302      	movs	r3, #2
 800938e:	2200      	movs	r2, #0
 8009390:	f000 f868 	bl	8009464 <_lseek_r>
 8009394:	89a3      	ldrh	r3, [r4, #12]
 8009396:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800939a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800939e:	81a3      	strh	r3, [r4, #12]
 80093a0:	4632      	mov	r2, r6
 80093a2:	463b      	mov	r3, r7
 80093a4:	4628      	mov	r0, r5
 80093a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093aa:	f000 b817 	b.w	80093dc <_write_r>

080093ae <__sseek>:
 80093ae:	b510      	push	{r4, lr}
 80093b0:	460c      	mov	r4, r1
 80093b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093b6:	f000 f855 	bl	8009464 <_lseek_r>
 80093ba:	1c43      	adds	r3, r0, #1
 80093bc:	89a3      	ldrh	r3, [r4, #12]
 80093be:	bf15      	itete	ne
 80093c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80093c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80093c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80093ca:	81a3      	strheq	r3, [r4, #12]
 80093cc:	bf18      	it	ne
 80093ce:	81a3      	strhne	r3, [r4, #12]
 80093d0:	bd10      	pop	{r4, pc}

080093d2 <__sclose>:
 80093d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093d6:	f000 b813 	b.w	8009400 <_close_r>
	...

080093dc <_write_r>:
 80093dc:	b538      	push	{r3, r4, r5, lr}
 80093de:	4d07      	ldr	r5, [pc, #28]	; (80093fc <_write_r+0x20>)
 80093e0:	4604      	mov	r4, r0
 80093e2:	4608      	mov	r0, r1
 80093e4:	4611      	mov	r1, r2
 80093e6:	2200      	movs	r2, #0
 80093e8:	602a      	str	r2, [r5, #0]
 80093ea:	461a      	mov	r2, r3
 80093ec:	f7f8 fede 	bl	80021ac <_write>
 80093f0:	1c43      	adds	r3, r0, #1
 80093f2:	d102      	bne.n	80093fa <_write_r+0x1e>
 80093f4:	682b      	ldr	r3, [r5, #0]
 80093f6:	b103      	cbz	r3, 80093fa <_write_r+0x1e>
 80093f8:	6023      	str	r3, [r4, #0]
 80093fa:	bd38      	pop	{r3, r4, r5, pc}
 80093fc:	200004dc 	.word	0x200004dc

08009400 <_close_r>:
 8009400:	b538      	push	{r3, r4, r5, lr}
 8009402:	4d06      	ldr	r5, [pc, #24]	; (800941c <_close_r+0x1c>)
 8009404:	2300      	movs	r3, #0
 8009406:	4604      	mov	r4, r0
 8009408:	4608      	mov	r0, r1
 800940a:	602b      	str	r3, [r5, #0]
 800940c:	f7f8 feea 	bl	80021e4 <_close>
 8009410:	1c43      	adds	r3, r0, #1
 8009412:	d102      	bne.n	800941a <_close_r+0x1a>
 8009414:	682b      	ldr	r3, [r5, #0]
 8009416:	b103      	cbz	r3, 800941a <_close_r+0x1a>
 8009418:	6023      	str	r3, [r4, #0]
 800941a:	bd38      	pop	{r3, r4, r5, pc}
 800941c:	200004dc 	.word	0x200004dc

08009420 <_fstat_r>:
 8009420:	b538      	push	{r3, r4, r5, lr}
 8009422:	4d07      	ldr	r5, [pc, #28]	; (8009440 <_fstat_r+0x20>)
 8009424:	2300      	movs	r3, #0
 8009426:	4604      	mov	r4, r0
 8009428:	4608      	mov	r0, r1
 800942a:	4611      	mov	r1, r2
 800942c:	602b      	str	r3, [r5, #0]
 800942e:	f7f8 fee5 	bl	80021fc <_fstat>
 8009432:	1c43      	adds	r3, r0, #1
 8009434:	d102      	bne.n	800943c <_fstat_r+0x1c>
 8009436:	682b      	ldr	r3, [r5, #0]
 8009438:	b103      	cbz	r3, 800943c <_fstat_r+0x1c>
 800943a:	6023      	str	r3, [r4, #0]
 800943c:	bd38      	pop	{r3, r4, r5, pc}
 800943e:	bf00      	nop
 8009440:	200004dc 	.word	0x200004dc

08009444 <_isatty_r>:
 8009444:	b538      	push	{r3, r4, r5, lr}
 8009446:	4d06      	ldr	r5, [pc, #24]	; (8009460 <_isatty_r+0x1c>)
 8009448:	2300      	movs	r3, #0
 800944a:	4604      	mov	r4, r0
 800944c:	4608      	mov	r0, r1
 800944e:	602b      	str	r3, [r5, #0]
 8009450:	f7f8 fee4 	bl	800221c <_isatty>
 8009454:	1c43      	adds	r3, r0, #1
 8009456:	d102      	bne.n	800945e <_isatty_r+0x1a>
 8009458:	682b      	ldr	r3, [r5, #0]
 800945a:	b103      	cbz	r3, 800945e <_isatty_r+0x1a>
 800945c:	6023      	str	r3, [r4, #0]
 800945e:	bd38      	pop	{r3, r4, r5, pc}
 8009460:	200004dc 	.word	0x200004dc

08009464 <_lseek_r>:
 8009464:	b538      	push	{r3, r4, r5, lr}
 8009466:	4d07      	ldr	r5, [pc, #28]	; (8009484 <_lseek_r+0x20>)
 8009468:	4604      	mov	r4, r0
 800946a:	4608      	mov	r0, r1
 800946c:	4611      	mov	r1, r2
 800946e:	2200      	movs	r2, #0
 8009470:	602a      	str	r2, [r5, #0]
 8009472:	461a      	mov	r2, r3
 8009474:	f7f8 fedd 	bl	8002232 <_lseek>
 8009478:	1c43      	adds	r3, r0, #1
 800947a:	d102      	bne.n	8009482 <_lseek_r+0x1e>
 800947c:	682b      	ldr	r3, [r5, #0]
 800947e:	b103      	cbz	r3, 8009482 <_lseek_r+0x1e>
 8009480:	6023      	str	r3, [r4, #0]
 8009482:	bd38      	pop	{r3, r4, r5, pc}
 8009484:	200004dc 	.word	0x200004dc

08009488 <_read_r>:
 8009488:	b538      	push	{r3, r4, r5, lr}
 800948a:	4d07      	ldr	r5, [pc, #28]	; (80094a8 <_read_r+0x20>)
 800948c:	4604      	mov	r4, r0
 800948e:	4608      	mov	r0, r1
 8009490:	4611      	mov	r1, r2
 8009492:	2200      	movs	r2, #0
 8009494:	602a      	str	r2, [r5, #0]
 8009496:	461a      	mov	r2, r3
 8009498:	f7f8 fe6b 	bl	8002172 <_read>
 800949c:	1c43      	adds	r3, r0, #1
 800949e:	d102      	bne.n	80094a6 <_read_r+0x1e>
 80094a0:	682b      	ldr	r3, [r5, #0]
 80094a2:	b103      	cbz	r3, 80094a6 <_read_r+0x1e>
 80094a4:	6023      	str	r3, [r4, #0]
 80094a6:	bd38      	pop	{r3, r4, r5, pc}
 80094a8:	200004dc 	.word	0x200004dc
 80094ac:	00000000 	.word	0x00000000

080094b0 <atan>:
 80094b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094b4:	ec55 4b10 	vmov	r4, r5, d0
 80094b8:	4bc3      	ldr	r3, [pc, #780]	; (80097c8 <atan+0x318>)
 80094ba:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80094be:	429e      	cmp	r6, r3
 80094c0:	46ab      	mov	fp, r5
 80094c2:	dd18      	ble.n	80094f6 <atan+0x46>
 80094c4:	4bc1      	ldr	r3, [pc, #772]	; (80097cc <atan+0x31c>)
 80094c6:	429e      	cmp	r6, r3
 80094c8:	dc01      	bgt.n	80094ce <atan+0x1e>
 80094ca:	d109      	bne.n	80094e0 <atan+0x30>
 80094cc:	b144      	cbz	r4, 80094e0 <atan+0x30>
 80094ce:	4622      	mov	r2, r4
 80094d0:	462b      	mov	r3, r5
 80094d2:	4620      	mov	r0, r4
 80094d4:	4629      	mov	r1, r5
 80094d6:	f7f6 fee1 	bl	800029c <__adddf3>
 80094da:	4604      	mov	r4, r0
 80094dc:	460d      	mov	r5, r1
 80094de:	e006      	b.n	80094ee <atan+0x3e>
 80094e0:	f1bb 0f00 	cmp.w	fp, #0
 80094e4:	f300 8131 	bgt.w	800974a <atan+0x29a>
 80094e8:	a59b      	add	r5, pc, #620	; (adr r5, 8009758 <atan+0x2a8>)
 80094ea:	e9d5 4500 	ldrd	r4, r5, [r5]
 80094ee:	ec45 4b10 	vmov	d0, r4, r5
 80094f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094f6:	4bb6      	ldr	r3, [pc, #728]	; (80097d0 <atan+0x320>)
 80094f8:	429e      	cmp	r6, r3
 80094fa:	dc14      	bgt.n	8009526 <atan+0x76>
 80094fc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009500:	429e      	cmp	r6, r3
 8009502:	dc0d      	bgt.n	8009520 <atan+0x70>
 8009504:	a396      	add	r3, pc, #600	; (adr r3, 8009760 <atan+0x2b0>)
 8009506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800950a:	ee10 0a10 	vmov	r0, s0
 800950e:	4629      	mov	r1, r5
 8009510:	f7f6 fec4 	bl	800029c <__adddf3>
 8009514:	4baf      	ldr	r3, [pc, #700]	; (80097d4 <atan+0x324>)
 8009516:	2200      	movs	r2, #0
 8009518:	f7f7 fb06 	bl	8000b28 <__aeabi_dcmpgt>
 800951c:	2800      	cmp	r0, #0
 800951e:	d1e6      	bne.n	80094ee <atan+0x3e>
 8009520:	f04f 3aff 	mov.w	sl, #4294967295
 8009524:	e02b      	b.n	800957e <atan+0xce>
 8009526:	f000 f9b3 	bl	8009890 <fabs>
 800952a:	4bab      	ldr	r3, [pc, #684]	; (80097d8 <atan+0x328>)
 800952c:	429e      	cmp	r6, r3
 800952e:	ec55 4b10 	vmov	r4, r5, d0
 8009532:	f300 80bf 	bgt.w	80096b4 <atan+0x204>
 8009536:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800953a:	429e      	cmp	r6, r3
 800953c:	f300 80a0 	bgt.w	8009680 <atan+0x1d0>
 8009540:	ee10 2a10 	vmov	r2, s0
 8009544:	ee10 0a10 	vmov	r0, s0
 8009548:	462b      	mov	r3, r5
 800954a:	4629      	mov	r1, r5
 800954c:	f7f6 fea6 	bl	800029c <__adddf3>
 8009550:	4ba0      	ldr	r3, [pc, #640]	; (80097d4 <atan+0x324>)
 8009552:	2200      	movs	r2, #0
 8009554:	f7f6 fea0 	bl	8000298 <__aeabi_dsub>
 8009558:	2200      	movs	r2, #0
 800955a:	4606      	mov	r6, r0
 800955c:	460f      	mov	r7, r1
 800955e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009562:	4620      	mov	r0, r4
 8009564:	4629      	mov	r1, r5
 8009566:	f7f6 fe99 	bl	800029c <__adddf3>
 800956a:	4602      	mov	r2, r0
 800956c:	460b      	mov	r3, r1
 800956e:	4630      	mov	r0, r6
 8009570:	4639      	mov	r1, r7
 8009572:	f7f7 f973 	bl	800085c <__aeabi_ddiv>
 8009576:	f04f 0a00 	mov.w	sl, #0
 800957a:	4604      	mov	r4, r0
 800957c:	460d      	mov	r5, r1
 800957e:	4622      	mov	r2, r4
 8009580:	462b      	mov	r3, r5
 8009582:	4620      	mov	r0, r4
 8009584:	4629      	mov	r1, r5
 8009586:	f7f7 f83f 	bl	8000608 <__aeabi_dmul>
 800958a:	4602      	mov	r2, r0
 800958c:	460b      	mov	r3, r1
 800958e:	4680      	mov	r8, r0
 8009590:	4689      	mov	r9, r1
 8009592:	f7f7 f839 	bl	8000608 <__aeabi_dmul>
 8009596:	a374      	add	r3, pc, #464	; (adr r3, 8009768 <atan+0x2b8>)
 8009598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800959c:	4606      	mov	r6, r0
 800959e:	460f      	mov	r7, r1
 80095a0:	f7f7 f832 	bl	8000608 <__aeabi_dmul>
 80095a4:	a372      	add	r3, pc, #456	; (adr r3, 8009770 <atan+0x2c0>)
 80095a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095aa:	f7f6 fe77 	bl	800029c <__adddf3>
 80095ae:	4632      	mov	r2, r6
 80095b0:	463b      	mov	r3, r7
 80095b2:	f7f7 f829 	bl	8000608 <__aeabi_dmul>
 80095b6:	a370      	add	r3, pc, #448	; (adr r3, 8009778 <atan+0x2c8>)
 80095b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095bc:	f7f6 fe6e 	bl	800029c <__adddf3>
 80095c0:	4632      	mov	r2, r6
 80095c2:	463b      	mov	r3, r7
 80095c4:	f7f7 f820 	bl	8000608 <__aeabi_dmul>
 80095c8:	a36d      	add	r3, pc, #436	; (adr r3, 8009780 <atan+0x2d0>)
 80095ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ce:	f7f6 fe65 	bl	800029c <__adddf3>
 80095d2:	4632      	mov	r2, r6
 80095d4:	463b      	mov	r3, r7
 80095d6:	f7f7 f817 	bl	8000608 <__aeabi_dmul>
 80095da:	a36b      	add	r3, pc, #428	; (adr r3, 8009788 <atan+0x2d8>)
 80095dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e0:	f7f6 fe5c 	bl	800029c <__adddf3>
 80095e4:	4632      	mov	r2, r6
 80095e6:	463b      	mov	r3, r7
 80095e8:	f7f7 f80e 	bl	8000608 <__aeabi_dmul>
 80095ec:	a368      	add	r3, pc, #416	; (adr r3, 8009790 <atan+0x2e0>)
 80095ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f2:	f7f6 fe53 	bl	800029c <__adddf3>
 80095f6:	4642      	mov	r2, r8
 80095f8:	464b      	mov	r3, r9
 80095fa:	f7f7 f805 	bl	8000608 <__aeabi_dmul>
 80095fe:	a366      	add	r3, pc, #408	; (adr r3, 8009798 <atan+0x2e8>)
 8009600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009604:	4680      	mov	r8, r0
 8009606:	4689      	mov	r9, r1
 8009608:	4630      	mov	r0, r6
 800960a:	4639      	mov	r1, r7
 800960c:	f7f6 fffc 	bl	8000608 <__aeabi_dmul>
 8009610:	a363      	add	r3, pc, #396	; (adr r3, 80097a0 <atan+0x2f0>)
 8009612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009616:	f7f6 fe3f 	bl	8000298 <__aeabi_dsub>
 800961a:	4632      	mov	r2, r6
 800961c:	463b      	mov	r3, r7
 800961e:	f7f6 fff3 	bl	8000608 <__aeabi_dmul>
 8009622:	a361      	add	r3, pc, #388	; (adr r3, 80097a8 <atan+0x2f8>)
 8009624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009628:	f7f6 fe36 	bl	8000298 <__aeabi_dsub>
 800962c:	4632      	mov	r2, r6
 800962e:	463b      	mov	r3, r7
 8009630:	f7f6 ffea 	bl	8000608 <__aeabi_dmul>
 8009634:	a35e      	add	r3, pc, #376	; (adr r3, 80097b0 <atan+0x300>)
 8009636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800963a:	f7f6 fe2d 	bl	8000298 <__aeabi_dsub>
 800963e:	4632      	mov	r2, r6
 8009640:	463b      	mov	r3, r7
 8009642:	f7f6 ffe1 	bl	8000608 <__aeabi_dmul>
 8009646:	a35c      	add	r3, pc, #368	; (adr r3, 80097b8 <atan+0x308>)
 8009648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800964c:	f7f6 fe24 	bl	8000298 <__aeabi_dsub>
 8009650:	4632      	mov	r2, r6
 8009652:	463b      	mov	r3, r7
 8009654:	f7f6 ffd8 	bl	8000608 <__aeabi_dmul>
 8009658:	4602      	mov	r2, r0
 800965a:	460b      	mov	r3, r1
 800965c:	4640      	mov	r0, r8
 800965e:	4649      	mov	r1, r9
 8009660:	f7f6 fe1c 	bl	800029c <__adddf3>
 8009664:	4622      	mov	r2, r4
 8009666:	462b      	mov	r3, r5
 8009668:	f7f6 ffce 	bl	8000608 <__aeabi_dmul>
 800966c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009670:	4602      	mov	r2, r0
 8009672:	460b      	mov	r3, r1
 8009674:	d14b      	bne.n	800970e <atan+0x25e>
 8009676:	4620      	mov	r0, r4
 8009678:	4629      	mov	r1, r5
 800967a:	f7f6 fe0d 	bl	8000298 <__aeabi_dsub>
 800967e:	e72c      	b.n	80094da <atan+0x2a>
 8009680:	ee10 0a10 	vmov	r0, s0
 8009684:	4b53      	ldr	r3, [pc, #332]	; (80097d4 <atan+0x324>)
 8009686:	2200      	movs	r2, #0
 8009688:	4629      	mov	r1, r5
 800968a:	f7f6 fe05 	bl	8000298 <__aeabi_dsub>
 800968e:	4b51      	ldr	r3, [pc, #324]	; (80097d4 <atan+0x324>)
 8009690:	4606      	mov	r6, r0
 8009692:	460f      	mov	r7, r1
 8009694:	2200      	movs	r2, #0
 8009696:	4620      	mov	r0, r4
 8009698:	4629      	mov	r1, r5
 800969a:	f7f6 fdff 	bl	800029c <__adddf3>
 800969e:	4602      	mov	r2, r0
 80096a0:	460b      	mov	r3, r1
 80096a2:	4630      	mov	r0, r6
 80096a4:	4639      	mov	r1, r7
 80096a6:	f7f7 f8d9 	bl	800085c <__aeabi_ddiv>
 80096aa:	f04f 0a01 	mov.w	sl, #1
 80096ae:	4604      	mov	r4, r0
 80096b0:	460d      	mov	r5, r1
 80096b2:	e764      	b.n	800957e <atan+0xce>
 80096b4:	4b49      	ldr	r3, [pc, #292]	; (80097dc <atan+0x32c>)
 80096b6:	429e      	cmp	r6, r3
 80096b8:	da1d      	bge.n	80096f6 <atan+0x246>
 80096ba:	ee10 0a10 	vmov	r0, s0
 80096be:	4b48      	ldr	r3, [pc, #288]	; (80097e0 <atan+0x330>)
 80096c0:	2200      	movs	r2, #0
 80096c2:	4629      	mov	r1, r5
 80096c4:	f7f6 fde8 	bl	8000298 <__aeabi_dsub>
 80096c8:	4b45      	ldr	r3, [pc, #276]	; (80097e0 <atan+0x330>)
 80096ca:	4606      	mov	r6, r0
 80096cc:	460f      	mov	r7, r1
 80096ce:	2200      	movs	r2, #0
 80096d0:	4620      	mov	r0, r4
 80096d2:	4629      	mov	r1, r5
 80096d4:	f7f6 ff98 	bl	8000608 <__aeabi_dmul>
 80096d8:	4b3e      	ldr	r3, [pc, #248]	; (80097d4 <atan+0x324>)
 80096da:	2200      	movs	r2, #0
 80096dc:	f7f6 fdde 	bl	800029c <__adddf3>
 80096e0:	4602      	mov	r2, r0
 80096e2:	460b      	mov	r3, r1
 80096e4:	4630      	mov	r0, r6
 80096e6:	4639      	mov	r1, r7
 80096e8:	f7f7 f8b8 	bl	800085c <__aeabi_ddiv>
 80096ec:	f04f 0a02 	mov.w	sl, #2
 80096f0:	4604      	mov	r4, r0
 80096f2:	460d      	mov	r5, r1
 80096f4:	e743      	b.n	800957e <atan+0xce>
 80096f6:	462b      	mov	r3, r5
 80096f8:	ee10 2a10 	vmov	r2, s0
 80096fc:	4939      	ldr	r1, [pc, #228]	; (80097e4 <atan+0x334>)
 80096fe:	2000      	movs	r0, #0
 8009700:	f7f7 f8ac 	bl	800085c <__aeabi_ddiv>
 8009704:	f04f 0a03 	mov.w	sl, #3
 8009708:	4604      	mov	r4, r0
 800970a:	460d      	mov	r5, r1
 800970c:	e737      	b.n	800957e <atan+0xce>
 800970e:	4b36      	ldr	r3, [pc, #216]	; (80097e8 <atan+0x338>)
 8009710:	4e36      	ldr	r6, [pc, #216]	; (80097ec <atan+0x33c>)
 8009712:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009716:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800971a:	e9da 2300 	ldrd	r2, r3, [sl]
 800971e:	f7f6 fdbb 	bl	8000298 <__aeabi_dsub>
 8009722:	4622      	mov	r2, r4
 8009724:	462b      	mov	r3, r5
 8009726:	f7f6 fdb7 	bl	8000298 <__aeabi_dsub>
 800972a:	4602      	mov	r2, r0
 800972c:	460b      	mov	r3, r1
 800972e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009732:	f7f6 fdb1 	bl	8000298 <__aeabi_dsub>
 8009736:	f1bb 0f00 	cmp.w	fp, #0
 800973a:	4604      	mov	r4, r0
 800973c:	460d      	mov	r5, r1
 800973e:	f6bf aed6 	bge.w	80094ee <atan+0x3e>
 8009742:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009746:	461d      	mov	r5, r3
 8009748:	e6d1      	b.n	80094ee <atan+0x3e>
 800974a:	a51d      	add	r5, pc, #116	; (adr r5, 80097c0 <atan+0x310>)
 800974c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009750:	e6cd      	b.n	80094ee <atan+0x3e>
 8009752:	bf00      	nop
 8009754:	f3af 8000 	nop.w
 8009758:	54442d18 	.word	0x54442d18
 800975c:	bff921fb 	.word	0xbff921fb
 8009760:	8800759c 	.word	0x8800759c
 8009764:	7e37e43c 	.word	0x7e37e43c
 8009768:	e322da11 	.word	0xe322da11
 800976c:	3f90ad3a 	.word	0x3f90ad3a
 8009770:	24760deb 	.word	0x24760deb
 8009774:	3fa97b4b 	.word	0x3fa97b4b
 8009778:	a0d03d51 	.word	0xa0d03d51
 800977c:	3fb10d66 	.word	0x3fb10d66
 8009780:	c54c206e 	.word	0xc54c206e
 8009784:	3fb745cd 	.word	0x3fb745cd
 8009788:	920083ff 	.word	0x920083ff
 800978c:	3fc24924 	.word	0x3fc24924
 8009790:	5555550d 	.word	0x5555550d
 8009794:	3fd55555 	.word	0x3fd55555
 8009798:	2c6a6c2f 	.word	0x2c6a6c2f
 800979c:	bfa2b444 	.word	0xbfa2b444
 80097a0:	52defd9a 	.word	0x52defd9a
 80097a4:	3fadde2d 	.word	0x3fadde2d
 80097a8:	af749a6d 	.word	0xaf749a6d
 80097ac:	3fb3b0f2 	.word	0x3fb3b0f2
 80097b0:	fe231671 	.word	0xfe231671
 80097b4:	3fbc71c6 	.word	0x3fbc71c6
 80097b8:	9998ebc4 	.word	0x9998ebc4
 80097bc:	3fc99999 	.word	0x3fc99999
 80097c0:	54442d18 	.word	0x54442d18
 80097c4:	3ff921fb 	.word	0x3ff921fb
 80097c8:	440fffff 	.word	0x440fffff
 80097cc:	7ff00000 	.word	0x7ff00000
 80097d0:	3fdbffff 	.word	0x3fdbffff
 80097d4:	3ff00000 	.word	0x3ff00000
 80097d8:	3ff2ffff 	.word	0x3ff2ffff
 80097dc:	40038000 	.word	0x40038000
 80097e0:	3ff80000 	.word	0x3ff80000
 80097e4:	bff00000 	.word	0xbff00000
 80097e8:	0800b770 	.word	0x0800b770
 80097ec:	0800b750 	.word	0x0800b750

080097f0 <cos>:
 80097f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80097f2:	ec53 2b10 	vmov	r2, r3, d0
 80097f6:	4824      	ldr	r0, [pc, #144]	; (8009888 <cos+0x98>)
 80097f8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80097fc:	4281      	cmp	r1, r0
 80097fe:	dc06      	bgt.n	800980e <cos+0x1e>
 8009800:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8009880 <cos+0x90>
 8009804:	f000 fde4 	bl	800a3d0 <__kernel_cos>
 8009808:	ec51 0b10 	vmov	r0, r1, d0
 800980c:	e007      	b.n	800981e <cos+0x2e>
 800980e:	481f      	ldr	r0, [pc, #124]	; (800988c <cos+0x9c>)
 8009810:	4281      	cmp	r1, r0
 8009812:	dd09      	ble.n	8009828 <cos+0x38>
 8009814:	ee10 0a10 	vmov	r0, s0
 8009818:	4619      	mov	r1, r3
 800981a:	f7f6 fd3d 	bl	8000298 <__aeabi_dsub>
 800981e:	ec41 0b10 	vmov	d0, r0, r1
 8009822:	b005      	add	sp, #20
 8009824:	f85d fb04 	ldr.w	pc, [sp], #4
 8009828:	4668      	mov	r0, sp
 800982a:	f000 fb11 	bl	8009e50 <__ieee754_rem_pio2>
 800982e:	f000 0003 	and.w	r0, r0, #3
 8009832:	2801      	cmp	r0, #1
 8009834:	d007      	beq.n	8009846 <cos+0x56>
 8009836:	2802      	cmp	r0, #2
 8009838:	d012      	beq.n	8009860 <cos+0x70>
 800983a:	b9c0      	cbnz	r0, 800986e <cos+0x7e>
 800983c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009840:	ed9d 0b00 	vldr	d0, [sp]
 8009844:	e7de      	b.n	8009804 <cos+0x14>
 8009846:	ed9d 1b02 	vldr	d1, [sp, #8]
 800984a:	ed9d 0b00 	vldr	d0, [sp]
 800984e:	f001 f9c7 	bl	800abe0 <__kernel_sin>
 8009852:	ec53 2b10 	vmov	r2, r3, d0
 8009856:	ee10 0a10 	vmov	r0, s0
 800985a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800985e:	e7de      	b.n	800981e <cos+0x2e>
 8009860:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009864:	ed9d 0b00 	vldr	d0, [sp]
 8009868:	f000 fdb2 	bl	800a3d0 <__kernel_cos>
 800986c:	e7f1      	b.n	8009852 <cos+0x62>
 800986e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009872:	ed9d 0b00 	vldr	d0, [sp]
 8009876:	2001      	movs	r0, #1
 8009878:	f001 f9b2 	bl	800abe0 <__kernel_sin>
 800987c:	e7c4      	b.n	8009808 <cos+0x18>
 800987e:	bf00      	nop
	...
 8009888:	3fe921fb 	.word	0x3fe921fb
 800988c:	7fefffff 	.word	0x7fefffff

08009890 <fabs>:
 8009890:	ec51 0b10 	vmov	r0, r1, d0
 8009894:	ee10 2a10 	vmov	r2, s0
 8009898:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800989c:	ec43 2b10 	vmov	d0, r2, r3
 80098a0:	4770      	bx	lr
 80098a2:	0000      	movs	r0, r0
 80098a4:	0000      	movs	r0, r0
	...

080098a8 <sin>:
 80098a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80098aa:	ec53 2b10 	vmov	r2, r3, d0
 80098ae:	4826      	ldr	r0, [pc, #152]	; (8009948 <sin+0xa0>)
 80098b0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80098b4:	4281      	cmp	r1, r0
 80098b6:	dc07      	bgt.n	80098c8 <sin+0x20>
 80098b8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8009940 <sin+0x98>
 80098bc:	2000      	movs	r0, #0
 80098be:	f001 f98f 	bl	800abe0 <__kernel_sin>
 80098c2:	ec51 0b10 	vmov	r0, r1, d0
 80098c6:	e007      	b.n	80098d8 <sin+0x30>
 80098c8:	4820      	ldr	r0, [pc, #128]	; (800994c <sin+0xa4>)
 80098ca:	4281      	cmp	r1, r0
 80098cc:	dd09      	ble.n	80098e2 <sin+0x3a>
 80098ce:	ee10 0a10 	vmov	r0, s0
 80098d2:	4619      	mov	r1, r3
 80098d4:	f7f6 fce0 	bl	8000298 <__aeabi_dsub>
 80098d8:	ec41 0b10 	vmov	d0, r0, r1
 80098dc:	b005      	add	sp, #20
 80098de:	f85d fb04 	ldr.w	pc, [sp], #4
 80098e2:	4668      	mov	r0, sp
 80098e4:	f000 fab4 	bl	8009e50 <__ieee754_rem_pio2>
 80098e8:	f000 0003 	and.w	r0, r0, #3
 80098ec:	2801      	cmp	r0, #1
 80098ee:	d008      	beq.n	8009902 <sin+0x5a>
 80098f0:	2802      	cmp	r0, #2
 80098f2:	d00d      	beq.n	8009910 <sin+0x68>
 80098f4:	b9d0      	cbnz	r0, 800992c <sin+0x84>
 80098f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80098fa:	ed9d 0b00 	vldr	d0, [sp]
 80098fe:	2001      	movs	r0, #1
 8009900:	e7dd      	b.n	80098be <sin+0x16>
 8009902:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009906:	ed9d 0b00 	vldr	d0, [sp]
 800990a:	f000 fd61 	bl	800a3d0 <__kernel_cos>
 800990e:	e7d8      	b.n	80098c2 <sin+0x1a>
 8009910:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009914:	ed9d 0b00 	vldr	d0, [sp]
 8009918:	2001      	movs	r0, #1
 800991a:	f001 f961 	bl	800abe0 <__kernel_sin>
 800991e:	ec53 2b10 	vmov	r2, r3, d0
 8009922:	ee10 0a10 	vmov	r0, s0
 8009926:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800992a:	e7d5      	b.n	80098d8 <sin+0x30>
 800992c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009930:	ed9d 0b00 	vldr	d0, [sp]
 8009934:	f000 fd4c 	bl	800a3d0 <__kernel_cos>
 8009938:	e7f1      	b.n	800991e <sin+0x76>
 800993a:	bf00      	nop
 800993c:	f3af 8000 	nop.w
	...
 8009948:	3fe921fb 	.word	0x3fe921fb
 800994c:	7fefffff 	.word	0x7fefffff

08009950 <tan>:
 8009950:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009952:	ec53 2b10 	vmov	r2, r3, d0
 8009956:	4814      	ldr	r0, [pc, #80]	; (80099a8 <tan+0x58>)
 8009958:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800995c:	4281      	cmp	r1, r0
 800995e:	dc05      	bgt.n	800996c <tan+0x1c>
 8009960:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 80099a0 <tan+0x50>
 8009964:	2001      	movs	r0, #1
 8009966:	f001 f9fb 	bl	800ad60 <__kernel_tan>
 800996a:	e009      	b.n	8009980 <tan+0x30>
 800996c:	480f      	ldr	r0, [pc, #60]	; (80099ac <tan+0x5c>)
 800996e:	4281      	cmp	r1, r0
 8009970:	dd09      	ble.n	8009986 <tan+0x36>
 8009972:	ee10 0a10 	vmov	r0, s0
 8009976:	4619      	mov	r1, r3
 8009978:	f7f6 fc8e 	bl	8000298 <__aeabi_dsub>
 800997c:	ec41 0b10 	vmov	d0, r0, r1
 8009980:	b005      	add	sp, #20
 8009982:	f85d fb04 	ldr.w	pc, [sp], #4
 8009986:	4668      	mov	r0, sp
 8009988:	f000 fa62 	bl	8009e50 <__ieee754_rem_pio2>
 800998c:	0040      	lsls	r0, r0, #1
 800998e:	f000 0002 	and.w	r0, r0, #2
 8009992:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009996:	ed9d 0b00 	vldr	d0, [sp]
 800999a:	f1c0 0001 	rsb	r0, r0, #1
 800999e:	e7e2      	b.n	8009966 <tan+0x16>
	...
 80099a8:	3fe921fb 	.word	0x3fe921fb
 80099ac:	7fefffff 	.word	0x7fefffff

080099b0 <asin>:
 80099b0:	b538      	push	{r3, r4, r5, lr}
 80099b2:	ed2d 8b02 	vpush	{d8}
 80099b6:	ec55 4b10 	vmov	r4, r5, d0
 80099ba:	f000 f835 	bl	8009a28 <__ieee754_asin>
 80099be:	4b16      	ldr	r3, [pc, #88]	; (8009a18 <asin+0x68>)
 80099c0:	eeb0 8a40 	vmov.f32	s16, s0
 80099c4:	eef0 8a60 	vmov.f32	s17, s1
 80099c8:	f993 3000 	ldrsb.w	r3, [r3]
 80099cc:	3301      	adds	r3, #1
 80099ce:	d01c      	beq.n	8009a0a <asin+0x5a>
 80099d0:	4622      	mov	r2, r4
 80099d2:	462b      	mov	r3, r5
 80099d4:	4620      	mov	r0, r4
 80099d6:	4629      	mov	r1, r5
 80099d8:	f7f7 f8b0 	bl	8000b3c <__aeabi_dcmpun>
 80099dc:	b9a8      	cbnz	r0, 8009a0a <asin+0x5a>
 80099de:	ec45 4b10 	vmov	d0, r4, r5
 80099e2:	f7ff ff55 	bl	8009890 <fabs>
 80099e6:	4b0d      	ldr	r3, [pc, #52]	; (8009a1c <asin+0x6c>)
 80099e8:	ec51 0b10 	vmov	r0, r1, d0
 80099ec:	2200      	movs	r2, #0
 80099ee:	f7f7 f89b 	bl	8000b28 <__aeabi_dcmpgt>
 80099f2:	b150      	cbz	r0, 8009a0a <asin+0x5a>
 80099f4:	f7fc fe94 	bl	8006720 <__errno>
 80099f8:	ecbd 8b02 	vpop	{d8}
 80099fc:	2321      	movs	r3, #33	; 0x21
 80099fe:	6003      	str	r3, [r0, #0]
 8009a00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a04:	4806      	ldr	r0, [pc, #24]	; (8009a20 <asin+0x70>)
 8009a06:	f001 bbff 	b.w	800b208 <nan>
 8009a0a:	eeb0 0a48 	vmov.f32	s0, s16
 8009a0e:	eef0 0a68 	vmov.f32	s1, s17
 8009a12:	ecbd 8b02 	vpop	{d8}
 8009a16:	bd38      	pop	{r3, r4, r5, pc}
 8009a18:	200001dc 	.word	0x200001dc
 8009a1c:	3ff00000 	.word	0x3ff00000
 8009a20:	0800b5e0 	.word	0x0800b5e0
 8009a24:	00000000 	.word	0x00000000

08009a28 <__ieee754_asin>:
 8009a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a2c:	ed2d 8b04 	vpush	{d8-d9}
 8009a30:	ec55 4b10 	vmov	r4, r5, d0
 8009a34:	4bcc      	ldr	r3, [pc, #816]	; (8009d68 <__ieee754_asin+0x340>)
 8009a36:	b083      	sub	sp, #12
 8009a38:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8009a3c:	4598      	cmp	r8, r3
 8009a3e:	9501      	str	r5, [sp, #4]
 8009a40:	dd35      	ble.n	8009aae <__ieee754_asin+0x86>
 8009a42:	ee10 3a10 	vmov	r3, s0
 8009a46:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8009a4a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8009a4e:	ea58 0303 	orrs.w	r3, r8, r3
 8009a52:	d117      	bne.n	8009a84 <__ieee754_asin+0x5c>
 8009a54:	a3aa      	add	r3, pc, #680	; (adr r3, 8009d00 <__ieee754_asin+0x2d8>)
 8009a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a5a:	ee10 0a10 	vmov	r0, s0
 8009a5e:	4629      	mov	r1, r5
 8009a60:	f7f6 fdd2 	bl	8000608 <__aeabi_dmul>
 8009a64:	a3a8      	add	r3, pc, #672	; (adr r3, 8009d08 <__ieee754_asin+0x2e0>)
 8009a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a6a:	4606      	mov	r6, r0
 8009a6c:	460f      	mov	r7, r1
 8009a6e:	4620      	mov	r0, r4
 8009a70:	4629      	mov	r1, r5
 8009a72:	f7f6 fdc9 	bl	8000608 <__aeabi_dmul>
 8009a76:	4602      	mov	r2, r0
 8009a78:	460b      	mov	r3, r1
 8009a7a:	4630      	mov	r0, r6
 8009a7c:	4639      	mov	r1, r7
 8009a7e:	f7f6 fc0d 	bl	800029c <__adddf3>
 8009a82:	e00b      	b.n	8009a9c <__ieee754_asin+0x74>
 8009a84:	ee10 2a10 	vmov	r2, s0
 8009a88:	462b      	mov	r3, r5
 8009a8a:	ee10 0a10 	vmov	r0, s0
 8009a8e:	4629      	mov	r1, r5
 8009a90:	f7f6 fc02 	bl	8000298 <__aeabi_dsub>
 8009a94:	4602      	mov	r2, r0
 8009a96:	460b      	mov	r3, r1
 8009a98:	f7f6 fee0 	bl	800085c <__aeabi_ddiv>
 8009a9c:	4604      	mov	r4, r0
 8009a9e:	460d      	mov	r5, r1
 8009aa0:	ec45 4b10 	vmov	d0, r4, r5
 8009aa4:	b003      	add	sp, #12
 8009aa6:	ecbd 8b04 	vpop	{d8-d9}
 8009aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aae:	4baf      	ldr	r3, [pc, #700]	; (8009d6c <__ieee754_asin+0x344>)
 8009ab0:	4598      	cmp	r8, r3
 8009ab2:	dc11      	bgt.n	8009ad8 <__ieee754_asin+0xb0>
 8009ab4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8009ab8:	f280 80ae 	bge.w	8009c18 <__ieee754_asin+0x1f0>
 8009abc:	a394      	add	r3, pc, #592	; (adr r3, 8009d10 <__ieee754_asin+0x2e8>)
 8009abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac2:	ee10 0a10 	vmov	r0, s0
 8009ac6:	4629      	mov	r1, r5
 8009ac8:	f7f6 fbe8 	bl	800029c <__adddf3>
 8009acc:	4ba8      	ldr	r3, [pc, #672]	; (8009d70 <__ieee754_asin+0x348>)
 8009ace:	2200      	movs	r2, #0
 8009ad0:	f7f7 f82a 	bl	8000b28 <__aeabi_dcmpgt>
 8009ad4:	2800      	cmp	r0, #0
 8009ad6:	d1e3      	bne.n	8009aa0 <__ieee754_asin+0x78>
 8009ad8:	ec45 4b10 	vmov	d0, r4, r5
 8009adc:	f7ff fed8 	bl	8009890 <fabs>
 8009ae0:	49a3      	ldr	r1, [pc, #652]	; (8009d70 <__ieee754_asin+0x348>)
 8009ae2:	ec53 2b10 	vmov	r2, r3, d0
 8009ae6:	2000      	movs	r0, #0
 8009ae8:	f7f6 fbd6 	bl	8000298 <__aeabi_dsub>
 8009aec:	4ba1      	ldr	r3, [pc, #644]	; (8009d74 <__ieee754_asin+0x34c>)
 8009aee:	2200      	movs	r2, #0
 8009af0:	f7f6 fd8a 	bl	8000608 <__aeabi_dmul>
 8009af4:	a388      	add	r3, pc, #544	; (adr r3, 8009d18 <__ieee754_asin+0x2f0>)
 8009af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009afa:	4604      	mov	r4, r0
 8009afc:	460d      	mov	r5, r1
 8009afe:	f7f6 fd83 	bl	8000608 <__aeabi_dmul>
 8009b02:	a387      	add	r3, pc, #540	; (adr r3, 8009d20 <__ieee754_asin+0x2f8>)
 8009b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b08:	f7f6 fbc8 	bl	800029c <__adddf3>
 8009b0c:	4622      	mov	r2, r4
 8009b0e:	462b      	mov	r3, r5
 8009b10:	f7f6 fd7a 	bl	8000608 <__aeabi_dmul>
 8009b14:	a384      	add	r3, pc, #528	; (adr r3, 8009d28 <__ieee754_asin+0x300>)
 8009b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b1a:	f7f6 fbbd 	bl	8000298 <__aeabi_dsub>
 8009b1e:	4622      	mov	r2, r4
 8009b20:	462b      	mov	r3, r5
 8009b22:	f7f6 fd71 	bl	8000608 <__aeabi_dmul>
 8009b26:	a382      	add	r3, pc, #520	; (adr r3, 8009d30 <__ieee754_asin+0x308>)
 8009b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b2c:	f7f6 fbb6 	bl	800029c <__adddf3>
 8009b30:	4622      	mov	r2, r4
 8009b32:	462b      	mov	r3, r5
 8009b34:	f7f6 fd68 	bl	8000608 <__aeabi_dmul>
 8009b38:	a37f      	add	r3, pc, #508	; (adr r3, 8009d38 <__ieee754_asin+0x310>)
 8009b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b3e:	f7f6 fbab 	bl	8000298 <__aeabi_dsub>
 8009b42:	4622      	mov	r2, r4
 8009b44:	462b      	mov	r3, r5
 8009b46:	f7f6 fd5f 	bl	8000608 <__aeabi_dmul>
 8009b4a:	a37d      	add	r3, pc, #500	; (adr r3, 8009d40 <__ieee754_asin+0x318>)
 8009b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b50:	f7f6 fba4 	bl	800029c <__adddf3>
 8009b54:	4622      	mov	r2, r4
 8009b56:	462b      	mov	r3, r5
 8009b58:	f7f6 fd56 	bl	8000608 <__aeabi_dmul>
 8009b5c:	a37a      	add	r3, pc, #488	; (adr r3, 8009d48 <__ieee754_asin+0x320>)
 8009b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b62:	ec41 0b18 	vmov	d8, r0, r1
 8009b66:	4620      	mov	r0, r4
 8009b68:	4629      	mov	r1, r5
 8009b6a:	f7f6 fd4d 	bl	8000608 <__aeabi_dmul>
 8009b6e:	a378      	add	r3, pc, #480	; (adr r3, 8009d50 <__ieee754_asin+0x328>)
 8009b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b74:	f7f6 fb90 	bl	8000298 <__aeabi_dsub>
 8009b78:	4622      	mov	r2, r4
 8009b7a:	462b      	mov	r3, r5
 8009b7c:	f7f6 fd44 	bl	8000608 <__aeabi_dmul>
 8009b80:	a375      	add	r3, pc, #468	; (adr r3, 8009d58 <__ieee754_asin+0x330>)
 8009b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b86:	f7f6 fb89 	bl	800029c <__adddf3>
 8009b8a:	4622      	mov	r2, r4
 8009b8c:	462b      	mov	r3, r5
 8009b8e:	f7f6 fd3b 	bl	8000608 <__aeabi_dmul>
 8009b92:	a373      	add	r3, pc, #460	; (adr r3, 8009d60 <__ieee754_asin+0x338>)
 8009b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b98:	f7f6 fb7e 	bl	8000298 <__aeabi_dsub>
 8009b9c:	4622      	mov	r2, r4
 8009b9e:	462b      	mov	r3, r5
 8009ba0:	f7f6 fd32 	bl	8000608 <__aeabi_dmul>
 8009ba4:	4b72      	ldr	r3, [pc, #456]	; (8009d70 <__ieee754_asin+0x348>)
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	f7f6 fb78 	bl	800029c <__adddf3>
 8009bac:	ec45 4b10 	vmov	d0, r4, r5
 8009bb0:	4606      	mov	r6, r0
 8009bb2:	460f      	mov	r7, r1
 8009bb4:	f000 fb56 	bl	800a264 <__ieee754_sqrt>
 8009bb8:	4b6f      	ldr	r3, [pc, #444]	; (8009d78 <__ieee754_asin+0x350>)
 8009bba:	4598      	cmp	r8, r3
 8009bbc:	ec5b ab10 	vmov	sl, fp, d0
 8009bc0:	f340 80dc 	ble.w	8009d7c <__ieee754_asin+0x354>
 8009bc4:	4632      	mov	r2, r6
 8009bc6:	463b      	mov	r3, r7
 8009bc8:	ec51 0b18 	vmov	r0, r1, d8
 8009bcc:	f7f6 fe46 	bl	800085c <__aeabi_ddiv>
 8009bd0:	4652      	mov	r2, sl
 8009bd2:	465b      	mov	r3, fp
 8009bd4:	f7f6 fd18 	bl	8000608 <__aeabi_dmul>
 8009bd8:	4652      	mov	r2, sl
 8009bda:	465b      	mov	r3, fp
 8009bdc:	f7f6 fb5e 	bl	800029c <__adddf3>
 8009be0:	4602      	mov	r2, r0
 8009be2:	460b      	mov	r3, r1
 8009be4:	f7f6 fb5a 	bl	800029c <__adddf3>
 8009be8:	a347      	add	r3, pc, #284	; (adr r3, 8009d08 <__ieee754_asin+0x2e0>)
 8009bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bee:	f7f6 fb53 	bl	8000298 <__aeabi_dsub>
 8009bf2:	4602      	mov	r2, r0
 8009bf4:	460b      	mov	r3, r1
 8009bf6:	a142      	add	r1, pc, #264	; (adr r1, 8009d00 <__ieee754_asin+0x2d8>)
 8009bf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009bfc:	f7f6 fb4c 	bl	8000298 <__aeabi_dsub>
 8009c00:	9b01      	ldr	r3, [sp, #4]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	bfdc      	itt	le
 8009c06:	4602      	movle	r2, r0
 8009c08:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8009c0c:	4604      	mov	r4, r0
 8009c0e:	460d      	mov	r5, r1
 8009c10:	bfdc      	itt	le
 8009c12:	4614      	movle	r4, r2
 8009c14:	461d      	movle	r5, r3
 8009c16:	e743      	b.n	8009aa0 <__ieee754_asin+0x78>
 8009c18:	ee10 2a10 	vmov	r2, s0
 8009c1c:	ee10 0a10 	vmov	r0, s0
 8009c20:	462b      	mov	r3, r5
 8009c22:	4629      	mov	r1, r5
 8009c24:	f7f6 fcf0 	bl	8000608 <__aeabi_dmul>
 8009c28:	a33b      	add	r3, pc, #236	; (adr r3, 8009d18 <__ieee754_asin+0x2f0>)
 8009c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c2e:	4606      	mov	r6, r0
 8009c30:	460f      	mov	r7, r1
 8009c32:	f7f6 fce9 	bl	8000608 <__aeabi_dmul>
 8009c36:	a33a      	add	r3, pc, #232	; (adr r3, 8009d20 <__ieee754_asin+0x2f8>)
 8009c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c3c:	f7f6 fb2e 	bl	800029c <__adddf3>
 8009c40:	4632      	mov	r2, r6
 8009c42:	463b      	mov	r3, r7
 8009c44:	f7f6 fce0 	bl	8000608 <__aeabi_dmul>
 8009c48:	a337      	add	r3, pc, #220	; (adr r3, 8009d28 <__ieee754_asin+0x300>)
 8009c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c4e:	f7f6 fb23 	bl	8000298 <__aeabi_dsub>
 8009c52:	4632      	mov	r2, r6
 8009c54:	463b      	mov	r3, r7
 8009c56:	f7f6 fcd7 	bl	8000608 <__aeabi_dmul>
 8009c5a:	a335      	add	r3, pc, #212	; (adr r3, 8009d30 <__ieee754_asin+0x308>)
 8009c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c60:	f7f6 fb1c 	bl	800029c <__adddf3>
 8009c64:	4632      	mov	r2, r6
 8009c66:	463b      	mov	r3, r7
 8009c68:	f7f6 fcce 	bl	8000608 <__aeabi_dmul>
 8009c6c:	a332      	add	r3, pc, #200	; (adr r3, 8009d38 <__ieee754_asin+0x310>)
 8009c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c72:	f7f6 fb11 	bl	8000298 <__aeabi_dsub>
 8009c76:	4632      	mov	r2, r6
 8009c78:	463b      	mov	r3, r7
 8009c7a:	f7f6 fcc5 	bl	8000608 <__aeabi_dmul>
 8009c7e:	a330      	add	r3, pc, #192	; (adr r3, 8009d40 <__ieee754_asin+0x318>)
 8009c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c84:	f7f6 fb0a 	bl	800029c <__adddf3>
 8009c88:	4632      	mov	r2, r6
 8009c8a:	463b      	mov	r3, r7
 8009c8c:	f7f6 fcbc 	bl	8000608 <__aeabi_dmul>
 8009c90:	a32d      	add	r3, pc, #180	; (adr r3, 8009d48 <__ieee754_asin+0x320>)
 8009c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c96:	4680      	mov	r8, r0
 8009c98:	4689      	mov	r9, r1
 8009c9a:	4630      	mov	r0, r6
 8009c9c:	4639      	mov	r1, r7
 8009c9e:	f7f6 fcb3 	bl	8000608 <__aeabi_dmul>
 8009ca2:	a32b      	add	r3, pc, #172	; (adr r3, 8009d50 <__ieee754_asin+0x328>)
 8009ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca8:	f7f6 faf6 	bl	8000298 <__aeabi_dsub>
 8009cac:	4632      	mov	r2, r6
 8009cae:	463b      	mov	r3, r7
 8009cb0:	f7f6 fcaa 	bl	8000608 <__aeabi_dmul>
 8009cb4:	a328      	add	r3, pc, #160	; (adr r3, 8009d58 <__ieee754_asin+0x330>)
 8009cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cba:	f7f6 faef 	bl	800029c <__adddf3>
 8009cbe:	4632      	mov	r2, r6
 8009cc0:	463b      	mov	r3, r7
 8009cc2:	f7f6 fca1 	bl	8000608 <__aeabi_dmul>
 8009cc6:	a326      	add	r3, pc, #152	; (adr r3, 8009d60 <__ieee754_asin+0x338>)
 8009cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ccc:	f7f6 fae4 	bl	8000298 <__aeabi_dsub>
 8009cd0:	4632      	mov	r2, r6
 8009cd2:	463b      	mov	r3, r7
 8009cd4:	f7f6 fc98 	bl	8000608 <__aeabi_dmul>
 8009cd8:	4b25      	ldr	r3, [pc, #148]	; (8009d70 <__ieee754_asin+0x348>)
 8009cda:	2200      	movs	r2, #0
 8009cdc:	f7f6 fade 	bl	800029c <__adddf3>
 8009ce0:	4602      	mov	r2, r0
 8009ce2:	460b      	mov	r3, r1
 8009ce4:	4640      	mov	r0, r8
 8009ce6:	4649      	mov	r1, r9
 8009ce8:	f7f6 fdb8 	bl	800085c <__aeabi_ddiv>
 8009cec:	4622      	mov	r2, r4
 8009cee:	462b      	mov	r3, r5
 8009cf0:	f7f6 fc8a 	bl	8000608 <__aeabi_dmul>
 8009cf4:	4602      	mov	r2, r0
 8009cf6:	460b      	mov	r3, r1
 8009cf8:	4620      	mov	r0, r4
 8009cfa:	4629      	mov	r1, r5
 8009cfc:	e6bf      	b.n	8009a7e <__ieee754_asin+0x56>
 8009cfe:	bf00      	nop
 8009d00:	54442d18 	.word	0x54442d18
 8009d04:	3ff921fb 	.word	0x3ff921fb
 8009d08:	33145c07 	.word	0x33145c07
 8009d0c:	3c91a626 	.word	0x3c91a626
 8009d10:	8800759c 	.word	0x8800759c
 8009d14:	7e37e43c 	.word	0x7e37e43c
 8009d18:	0dfdf709 	.word	0x0dfdf709
 8009d1c:	3f023de1 	.word	0x3f023de1
 8009d20:	7501b288 	.word	0x7501b288
 8009d24:	3f49efe0 	.word	0x3f49efe0
 8009d28:	b5688f3b 	.word	0xb5688f3b
 8009d2c:	3fa48228 	.word	0x3fa48228
 8009d30:	0e884455 	.word	0x0e884455
 8009d34:	3fc9c155 	.word	0x3fc9c155
 8009d38:	03eb6f7d 	.word	0x03eb6f7d
 8009d3c:	3fd4d612 	.word	0x3fd4d612
 8009d40:	55555555 	.word	0x55555555
 8009d44:	3fc55555 	.word	0x3fc55555
 8009d48:	b12e9282 	.word	0xb12e9282
 8009d4c:	3fb3b8c5 	.word	0x3fb3b8c5
 8009d50:	1b8d0159 	.word	0x1b8d0159
 8009d54:	3fe6066c 	.word	0x3fe6066c
 8009d58:	9c598ac8 	.word	0x9c598ac8
 8009d5c:	40002ae5 	.word	0x40002ae5
 8009d60:	1c8a2d4b 	.word	0x1c8a2d4b
 8009d64:	40033a27 	.word	0x40033a27
 8009d68:	3fefffff 	.word	0x3fefffff
 8009d6c:	3fdfffff 	.word	0x3fdfffff
 8009d70:	3ff00000 	.word	0x3ff00000
 8009d74:	3fe00000 	.word	0x3fe00000
 8009d78:	3fef3332 	.word	0x3fef3332
 8009d7c:	ee10 2a10 	vmov	r2, s0
 8009d80:	ee10 0a10 	vmov	r0, s0
 8009d84:	465b      	mov	r3, fp
 8009d86:	4659      	mov	r1, fp
 8009d88:	f7f6 fa88 	bl	800029c <__adddf3>
 8009d8c:	4632      	mov	r2, r6
 8009d8e:	463b      	mov	r3, r7
 8009d90:	ec41 0b19 	vmov	d9, r0, r1
 8009d94:	ec51 0b18 	vmov	r0, r1, d8
 8009d98:	f7f6 fd60 	bl	800085c <__aeabi_ddiv>
 8009d9c:	4602      	mov	r2, r0
 8009d9e:	460b      	mov	r3, r1
 8009da0:	ec51 0b19 	vmov	r0, r1, d9
 8009da4:	f7f6 fc30 	bl	8000608 <__aeabi_dmul>
 8009da8:	f04f 0800 	mov.w	r8, #0
 8009dac:	4606      	mov	r6, r0
 8009dae:	460f      	mov	r7, r1
 8009db0:	4642      	mov	r2, r8
 8009db2:	465b      	mov	r3, fp
 8009db4:	4640      	mov	r0, r8
 8009db6:	4659      	mov	r1, fp
 8009db8:	f7f6 fc26 	bl	8000608 <__aeabi_dmul>
 8009dbc:	4602      	mov	r2, r0
 8009dbe:	460b      	mov	r3, r1
 8009dc0:	4620      	mov	r0, r4
 8009dc2:	4629      	mov	r1, r5
 8009dc4:	f7f6 fa68 	bl	8000298 <__aeabi_dsub>
 8009dc8:	4642      	mov	r2, r8
 8009dca:	4604      	mov	r4, r0
 8009dcc:	460d      	mov	r5, r1
 8009dce:	465b      	mov	r3, fp
 8009dd0:	4650      	mov	r0, sl
 8009dd2:	4659      	mov	r1, fp
 8009dd4:	f7f6 fa62 	bl	800029c <__adddf3>
 8009dd8:	4602      	mov	r2, r0
 8009dda:	460b      	mov	r3, r1
 8009ddc:	4620      	mov	r0, r4
 8009dde:	4629      	mov	r1, r5
 8009de0:	f7f6 fd3c 	bl	800085c <__aeabi_ddiv>
 8009de4:	4602      	mov	r2, r0
 8009de6:	460b      	mov	r3, r1
 8009de8:	f7f6 fa58 	bl	800029c <__adddf3>
 8009dec:	4602      	mov	r2, r0
 8009dee:	460b      	mov	r3, r1
 8009df0:	a113      	add	r1, pc, #76	; (adr r1, 8009e40 <__ieee754_asin+0x418>)
 8009df2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009df6:	f7f6 fa4f 	bl	8000298 <__aeabi_dsub>
 8009dfa:	4602      	mov	r2, r0
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	4630      	mov	r0, r6
 8009e00:	4639      	mov	r1, r7
 8009e02:	f7f6 fa49 	bl	8000298 <__aeabi_dsub>
 8009e06:	4642      	mov	r2, r8
 8009e08:	4604      	mov	r4, r0
 8009e0a:	460d      	mov	r5, r1
 8009e0c:	465b      	mov	r3, fp
 8009e0e:	4640      	mov	r0, r8
 8009e10:	4659      	mov	r1, fp
 8009e12:	f7f6 fa43 	bl	800029c <__adddf3>
 8009e16:	4602      	mov	r2, r0
 8009e18:	460b      	mov	r3, r1
 8009e1a:	a10b      	add	r1, pc, #44	; (adr r1, 8009e48 <__ieee754_asin+0x420>)
 8009e1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e20:	f7f6 fa3a 	bl	8000298 <__aeabi_dsub>
 8009e24:	4602      	mov	r2, r0
 8009e26:	460b      	mov	r3, r1
 8009e28:	4620      	mov	r0, r4
 8009e2a:	4629      	mov	r1, r5
 8009e2c:	f7f6 fa34 	bl	8000298 <__aeabi_dsub>
 8009e30:	4602      	mov	r2, r0
 8009e32:	460b      	mov	r3, r1
 8009e34:	a104      	add	r1, pc, #16	; (adr r1, 8009e48 <__ieee754_asin+0x420>)
 8009e36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e3a:	e6df      	b.n	8009bfc <__ieee754_asin+0x1d4>
 8009e3c:	f3af 8000 	nop.w
 8009e40:	33145c07 	.word	0x33145c07
 8009e44:	3c91a626 	.word	0x3c91a626
 8009e48:	54442d18 	.word	0x54442d18
 8009e4c:	3fe921fb 	.word	0x3fe921fb

08009e50 <__ieee754_rem_pio2>:
 8009e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e54:	ed2d 8b02 	vpush	{d8}
 8009e58:	ec55 4b10 	vmov	r4, r5, d0
 8009e5c:	4bca      	ldr	r3, [pc, #808]	; (800a188 <__ieee754_rem_pio2+0x338>)
 8009e5e:	b08b      	sub	sp, #44	; 0x2c
 8009e60:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8009e64:	4598      	cmp	r8, r3
 8009e66:	4682      	mov	sl, r0
 8009e68:	9502      	str	r5, [sp, #8]
 8009e6a:	dc08      	bgt.n	8009e7e <__ieee754_rem_pio2+0x2e>
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	2300      	movs	r3, #0
 8009e70:	ed80 0b00 	vstr	d0, [r0]
 8009e74:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009e78:	f04f 0b00 	mov.w	fp, #0
 8009e7c:	e028      	b.n	8009ed0 <__ieee754_rem_pio2+0x80>
 8009e7e:	4bc3      	ldr	r3, [pc, #780]	; (800a18c <__ieee754_rem_pio2+0x33c>)
 8009e80:	4598      	cmp	r8, r3
 8009e82:	dc78      	bgt.n	8009f76 <__ieee754_rem_pio2+0x126>
 8009e84:	9b02      	ldr	r3, [sp, #8]
 8009e86:	4ec2      	ldr	r6, [pc, #776]	; (800a190 <__ieee754_rem_pio2+0x340>)
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	ee10 0a10 	vmov	r0, s0
 8009e8e:	a3b0      	add	r3, pc, #704	; (adr r3, 800a150 <__ieee754_rem_pio2+0x300>)
 8009e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e94:	4629      	mov	r1, r5
 8009e96:	dd39      	ble.n	8009f0c <__ieee754_rem_pio2+0xbc>
 8009e98:	f7f6 f9fe 	bl	8000298 <__aeabi_dsub>
 8009e9c:	45b0      	cmp	r8, r6
 8009e9e:	4604      	mov	r4, r0
 8009ea0:	460d      	mov	r5, r1
 8009ea2:	d01b      	beq.n	8009edc <__ieee754_rem_pio2+0x8c>
 8009ea4:	a3ac      	add	r3, pc, #688	; (adr r3, 800a158 <__ieee754_rem_pio2+0x308>)
 8009ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eaa:	f7f6 f9f5 	bl	8000298 <__aeabi_dsub>
 8009eae:	4602      	mov	r2, r0
 8009eb0:	460b      	mov	r3, r1
 8009eb2:	e9ca 2300 	strd	r2, r3, [sl]
 8009eb6:	4620      	mov	r0, r4
 8009eb8:	4629      	mov	r1, r5
 8009eba:	f7f6 f9ed 	bl	8000298 <__aeabi_dsub>
 8009ebe:	a3a6      	add	r3, pc, #664	; (adr r3, 800a158 <__ieee754_rem_pio2+0x308>)
 8009ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec4:	f7f6 f9e8 	bl	8000298 <__aeabi_dsub>
 8009ec8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009ecc:	f04f 0b01 	mov.w	fp, #1
 8009ed0:	4658      	mov	r0, fp
 8009ed2:	b00b      	add	sp, #44	; 0x2c
 8009ed4:	ecbd 8b02 	vpop	{d8}
 8009ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009edc:	a3a0      	add	r3, pc, #640	; (adr r3, 800a160 <__ieee754_rem_pio2+0x310>)
 8009ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee2:	f7f6 f9d9 	bl	8000298 <__aeabi_dsub>
 8009ee6:	a3a0      	add	r3, pc, #640	; (adr r3, 800a168 <__ieee754_rem_pio2+0x318>)
 8009ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eec:	4604      	mov	r4, r0
 8009eee:	460d      	mov	r5, r1
 8009ef0:	f7f6 f9d2 	bl	8000298 <__aeabi_dsub>
 8009ef4:	4602      	mov	r2, r0
 8009ef6:	460b      	mov	r3, r1
 8009ef8:	e9ca 2300 	strd	r2, r3, [sl]
 8009efc:	4620      	mov	r0, r4
 8009efe:	4629      	mov	r1, r5
 8009f00:	f7f6 f9ca 	bl	8000298 <__aeabi_dsub>
 8009f04:	a398      	add	r3, pc, #608	; (adr r3, 800a168 <__ieee754_rem_pio2+0x318>)
 8009f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f0a:	e7db      	b.n	8009ec4 <__ieee754_rem_pio2+0x74>
 8009f0c:	f7f6 f9c6 	bl	800029c <__adddf3>
 8009f10:	45b0      	cmp	r8, r6
 8009f12:	4604      	mov	r4, r0
 8009f14:	460d      	mov	r5, r1
 8009f16:	d016      	beq.n	8009f46 <__ieee754_rem_pio2+0xf6>
 8009f18:	a38f      	add	r3, pc, #572	; (adr r3, 800a158 <__ieee754_rem_pio2+0x308>)
 8009f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f1e:	f7f6 f9bd 	bl	800029c <__adddf3>
 8009f22:	4602      	mov	r2, r0
 8009f24:	460b      	mov	r3, r1
 8009f26:	e9ca 2300 	strd	r2, r3, [sl]
 8009f2a:	4620      	mov	r0, r4
 8009f2c:	4629      	mov	r1, r5
 8009f2e:	f7f6 f9b3 	bl	8000298 <__aeabi_dsub>
 8009f32:	a389      	add	r3, pc, #548	; (adr r3, 800a158 <__ieee754_rem_pio2+0x308>)
 8009f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f38:	f7f6 f9b0 	bl	800029c <__adddf3>
 8009f3c:	f04f 3bff 	mov.w	fp, #4294967295
 8009f40:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009f44:	e7c4      	b.n	8009ed0 <__ieee754_rem_pio2+0x80>
 8009f46:	a386      	add	r3, pc, #536	; (adr r3, 800a160 <__ieee754_rem_pio2+0x310>)
 8009f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f4c:	f7f6 f9a6 	bl	800029c <__adddf3>
 8009f50:	a385      	add	r3, pc, #532	; (adr r3, 800a168 <__ieee754_rem_pio2+0x318>)
 8009f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f56:	4604      	mov	r4, r0
 8009f58:	460d      	mov	r5, r1
 8009f5a:	f7f6 f99f 	bl	800029c <__adddf3>
 8009f5e:	4602      	mov	r2, r0
 8009f60:	460b      	mov	r3, r1
 8009f62:	e9ca 2300 	strd	r2, r3, [sl]
 8009f66:	4620      	mov	r0, r4
 8009f68:	4629      	mov	r1, r5
 8009f6a:	f7f6 f995 	bl	8000298 <__aeabi_dsub>
 8009f6e:	a37e      	add	r3, pc, #504	; (adr r3, 800a168 <__ieee754_rem_pio2+0x318>)
 8009f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f74:	e7e0      	b.n	8009f38 <__ieee754_rem_pio2+0xe8>
 8009f76:	4b87      	ldr	r3, [pc, #540]	; (800a194 <__ieee754_rem_pio2+0x344>)
 8009f78:	4598      	cmp	r8, r3
 8009f7a:	f300 80d9 	bgt.w	800a130 <__ieee754_rem_pio2+0x2e0>
 8009f7e:	f7ff fc87 	bl	8009890 <fabs>
 8009f82:	ec55 4b10 	vmov	r4, r5, d0
 8009f86:	ee10 0a10 	vmov	r0, s0
 8009f8a:	a379      	add	r3, pc, #484	; (adr r3, 800a170 <__ieee754_rem_pio2+0x320>)
 8009f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f90:	4629      	mov	r1, r5
 8009f92:	f7f6 fb39 	bl	8000608 <__aeabi_dmul>
 8009f96:	4b80      	ldr	r3, [pc, #512]	; (800a198 <__ieee754_rem_pio2+0x348>)
 8009f98:	2200      	movs	r2, #0
 8009f9a:	f7f6 f97f 	bl	800029c <__adddf3>
 8009f9e:	f7f6 fde3 	bl	8000b68 <__aeabi_d2iz>
 8009fa2:	4683      	mov	fp, r0
 8009fa4:	f7f6 fac6 	bl	8000534 <__aeabi_i2d>
 8009fa8:	4602      	mov	r2, r0
 8009faa:	460b      	mov	r3, r1
 8009fac:	ec43 2b18 	vmov	d8, r2, r3
 8009fb0:	a367      	add	r3, pc, #412	; (adr r3, 800a150 <__ieee754_rem_pio2+0x300>)
 8009fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb6:	f7f6 fb27 	bl	8000608 <__aeabi_dmul>
 8009fba:	4602      	mov	r2, r0
 8009fbc:	460b      	mov	r3, r1
 8009fbe:	4620      	mov	r0, r4
 8009fc0:	4629      	mov	r1, r5
 8009fc2:	f7f6 f969 	bl	8000298 <__aeabi_dsub>
 8009fc6:	a364      	add	r3, pc, #400	; (adr r3, 800a158 <__ieee754_rem_pio2+0x308>)
 8009fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fcc:	4606      	mov	r6, r0
 8009fce:	460f      	mov	r7, r1
 8009fd0:	ec51 0b18 	vmov	r0, r1, d8
 8009fd4:	f7f6 fb18 	bl	8000608 <__aeabi_dmul>
 8009fd8:	f1bb 0f1f 	cmp.w	fp, #31
 8009fdc:	4604      	mov	r4, r0
 8009fde:	460d      	mov	r5, r1
 8009fe0:	dc0d      	bgt.n	8009ffe <__ieee754_rem_pio2+0x1ae>
 8009fe2:	4b6e      	ldr	r3, [pc, #440]	; (800a19c <__ieee754_rem_pio2+0x34c>)
 8009fe4:	f10b 32ff 	add.w	r2, fp, #4294967295
 8009fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fec:	4543      	cmp	r3, r8
 8009fee:	d006      	beq.n	8009ffe <__ieee754_rem_pio2+0x1ae>
 8009ff0:	4622      	mov	r2, r4
 8009ff2:	462b      	mov	r3, r5
 8009ff4:	4630      	mov	r0, r6
 8009ff6:	4639      	mov	r1, r7
 8009ff8:	f7f6 f94e 	bl	8000298 <__aeabi_dsub>
 8009ffc:	e00f      	b.n	800a01e <__ieee754_rem_pio2+0x1ce>
 8009ffe:	462b      	mov	r3, r5
 800a000:	4622      	mov	r2, r4
 800a002:	4630      	mov	r0, r6
 800a004:	4639      	mov	r1, r7
 800a006:	f7f6 f947 	bl	8000298 <__aeabi_dsub>
 800a00a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a00e:	9303      	str	r3, [sp, #12]
 800a010:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a014:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800a018:	f1b8 0f10 	cmp.w	r8, #16
 800a01c:	dc02      	bgt.n	800a024 <__ieee754_rem_pio2+0x1d4>
 800a01e:	e9ca 0100 	strd	r0, r1, [sl]
 800a022:	e039      	b.n	800a098 <__ieee754_rem_pio2+0x248>
 800a024:	a34e      	add	r3, pc, #312	; (adr r3, 800a160 <__ieee754_rem_pio2+0x310>)
 800a026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a02a:	ec51 0b18 	vmov	r0, r1, d8
 800a02e:	f7f6 faeb 	bl	8000608 <__aeabi_dmul>
 800a032:	4604      	mov	r4, r0
 800a034:	460d      	mov	r5, r1
 800a036:	4602      	mov	r2, r0
 800a038:	460b      	mov	r3, r1
 800a03a:	4630      	mov	r0, r6
 800a03c:	4639      	mov	r1, r7
 800a03e:	f7f6 f92b 	bl	8000298 <__aeabi_dsub>
 800a042:	4602      	mov	r2, r0
 800a044:	460b      	mov	r3, r1
 800a046:	4680      	mov	r8, r0
 800a048:	4689      	mov	r9, r1
 800a04a:	4630      	mov	r0, r6
 800a04c:	4639      	mov	r1, r7
 800a04e:	f7f6 f923 	bl	8000298 <__aeabi_dsub>
 800a052:	4622      	mov	r2, r4
 800a054:	462b      	mov	r3, r5
 800a056:	f7f6 f91f 	bl	8000298 <__aeabi_dsub>
 800a05a:	a343      	add	r3, pc, #268	; (adr r3, 800a168 <__ieee754_rem_pio2+0x318>)
 800a05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a060:	4604      	mov	r4, r0
 800a062:	460d      	mov	r5, r1
 800a064:	ec51 0b18 	vmov	r0, r1, d8
 800a068:	f7f6 face 	bl	8000608 <__aeabi_dmul>
 800a06c:	4622      	mov	r2, r4
 800a06e:	462b      	mov	r3, r5
 800a070:	f7f6 f912 	bl	8000298 <__aeabi_dsub>
 800a074:	4602      	mov	r2, r0
 800a076:	460b      	mov	r3, r1
 800a078:	4604      	mov	r4, r0
 800a07a:	460d      	mov	r5, r1
 800a07c:	4640      	mov	r0, r8
 800a07e:	4649      	mov	r1, r9
 800a080:	f7f6 f90a 	bl	8000298 <__aeabi_dsub>
 800a084:	9a03      	ldr	r2, [sp, #12]
 800a086:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a08a:	1ad3      	subs	r3, r2, r3
 800a08c:	2b31      	cmp	r3, #49	; 0x31
 800a08e:	dc24      	bgt.n	800a0da <__ieee754_rem_pio2+0x28a>
 800a090:	e9ca 0100 	strd	r0, r1, [sl]
 800a094:	4646      	mov	r6, r8
 800a096:	464f      	mov	r7, r9
 800a098:	e9da 8900 	ldrd	r8, r9, [sl]
 800a09c:	4630      	mov	r0, r6
 800a09e:	4642      	mov	r2, r8
 800a0a0:	464b      	mov	r3, r9
 800a0a2:	4639      	mov	r1, r7
 800a0a4:	f7f6 f8f8 	bl	8000298 <__aeabi_dsub>
 800a0a8:	462b      	mov	r3, r5
 800a0aa:	4622      	mov	r2, r4
 800a0ac:	f7f6 f8f4 	bl	8000298 <__aeabi_dsub>
 800a0b0:	9b02      	ldr	r3, [sp, #8]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a0b8:	f6bf af0a 	bge.w	8009ed0 <__ieee754_rem_pio2+0x80>
 800a0bc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a0c0:	f8ca 3004 	str.w	r3, [sl, #4]
 800a0c4:	f8ca 8000 	str.w	r8, [sl]
 800a0c8:	f8ca 0008 	str.w	r0, [sl, #8]
 800a0cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a0d0:	f8ca 300c 	str.w	r3, [sl, #12]
 800a0d4:	f1cb 0b00 	rsb	fp, fp, #0
 800a0d8:	e6fa      	b.n	8009ed0 <__ieee754_rem_pio2+0x80>
 800a0da:	a327      	add	r3, pc, #156	; (adr r3, 800a178 <__ieee754_rem_pio2+0x328>)
 800a0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e0:	ec51 0b18 	vmov	r0, r1, d8
 800a0e4:	f7f6 fa90 	bl	8000608 <__aeabi_dmul>
 800a0e8:	4604      	mov	r4, r0
 800a0ea:	460d      	mov	r5, r1
 800a0ec:	4602      	mov	r2, r0
 800a0ee:	460b      	mov	r3, r1
 800a0f0:	4640      	mov	r0, r8
 800a0f2:	4649      	mov	r1, r9
 800a0f4:	f7f6 f8d0 	bl	8000298 <__aeabi_dsub>
 800a0f8:	4602      	mov	r2, r0
 800a0fa:	460b      	mov	r3, r1
 800a0fc:	4606      	mov	r6, r0
 800a0fe:	460f      	mov	r7, r1
 800a100:	4640      	mov	r0, r8
 800a102:	4649      	mov	r1, r9
 800a104:	f7f6 f8c8 	bl	8000298 <__aeabi_dsub>
 800a108:	4622      	mov	r2, r4
 800a10a:	462b      	mov	r3, r5
 800a10c:	f7f6 f8c4 	bl	8000298 <__aeabi_dsub>
 800a110:	a31b      	add	r3, pc, #108	; (adr r3, 800a180 <__ieee754_rem_pio2+0x330>)
 800a112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a116:	4604      	mov	r4, r0
 800a118:	460d      	mov	r5, r1
 800a11a:	ec51 0b18 	vmov	r0, r1, d8
 800a11e:	f7f6 fa73 	bl	8000608 <__aeabi_dmul>
 800a122:	4622      	mov	r2, r4
 800a124:	462b      	mov	r3, r5
 800a126:	f7f6 f8b7 	bl	8000298 <__aeabi_dsub>
 800a12a:	4604      	mov	r4, r0
 800a12c:	460d      	mov	r5, r1
 800a12e:	e75f      	b.n	8009ff0 <__ieee754_rem_pio2+0x1a0>
 800a130:	4b1b      	ldr	r3, [pc, #108]	; (800a1a0 <__ieee754_rem_pio2+0x350>)
 800a132:	4598      	cmp	r8, r3
 800a134:	dd36      	ble.n	800a1a4 <__ieee754_rem_pio2+0x354>
 800a136:	ee10 2a10 	vmov	r2, s0
 800a13a:	462b      	mov	r3, r5
 800a13c:	4620      	mov	r0, r4
 800a13e:	4629      	mov	r1, r5
 800a140:	f7f6 f8aa 	bl	8000298 <__aeabi_dsub>
 800a144:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a148:	e9ca 0100 	strd	r0, r1, [sl]
 800a14c:	e694      	b.n	8009e78 <__ieee754_rem_pio2+0x28>
 800a14e:	bf00      	nop
 800a150:	54400000 	.word	0x54400000
 800a154:	3ff921fb 	.word	0x3ff921fb
 800a158:	1a626331 	.word	0x1a626331
 800a15c:	3dd0b461 	.word	0x3dd0b461
 800a160:	1a600000 	.word	0x1a600000
 800a164:	3dd0b461 	.word	0x3dd0b461
 800a168:	2e037073 	.word	0x2e037073
 800a16c:	3ba3198a 	.word	0x3ba3198a
 800a170:	6dc9c883 	.word	0x6dc9c883
 800a174:	3fe45f30 	.word	0x3fe45f30
 800a178:	2e000000 	.word	0x2e000000
 800a17c:	3ba3198a 	.word	0x3ba3198a
 800a180:	252049c1 	.word	0x252049c1
 800a184:	397b839a 	.word	0x397b839a
 800a188:	3fe921fb 	.word	0x3fe921fb
 800a18c:	4002d97b 	.word	0x4002d97b
 800a190:	3ff921fb 	.word	0x3ff921fb
 800a194:	413921fb 	.word	0x413921fb
 800a198:	3fe00000 	.word	0x3fe00000
 800a19c:	0800b790 	.word	0x0800b790
 800a1a0:	7fefffff 	.word	0x7fefffff
 800a1a4:	ea4f 5428 	mov.w	r4, r8, asr #20
 800a1a8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800a1ac:	ee10 0a10 	vmov	r0, s0
 800a1b0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800a1b4:	ee10 6a10 	vmov	r6, s0
 800a1b8:	460f      	mov	r7, r1
 800a1ba:	f7f6 fcd5 	bl	8000b68 <__aeabi_d2iz>
 800a1be:	f7f6 f9b9 	bl	8000534 <__aeabi_i2d>
 800a1c2:	4602      	mov	r2, r0
 800a1c4:	460b      	mov	r3, r1
 800a1c6:	4630      	mov	r0, r6
 800a1c8:	4639      	mov	r1, r7
 800a1ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a1ce:	f7f6 f863 	bl	8000298 <__aeabi_dsub>
 800a1d2:	4b22      	ldr	r3, [pc, #136]	; (800a25c <__ieee754_rem_pio2+0x40c>)
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	f7f6 fa17 	bl	8000608 <__aeabi_dmul>
 800a1da:	460f      	mov	r7, r1
 800a1dc:	4606      	mov	r6, r0
 800a1de:	f7f6 fcc3 	bl	8000b68 <__aeabi_d2iz>
 800a1e2:	f7f6 f9a7 	bl	8000534 <__aeabi_i2d>
 800a1e6:	4602      	mov	r2, r0
 800a1e8:	460b      	mov	r3, r1
 800a1ea:	4630      	mov	r0, r6
 800a1ec:	4639      	mov	r1, r7
 800a1ee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a1f2:	f7f6 f851 	bl	8000298 <__aeabi_dsub>
 800a1f6:	4b19      	ldr	r3, [pc, #100]	; (800a25c <__ieee754_rem_pio2+0x40c>)
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	f7f6 fa05 	bl	8000608 <__aeabi_dmul>
 800a1fe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a202:	ad04      	add	r5, sp, #16
 800a204:	f04f 0803 	mov.w	r8, #3
 800a208:	46a9      	mov	r9, r5
 800a20a:	2600      	movs	r6, #0
 800a20c:	2700      	movs	r7, #0
 800a20e:	4632      	mov	r2, r6
 800a210:	463b      	mov	r3, r7
 800a212:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800a216:	46c3      	mov	fp, r8
 800a218:	3d08      	subs	r5, #8
 800a21a:	f108 38ff 	add.w	r8, r8, #4294967295
 800a21e:	f7f6 fc5b 	bl	8000ad8 <__aeabi_dcmpeq>
 800a222:	2800      	cmp	r0, #0
 800a224:	d1f3      	bne.n	800a20e <__ieee754_rem_pio2+0x3be>
 800a226:	4b0e      	ldr	r3, [pc, #56]	; (800a260 <__ieee754_rem_pio2+0x410>)
 800a228:	9301      	str	r3, [sp, #4]
 800a22a:	2302      	movs	r3, #2
 800a22c:	9300      	str	r3, [sp, #0]
 800a22e:	4622      	mov	r2, r4
 800a230:	465b      	mov	r3, fp
 800a232:	4651      	mov	r1, sl
 800a234:	4648      	mov	r0, r9
 800a236:	f000 f993 	bl	800a560 <__kernel_rem_pio2>
 800a23a:	9b02      	ldr	r3, [sp, #8]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	4683      	mov	fp, r0
 800a240:	f6bf ae46 	bge.w	8009ed0 <__ieee754_rem_pio2+0x80>
 800a244:	f8da 3004 	ldr.w	r3, [sl, #4]
 800a248:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a24c:	f8ca 3004 	str.w	r3, [sl, #4]
 800a250:	f8da 300c 	ldr.w	r3, [sl, #12]
 800a254:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a258:	e73a      	b.n	800a0d0 <__ieee754_rem_pio2+0x280>
 800a25a:	bf00      	nop
 800a25c:	41700000 	.word	0x41700000
 800a260:	0800b810 	.word	0x0800b810

0800a264 <__ieee754_sqrt>:
 800a264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a268:	ec55 4b10 	vmov	r4, r5, d0
 800a26c:	4e56      	ldr	r6, [pc, #344]	; (800a3c8 <__ieee754_sqrt+0x164>)
 800a26e:	43ae      	bics	r6, r5
 800a270:	ee10 0a10 	vmov	r0, s0
 800a274:	ee10 3a10 	vmov	r3, s0
 800a278:	4629      	mov	r1, r5
 800a27a:	462a      	mov	r2, r5
 800a27c:	d110      	bne.n	800a2a0 <__ieee754_sqrt+0x3c>
 800a27e:	ee10 2a10 	vmov	r2, s0
 800a282:	462b      	mov	r3, r5
 800a284:	f7f6 f9c0 	bl	8000608 <__aeabi_dmul>
 800a288:	4602      	mov	r2, r0
 800a28a:	460b      	mov	r3, r1
 800a28c:	4620      	mov	r0, r4
 800a28e:	4629      	mov	r1, r5
 800a290:	f7f6 f804 	bl	800029c <__adddf3>
 800a294:	4604      	mov	r4, r0
 800a296:	460d      	mov	r5, r1
 800a298:	ec45 4b10 	vmov	d0, r4, r5
 800a29c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2a0:	2d00      	cmp	r5, #0
 800a2a2:	dc10      	bgt.n	800a2c6 <__ieee754_sqrt+0x62>
 800a2a4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a2a8:	4330      	orrs	r0, r6
 800a2aa:	d0f5      	beq.n	800a298 <__ieee754_sqrt+0x34>
 800a2ac:	b15d      	cbz	r5, 800a2c6 <__ieee754_sqrt+0x62>
 800a2ae:	ee10 2a10 	vmov	r2, s0
 800a2b2:	462b      	mov	r3, r5
 800a2b4:	ee10 0a10 	vmov	r0, s0
 800a2b8:	f7f5 ffee 	bl	8000298 <__aeabi_dsub>
 800a2bc:	4602      	mov	r2, r0
 800a2be:	460b      	mov	r3, r1
 800a2c0:	f7f6 facc 	bl	800085c <__aeabi_ddiv>
 800a2c4:	e7e6      	b.n	800a294 <__ieee754_sqrt+0x30>
 800a2c6:	1509      	asrs	r1, r1, #20
 800a2c8:	d076      	beq.n	800a3b8 <__ieee754_sqrt+0x154>
 800a2ca:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a2ce:	07ce      	lsls	r6, r1, #31
 800a2d0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800a2d4:	bf5e      	ittt	pl
 800a2d6:	0fda      	lsrpl	r2, r3, #31
 800a2d8:	005b      	lslpl	r3, r3, #1
 800a2da:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800a2de:	0fda      	lsrs	r2, r3, #31
 800a2e0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800a2e4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800a2e8:	2000      	movs	r0, #0
 800a2ea:	106d      	asrs	r5, r5, #1
 800a2ec:	005b      	lsls	r3, r3, #1
 800a2ee:	f04f 0e16 	mov.w	lr, #22
 800a2f2:	4684      	mov	ip, r0
 800a2f4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a2f8:	eb0c 0401 	add.w	r4, ip, r1
 800a2fc:	4294      	cmp	r4, r2
 800a2fe:	bfde      	ittt	le
 800a300:	1b12      	suble	r2, r2, r4
 800a302:	eb04 0c01 	addle.w	ip, r4, r1
 800a306:	1840      	addle	r0, r0, r1
 800a308:	0052      	lsls	r2, r2, #1
 800a30a:	f1be 0e01 	subs.w	lr, lr, #1
 800a30e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a312:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a316:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a31a:	d1ed      	bne.n	800a2f8 <__ieee754_sqrt+0x94>
 800a31c:	4671      	mov	r1, lr
 800a31e:	2720      	movs	r7, #32
 800a320:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a324:	4562      	cmp	r2, ip
 800a326:	eb04 060e 	add.w	r6, r4, lr
 800a32a:	dc02      	bgt.n	800a332 <__ieee754_sqrt+0xce>
 800a32c:	d113      	bne.n	800a356 <__ieee754_sqrt+0xf2>
 800a32e:	429e      	cmp	r6, r3
 800a330:	d811      	bhi.n	800a356 <__ieee754_sqrt+0xf2>
 800a332:	2e00      	cmp	r6, #0
 800a334:	eb06 0e04 	add.w	lr, r6, r4
 800a338:	da43      	bge.n	800a3c2 <__ieee754_sqrt+0x15e>
 800a33a:	f1be 0f00 	cmp.w	lr, #0
 800a33e:	db40      	blt.n	800a3c2 <__ieee754_sqrt+0x15e>
 800a340:	f10c 0801 	add.w	r8, ip, #1
 800a344:	eba2 020c 	sub.w	r2, r2, ip
 800a348:	429e      	cmp	r6, r3
 800a34a:	bf88      	it	hi
 800a34c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800a350:	1b9b      	subs	r3, r3, r6
 800a352:	4421      	add	r1, r4
 800a354:	46c4      	mov	ip, r8
 800a356:	0052      	lsls	r2, r2, #1
 800a358:	3f01      	subs	r7, #1
 800a35a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a35e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a362:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a366:	d1dd      	bne.n	800a324 <__ieee754_sqrt+0xc0>
 800a368:	4313      	orrs	r3, r2
 800a36a:	d006      	beq.n	800a37a <__ieee754_sqrt+0x116>
 800a36c:	1c4c      	adds	r4, r1, #1
 800a36e:	bf13      	iteet	ne
 800a370:	3101      	addne	r1, #1
 800a372:	3001      	addeq	r0, #1
 800a374:	4639      	moveq	r1, r7
 800a376:	f021 0101 	bicne.w	r1, r1, #1
 800a37a:	1043      	asrs	r3, r0, #1
 800a37c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a380:	0849      	lsrs	r1, r1, #1
 800a382:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a386:	07c2      	lsls	r2, r0, #31
 800a388:	bf48      	it	mi
 800a38a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800a38e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800a392:	460c      	mov	r4, r1
 800a394:	463d      	mov	r5, r7
 800a396:	e77f      	b.n	800a298 <__ieee754_sqrt+0x34>
 800a398:	0ada      	lsrs	r2, r3, #11
 800a39a:	3815      	subs	r0, #21
 800a39c:	055b      	lsls	r3, r3, #21
 800a39e:	2a00      	cmp	r2, #0
 800a3a0:	d0fa      	beq.n	800a398 <__ieee754_sqrt+0x134>
 800a3a2:	02d7      	lsls	r7, r2, #11
 800a3a4:	d50a      	bpl.n	800a3bc <__ieee754_sqrt+0x158>
 800a3a6:	f1c1 0420 	rsb	r4, r1, #32
 800a3aa:	fa23 f404 	lsr.w	r4, r3, r4
 800a3ae:	1e4d      	subs	r5, r1, #1
 800a3b0:	408b      	lsls	r3, r1
 800a3b2:	4322      	orrs	r2, r4
 800a3b4:	1b41      	subs	r1, r0, r5
 800a3b6:	e788      	b.n	800a2ca <__ieee754_sqrt+0x66>
 800a3b8:	4608      	mov	r0, r1
 800a3ba:	e7f0      	b.n	800a39e <__ieee754_sqrt+0x13a>
 800a3bc:	0052      	lsls	r2, r2, #1
 800a3be:	3101      	adds	r1, #1
 800a3c0:	e7ef      	b.n	800a3a2 <__ieee754_sqrt+0x13e>
 800a3c2:	46e0      	mov	r8, ip
 800a3c4:	e7be      	b.n	800a344 <__ieee754_sqrt+0xe0>
 800a3c6:	bf00      	nop
 800a3c8:	7ff00000 	.word	0x7ff00000
 800a3cc:	00000000 	.word	0x00000000

0800a3d0 <__kernel_cos>:
 800a3d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3d4:	ec57 6b10 	vmov	r6, r7, d0
 800a3d8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800a3dc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800a3e0:	ed8d 1b00 	vstr	d1, [sp]
 800a3e4:	da07      	bge.n	800a3f6 <__kernel_cos+0x26>
 800a3e6:	ee10 0a10 	vmov	r0, s0
 800a3ea:	4639      	mov	r1, r7
 800a3ec:	f7f6 fbbc 	bl	8000b68 <__aeabi_d2iz>
 800a3f0:	2800      	cmp	r0, #0
 800a3f2:	f000 8088 	beq.w	800a506 <__kernel_cos+0x136>
 800a3f6:	4632      	mov	r2, r6
 800a3f8:	463b      	mov	r3, r7
 800a3fa:	4630      	mov	r0, r6
 800a3fc:	4639      	mov	r1, r7
 800a3fe:	f7f6 f903 	bl	8000608 <__aeabi_dmul>
 800a402:	4b51      	ldr	r3, [pc, #324]	; (800a548 <__kernel_cos+0x178>)
 800a404:	2200      	movs	r2, #0
 800a406:	4604      	mov	r4, r0
 800a408:	460d      	mov	r5, r1
 800a40a:	f7f6 f8fd 	bl	8000608 <__aeabi_dmul>
 800a40e:	a340      	add	r3, pc, #256	; (adr r3, 800a510 <__kernel_cos+0x140>)
 800a410:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a414:	4682      	mov	sl, r0
 800a416:	468b      	mov	fp, r1
 800a418:	4620      	mov	r0, r4
 800a41a:	4629      	mov	r1, r5
 800a41c:	f7f6 f8f4 	bl	8000608 <__aeabi_dmul>
 800a420:	a33d      	add	r3, pc, #244	; (adr r3, 800a518 <__kernel_cos+0x148>)
 800a422:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a426:	f7f5 ff39 	bl	800029c <__adddf3>
 800a42a:	4622      	mov	r2, r4
 800a42c:	462b      	mov	r3, r5
 800a42e:	f7f6 f8eb 	bl	8000608 <__aeabi_dmul>
 800a432:	a33b      	add	r3, pc, #236	; (adr r3, 800a520 <__kernel_cos+0x150>)
 800a434:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a438:	f7f5 ff2e 	bl	8000298 <__aeabi_dsub>
 800a43c:	4622      	mov	r2, r4
 800a43e:	462b      	mov	r3, r5
 800a440:	f7f6 f8e2 	bl	8000608 <__aeabi_dmul>
 800a444:	a338      	add	r3, pc, #224	; (adr r3, 800a528 <__kernel_cos+0x158>)
 800a446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a44a:	f7f5 ff27 	bl	800029c <__adddf3>
 800a44e:	4622      	mov	r2, r4
 800a450:	462b      	mov	r3, r5
 800a452:	f7f6 f8d9 	bl	8000608 <__aeabi_dmul>
 800a456:	a336      	add	r3, pc, #216	; (adr r3, 800a530 <__kernel_cos+0x160>)
 800a458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a45c:	f7f5 ff1c 	bl	8000298 <__aeabi_dsub>
 800a460:	4622      	mov	r2, r4
 800a462:	462b      	mov	r3, r5
 800a464:	f7f6 f8d0 	bl	8000608 <__aeabi_dmul>
 800a468:	a333      	add	r3, pc, #204	; (adr r3, 800a538 <__kernel_cos+0x168>)
 800a46a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a46e:	f7f5 ff15 	bl	800029c <__adddf3>
 800a472:	4622      	mov	r2, r4
 800a474:	462b      	mov	r3, r5
 800a476:	f7f6 f8c7 	bl	8000608 <__aeabi_dmul>
 800a47a:	4622      	mov	r2, r4
 800a47c:	462b      	mov	r3, r5
 800a47e:	f7f6 f8c3 	bl	8000608 <__aeabi_dmul>
 800a482:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a486:	4604      	mov	r4, r0
 800a488:	460d      	mov	r5, r1
 800a48a:	4630      	mov	r0, r6
 800a48c:	4639      	mov	r1, r7
 800a48e:	f7f6 f8bb 	bl	8000608 <__aeabi_dmul>
 800a492:	460b      	mov	r3, r1
 800a494:	4602      	mov	r2, r0
 800a496:	4629      	mov	r1, r5
 800a498:	4620      	mov	r0, r4
 800a49a:	f7f5 fefd 	bl	8000298 <__aeabi_dsub>
 800a49e:	4b2b      	ldr	r3, [pc, #172]	; (800a54c <__kernel_cos+0x17c>)
 800a4a0:	4598      	cmp	r8, r3
 800a4a2:	4606      	mov	r6, r0
 800a4a4:	460f      	mov	r7, r1
 800a4a6:	dc10      	bgt.n	800a4ca <__kernel_cos+0xfa>
 800a4a8:	4602      	mov	r2, r0
 800a4aa:	460b      	mov	r3, r1
 800a4ac:	4650      	mov	r0, sl
 800a4ae:	4659      	mov	r1, fp
 800a4b0:	f7f5 fef2 	bl	8000298 <__aeabi_dsub>
 800a4b4:	460b      	mov	r3, r1
 800a4b6:	4926      	ldr	r1, [pc, #152]	; (800a550 <__kernel_cos+0x180>)
 800a4b8:	4602      	mov	r2, r0
 800a4ba:	2000      	movs	r0, #0
 800a4bc:	f7f5 feec 	bl	8000298 <__aeabi_dsub>
 800a4c0:	ec41 0b10 	vmov	d0, r0, r1
 800a4c4:	b003      	add	sp, #12
 800a4c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4ca:	4b22      	ldr	r3, [pc, #136]	; (800a554 <__kernel_cos+0x184>)
 800a4cc:	4920      	ldr	r1, [pc, #128]	; (800a550 <__kernel_cos+0x180>)
 800a4ce:	4598      	cmp	r8, r3
 800a4d0:	bfcc      	ite	gt
 800a4d2:	4d21      	ldrgt	r5, [pc, #132]	; (800a558 <__kernel_cos+0x188>)
 800a4d4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800a4d8:	2400      	movs	r4, #0
 800a4da:	4622      	mov	r2, r4
 800a4dc:	462b      	mov	r3, r5
 800a4de:	2000      	movs	r0, #0
 800a4e0:	f7f5 feda 	bl	8000298 <__aeabi_dsub>
 800a4e4:	4622      	mov	r2, r4
 800a4e6:	4680      	mov	r8, r0
 800a4e8:	4689      	mov	r9, r1
 800a4ea:	462b      	mov	r3, r5
 800a4ec:	4650      	mov	r0, sl
 800a4ee:	4659      	mov	r1, fp
 800a4f0:	f7f5 fed2 	bl	8000298 <__aeabi_dsub>
 800a4f4:	4632      	mov	r2, r6
 800a4f6:	463b      	mov	r3, r7
 800a4f8:	f7f5 fece 	bl	8000298 <__aeabi_dsub>
 800a4fc:	4602      	mov	r2, r0
 800a4fe:	460b      	mov	r3, r1
 800a500:	4640      	mov	r0, r8
 800a502:	4649      	mov	r1, r9
 800a504:	e7da      	b.n	800a4bc <__kernel_cos+0xec>
 800a506:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800a540 <__kernel_cos+0x170>
 800a50a:	e7db      	b.n	800a4c4 <__kernel_cos+0xf4>
 800a50c:	f3af 8000 	nop.w
 800a510:	be8838d4 	.word	0xbe8838d4
 800a514:	bda8fae9 	.word	0xbda8fae9
 800a518:	bdb4b1c4 	.word	0xbdb4b1c4
 800a51c:	3e21ee9e 	.word	0x3e21ee9e
 800a520:	809c52ad 	.word	0x809c52ad
 800a524:	3e927e4f 	.word	0x3e927e4f
 800a528:	19cb1590 	.word	0x19cb1590
 800a52c:	3efa01a0 	.word	0x3efa01a0
 800a530:	16c15177 	.word	0x16c15177
 800a534:	3f56c16c 	.word	0x3f56c16c
 800a538:	5555554c 	.word	0x5555554c
 800a53c:	3fa55555 	.word	0x3fa55555
 800a540:	00000000 	.word	0x00000000
 800a544:	3ff00000 	.word	0x3ff00000
 800a548:	3fe00000 	.word	0x3fe00000
 800a54c:	3fd33332 	.word	0x3fd33332
 800a550:	3ff00000 	.word	0x3ff00000
 800a554:	3fe90000 	.word	0x3fe90000
 800a558:	3fd20000 	.word	0x3fd20000
 800a55c:	00000000 	.word	0x00000000

0800a560 <__kernel_rem_pio2>:
 800a560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a564:	ed2d 8b02 	vpush	{d8}
 800a568:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800a56c:	f112 0f14 	cmn.w	r2, #20
 800a570:	9308      	str	r3, [sp, #32]
 800a572:	9101      	str	r1, [sp, #4]
 800a574:	4bc6      	ldr	r3, [pc, #792]	; (800a890 <__kernel_rem_pio2+0x330>)
 800a576:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800a578:	9009      	str	r0, [sp, #36]	; 0x24
 800a57a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a57e:	9304      	str	r3, [sp, #16]
 800a580:	9b08      	ldr	r3, [sp, #32]
 800a582:	f103 33ff 	add.w	r3, r3, #4294967295
 800a586:	bfa8      	it	ge
 800a588:	1ed4      	subge	r4, r2, #3
 800a58a:	9306      	str	r3, [sp, #24]
 800a58c:	bfb2      	itee	lt
 800a58e:	2400      	movlt	r4, #0
 800a590:	2318      	movge	r3, #24
 800a592:	fb94 f4f3 	sdivge	r4, r4, r3
 800a596:	f06f 0317 	mvn.w	r3, #23
 800a59a:	fb04 3303 	mla	r3, r4, r3, r3
 800a59e:	eb03 0a02 	add.w	sl, r3, r2
 800a5a2:	9b04      	ldr	r3, [sp, #16]
 800a5a4:	9a06      	ldr	r2, [sp, #24]
 800a5a6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800a880 <__kernel_rem_pio2+0x320>
 800a5aa:	eb03 0802 	add.w	r8, r3, r2
 800a5ae:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800a5b0:	1aa7      	subs	r7, r4, r2
 800a5b2:	ae20      	add	r6, sp, #128	; 0x80
 800a5b4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a5b8:	2500      	movs	r5, #0
 800a5ba:	4545      	cmp	r5, r8
 800a5bc:	dd18      	ble.n	800a5f0 <__kernel_rem_pio2+0x90>
 800a5be:	9b08      	ldr	r3, [sp, #32]
 800a5c0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800a5c4:	aa20      	add	r2, sp, #128	; 0x80
 800a5c6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800a880 <__kernel_rem_pio2+0x320>
 800a5ca:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a5ce:	f1c3 0301 	rsb	r3, r3, #1
 800a5d2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800a5d6:	9307      	str	r3, [sp, #28]
 800a5d8:	9b07      	ldr	r3, [sp, #28]
 800a5da:	9a04      	ldr	r2, [sp, #16]
 800a5dc:	4443      	add	r3, r8
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	db2f      	blt.n	800a642 <__kernel_rem_pio2+0xe2>
 800a5e2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a5e6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a5ea:	462f      	mov	r7, r5
 800a5ec:	2600      	movs	r6, #0
 800a5ee:	e01b      	b.n	800a628 <__kernel_rem_pio2+0xc8>
 800a5f0:	42ef      	cmn	r7, r5
 800a5f2:	d407      	bmi.n	800a604 <__kernel_rem_pio2+0xa4>
 800a5f4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a5f8:	f7f5 ff9c 	bl	8000534 <__aeabi_i2d>
 800a5fc:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a600:	3501      	adds	r5, #1
 800a602:	e7da      	b.n	800a5ba <__kernel_rem_pio2+0x5a>
 800a604:	ec51 0b18 	vmov	r0, r1, d8
 800a608:	e7f8      	b.n	800a5fc <__kernel_rem_pio2+0x9c>
 800a60a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a60e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a612:	f7f5 fff9 	bl	8000608 <__aeabi_dmul>
 800a616:	4602      	mov	r2, r0
 800a618:	460b      	mov	r3, r1
 800a61a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a61e:	f7f5 fe3d 	bl	800029c <__adddf3>
 800a622:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a626:	3601      	adds	r6, #1
 800a628:	9b06      	ldr	r3, [sp, #24]
 800a62a:	429e      	cmp	r6, r3
 800a62c:	f1a7 0708 	sub.w	r7, r7, #8
 800a630:	ddeb      	ble.n	800a60a <__kernel_rem_pio2+0xaa>
 800a632:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a636:	3508      	adds	r5, #8
 800a638:	ecab 7b02 	vstmia	fp!, {d7}
 800a63c:	f108 0801 	add.w	r8, r8, #1
 800a640:	e7ca      	b.n	800a5d8 <__kernel_rem_pio2+0x78>
 800a642:	9b04      	ldr	r3, [sp, #16]
 800a644:	aa0c      	add	r2, sp, #48	; 0x30
 800a646:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a64a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a64c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800a64e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a652:	9c04      	ldr	r4, [sp, #16]
 800a654:	930a      	str	r3, [sp, #40]	; 0x28
 800a656:	ab98      	add	r3, sp, #608	; 0x260
 800a658:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a65c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800a660:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800a664:	f8cd b008 	str.w	fp, [sp, #8]
 800a668:	4625      	mov	r5, r4
 800a66a:	2d00      	cmp	r5, #0
 800a66c:	dc78      	bgt.n	800a760 <__kernel_rem_pio2+0x200>
 800a66e:	ec47 6b10 	vmov	d0, r6, r7
 800a672:	4650      	mov	r0, sl
 800a674:	f000 fdd0 	bl	800b218 <scalbn>
 800a678:	ec57 6b10 	vmov	r6, r7, d0
 800a67c:	2200      	movs	r2, #0
 800a67e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a682:	ee10 0a10 	vmov	r0, s0
 800a686:	4639      	mov	r1, r7
 800a688:	f7f5 ffbe 	bl	8000608 <__aeabi_dmul>
 800a68c:	ec41 0b10 	vmov	d0, r0, r1
 800a690:	f000 fd3a 	bl	800b108 <floor>
 800a694:	4b7f      	ldr	r3, [pc, #508]	; (800a894 <__kernel_rem_pio2+0x334>)
 800a696:	ec51 0b10 	vmov	r0, r1, d0
 800a69a:	2200      	movs	r2, #0
 800a69c:	f7f5 ffb4 	bl	8000608 <__aeabi_dmul>
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	460b      	mov	r3, r1
 800a6a4:	4630      	mov	r0, r6
 800a6a6:	4639      	mov	r1, r7
 800a6a8:	f7f5 fdf6 	bl	8000298 <__aeabi_dsub>
 800a6ac:	460f      	mov	r7, r1
 800a6ae:	4606      	mov	r6, r0
 800a6b0:	f7f6 fa5a 	bl	8000b68 <__aeabi_d2iz>
 800a6b4:	9007      	str	r0, [sp, #28]
 800a6b6:	f7f5 ff3d 	bl	8000534 <__aeabi_i2d>
 800a6ba:	4602      	mov	r2, r0
 800a6bc:	460b      	mov	r3, r1
 800a6be:	4630      	mov	r0, r6
 800a6c0:	4639      	mov	r1, r7
 800a6c2:	f7f5 fde9 	bl	8000298 <__aeabi_dsub>
 800a6c6:	f1ba 0f00 	cmp.w	sl, #0
 800a6ca:	4606      	mov	r6, r0
 800a6cc:	460f      	mov	r7, r1
 800a6ce:	dd70      	ble.n	800a7b2 <__kernel_rem_pio2+0x252>
 800a6d0:	1e62      	subs	r2, r4, #1
 800a6d2:	ab0c      	add	r3, sp, #48	; 0x30
 800a6d4:	9d07      	ldr	r5, [sp, #28]
 800a6d6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a6da:	f1ca 0118 	rsb	r1, sl, #24
 800a6de:	fa40 f301 	asr.w	r3, r0, r1
 800a6e2:	441d      	add	r5, r3
 800a6e4:	408b      	lsls	r3, r1
 800a6e6:	1ac0      	subs	r0, r0, r3
 800a6e8:	ab0c      	add	r3, sp, #48	; 0x30
 800a6ea:	9507      	str	r5, [sp, #28]
 800a6ec:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800a6f0:	f1ca 0317 	rsb	r3, sl, #23
 800a6f4:	fa40 f303 	asr.w	r3, r0, r3
 800a6f8:	9302      	str	r3, [sp, #8]
 800a6fa:	9b02      	ldr	r3, [sp, #8]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	dd66      	ble.n	800a7ce <__kernel_rem_pio2+0x26e>
 800a700:	9b07      	ldr	r3, [sp, #28]
 800a702:	2200      	movs	r2, #0
 800a704:	3301      	adds	r3, #1
 800a706:	9307      	str	r3, [sp, #28]
 800a708:	4615      	mov	r5, r2
 800a70a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a70e:	4294      	cmp	r4, r2
 800a710:	f300 8099 	bgt.w	800a846 <__kernel_rem_pio2+0x2e6>
 800a714:	f1ba 0f00 	cmp.w	sl, #0
 800a718:	dd07      	ble.n	800a72a <__kernel_rem_pio2+0x1ca>
 800a71a:	f1ba 0f01 	cmp.w	sl, #1
 800a71e:	f000 80a5 	beq.w	800a86c <__kernel_rem_pio2+0x30c>
 800a722:	f1ba 0f02 	cmp.w	sl, #2
 800a726:	f000 80c1 	beq.w	800a8ac <__kernel_rem_pio2+0x34c>
 800a72a:	9b02      	ldr	r3, [sp, #8]
 800a72c:	2b02      	cmp	r3, #2
 800a72e:	d14e      	bne.n	800a7ce <__kernel_rem_pio2+0x26e>
 800a730:	4632      	mov	r2, r6
 800a732:	463b      	mov	r3, r7
 800a734:	4958      	ldr	r1, [pc, #352]	; (800a898 <__kernel_rem_pio2+0x338>)
 800a736:	2000      	movs	r0, #0
 800a738:	f7f5 fdae 	bl	8000298 <__aeabi_dsub>
 800a73c:	4606      	mov	r6, r0
 800a73e:	460f      	mov	r7, r1
 800a740:	2d00      	cmp	r5, #0
 800a742:	d044      	beq.n	800a7ce <__kernel_rem_pio2+0x26e>
 800a744:	4650      	mov	r0, sl
 800a746:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800a888 <__kernel_rem_pio2+0x328>
 800a74a:	f000 fd65 	bl	800b218 <scalbn>
 800a74e:	4630      	mov	r0, r6
 800a750:	4639      	mov	r1, r7
 800a752:	ec53 2b10 	vmov	r2, r3, d0
 800a756:	f7f5 fd9f 	bl	8000298 <__aeabi_dsub>
 800a75a:	4606      	mov	r6, r0
 800a75c:	460f      	mov	r7, r1
 800a75e:	e036      	b.n	800a7ce <__kernel_rem_pio2+0x26e>
 800a760:	4b4e      	ldr	r3, [pc, #312]	; (800a89c <__kernel_rem_pio2+0x33c>)
 800a762:	2200      	movs	r2, #0
 800a764:	4630      	mov	r0, r6
 800a766:	4639      	mov	r1, r7
 800a768:	f7f5 ff4e 	bl	8000608 <__aeabi_dmul>
 800a76c:	f7f6 f9fc 	bl	8000b68 <__aeabi_d2iz>
 800a770:	f7f5 fee0 	bl	8000534 <__aeabi_i2d>
 800a774:	4b4a      	ldr	r3, [pc, #296]	; (800a8a0 <__kernel_rem_pio2+0x340>)
 800a776:	2200      	movs	r2, #0
 800a778:	4680      	mov	r8, r0
 800a77a:	4689      	mov	r9, r1
 800a77c:	f7f5 ff44 	bl	8000608 <__aeabi_dmul>
 800a780:	4602      	mov	r2, r0
 800a782:	460b      	mov	r3, r1
 800a784:	4630      	mov	r0, r6
 800a786:	4639      	mov	r1, r7
 800a788:	f7f5 fd86 	bl	8000298 <__aeabi_dsub>
 800a78c:	f7f6 f9ec 	bl	8000b68 <__aeabi_d2iz>
 800a790:	9b02      	ldr	r3, [sp, #8]
 800a792:	f843 0b04 	str.w	r0, [r3], #4
 800a796:	3d01      	subs	r5, #1
 800a798:	9302      	str	r3, [sp, #8]
 800a79a:	ab70      	add	r3, sp, #448	; 0x1c0
 800a79c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a4:	4640      	mov	r0, r8
 800a7a6:	4649      	mov	r1, r9
 800a7a8:	f7f5 fd78 	bl	800029c <__adddf3>
 800a7ac:	4606      	mov	r6, r0
 800a7ae:	460f      	mov	r7, r1
 800a7b0:	e75b      	b.n	800a66a <__kernel_rem_pio2+0x10a>
 800a7b2:	d105      	bne.n	800a7c0 <__kernel_rem_pio2+0x260>
 800a7b4:	1e63      	subs	r3, r4, #1
 800a7b6:	aa0c      	add	r2, sp, #48	; 0x30
 800a7b8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a7bc:	15c3      	asrs	r3, r0, #23
 800a7be:	e79b      	b.n	800a6f8 <__kernel_rem_pio2+0x198>
 800a7c0:	4b38      	ldr	r3, [pc, #224]	; (800a8a4 <__kernel_rem_pio2+0x344>)
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	f7f6 f9a6 	bl	8000b14 <__aeabi_dcmpge>
 800a7c8:	2800      	cmp	r0, #0
 800a7ca:	d139      	bne.n	800a840 <__kernel_rem_pio2+0x2e0>
 800a7cc:	9002      	str	r0, [sp, #8]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	4630      	mov	r0, r6
 800a7d4:	4639      	mov	r1, r7
 800a7d6:	f7f6 f97f 	bl	8000ad8 <__aeabi_dcmpeq>
 800a7da:	2800      	cmp	r0, #0
 800a7dc:	f000 80b4 	beq.w	800a948 <__kernel_rem_pio2+0x3e8>
 800a7e0:	f104 3bff 	add.w	fp, r4, #4294967295
 800a7e4:	465b      	mov	r3, fp
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	9904      	ldr	r1, [sp, #16]
 800a7ea:	428b      	cmp	r3, r1
 800a7ec:	da65      	bge.n	800a8ba <__kernel_rem_pio2+0x35a>
 800a7ee:	2a00      	cmp	r2, #0
 800a7f0:	d07b      	beq.n	800a8ea <__kernel_rem_pio2+0x38a>
 800a7f2:	ab0c      	add	r3, sp, #48	; 0x30
 800a7f4:	f1aa 0a18 	sub.w	sl, sl, #24
 800a7f8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	f000 80a0 	beq.w	800a942 <__kernel_rem_pio2+0x3e2>
 800a802:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800a888 <__kernel_rem_pio2+0x328>
 800a806:	4650      	mov	r0, sl
 800a808:	f000 fd06 	bl	800b218 <scalbn>
 800a80c:	4f23      	ldr	r7, [pc, #140]	; (800a89c <__kernel_rem_pio2+0x33c>)
 800a80e:	ec55 4b10 	vmov	r4, r5, d0
 800a812:	46d8      	mov	r8, fp
 800a814:	2600      	movs	r6, #0
 800a816:	f1b8 0f00 	cmp.w	r8, #0
 800a81a:	f280 80cf 	bge.w	800a9bc <__kernel_rem_pio2+0x45c>
 800a81e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800a880 <__kernel_rem_pio2+0x320>
 800a822:	465f      	mov	r7, fp
 800a824:	f04f 0800 	mov.w	r8, #0
 800a828:	2f00      	cmp	r7, #0
 800a82a:	f2c0 80fd 	blt.w	800aa28 <__kernel_rem_pio2+0x4c8>
 800a82e:	ab70      	add	r3, sp, #448	; 0x1c0
 800a830:	f8df a074 	ldr.w	sl, [pc, #116]	; 800a8a8 <__kernel_rem_pio2+0x348>
 800a834:	ec55 4b18 	vmov	r4, r5, d8
 800a838:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800a83c:	2600      	movs	r6, #0
 800a83e:	e0e5      	b.n	800aa0c <__kernel_rem_pio2+0x4ac>
 800a840:	2302      	movs	r3, #2
 800a842:	9302      	str	r3, [sp, #8]
 800a844:	e75c      	b.n	800a700 <__kernel_rem_pio2+0x1a0>
 800a846:	f8db 3000 	ldr.w	r3, [fp]
 800a84a:	b955      	cbnz	r5, 800a862 <__kernel_rem_pio2+0x302>
 800a84c:	b123      	cbz	r3, 800a858 <__kernel_rem_pio2+0x2f8>
 800a84e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a852:	f8cb 3000 	str.w	r3, [fp]
 800a856:	2301      	movs	r3, #1
 800a858:	3201      	adds	r2, #1
 800a85a:	f10b 0b04 	add.w	fp, fp, #4
 800a85e:	461d      	mov	r5, r3
 800a860:	e755      	b.n	800a70e <__kernel_rem_pio2+0x1ae>
 800a862:	1acb      	subs	r3, r1, r3
 800a864:	f8cb 3000 	str.w	r3, [fp]
 800a868:	462b      	mov	r3, r5
 800a86a:	e7f5      	b.n	800a858 <__kernel_rem_pio2+0x2f8>
 800a86c:	1e62      	subs	r2, r4, #1
 800a86e:	ab0c      	add	r3, sp, #48	; 0x30
 800a870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a874:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a878:	a90c      	add	r1, sp, #48	; 0x30
 800a87a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a87e:	e754      	b.n	800a72a <__kernel_rem_pio2+0x1ca>
	...
 800a88c:	3ff00000 	.word	0x3ff00000
 800a890:	0800b958 	.word	0x0800b958
 800a894:	40200000 	.word	0x40200000
 800a898:	3ff00000 	.word	0x3ff00000
 800a89c:	3e700000 	.word	0x3e700000
 800a8a0:	41700000 	.word	0x41700000
 800a8a4:	3fe00000 	.word	0x3fe00000
 800a8a8:	0800b918 	.word	0x0800b918
 800a8ac:	1e62      	subs	r2, r4, #1
 800a8ae:	ab0c      	add	r3, sp, #48	; 0x30
 800a8b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8b4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a8b8:	e7de      	b.n	800a878 <__kernel_rem_pio2+0x318>
 800a8ba:	a90c      	add	r1, sp, #48	; 0x30
 800a8bc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a8c0:	3b01      	subs	r3, #1
 800a8c2:	430a      	orrs	r2, r1
 800a8c4:	e790      	b.n	800a7e8 <__kernel_rem_pio2+0x288>
 800a8c6:	3301      	adds	r3, #1
 800a8c8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a8cc:	2900      	cmp	r1, #0
 800a8ce:	d0fa      	beq.n	800a8c6 <__kernel_rem_pio2+0x366>
 800a8d0:	9a08      	ldr	r2, [sp, #32]
 800a8d2:	18e3      	adds	r3, r4, r3
 800a8d4:	18a6      	adds	r6, r4, r2
 800a8d6:	aa20      	add	r2, sp, #128	; 0x80
 800a8d8:	1c65      	adds	r5, r4, #1
 800a8da:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800a8de:	9302      	str	r3, [sp, #8]
 800a8e0:	9b02      	ldr	r3, [sp, #8]
 800a8e2:	42ab      	cmp	r3, r5
 800a8e4:	da04      	bge.n	800a8f0 <__kernel_rem_pio2+0x390>
 800a8e6:	461c      	mov	r4, r3
 800a8e8:	e6b5      	b.n	800a656 <__kernel_rem_pio2+0xf6>
 800a8ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	e7eb      	b.n	800a8c8 <__kernel_rem_pio2+0x368>
 800a8f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a8f6:	f7f5 fe1d 	bl	8000534 <__aeabi_i2d>
 800a8fa:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a8fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a900:	46b3      	mov	fp, r6
 800a902:	461c      	mov	r4, r3
 800a904:	2700      	movs	r7, #0
 800a906:	f04f 0800 	mov.w	r8, #0
 800a90a:	f04f 0900 	mov.w	r9, #0
 800a90e:	9b06      	ldr	r3, [sp, #24]
 800a910:	429f      	cmp	r7, r3
 800a912:	dd06      	ble.n	800a922 <__kernel_rem_pio2+0x3c2>
 800a914:	ab70      	add	r3, sp, #448	; 0x1c0
 800a916:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a91a:	e9c3 8900 	strd	r8, r9, [r3]
 800a91e:	3501      	adds	r5, #1
 800a920:	e7de      	b.n	800a8e0 <__kernel_rem_pio2+0x380>
 800a922:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800a926:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800a92a:	f7f5 fe6d 	bl	8000608 <__aeabi_dmul>
 800a92e:	4602      	mov	r2, r0
 800a930:	460b      	mov	r3, r1
 800a932:	4640      	mov	r0, r8
 800a934:	4649      	mov	r1, r9
 800a936:	f7f5 fcb1 	bl	800029c <__adddf3>
 800a93a:	3701      	adds	r7, #1
 800a93c:	4680      	mov	r8, r0
 800a93e:	4689      	mov	r9, r1
 800a940:	e7e5      	b.n	800a90e <__kernel_rem_pio2+0x3ae>
 800a942:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a946:	e754      	b.n	800a7f2 <__kernel_rem_pio2+0x292>
 800a948:	ec47 6b10 	vmov	d0, r6, r7
 800a94c:	f1ca 0000 	rsb	r0, sl, #0
 800a950:	f000 fc62 	bl	800b218 <scalbn>
 800a954:	ec57 6b10 	vmov	r6, r7, d0
 800a958:	4b9f      	ldr	r3, [pc, #636]	; (800abd8 <__kernel_rem_pio2+0x678>)
 800a95a:	ee10 0a10 	vmov	r0, s0
 800a95e:	2200      	movs	r2, #0
 800a960:	4639      	mov	r1, r7
 800a962:	f7f6 f8d7 	bl	8000b14 <__aeabi_dcmpge>
 800a966:	b300      	cbz	r0, 800a9aa <__kernel_rem_pio2+0x44a>
 800a968:	4b9c      	ldr	r3, [pc, #624]	; (800abdc <__kernel_rem_pio2+0x67c>)
 800a96a:	2200      	movs	r2, #0
 800a96c:	4630      	mov	r0, r6
 800a96e:	4639      	mov	r1, r7
 800a970:	f7f5 fe4a 	bl	8000608 <__aeabi_dmul>
 800a974:	f7f6 f8f8 	bl	8000b68 <__aeabi_d2iz>
 800a978:	4605      	mov	r5, r0
 800a97a:	f7f5 fddb 	bl	8000534 <__aeabi_i2d>
 800a97e:	4b96      	ldr	r3, [pc, #600]	; (800abd8 <__kernel_rem_pio2+0x678>)
 800a980:	2200      	movs	r2, #0
 800a982:	f7f5 fe41 	bl	8000608 <__aeabi_dmul>
 800a986:	460b      	mov	r3, r1
 800a988:	4602      	mov	r2, r0
 800a98a:	4639      	mov	r1, r7
 800a98c:	4630      	mov	r0, r6
 800a98e:	f7f5 fc83 	bl	8000298 <__aeabi_dsub>
 800a992:	f7f6 f8e9 	bl	8000b68 <__aeabi_d2iz>
 800a996:	f104 0b01 	add.w	fp, r4, #1
 800a99a:	ab0c      	add	r3, sp, #48	; 0x30
 800a99c:	f10a 0a18 	add.w	sl, sl, #24
 800a9a0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a9a4:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800a9a8:	e72b      	b.n	800a802 <__kernel_rem_pio2+0x2a2>
 800a9aa:	4630      	mov	r0, r6
 800a9ac:	4639      	mov	r1, r7
 800a9ae:	f7f6 f8db 	bl	8000b68 <__aeabi_d2iz>
 800a9b2:	ab0c      	add	r3, sp, #48	; 0x30
 800a9b4:	46a3      	mov	fp, r4
 800a9b6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a9ba:	e722      	b.n	800a802 <__kernel_rem_pio2+0x2a2>
 800a9bc:	ab70      	add	r3, sp, #448	; 0x1c0
 800a9be:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800a9c2:	ab0c      	add	r3, sp, #48	; 0x30
 800a9c4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a9c8:	f7f5 fdb4 	bl	8000534 <__aeabi_i2d>
 800a9cc:	4622      	mov	r2, r4
 800a9ce:	462b      	mov	r3, r5
 800a9d0:	f7f5 fe1a 	bl	8000608 <__aeabi_dmul>
 800a9d4:	4632      	mov	r2, r6
 800a9d6:	e9c9 0100 	strd	r0, r1, [r9]
 800a9da:	463b      	mov	r3, r7
 800a9dc:	4620      	mov	r0, r4
 800a9de:	4629      	mov	r1, r5
 800a9e0:	f7f5 fe12 	bl	8000608 <__aeabi_dmul>
 800a9e4:	f108 38ff 	add.w	r8, r8, #4294967295
 800a9e8:	4604      	mov	r4, r0
 800a9ea:	460d      	mov	r5, r1
 800a9ec:	e713      	b.n	800a816 <__kernel_rem_pio2+0x2b6>
 800a9ee:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800a9f2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800a9f6:	f7f5 fe07 	bl	8000608 <__aeabi_dmul>
 800a9fa:	4602      	mov	r2, r0
 800a9fc:	460b      	mov	r3, r1
 800a9fe:	4620      	mov	r0, r4
 800aa00:	4629      	mov	r1, r5
 800aa02:	f7f5 fc4b 	bl	800029c <__adddf3>
 800aa06:	3601      	adds	r6, #1
 800aa08:	4604      	mov	r4, r0
 800aa0a:	460d      	mov	r5, r1
 800aa0c:	9b04      	ldr	r3, [sp, #16]
 800aa0e:	429e      	cmp	r6, r3
 800aa10:	dc01      	bgt.n	800aa16 <__kernel_rem_pio2+0x4b6>
 800aa12:	45b0      	cmp	r8, r6
 800aa14:	daeb      	bge.n	800a9ee <__kernel_rem_pio2+0x48e>
 800aa16:	ab48      	add	r3, sp, #288	; 0x120
 800aa18:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800aa1c:	e9c3 4500 	strd	r4, r5, [r3]
 800aa20:	3f01      	subs	r7, #1
 800aa22:	f108 0801 	add.w	r8, r8, #1
 800aa26:	e6ff      	b.n	800a828 <__kernel_rem_pio2+0x2c8>
 800aa28:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800aa2a:	2b02      	cmp	r3, #2
 800aa2c:	dc0b      	bgt.n	800aa46 <__kernel_rem_pio2+0x4e6>
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	dc6e      	bgt.n	800ab10 <__kernel_rem_pio2+0x5b0>
 800aa32:	d045      	beq.n	800aac0 <__kernel_rem_pio2+0x560>
 800aa34:	9b07      	ldr	r3, [sp, #28]
 800aa36:	f003 0007 	and.w	r0, r3, #7
 800aa3a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800aa3e:	ecbd 8b02 	vpop	{d8}
 800aa42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa46:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800aa48:	2b03      	cmp	r3, #3
 800aa4a:	d1f3      	bne.n	800aa34 <__kernel_rem_pio2+0x4d4>
 800aa4c:	ab48      	add	r3, sp, #288	; 0x120
 800aa4e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800aa52:	46d0      	mov	r8, sl
 800aa54:	46d9      	mov	r9, fp
 800aa56:	f1b9 0f00 	cmp.w	r9, #0
 800aa5a:	f1a8 0808 	sub.w	r8, r8, #8
 800aa5e:	dc64      	bgt.n	800ab2a <__kernel_rem_pio2+0x5ca>
 800aa60:	465c      	mov	r4, fp
 800aa62:	2c01      	cmp	r4, #1
 800aa64:	f1aa 0a08 	sub.w	sl, sl, #8
 800aa68:	dc7e      	bgt.n	800ab68 <__kernel_rem_pio2+0x608>
 800aa6a:	2000      	movs	r0, #0
 800aa6c:	2100      	movs	r1, #0
 800aa6e:	f1bb 0f01 	cmp.w	fp, #1
 800aa72:	f300 8097 	bgt.w	800aba4 <__kernel_rem_pio2+0x644>
 800aa76:	9b02      	ldr	r3, [sp, #8]
 800aa78:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800aa7c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	f040 8099 	bne.w	800abb8 <__kernel_rem_pio2+0x658>
 800aa86:	9b01      	ldr	r3, [sp, #4]
 800aa88:	e9c3 5600 	strd	r5, r6, [r3]
 800aa8c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800aa90:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800aa94:	e7ce      	b.n	800aa34 <__kernel_rem_pio2+0x4d4>
 800aa96:	ab48      	add	r3, sp, #288	; 0x120
 800aa98:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800aa9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa0:	f7f5 fbfc 	bl	800029c <__adddf3>
 800aaa4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aaa8:	f1bb 0f00 	cmp.w	fp, #0
 800aaac:	daf3      	bge.n	800aa96 <__kernel_rem_pio2+0x536>
 800aaae:	9b02      	ldr	r3, [sp, #8]
 800aab0:	b113      	cbz	r3, 800aab8 <__kernel_rem_pio2+0x558>
 800aab2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aab6:	4619      	mov	r1, r3
 800aab8:	9b01      	ldr	r3, [sp, #4]
 800aaba:	e9c3 0100 	strd	r0, r1, [r3]
 800aabe:	e7b9      	b.n	800aa34 <__kernel_rem_pio2+0x4d4>
 800aac0:	2000      	movs	r0, #0
 800aac2:	2100      	movs	r1, #0
 800aac4:	e7f0      	b.n	800aaa8 <__kernel_rem_pio2+0x548>
 800aac6:	ab48      	add	r3, sp, #288	; 0x120
 800aac8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad0:	f7f5 fbe4 	bl	800029c <__adddf3>
 800aad4:	3c01      	subs	r4, #1
 800aad6:	2c00      	cmp	r4, #0
 800aad8:	daf5      	bge.n	800aac6 <__kernel_rem_pio2+0x566>
 800aada:	9b02      	ldr	r3, [sp, #8]
 800aadc:	b1e3      	cbz	r3, 800ab18 <__kernel_rem_pio2+0x5b8>
 800aade:	4602      	mov	r2, r0
 800aae0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aae4:	9c01      	ldr	r4, [sp, #4]
 800aae6:	e9c4 2300 	strd	r2, r3, [r4]
 800aaea:	4602      	mov	r2, r0
 800aaec:	460b      	mov	r3, r1
 800aaee:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800aaf2:	f7f5 fbd1 	bl	8000298 <__aeabi_dsub>
 800aaf6:	ad4a      	add	r5, sp, #296	; 0x128
 800aaf8:	2401      	movs	r4, #1
 800aafa:	45a3      	cmp	fp, r4
 800aafc:	da0f      	bge.n	800ab1e <__kernel_rem_pio2+0x5be>
 800aafe:	9b02      	ldr	r3, [sp, #8]
 800ab00:	b113      	cbz	r3, 800ab08 <__kernel_rem_pio2+0x5a8>
 800ab02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab06:	4619      	mov	r1, r3
 800ab08:	9b01      	ldr	r3, [sp, #4]
 800ab0a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ab0e:	e791      	b.n	800aa34 <__kernel_rem_pio2+0x4d4>
 800ab10:	465c      	mov	r4, fp
 800ab12:	2000      	movs	r0, #0
 800ab14:	2100      	movs	r1, #0
 800ab16:	e7de      	b.n	800aad6 <__kernel_rem_pio2+0x576>
 800ab18:	4602      	mov	r2, r0
 800ab1a:	460b      	mov	r3, r1
 800ab1c:	e7e2      	b.n	800aae4 <__kernel_rem_pio2+0x584>
 800ab1e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800ab22:	f7f5 fbbb 	bl	800029c <__adddf3>
 800ab26:	3401      	adds	r4, #1
 800ab28:	e7e7      	b.n	800aafa <__kernel_rem_pio2+0x59a>
 800ab2a:	e9d8 4500 	ldrd	r4, r5, [r8]
 800ab2e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800ab32:	4620      	mov	r0, r4
 800ab34:	4632      	mov	r2, r6
 800ab36:	463b      	mov	r3, r7
 800ab38:	4629      	mov	r1, r5
 800ab3a:	f7f5 fbaf 	bl	800029c <__adddf3>
 800ab3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ab42:	4602      	mov	r2, r0
 800ab44:	460b      	mov	r3, r1
 800ab46:	4620      	mov	r0, r4
 800ab48:	4629      	mov	r1, r5
 800ab4a:	f7f5 fba5 	bl	8000298 <__aeabi_dsub>
 800ab4e:	4632      	mov	r2, r6
 800ab50:	463b      	mov	r3, r7
 800ab52:	f7f5 fba3 	bl	800029c <__adddf3>
 800ab56:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ab5a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800ab5e:	ed88 7b00 	vstr	d7, [r8]
 800ab62:	f109 39ff 	add.w	r9, r9, #4294967295
 800ab66:	e776      	b.n	800aa56 <__kernel_rem_pio2+0x4f6>
 800ab68:	e9da 8900 	ldrd	r8, r9, [sl]
 800ab6c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800ab70:	4640      	mov	r0, r8
 800ab72:	4632      	mov	r2, r6
 800ab74:	463b      	mov	r3, r7
 800ab76:	4649      	mov	r1, r9
 800ab78:	f7f5 fb90 	bl	800029c <__adddf3>
 800ab7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ab80:	4602      	mov	r2, r0
 800ab82:	460b      	mov	r3, r1
 800ab84:	4640      	mov	r0, r8
 800ab86:	4649      	mov	r1, r9
 800ab88:	f7f5 fb86 	bl	8000298 <__aeabi_dsub>
 800ab8c:	4632      	mov	r2, r6
 800ab8e:	463b      	mov	r3, r7
 800ab90:	f7f5 fb84 	bl	800029c <__adddf3>
 800ab94:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ab98:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ab9c:	ed8a 7b00 	vstr	d7, [sl]
 800aba0:	3c01      	subs	r4, #1
 800aba2:	e75e      	b.n	800aa62 <__kernel_rem_pio2+0x502>
 800aba4:	ab48      	add	r3, sp, #288	; 0x120
 800aba6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800abaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abae:	f7f5 fb75 	bl	800029c <__adddf3>
 800abb2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800abb6:	e75a      	b.n	800aa6e <__kernel_rem_pio2+0x50e>
 800abb8:	9b01      	ldr	r3, [sp, #4]
 800abba:	9a01      	ldr	r2, [sp, #4]
 800abbc:	601d      	str	r5, [r3, #0]
 800abbe:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800abc2:	605c      	str	r4, [r3, #4]
 800abc4:	609f      	str	r7, [r3, #8]
 800abc6:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800abca:	60d3      	str	r3, [r2, #12]
 800abcc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800abd0:	6110      	str	r0, [r2, #16]
 800abd2:	6153      	str	r3, [r2, #20]
 800abd4:	e72e      	b.n	800aa34 <__kernel_rem_pio2+0x4d4>
 800abd6:	bf00      	nop
 800abd8:	41700000 	.word	0x41700000
 800abdc:	3e700000 	.word	0x3e700000

0800abe0 <__kernel_sin>:
 800abe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abe4:	ed2d 8b04 	vpush	{d8-d9}
 800abe8:	eeb0 8a41 	vmov.f32	s16, s2
 800abec:	eef0 8a61 	vmov.f32	s17, s3
 800abf0:	ec55 4b10 	vmov	r4, r5, d0
 800abf4:	b083      	sub	sp, #12
 800abf6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800abfa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800abfe:	9001      	str	r0, [sp, #4]
 800ac00:	da06      	bge.n	800ac10 <__kernel_sin+0x30>
 800ac02:	ee10 0a10 	vmov	r0, s0
 800ac06:	4629      	mov	r1, r5
 800ac08:	f7f5 ffae 	bl	8000b68 <__aeabi_d2iz>
 800ac0c:	2800      	cmp	r0, #0
 800ac0e:	d051      	beq.n	800acb4 <__kernel_sin+0xd4>
 800ac10:	4622      	mov	r2, r4
 800ac12:	462b      	mov	r3, r5
 800ac14:	4620      	mov	r0, r4
 800ac16:	4629      	mov	r1, r5
 800ac18:	f7f5 fcf6 	bl	8000608 <__aeabi_dmul>
 800ac1c:	4682      	mov	sl, r0
 800ac1e:	468b      	mov	fp, r1
 800ac20:	4602      	mov	r2, r0
 800ac22:	460b      	mov	r3, r1
 800ac24:	4620      	mov	r0, r4
 800ac26:	4629      	mov	r1, r5
 800ac28:	f7f5 fcee 	bl	8000608 <__aeabi_dmul>
 800ac2c:	a341      	add	r3, pc, #260	; (adr r3, 800ad34 <__kernel_sin+0x154>)
 800ac2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac32:	4680      	mov	r8, r0
 800ac34:	4689      	mov	r9, r1
 800ac36:	4650      	mov	r0, sl
 800ac38:	4659      	mov	r1, fp
 800ac3a:	f7f5 fce5 	bl	8000608 <__aeabi_dmul>
 800ac3e:	a33f      	add	r3, pc, #252	; (adr r3, 800ad3c <__kernel_sin+0x15c>)
 800ac40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac44:	f7f5 fb28 	bl	8000298 <__aeabi_dsub>
 800ac48:	4652      	mov	r2, sl
 800ac4a:	465b      	mov	r3, fp
 800ac4c:	f7f5 fcdc 	bl	8000608 <__aeabi_dmul>
 800ac50:	a33c      	add	r3, pc, #240	; (adr r3, 800ad44 <__kernel_sin+0x164>)
 800ac52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac56:	f7f5 fb21 	bl	800029c <__adddf3>
 800ac5a:	4652      	mov	r2, sl
 800ac5c:	465b      	mov	r3, fp
 800ac5e:	f7f5 fcd3 	bl	8000608 <__aeabi_dmul>
 800ac62:	a33a      	add	r3, pc, #232	; (adr r3, 800ad4c <__kernel_sin+0x16c>)
 800ac64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac68:	f7f5 fb16 	bl	8000298 <__aeabi_dsub>
 800ac6c:	4652      	mov	r2, sl
 800ac6e:	465b      	mov	r3, fp
 800ac70:	f7f5 fcca 	bl	8000608 <__aeabi_dmul>
 800ac74:	a337      	add	r3, pc, #220	; (adr r3, 800ad54 <__kernel_sin+0x174>)
 800ac76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac7a:	f7f5 fb0f 	bl	800029c <__adddf3>
 800ac7e:	9b01      	ldr	r3, [sp, #4]
 800ac80:	4606      	mov	r6, r0
 800ac82:	460f      	mov	r7, r1
 800ac84:	b9eb      	cbnz	r3, 800acc2 <__kernel_sin+0xe2>
 800ac86:	4602      	mov	r2, r0
 800ac88:	460b      	mov	r3, r1
 800ac8a:	4650      	mov	r0, sl
 800ac8c:	4659      	mov	r1, fp
 800ac8e:	f7f5 fcbb 	bl	8000608 <__aeabi_dmul>
 800ac92:	a325      	add	r3, pc, #148	; (adr r3, 800ad28 <__kernel_sin+0x148>)
 800ac94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac98:	f7f5 fafe 	bl	8000298 <__aeabi_dsub>
 800ac9c:	4642      	mov	r2, r8
 800ac9e:	464b      	mov	r3, r9
 800aca0:	f7f5 fcb2 	bl	8000608 <__aeabi_dmul>
 800aca4:	4602      	mov	r2, r0
 800aca6:	460b      	mov	r3, r1
 800aca8:	4620      	mov	r0, r4
 800acaa:	4629      	mov	r1, r5
 800acac:	f7f5 faf6 	bl	800029c <__adddf3>
 800acb0:	4604      	mov	r4, r0
 800acb2:	460d      	mov	r5, r1
 800acb4:	ec45 4b10 	vmov	d0, r4, r5
 800acb8:	b003      	add	sp, #12
 800acba:	ecbd 8b04 	vpop	{d8-d9}
 800acbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acc2:	4b1b      	ldr	r3, [pc, #108]	; (800ad30 <__kernel_sin+0x150>)
 800acc4:	ec51 0b18 	vmov	r0, r1, d8
 800acc8:	2200      	movs	r2, #0
 800acca:	f7f5 fc9d 	bl	8000608 <__aeabi_dmul>
 800acce:	4632      	mov	r2, r6
 800acd0:	ec41 0b19 	vmov	d9, r0, r1
 800acd4:	463b      	mov	r3, r7
 800acd6:	4640      	mov	r0, r8
 800acd8:	4649      	mov	r1, r9
 800acda:	f7f5 fc95 	bl	8000608 <__aeabi_dmul>
 800acde:	4602      	mov	r2, r0
 800ace0:	460b      	mov	r3, r1
 800ace2:	ec51 0b19 	vmov	r0, r1, d9
 800ace6:	f7f5 fad7 	bl	8000298 <__aeabi_dsub>
 800acea:	4652      	mov	r2, sl
 800acec:	465b      	mov	r3, fp
 800acee:	f7f5 fc8b 	bl	8000608 <__aeabi_dmul>
 800acf2:	ec53 2b18 	vmov	r2, r3, d8
 800acf6:	f7f5 facf 	bl	8000298 <__aeabi_dsub>
 800acfa:	a30b      	add	r3, pc, #44	; (adr r3, 800ad28 <__kernel_sin+0x148>)
 800acfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad00:	4606      	mov	r6, r0
 800ad02:	460f      	mov	r7, r1
 800ad04:	4640      	mov	r0, r8
 800ad06:	4649      	mov	r1, r9
 800ad08:	f7f5 fc7e 	bl	8000608 <__aeabi_dmul>
 800ad0c:	4602      	mov	r2, r0
 800ad0e:	460b      	mov	r3, r1
 800ad10:	4630      	mov	r0, r6
 800ad12:	4639      	mov	r1, r7
 800ad14:	f7f5 fac2 	bl	800029c <__adddf3>
 800ad18:	4602      	mov	r2, r0
 800ad1a:	460b      	mov	r3, r1
 800ad1c:	4620      	mov	r0, r4
 800ad1e:	4629      	mov	r1, r5
 800ad20:	f7f5 faba 	bl	8000298 <__aeabi_dsub>
 800ad24:	e7c4      	b.n	800acb0 <__kernel_sin+0xd0>
 800ad26:	bf00      	nop
 800ad28:	55555549 	.word	0x55555549
 800ad2c:	3fc55555 	.word	0x3fc55555
 800ad30:	3fe00000 	.word	0x3fe00000
 800ad34:	5acfd57c 	.word	0x5acfd57c
 800ad38:	3de5d93a 	.word	0x3de5d93a
 800ad3c:	8a2b9ceb 	.word	0x8a2b9ceb
 800ad40:	3e5ae5e6 	.word	0x3e5ae5e6
 800ad44:	57b1fe7d 	.word	0x57b1fe7d
 800ad48:	3ec71de3 	.word	0x3ec71de3
 800ad4c:	19c161d5 	.word	0x19c161d5
 800ad50:	3f2a01a0 	.word	0x3f2a01a0
 800ad54:	1110f8a6 	.word	0x1110f8a6
 800ad58:	3f811111 	.word	0x3f811111
 800ad5c:	00000000 	.word	0x00000000

0800ad60 <__kernel_tan>:
 800ad60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad64:	ed2d 8b04 	vpush	{d8-d9}
 800ad68:	ec5b ab10 	vmov	sl, fp, d0
 800ad6c:	4be2      	ldr	r3, [pc, #904]	; (800b0f8 <__kernel_tan+0x398>)
 800ad6e:	b085      	sub	sp, #20
 800ad70:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800ad74:	429f      	cmp	r7, r3
 800ad76:	ed8d 1b00 	vstr	d1, [sp]
 800ad7a:	4606      	mov	r6, r0
 800ad7c:	f8cd b00c 	str.w	fp, [sp, #12]
 800ad80:	dc24      	bgt.n	800adcc <__kernel_tan+0x6c>
 800ad82:	ee10 0a10 	vmov	r0, s0
 800ad86:	4659      	mov	r1, fp
 800ad88:	f7f5 feee 	bl	8000b68 <__aeabi_d2iz>
 800ad8c:	2800      	cmp	r0, #0
 800ad8e:	d148      	bne.n	800ae22 <__kernel_tan+0xc2>
 800ad90:	1c73      	adds	r3, r6, #1
 800ad92:	4652      	mov	r2, sl
 800ad94:	4313      	orrs	r3, r2
 800ad96:	433b      	orrs	r3, r7
 800ad98:	d112      	bne.n	800adc0 <__kernel_tan+0x60>
 800ad9a:	ec4b ab10 	vmov	d0, sl, fp
 800ad9e:	f7fe fd77 	bl	8009890 <fabs>
 800ada2:	49d6      	ldr	r1, [pc, #856]	; (800b0fc <__kernel_tan+0x39c>)
 800ada4:	ec53 2b10 	vmov	r2, r3, d0
 800ada8:	2000      	movs	r0, #0
 800adaa:	f7f5 fd57 	bl	800085c <__aeabi_ddiv>
 800adae:	4682      	mov	sl, r0
 800adb0:	468b      	mov	fp, r1
 800adb2:	ec4b ab10 	vmov	d0, sl, fp
 800adb6:	b005      	add	sp, #20
 800adb8:	ecbd 8b04 	vpop	{d8-d9}
 800adbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adc0:	2e01      	cmp	r6, #1
 800adc2:	d0f6      	beq.n	800adb2 <__kernel_tan+0x52>
 800adc4:	49ce      	ldr	r1, [pc, #824]	; (800b100 <__kernel_tan+0x3a0>)
 800adc6:	465b      	mov	r3, fp
 800adc8:	2000      	movs	r0, #0
 800adca:	e7ee      	b.n	800adaa <__kernel_tan+0x4a>
 800adcc:	4bcd      	ldr	r3, [pc, #820]	; (800b104 <__kernel_tan+0x3a4>)
 800adce:	429f      	cmp	r7, r3
 800add0:	dd27      	ble.n	800ae22 <__kernel_tan+0xc2>
 800add2:	9b03      	ldr	r3, [sp, #12]
 800add4:	2b00      	cmp	r3, #0
 800add6:	da0a      	bge.n	800adee <__kernel_tan+0x8e>
 800add8:	e9dd 2100 	ldrd	r2, r1, [sp]
 800addc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ade0:	469b      	mov	fp, r3
 800ade2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ade6:	e9cd 2300 	strd	r2, r3, [sp]
 800adea:	ee10 aa10 	vmov	sl, s0
 800adee:	4652      	mov	r2, sl
 800adf0:	465b      	mov	r3, fp
 800adf2:	a1a1      	add	r1, pc, #644	; (adr r1, 800b078 <__kernel_tan+0x318>)
 800adf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adf8:	f7f5 fa4e 	bl	8000298 <__aeabi_dsub>
 800adfc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae00:	4604      	mov	r4, r0
 800ae02:	460d      	mov	r5, r1
 800ae04:	a19e      	add	r1, pc, #632	; (adr r1, 800b080 <__kernel_tan+0x320>)
 800ae06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae0a:	f7f5 fa45 	bl	8000298 <__aeabi_dsub>
 800ae0e:	4622      	mov	r2, r4
 800ae10:	462b      	mov	r3, r5
 800ae12:	f7f5 fa43 	bl	800029c <__adddf3>
 800ae16:	ed9f 7b9c 	vldr	d7, [pc, #624]	; 800b088 <__kernel_tan+0x328>
 800ae1a:	ed8d 7b00 	vstr	d7, [sp]
 800ae1e:	4682      	mov	sl, r0
 800ae20:	468b      	mov	fp, r1
 800ae22:	4652      	mov	r2, sl
 800ae24:	465b      	mov	r3, fp
 800ae26:	4650      	mov	r0, sl
 800ae28:	4659      	mov	r1, fp
 800ae2a:	f7f5 fbed 	bl	8000608 <__aeabi_dmul>
 800ae2e:	4602      	mov	r2, r0
 800ae30:	460b      	mov	r3, r1
 800ae32:	4680      	mov	r8, r0
 800ae34:	4689      	mov	r9, r1
 800ae36:	f7f5 fbe7 	bl	8000608 <__aeabi_dmul>
 800ae3a:	4642      	mov	r2, r8
 800ae3c:	4604      	mov	r4, r0
 800ae3e:	460d      	mov	r5, r1
 800ae40:	464b      	mov	r3, r9
 800ae42:	4650      	mov	r0, sl
 800ae44:	4659      	mov	r1, fp
 800ae46:	f7f5 fbdf 	bl	8000608 <__aeabi_dmul>
 800ae4a:	a391      	add	r3, pc, #580	; (adr r3, 800b090 <__kernel_tan+0x330>)
 800ae4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae50:	ec41 0b18 	vmov	d8, r0, r1
 800ae54:	4620      	mov	r0, r4
 800ae56:	4629      	mov	r1, r5
 800ae58:	f7f5 fbd6 	bl	8000608 <__aeabi_dmul>
 800ae5c:	a38e      	add	r3, pc, #568	; (adr r3, 800b098 <__kernel_tan+0x338>)
 800ae5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae62:	f7f5 fa1b 	bl	800029c <__adddf3>
 800ae66:	4622      	mov	r2, r4
 800ae68:	462b      	mov	r3, r5
 800ae6a:	f7f5 fbcd 	bl	8000608 <__aeabi_dmul>
 800ae6e:	a38c      	add	r3, pc, #560	; (adr r3, 800b0a0 <__kernel_tan+0x340>)
 800ae70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae74:	f7f5 fa12 	bl	800029c <__adddf3>
 800ae78:	4622      	mov	r2, r4
 800ae7a:	462b      	mov	r3, r5
 800ae7c:	f7f5 fbc4 	bl	8000608 <__aeabi_dmul>
 800ae80:	a389      	add	r3, pc, #548	; (adr r3, 800b0a8 <__kernel_tan+0x348>)
 800ae82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae86:	f7f5 fa09 	bl	800029c <__adddf3>
 800ae8a:	4622      	mov	r2, r4
 800ae8c:	462b      	mov	r3, r5
 800ae8e:	f7f5 fbbb 	bl	8000608 <__aeabi_dmul>
 800ae92:	a387      	add	r3, pc, #540	; (adr r3, 800b0b0 <__kernel_tan+0x350>)
 800ae94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae98:	f7f5 fa00 	bl	800029c <__adddf3>
 800ae9c:	4622      	mov	r2, r4
 800ae9e:	462b      	mov	r3, r5
 800aea0:	f7f5 fbb2 	bl	8000608 <__aeabi_dmul>
 800aea4:	a384      	add	r3, pc, #528	; (adr r3, 800b0b8 <__kernel_tan+0x358>)
 800aea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeaa:	f7f5 f9f7 	bl	800029c <__adddf3>
 800aeae:	4642      	mov	r2, r8
 800aeb0:	464b      	mov	r3, r9
 800aeb2:	f7f5 fba9 	bl	8000608 <__aeabi_dmul>
 800aeb6:	a382      	add	r3, pc, #520	; (adr r3, 800b0c0 <__kernel_tan+0x360>)
 800aeb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aebc:	ec41 0b19 	vmov	d9, r0, r1
 800aec0:	4620      	mov	r0, r4
 800aec2:	4629      	mov	r1, r5
 800aec4:	f7f5 fba0 	bl	8000608 <__aeabi_dmul>
 800aec8:	a37f      	add	r3, pc, #508	; (adr r3, 800b0c8 <__kernel_tan+0x368>)
 800aeca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aece:	f7f5 f9e5 	bl	800029c <__adddf3>
 800aed2:	4622      	mov	r2, r4
 800aed4:	462b      	mov	r3, r5
 800aed6:	f7f5 fb97 	bl	8000608 <__aeabi_dmul>
 800aeda:	a37d      	add	r3, pc, #500	; (adr r3, 800b0d0 <__kernel_tan+0x370>)
 800aedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee0:	f7f5 f9dc 	bl	800029c <__adddf3>
 800aee4:	4622      	mov	r2, r4
 800aee6:	462b      	mov	r3, r5
 800aee8:	f7f5 fb8e 	bl	8000608 <__aeabi_dmul>
 800aeec:	a37a      	add	r3, pc, #488	; (adr r3, 800b0d8 <__kernel_tan+0x378>)
 800aeee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef2:	f7f5 f9d3 	bl	800029c <__adddf3>
 800aef6:	4622      	mov	r2, r4
 800aef8:	462b      	mov	r3, r5
 800aefa:	f7f5 fb85 	bl	8000608 <__aeabi_dmul>
 800aefe:	a378      	add	r3, pc, #480	; (adr r3, 800b0e0 <__kernel_tan+0x380>)
 800af00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af04:	f7f5 f9ca 	bl	800029c <__adddf3>
 800af08:	4622      	mov	r2, r4
 800af0a:	462b      	mov	r3, r5
 800af0c:	f7f5 fb7c 	bl	8000608 <__aeabi_dmul>
 800af10:	a375      	add	r3, pc, #468	; (adr r3, 800b0e8 <__kernel_tan+0x388>)
 800af12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af16:	f7f5 f9c1 	bl	800029c <__adddf3>
 800af1a:	4602      	mov	r2, r0
 800af1c:	460b      	mov	r3, r1
 800af1e:	ec51 0b19 	vmov	r0, r1, d9
 800af22:	f7f5 f9bb 	bl	800029c <__adddf3>
 800af26:	ec53 2b18 	vmov	r2, r3, d8
 800af2a:	f7f5 fb6d 	bl	8000608 <__aeabi_dmul>
 800af2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af32:	f7f5 f9b3 	bl	800029c <__adddf3>
 800af36:	4642      	mov	r2, r8
 800af38:	464b      	mov	r3, r9
 800af3a:	f7f5 fb65 	bl	8000608 <__aeabi_dmul>
 800af3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af42:	f7f5 f9ab 	bl	800029c <__adddf3>
 800af46:	a36a      	add	r3, pc, #424	; (adr r3, 800b0f0 <__kernel_tan+0x390>)
 800af48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af4c:	4604      	mov	r4, r0
 800af4e:	460d      	mov	r5, r1
 800af50:	ec51 0b18 	vmov	r0, r1, d8
 800af54:	f7f5 fb58 	bl	8000608 <__aeabi_dmul>
 800af58:	4622      	mov	r2, r4
 800af5a:	462b      	mov	r3, r5
 800af5c:	f7f5 f99e 	bl	800029c <__adddf3>
 800af60:	460b      	mov	r3, r1
 800af62:	ec41 0b18 	vmov	d8, r0, r1
 800af66:	4602      	mov	r2, r0
 800af68:	4659      	mov	r1, fp
 800af6a:	4650      	mov	r0, sl
 800af6c:	f7f5 f996 	bl	800029c <__adddf3>
 800af70:	4b64      	ldr	r3, [pc, #400]	; (800b104 <__kernel_tan+0x3a4>)
 800af72:	429f      	cmp	r7, r3
 800af74:	4604      	mov	r4, r0
 800af76:	460d      	mov	r5, r1
 800af78:	dd3e      	ble.n	800aff8 <__kernel_tan+0x298>
 800af7a:	4630      	mov	r0, r6
 800af7c:	f7f5 fada 	bl	8000534 <__aeabi_i2d>
 800af80:	4622      	mov	r2, r4
 800af82:	4680      	mov	r8, r0
 800af84:	4689      	mov	r9, r1
 800af86:	462b      	mov	r3, r5
 800af88:	4620      	mov	r0, r4
 800af8a:	4629      	mov	r1, r5
 800af8c:	f7f5 fb3c 	bl	8000608 <__aeabi_dmul>
 800af90:	4642      	mov	r2, r8
 800af92:	4606      	mov	r6, r0
 800af94:	460f      	mov	r7, r1
 800af96:	464b      	mov	r3, r9
 800af98:	4620      	mov	r0, r4
 800af9a:	4629      	mov	r1, r5
 800af9c:	f7f5 f97e 	bl	800029c <__adddf3>
 800afa0:	4602      	mov	r2, r0
 800afa2:	460b      	mov	r3, r1
 800afa4:	4630      	mov	r0, r6
 800afa6:	4639      	mov	r1, r7
 800afa8:	f7f5 fc58 	bl	800085c <__aeabi_ddiv>
 800afac:	ec53 2b18 	vmov	r2, r3, d8
 800afb0:	f7f5 f972 	bl	8000298 <__aeabi_dsub>
 800afb4:	4602      	mov	r2, r0
 800afb6:	460b      	mov	r3, r1
 800afb8:	4650      	mov	r0, sl
 800afba:	4659      	mov	r1, fp
 800afbc:	f7f5 f96c 	bl	8000298 <__aeabi_dsub>
 800afc0:	4602      	mov	r2, r0
 800afc2:	460b      	mov	r3, r1
 800afc4:	f7f5 f96a 	bl	800029c <__adddf3>
 800afc8:	4602      	mov	r2, r0
 800afca:	460b      	mov	r3, r1
 800afcc:	4640      	mov	r0, r8
 800afce:	4649      	mov	r1, r9
 800afd0:	f7f5 f962 	bl	8000298 <__aeabi_dsub>
 800afd4:	9b03      	ldr	r3, [sp, #12]
 800afd6:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800afda:	f00a 0a02 	and.w	sl, sl, #2
 800afde:	4604      	mov	r4, r0
 800afe0:	f1ca 0001 	rsb	r0, sl, #1
 800afe4:	460d      	mov	r5, r1
 800afe6:	f7f5 faa5 	bl	8000534 <__aeabi_i2d>
 800afea:	4602      	mov	r2, r0
 800afec:	460b      	mov	r3, r1
 800afee:	4620      	mov	r0, r4
 800aff0:	4629      	mov	r1, r5
 800aff2:	f7f5 fb09 	bl	8000608 <__aeabi_dmul>
 800aff6:	e6da      	b.n	800adae <__kernel_tan+0x4e>
 800aff8:	2e01      	cmp	r6, #1
 800affa:	d038      	beq.n	800b06e <__kernel_tan+0x30e>
 800affc:	460f      	mov	r7, r1
 800affe:	4689      	mov	r9, r1
 800b000:	4602      	mov	r2, r0
 800b002:	460b      	mov	r3, r1
 800b004:	2000      	movs	r0, #0
 800b006:	493e      	ldr	r1, [pc, #248]	; (800b100 <__kernel_tan+0x3a0>)
 800b008:	f7f5 fc28 	bl	800085c <__aeabi_ddiv>
 800b00c:	2600      	movs	r6, #0
 800b00e:	e9cd 0100 	strd	r0, r1, [sp]
 800b012:	4652      	mov	r2, sl
 800b014:	465b      	mov	r3, fp
 800b016:	4630      	mov	r0, r6
 800b018:	4639      	mov	r1, r7
 800b01a:	f7f5 f93d 	bl	8000298 <__aeabi_dsub>
 800b01e:	e9dd 4500 	ldrd	r4, r5, [sp]
 800b022:	4602      	mov	r2, r0
 800b024:	460b      	mov	r3, r1
 800b026:	ec51 0b18 	vmov	r0, r1, d8
 800b02a:	f7f5 f935 	bl	8000298 <__aeabi_dsub>
 800b02e:	4632      	mov	r2, r6
 800b030:	462b      	mov	r3, r5
 800b032:	f7f5 fae9 	bl	8000608 <__aeabi_dmul>
 800b036:	46b0      	mov	r8, r6
 800b038:	460f      	mov	r7, r1
 800b03a:	4606      	mov	r6, r0
 800b03c:	4642      	mov	r2, r8
 800b03e:	462b      	mov	r3, r5
 800b040:	4640      	mov	r0, r8
 800b042:	4649      	mov	r1, r9
 800b044:	f7f5 fae0 	bl	8000608 <__aeabi_dmul>
 800b048:	4b2c      	ldr	r3, [pc, #176]	; (800b0fc <__kernel_tan+0x39c>)
 800b04a:	2200      	movs	r2, #0
 800b04c:	f7f5 f926 	bl	800029c <__adddf3>
 800b050:	4602      	mov	r2, r0
 800b052:	460b      	mov	r3, r1
 800b054:	4630      	mov	r0, r6
 800b056:	4639      	mov	r1, r7
 800b058:	f7f5 f920 	bl	800029c <__adddf3>
 800b05c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b060:	f7f5 fad2 	bl	8000608 <__aeabi_dmul>
 800b064:	4642      	mov	r2, r8
 800b066:	462b      	mov	r3, r5
 800b068:	f7f5 f918 	bl	800029c <__adddf3>
 800b06c:	e69f      	b.n	800adae <__kernel_tan+0x4e>
 800b06e:	4682      	mov	sl, r0
 800b070:	468b      	mov	fp, r1
 800b072:	e69e      	b.n	800adb2 <__kernel_tan+0x52>
 800b074:	f3af 8000 	nop.w
 800b078:	54442d18 	.word	0x54442d18
 800b07c:	3fe921fb 	.word	0x3fe921fb
 800b080:	33145c07 	.word	0x33145c07
 800b084:	3c81a626 	.word	0x3c81a626
	...
 800b090:	74bf7ad4 	.word	0x74bf7ad4
 800b094:	3efb2a70 	.word	0x3efb2a70
 800b098:	32f0a7e9 	.word	0x32f0a7e9
 800b09c:	3f12b80f 	.word	0x3f12b80f
 800b0a0:	1a8d1068 	.word	0x1a8d1068
 800b0a4:	3f3026f7 	.word	0x3f3026f7
 800b0a8:	fee08315 	.word	0xfee08315
 800b0ac:	3f57dbc8 	.word	0x3f57dbc8
 800b0b0:	e96e8493 	.word	0xe96e8493
 800b0b4:	3f8226e3 	.word	0x3f8226e3
 800b0b8:	1bb341fe 	.word	0x1bb341fe
 800b0bc:	3faba1ba 	.word	0x3faba1ba
 800b0c0:	db605373 	.word	0xdb605373
 800b0c4:	bef375cb 	.word	0xbef375cb
 800b0c8:	a03792a6 	.word	0xa03792a6
 800b0cc:	3f147e88 	.word	0x3f147e88
 800b0d0:	f2f26501 	.word	0xf2f26501
 800b0d4:	3f4344d8 	.word	0x3f4344d8
 800b0d8:	c9560328 	.word	0xc9560328
 800b0dc:	3f6d6d22 	.word	0x3f6d6d22
 800b0e0:	8406d637 	.word	0x8406d637
 800b0e4:	3f9664f4 	.word	0x3f9664f4
 800b0e8:	1110fe7a 	.word	0x1110fe7a
 800b0ec:	3fc11111 	.word	0x3fc11111
 800b0f0:	55555563 	.word	0x55555563
 800b0f4:	3fd55555 	.word	0x3fd55555
 800b0f8:	3e2fffff 	.word	0x3e2fffff
 800b0fc:	3ff00000 	.word	0x3ff00000
 800b100:	bff00000 	.word	0xbff00000
 800b104:	3fe59427 	.word	0x3fe59427

0800b108 <floor>:
 800b108:	ec51 0b10 	vmov	r0, r1, d0
 800b10c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b110:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b114:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b118:	2e13      	cmp	r6, #19
 800b11a:	ee10 5a10 	vmov	r5, s0
 800b11e:	ee10 8a10 	vmov	r8, s0
 800b122:	460c      	mov	r4, r1
 800b124:	dc32      	bgt.n	800b18c <floor+0x84>
 800b126:	2e00      	cmp	r6, #0
 800b128:	da14      	bge.n	800b154 <floor+0x4c>
 800b12a:	a333      	add	r3, pc, #204	; (adr r3, 800b1f8 <floor+0xf0>)
 800b12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b130:	f7f5 f8b4 	bl	800029c <__adddf3>
 800b134:	2200      	movs	r2, #0
 800b136:	2300      	movs	r3, #0
 800b138:	f7f5 fcf6 	bl	8000b28 <__aeabi_dcmpgt>
 800b13c:	b138      	cbz	r0, 800b14e <floor+0x46>
 800b13e:	2c00      	cmp	r4, #0
 800b140:	da57      	bge.n	800b1f2 <floor+0xea>
 800b142:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b146:	431d      	orrs	r5, r3
 800b148:	d001      	beq.n	800b14e <floor+0x46>
 800b14a:	4c2d      	ldr	r4, [pc, #180]	; (800b200 <floor+0xf8>)
 800b14c:	2500      	movs	r5, #0
 800b14e:	4621      	mov	r1, r4
 800b150:	4628      	mov	r0, r5
 800b152:	e025      	b.n	800b1a0 <floor+0x98>
 800b154:	4f2b      	ldr	r7, [pc, #172]	; (800b204 <floor+0xfc>)
 800b156:	4137      	asrs	r7, r6
 800b158:	ea01 0307 	and.w	r3, r1, r7
 800b15c:	4303      	orrs	r3, r0
 800b15e:	d01f      	beq.n	800b1a0 <floor+0x98>
 800b160:	a325      	add	r3, pc, #148	; (adr r3, 800b1f8 <floor+0xf0>)
 800b162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b166:	f7f5 f899 	bl	800029c <__adddf3>
 800b16a:	2200      	movs	r2, #0
 800b16c:	2300      	movs	r3, #0
 800b16e:	f7f5 fcdb 	bl	8000b28 <__aeabi_dcmpgt>
 800b172:	2800      	cmp	r0, #0
 800b174:	d0eb      	beq.n	800b14e <floor+0x46>
 800b176:	2c00      	cmp	r4, #0
 800b178:	bfbe      	ittt	lt
 800b17a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b17e:	fa43 f606 	asrlt.w	r6, r3, r6
 800b182:	19a4      	addlt	r4, r4, r6
 800b184:	ea24 0407 	bic.w	r4, r4, r7
 800b188:	2500      	movs	r5, #0
 800b18a:	e7e0      	b.n	800b14e <floor+0x46>
 800b18c:	2e33      	cmp	r6, #51	; 0x33
 800b18e:	dd0b      	ble.n	800b1a8 <floor+0xa0>
 800b190:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b194:	d104      	bne.n	800b1a0 <floor+0x98>
 800b196:	ee10 2a10 	vmov	r2, s0
 800b19a:	460b      	mov	r3, r1
 800b19c:	f7f5 f87e 	bl	800029c <__adddf3>
 800b1a0:	ec41 0b10 	vmov	d0, r0, r1
 800b1a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1a8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b1ac:	f04f 33ff 	mov.w	r3, #4294967295
 800b1b0:	fa23 f707 	lsr.w	r7, r3, r7
 800b1b4:	4207      	tst	r7, r0
 800b1b6:	d0f3      	beq.n	800b1a0 <floor+0x98>
 800b1b8:	a30f      	add	r3, pc, #60	; (adr r3, 800b1f8 <floor+0xf0>)
 800b1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1be:	f7f5 f86d 	bl	800029c <__adddf3>
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	f7f5 fcaf 	bl	8000b28 <__aeabi_dcmpgt>
 800b1ca:	2800      	cmp	r0, #0
 800b1cc:	d0bf      	beq.n	800b14e <floor+0x46>
 800b1ce:	2c00      	cmp	r4, #0
 800b1d0:	da02      	bge.n	800b1d8 <floor+0xd0>
 800b1d2:	2e14      	cmp	r6, #20
 800b1d4:	d103      	bne.n	800b1de <floor+0xd6>
 800b1d6:	3401      	adds	r4, #1
 800b1d8:	ea25 0507 	bic.w	r5, r5, r7
 800b1dc:	e7b7      	b.n	800b14e <floor+0x46>
 800b1de:	2301      	movs	r3, #1
 800b1e0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b1e4:	fa03 f606 	lsl.w	r6, r3, r6
 800b1e8:	4435      	add	r5, r6
 800b1ea:	4545      	cmp	r5, r8
 800b1ec:	bf38      	it	cc
 800b1ee:	18e4      	addcc	r4, r4, r3
 800b1f0:	e7f2      	b.n	800b1d8 <floor+0xd0>
 800b1f2:	2500      	movs	r5, #0
 800b1f4:	462c      	mov	r4, r5
 800b1f6:	e7aa      	b.n	800b14e <floor+0x46>
 800b1f8:	8800759c 	.word	0x8800759c
 800b1fc:	7e37e43c 	.word	0x7e37e43c
 800b200:	bff00000 	.word	0xbff00000
 800b204:	000fffff 	.word	0x000fffff

0800b208 <nan>:
 800b208:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b210 <nan+0x8>
 800b20c:	4770      	bx	lr
 800b20e:	bf00      	nop
 800b210:	00000000 	.word	0x00000000
 800b214:	7ff80000 	.word	0x7ff80000

0800b218 <scalbn>:
 800b218:	b570      	push	{r4, r5, r6, lr}
 800b21a:	ec55 4b10 	vmov	r4, r5, d0
 800b21e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b222:	4606      	mov	r6, r0
 800b224:	462b      	mov	r3, r5
 800b226:	b99a      	cbnz	r2, 800b250 <scalbn+0x38>
 800b228:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b22c:	4323      	orrs	r3, r4
 800b22e:	d036      	beq.n	800b29e <scalbn+0x86>
 800b230:	4b39      	ldr	r3, [pc, #228]	; (800b318 <scalbn+0x100>)
 800b232:	4629      	mov	r1, r5
 800b234:	ee10 0a10 	vmov	r0, s0
 800b238:	2200      	movs	r2, #0
 800b23a:	f7f5 f9e5 	bl	8000608 <__aeabi_dmul>
 800b23e:	4b37      	ldr	r3, [pc, #220]	; (800b31c <scalbn+0x104>)
 800b240:	429e      	cmp	r6, r3
 800b242:	4604      	mov	r4, r0
 800b244:	460d      	mov	r5, r1
 800b246:	da10      	bge.n	800b26a <scalbn+0x52>
 800b248:	a32b      	add	r3, pc, #172	; (adr r3, 800b2f8 <scalbn+0xe0>)
 800b24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b24e:	e03a      	b.n	800b2c6 <scalbn+0xae>
 800b250:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b254:	428a      	cmp	r2, r1
 800b256:	d10c      	bne.n	800b272 <scalbn+0x5a>
 800b258:	ee10 2a10 	vmov	r2, s0
 800b25c:	4620      	mov	r0, r4
 800b25e:	4629      	mov	r1, r5
 800b260:	f7f5 f81c 	bl	800029c <__adddf3>
 800b264:	4604      	mov	r4, r0
 800b266:	460d      	mov	r5, r1
 800b268:	e019      	b.n	800b29e <scalbn+0x86>
 800b26a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b26e:	460b      	mov	r3, r1
 800b270:	3a36      	subs	r2, #54	; 0x36
 800b272:	4432      	add	r2, r6
 800b274:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b278:	428a      	cmp	r2, r1
 800b27a:	dd08      	ble.n	800b28e <scalbn+0x76>
 800b27c:	2d00      	cmp	r5, #0
 800b27e:	a120      	add	r1, pc, #128	; (adr r1, 800b300 <scalbn+0xe8>)
 800b280:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b284:	da1c      	bge.n	800b2c0 <scalbn+0xa8>
 800b286:	a120      	add	r1, pc, #128	; (adr r1, 800b308 <scalbn+0xf0>)
 800b288:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b28c:	e018      	b.n	800b2c0 <scalbn+0xa8>
 800b28e:	2a00      	cmp	r2, #0
 800b290:	dd08      	ble.n	800b2a4 <scalbn+0x8c>
 800b292:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b296:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b29a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b29e:	ec45 4b10 	vmov	d0, r4, r5
 800b2a2:	bd70      	pop	{r4, r5, r6, pc}
 800b2a4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b2a8:	da19      	bge.n	800b2de <scalbn+0xc6>
 800b2aa:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b2ae:	429e      	cmp	r6, r3
 800b2b0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b2b4:	dd0a      	ble.n	800b2cc <scalbn+0xb4>
 800b2b6:	a112      	add	r1, pc, #72	; (adr r1, 800b300 <scalbn+0xe8>)
 800b2b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d1e2      	bne.n	800b286 <scalbn+0x6e>
 800b2c0:	a30f      	add	r3, pc, #60	; (adr r3, 800b300 <scalbn+0xe8>)
 800b2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c6:	f7f5 f99f 	bl	8000608 <__aeabi_dmul>
 800b2ca:	e7cb      	b.n	800b264 <scalbn+0x4c>
 800b2cc:	a10a      	add	r1, pc, #40	; (adr r1, 800b2f8 <scalbn+0xe0>)
 800b2ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d0b8      	beq.n	800b248 <scalbn+0x30>
 800b2d6:	a10e      	add	r1, pc, #56	; (adr r1, 800b310 <scalbn+0xf8>)
 800b2d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2dc:	e7b4      	b.n	800b248 <scalbn+0x30>
 800b2de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b2e2:	3236      	adds	r2, #54	; 0x36
 800b2e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b2e8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b2ec:	4620      	mov	r0, r4
 800b2ee:	4b0c      	ldr	r3, [pc, #48]	; (800b320 <scalbn+0x108>)
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	e7e8      	b.n	800b2c6 <scalbn+0xae>
 800b2f4:	f3af 8000 	nop.w
 800b2f8:	c2f8f359 	.word	0xc2f8f359
 800b2fc:	01a56e1f 	.word	0x01a56e1f
 800b300:	8800759c 	.word	0x8800759c
 800b304:	7e37e43c 	.word	0x7e37e43c
 800b308:	8800759c 	.word	0x8800759c
 800b30c:	fe37e43c 	.word	0xfe37e43c
 800b310:	c2f8f359 	.word	0xc2f8f359
 800b314:	81a56e1f 	.word	0x81a56e1f
 800b318:	43500000 	.word	0x43500000
 800b31c:	ffff3cb0 	.word	0xffff3cb0
 800b320:	3c900000 	.word	0x3c900000

0800b324 <_init>:
 800b324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b326:	bf00      	nop
 800b328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b32a:	bc08      	pop	{r3}
 800b32c:	469e      	mov	lr, r3
 800b32e:	4770      	bx	lr

0800b330 <_fini>:
 800b330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b332:	bf00      	nop
 800b334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b336:	bc08      	pop	{r3}
 800b338:	469e      	mov	lr, r3
 800b33a:	4770      	bx	lr
