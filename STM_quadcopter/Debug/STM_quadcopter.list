
STM_quadcopter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e94  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08004034  08004034  00014034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004118  08004118  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004118  08004118  00014118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004120  08004120  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004120  08004120  00014120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004124  08004124  00014124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004128  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000070  08004198  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08004198  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dfac  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023af  00000000  00000000  0002e04c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd8  00000000  00000000  00030400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb0  00000000  00000000  000310d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e92  00000000  00000000  00031c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ed1b  00000000  00000000  00048b1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c91b  00000000  00000000  00057835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e4150  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037ec  00000000  00000000  000e41a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800401c 	.word	0x0800401c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	0800401c 	.word	0x0800401c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <ESC_setPWM>:





void ESC_setPWM(int dutyCycle){
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]

	TIM2->CCR1 = dutyCycle+100;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8000586:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800058a:	635a      	str	r2, [r3, #52]	; 0x34

}
 800058c:	bf00      	nop
 800058e:	370c      	adds	r7, #12
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr

08000598 <ESC_initialSetUp>:




void ESC_initialSetUp(){
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0

	ESC_setPWM(100);
 800059c:	2064      	movs	r0, #100	; 0x64
 800059e:	f7ff ffeb 	bl	8000578 <ESC_setPWM>

	HAL_Delay(4000);
 80005a2:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80005a6:	f000 fc3d 	bl	8000e24 <HAL_Delay>

	ESC_setPWM(0);
 80005aa:	2000      	movs	r0, #0
 80005ac:	f7ff ffe4 	bl	8000578 <ESC_setPWM>


}
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08a      	sub	sp, #40	; 0x28
 80005b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	613b      	str	r3, [r7, #16]
 80005ce:	4b31      	ldr	r3, [pc, #196]	; (8000694 <MX_GPIO_Init+0xe0>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a30      	ldr	r2, [pc, #192]	; (8000694 <MX_GPIO_Init+0xe0>)
 80005d4:	f043 0304 	orr.w	r3, r3, #4
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b2e      	ldr	r3, [pc, #184]	; (8000694 <MX_GPIO_Init+0xe0>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f003 0304 	and.w	r3, r3, #4
 80005e2:	613b      	str	r3, [r7, #16]
 80005e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	4b2a      	ldr	r3, [pc, #168]	; (8000694 <MX_GPIO_Init+0xe0>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a29      	ldr	r2, [pc, #164]	; (8000694 <MX_GPIO_Init+0xe0>)
 80005f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b27      	ldr	r3, [pc, #156]	; (8000694 <MX_GPIO_Init+0xe0>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	4b23      	ldr	r3, [pc, #140]	; (8000694 <MX_GPIO_Init+0xe0>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a22      	ldr	r2, [pc, #136]	; (8000694 <MX_GPIO_Init+0xe0>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b20      	ldr	r3, [pc, #128]	; (8000694 <MX_GPIO_Init+0xe0>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	4b1c      	ldr	r3, [pc, #112]	; (8000694 <MX_GPIO_Init+0xe0>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a1b      	ldr	r2, [pc, #108]	; (8000694 <MX_GPIO_Init+0xe0>)
 8000628:	f043 0302 	orr.w	r3, r3, #2
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b19      	ldr	r3, [pc, #100]	; (8000694 <MX_GPIO_Init+0xe0>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0302 	and.w	r3, r3, #2
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800063a:	2200      	movs	r2, #0
 800063c:	2120      	movs	r1, #32
 800063e:	4816      	ldr	r0, [pc, #88]	; (8000698 <MX_GPIO_Init+0xe4>)
 8000640:	f000 fecc 	bl	80013dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000644:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800064a:	4b14      	ldr	r3, [pc, #80]	; (800069c <MX_GPIO_Init+0xe8>)
 800064c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064e:	2300      	movs	r3, #0
 8000650:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000652:	f107 0314 	add.w	r3, r7, #20
 8000656:	4619      	mov	r1, r3
 8000658:	4811      	ldr	r0, [pc, #68]	; (80006a0 <MX_GPIO_Init+0xec>)
 800065a:	f000 fd3b 	bl	80010d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800065e:	2320      	movs	r3, #32
 8000660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000662:	2301      	movs	r3, #1
 8000664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066a:	2300      	movs	r3, #0
 800066c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	4619      	mov	r1, r3
 8000674:	4808      	ldr	r0, [pc, #32]	; (8000698 <MX_GPIO_Init+0xe4>)
 8000676:	f000 fd2d 	bl	80010d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800067a:	2200      	movs	r2, #0
 800067c:	2100      	movs	r1, #0
 800067e:	2028      	movs	r0, #40	; 0x28
 8000680:	f000 fccf 	bl	8001022 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000684:	2028      	movs	r0, #40	; 0x28
 8000686:	f000 fce8 	bl	800105a <HAL_NVIC_EnableIRQ>

}
 800068a:	bf00      	nop
 800068c:	3728      	adds	r7, #40	; 0x28
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40023800 	.word	0x40023800
 8000698:	40020000 	.word	0x40020000
 800069c:	10210000 	.word	0x10210000
 80006a0:	40020800 	.word	0x40020800

080006a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b09a      	sub	sp, #104	; 0x68
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006aa:	f000 fb49 	bl	8000d40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ae:	f000 f881 	bl	80007b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b2:	f7ff ff7f 	bl	80005b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006b6:	f000 fa9f 	bl	8000bf8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80006ba:	f000 f9cf 	bl	8000a5c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //int dutyCycle = 0;
  int dutyCycle =0;
 80006be:	2300      	movs	r3, #0
 80006c0:	667b      	str	r3, [r7, #100]	; 0x64
  char msgDebug[100];


  msgLen = sprintf(msgDebug, "\n\r BEGINNING OF THE CODE \n\n\r");
 80006c2:	463b      	mov	r3, r7
 80006c4:	4932      	ldr	r1, [pc, #200]	; (8000790 <main+0xec>)
 80006c6:	4618      	mov	r0, r3
 80006c8:	f003 f87a 	bl	80037c0 <siprintf>
 80006cc:	4603      	mov	r3, r0
 80006ce:	4a31      	ldr	r2, [pc, #196]	; (8000794 <main+0xf0>)
 80006d0:	6013      	str	r3, [r2, #0]
  HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100),
 80006d2:	4b30      	ldr	r3, [pc, #192]	; (8000794 <main+0xf0>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	b29a      	uxth	r2, r3
 80006d8:	4639      	mov	r1, r7
 80006da:	2364      	movs	r3, #100	; 0x64
 80006dc:	482e      	ldr	r0, [pc, #184]	; (8000798 <main+0xf4>)
 80006de:	f002 f8d8 	bl	8002892 <HAL_UART_Transmit>

  // Start the counter for the PWM signal
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80006e2:	2100      	movs	r1, #0
 80006e4:	482d      	ldr	r0, [pc, #180]	; (800079c <main+0xf8>)
 80006e6:	f001 fb91 	bl	8001e0c <HAL_TIM_PWM_Start>

  ESC_initialSetUp();
 80006ea:	f7ff ff55 	bl	8000598 <ESC_initialSetUp>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(BLUE_BUTTON == 1){
 80006ee:	4b2c      	ldr	r3, [pc, #176]	; (80007a0 <main+0xfc>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	2b01      	cmp	r3, #1
 80006f4:	d1fb      	bne.n	80006ee <main+0x4a>

		  msgLen = sprintf(msgDebug, "\n\r BLUE BUTTON PRESSED \n\r");
 80006f6:	463b      	mov	r3, r7
 80006f8:	492a      	ldr	r1, [pc, #168]	; (80007a4 <main+0x100>)
 80006fa:	4618      	mov	r0, r3
 80006fc:	f003 f860 	bl	80037c0 <siprintf>
 8000700:	4603      	mov	r3, r0
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <main+0xf0>)
 8000704:	6013      	str	r3, [r2, #0]
		  HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100);
 8000706:	4b23      	ldr	r3, [pc, #140]	; (8000794 <main+0xf0>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	b29a      	uxth	r2, r3
 800070c:	4639      	mov	r1, r7
 800070e:	2364      	movs	r3, #100	; 0x64
 8000710:	4821      	ldr	r0, [pc, #132]	; (8000798 <main+0xf4>)
 8000712:	f002 f8be 	bl	8002892 <HAL_UART_Transmit>

		  msgLen = sprintf(msgDebug, "  Specify the value of the duty cycle in between 0 and 99 -> \n\r");
 8000716:	463b      	mov	r3, r7
 8000718:	4923      	ldr	r1, [pc, #140]	; (80007a8 <main+0x104>)
 800071a:	4618      	mov	r0, r3
 800071c:	f003 f850 	bl	80037c0 <siprintf>
 8000720:	4603      	mov	r3, r0
 8000722:	4a1c      	ldr	r2, [pc, #112]	; (8000794 <main+0xf0>)
 8000724:	6013      	str	r3, [r2, #0]
		  HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100),
 8000726:	4b1b      	ldr	r3, [pc, #108]	; (8000794 <main+0xf0>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	b29a      	uxth	r2, r3
 800072c:	4639      	mov	r1, r7
 800072e:	2364      	movs	r3, #100	; 0x64
 8000730:	4819      	ldr	r0, [pc, #100]	; (8000798 <main+0xf4>)
 8000732:	f002 f8ae 	bl	8002892 <HAL_UART_Transmit>
		  HAL_UART_Receive(&huart2, (uint8_t*)msgRx, 2, 100);
 8000736:	2364      	movs	r3, #100	; 0x64
 8000738:	2202      	movs	r2, #2
 800073a:	491c      	ldr	r1, [pc, #112]	; (80007ac <main+0x108>)
 800073c:	4816      	ldr	r0, [pc, #88]	; (8000798 <main+0xf4>)
 800073e:	f002 f941 	bl	80029c4 <HAL_UART_Receive>

		  // Transform Rx message in number
		  dutyCycle = msgRx[0]*10 +  msgRx[1]*1;
 8000742:	4b1a      	ldr	r3, [pc, #104]	; (80007ac <main+0x108>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	461a      	mov	r2, r3
 8000748:	4613      	mov	r3, r2
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	4413      	add	r3, r2
 800074e:	005b      	lsls	r3, r3, #1
 8000750:	461a      	mov	r2, r3
 8000752:	4b16      	ldr	r3, [pc, #88]	; (80007ac <main+0x108>)
 8000754:	785b      	ldrb	r3, [r3, #1]
 8000756:	4413      	add	r3, r2
 8000758:	667b      	str	r3, [r7, #100]	; 0x64

		  msgLen = sprintf(msgDebug, "  Pulse value is now %i \n\r", dutyCycle);
 800075a:	463b      	mov	r3, r7
 800075c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800075e:	4914      	ldr	r1, [pc, #80]	; (80007b0 <main+0x10c>)
 8000760:	4618      	mov	r0, r3
 8000762:	f003 f82d 	bl	80037c0 <siprintf>
 8000766:	4603      	mov	r3, r0
 8000768:	4a0a      	ldr	r2, [pc, #40]	; (8000794 <main+0xf0>)
 800076a:	6013      	str	r3, [r2, #0]
		  HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 100),
 800076c:	4b09      	ldr	r3, [pc, #36]	; (8000794 <main+0xf0>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	b29a      	uxth	r2, r3
 8000772:	4639      	mov	r1, r7
 8000774:	2364      	movs	r3, #100	; 0x64
 8000776:	4808      	ldr	r0, [pc, #32]	; (8000798 <main+0xf4>)
 8000778:	f002 f88b 	bl	8002892 <HAL_UART_Transmit>

		  // the pulse must go from 0 to 100, the CCR1 can go from 100 to 200
		  TIM2->CCR1 = dutyCycle+100;
 800077c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800077e:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8000782:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000786:	635a      	str	r2, [r3, #52]	; 0x34

		  BLUE_BUTTON = 0;
 8000788:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <main+0xfc>)
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
	  if(BLUE_BUTTON == 1){
 800078e:	e7ae      	b.n	80006ee <main+0x4a>
 8000790:	08004034 	.word	0x08004034
 8000794:	200000a0 	.word	0x200000a0
 8000798:	200000e4 	.word	0x200000e4
 800079c:	200000a4 	.word	0x200000a4
 80007a0:	2000008c 	.word	0x2000008c
 80007a4:	08004054 	.word	0x08004054
 80007a8:	08004070 	.word	0x08004070
 80007ac:	2000009c 	.word	0x2000009c
 80007b0:	080040b0 	.word	0x080040b0

080007b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b094      	sub	sp, #80	; 0x50
 80007b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ba:	f107 0320 	add.w	r3, r7, #32
 80007be:	2230      	movs	r2, #48	; 0x30
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f002 fff4 	bl	80037b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c8:	f107 030c 	add.w	r3, r7, #12
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d8:	2300      	movs	r3, #0
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	4b29      	ldr	r3, [pc, #164]	; (8000884 <SystemClock_Config+0xd0>)
 80007de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e0:	4a28      	ldr	r2, [pc, #160]	; (8000884 <SystemClock_Config+0xd0>)
 80007e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e6:	6413      	str	r3, [r2, #64]	; 0x40
 80007e8:	4b26      	ldr	r3, [pc, #152]	; (8000884 <SystemClock_Config+0xd0>)
 80007ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007f4:	2300      	movs	r3, #0
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	4b23      	ldr	r3, [pc, #140]	; (8000888 <SystemClock_Config+0xd4>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000800:	4a21      	ldr	r2, [pc, #132]	; (8000888 <SystemClock_Config+0xd4>)
 8000802:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000806:	6013      	str	r3, [r2, #0]
 8000808:	4b1f      	ldr	r3, [pc, #124]	; (8000888 <SystemClock_Config+0xd4>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000814:	2302      	movs	r3, #2
 8000816:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000818:	2301      	movs	r3, #1
 800081a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800081c:	2310      	movs	r3, #16
 800081e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000820:	2302      	movs	r3, #2
 8000822:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000824:	2300      	movs	r3, #0
 8000826:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000828:	2310      	movs	r3, #16
 800082a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800082c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000830:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000832:	2304      	movs	r3, #4
 8000834:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000836:	2307      	movs	r3, #7
 8000838:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083a:	f107 0320 	add.w	r3, r7, #32
 800083e:	4618      	mov	r0, r3
 8000840:	f000 fe18 	bl	8001474 <HAL_RCC_OscConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800084a:	f000 f833 	bl	80008b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084e:	230f      	movs	r3, #15
 8000850:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000852:	2302      	movs	r3, #2
 8000854:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800085a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800085e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000864:	f107 030c 	add.w	r3, r7, #12
 8000868:	2102      	movs	r1, #2
 800086a:	4618      	mov	r0, r3
 800086c:	f001 f872 	bl	8001954 <HAL_RCC_ClockConfig>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000876:	f000 f81d 	bl	80008b4 <Error_Handler>
  }
}
 800087a:	bf00      	nop
 800087c:	3750      	adds	r7, #80	; 0x50
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40023800 	.word	0x40023800
 8000888:	40007000 	.word	0x40007000

0800088c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin==B1_Pin){
 8000896:	88fb      	ldrh	r3, [r7, #6]
 8000898:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800089c:	d102      	bne.n	80008a4 <HAL_GPIO_EXTI_Callback+0x18>
		BLUE_BUTTON = 1;
 800089e:	4b04      	ldr	r3, [pc, #16]	; (80008b0 <HAL_GPIO_EXTI_Callback+0x24>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	601a      	str	r2, [r3, #0]
	}


}
 80008a4:	bf00      	nop
 80008a6:	370c      	adds	r7, #12
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr
 80008b0:	2000008c 	.word	0x2000008c

080008b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b8:	b672      	cpsid	i
}
 80008ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008bc:	e7fe      	b.n	80008bc <Error_Handler+0x8>
	...

080008c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	4b18      	ldr	r3, [pc, #96]	; (800092c <HAL_MspInit+0x6c>)
 80008cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ce:	4a17      	ldr	r2, [pc, #92]	; (800092c <HAL_MspInit+0x6c>)
 80008d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d4:	6453      	str	r3, [r2, #68]	; 0x44
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <HAL_MspInit+0x6c>)
 80008d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	603b      	str	r3, [r7, #0]
 80008e6:	4b11      	ldr	r3, [pc, #68]	; (800092c <HAL_MspInit+0x6c>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ea:	4a10      	ldr	r2, [pc, #64]	; (800092c <HAL_MspInit+0x6c>)
 80008ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f0:	6413      	str	r3, [r2, #64]	; 0x40
 80008f2:	4b0e      	ldr	r3, [pc, #56]	; (800092c <HAL_MspInit+0x6c>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008fe:	2007      	movs	r0, #7
 8000900:	f000 fb84 	bl	800100c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8000904:	2200      	movs	r2, #0
 8000906:	2100      	movs	r1, #0
 8000908:	2001      	movs	r0, #1
 800090a:	f000 fb8a 	bl	8001022 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 800090e:	2001      	movs	r0, #1
 8000910:	f000 fba3 	bl	800105a <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 8000914:	2200      	movs	r2, #0
 8000916:	2100      	movs	r1, #0
 8000918:	2051      	movs	r0, #81	; 0x51
 800091a:	f000 fb82 	bl	8001022 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 800091e:	2051      	movs	r0, #81	; 0x51
 8000920:	f000 fb9b 	bl	800105a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000924:	bf00      	nop
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40023800 	.word	0x40023800

08000930 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000934:	e7fe      	b.n	8000934 <NMI_Handler+0x4>

08000936 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800093a:	e7fe      	b.n	800093a <HardFault_Handler+0x4>

0800093c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <MemManage_Handler+0x4>

08000942 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000946:	e7fe      	b.n	8000946 <BusFault_Handler+0x4>

08000948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800094c:	e7fe      	b.n	800094c <UsageFault_Handler+0x4>

0800094e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr

0800096a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800097c:	f000 fa32 	bl	8000de4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}

08000984 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8000988:	f000 fd5a 	bl	8001440 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}

08000990 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000994:	4802      	ldr	r0, [pc, #8]	; (80009a0 <USART2_IRQHandler+0x10>)
 8000996:	f002 f8bb 	bl	8002b10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	200000e4 	.word	0x200000e4

080009a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80009a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80009ac:	f000 fd30 	bl	8001410 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
	...

080009c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009cc:	4a14      	ldr	r2, [pc, #80]	; (8000a20 <_sbrk+0x5c>)
 80009ce:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <_sbrk+0x60>)
 80009d0:	1ad3      	subs	r3, r2, r3
 80009d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009d8:	4b13      	ldr	r3, [pc, #76]	; (8000a28 <_sbrk+0x64>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d102      	bne.n	80009e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009e0:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <_sbrk+0x64>)
 80009e2:	4a12      	ldr	r2, [pc, #72]	; (8000a2c <_sbrk+0x68>)
 80009e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009e6:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <_sbrk+0x64>)
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4413      	add	r3, r2
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d207      	bcs.n	8000a04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009f4:	f002 feb2 	bl	800375c <__errno>
 80009f8:	4603      	mov	r3, r0
 80009fa:	220c      	movs	r2, #12
 80009fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000a02:	e009      	b.n	8000a18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a04:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <_sbrk+0x64>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a0a:	4b07      	ldr	r3, [pc, #28]	; (8000a28 <_sbrk+0x64>)
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4413      	add	r3, r2
 8000a12:	4a05      	ldr	r2, [pc, #20]	; (8000a28 <_sbrk+0x64>)
 8000a14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a16:	68fb      	ldr	r3, [r7, #12]
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3718      	adds	r7, #24
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20018000 	.word	0x20018000
 8000a24:	00000400 	.word	0x00000400
 8000a28:	20000090 	.word	0x20000090
 8000a2c:	20000138 	.word	0x20000138

08000a30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a34:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <SystemInit+0x28>)
 8000a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a3a:	4a07      	ldr	r2, [pc, #28]	; (8000a58 <SystemInit+0x28>)
 8000a3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a44:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <SystemInit+0x28>)
 8000a46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a4a:	609a      	str	r2, [r3, #8]
#endif
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08e      	sub	sp, #56	; 0x38
 8000a60:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
 8000a6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a70:	f107 0320 	add.w	r3, r7, #32
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
 8000a88:	615a      	str	r2, [r3, #20]
 8000a8a:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000a8c:	4b2d      	ldr	r3, [pc, #180]	; (8000b44 <MX_TIM2_Init+0xe8>)
 8000a8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8000a94:	4b2b      	ldr	r3, [pc, #172]	; (8000b44 <MX_TIM2_Init+0xe8>)
 8000a96:	2253      	movs	r2, #83	; 0x53
 8000a98:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a9a:	4b2a      	ldr	r3, [pc, #168]	; (8000b44 <MX_TIM2_Init+0xe8>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 8000aa0:	4b28      	ldr	r3, [pc, #160]	; (8000b44 <MX_TIM2_Init+0xe8>)
 8000aa2:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000aa6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa8:	4b26      	ldr	r3, [pc, #152]	; (8000b44 <MX_TIM2_Init+0xe8>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000aae:	4b25      	ldr	r3, [pc, #148]	; (8000b44 <MX_TIM2_Init+0xe8>)
 8000ab0:	2280      	movs	r2, #128	; 0x80
 8000ab2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ab4:	4823      	ldr	r0, [pc, #140]	; (8000b44 <MX_TIM2_Init+0xe8>)
 8000ab6:	f001 f949 	bl	8001d4c <HAL_TIM_Base_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000ac0:	f7ff fef8 	bl	80008b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ac4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ac8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000aca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ace:	4619      	mov	r1, r3
 8000ad0:	481c      	ldr	r0, [pc, #112]	; (8000b44 <MX_TIM2_Init+0xe8>)
 8000ad2:	f001 fa93 	bl	8001ffc <HAL_TIM_ConfigClockSource>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000adc:	f7ff feea 	bl	80008b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ae0:	4818      	ldr	r0, [pc, #96]	; (8000b44 <MX_TIM2_Init+0xe8>)
 8000ae2:	f001 f95e 	bl	8001da2 <HAL_TIM_PWM_Init>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000aec:	f7ff fee2 	bl	80008b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af0:	2300      	movs	r3, #0
 8000af2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af4:	2300      	movs	r3, #0
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000af8:	f107 0320 	add.w	r3, r7, #32
 8000afc:	4619      	mov	r1, r3
 8000afe:	4811      	ldr	r0, [pc, #68]	; (8000b44 <MX_TIM2_Init+0xe8>)
 8000b00:	f001 fe0c 	bl	800271c <HAL_TIMEx_MasterConfigSynchronization>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000b0a:	f7ff fed3 	bl	80008b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b0e:	2360      	movs	r3, #96	; 0x60
 8000b10:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8000b12:	2332      	movs	r3, #50	; 0x32
 8000b14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b1e:	1d3b      	adds	r3, r7, #4
 8000b20:	2200      	movs	r2, #0
 8000b22:	4619      	mov	r1, r3
 8000b24:	4807      	ldr	r0, [pc, #28]	; (8000b44 <MX_TIM2_Init+0xe8>)
 8000b26:	f001 f9a3 	bl	8001e70 <HAL_TIM_PWM_ConfigChannel>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000b30:	f7ff fec0 	bl	80008b4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000b34:	4803      	ldr	r0, [pc, #12]	; (8000b44 <MX_TIM2_Init+0xe8>)
 8000b36:	f000 f827 	bl	8000b88 <HAL_TIM_MspPostInit>

}
 8000b3a:	bf00      	nop
 8000b3c:	3738      	adds	r7, #56	; 0x38
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	200000a4 	.word	0x200000a4

08000b48 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b58:	d10d      	bne.n	8000b76 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <HAL_TIM_Base_MspInit+0x3c>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	4a08      	ldr	r2, [pc, #32]	; (8000b84 <HAL_TIM_Base_MspInit+0x3c>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	6413      	str	r3, [r2, #64]	; 0x40
 8000b6a:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <HAL_TIM_Base_MspInit+0x3c>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000b76:	bf00      	nop
 8000b78:	3714      	adds	r7, #20
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	40023800 	.word	0x40023800

08000b88 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b088      	sub	sp, #32
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 030c 	add.w	r3, r7, #12
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ba8:	d11d      	bne.n	8000be6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <HAL_TIM_MspPostInit+0x68>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a0f      	ldr	r2, [pc, #60]	; (8000bf0 <HAL_TIM_MspPostInit+0x68>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b0d      	ldr	r3, [pc, #52]	; (8000bf0 <HAL_TIM_MspPostInit+0x68>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bda:	f107 030c 	add.w	r3, r7, #12
 8000bde:	4619      	mov	r1, r3
 8000be0:	4804      	ldr	r0, [pc, #16]	; (8000bf4 <HAL_TIM_MspPostInit+0x6c>)
 8000be2:	f000 fa77 	bl	80010d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000be6:	bf00      	nop
 8000be8:	3720      	adds	r7, #32
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40020000 	.word	0x40020000

08000bf8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000bfc:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000bfe:	4a12      	ldr	r2, [pc, #72]	; (8000c48 <MX_USART2_UART_Init+0x50>)
 8000c00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c02:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000c04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c10:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c16:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c1c:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000c1e:	220c      	movs	r2, #12
 8000c20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c22:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c2e:	4805      	ldr	r0, [pc, #20]	; (8000c44 <MX_USART2_UART_Init+0x4c>)
 8000c30:	f001 fde2 	bl	80027f8 <HAL_UART_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c3a:	f7ff fe3b 	bl	80008b4 <Error_Handler>
  }

}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	200000e4 	.word	0x200000e4
 8000c48:	40004400 	.word	0x40004400

08000c4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08a      	sub	sp, #40	; 0x28
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a1d      	ldr	r2, [pc, #116]	; (8000ce0 <HAL_UART_MspInit+0x94>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d133      	bne.n	8000cd6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	613b      	str	r3, [r7, #16]
 8000c72:	4b1c      	ldr	r3, [pc, #112]	; (8000ce4 <HAL_UART_MspInit+0x98>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c76:	4a1b      	ldr	r2, [pc, #108]	; (8000ce4 <HAL_UART_MspInit+0x98>)
 8000c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7e:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <HAL_UART_MspInit+0x98>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c86:	613b      	str	r3, [r7, #16]
 8000c88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <HAL_UART_MspInit+0x98>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a14      	ldr	r2, [pc, #80]	; (8000ce4 <HAL_UART_MspInit+0x98>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <HAL_UART_MspInit+0x98>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ca6:	230c      	movs	r3, #12
 8000ca8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	2302      	movs	r3, #2
 8000cac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cb6:	2307      	movs	r3, #7
 8000cb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cba:	f107 0314 	add.w	r3, r7, #20
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4809      	ldr	r0, [pc, #36]	; (8000ce8 <HAL_UART_MspInit+0x9c>)
 8000cc2:	f000 fa07 	bl	80010d4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2100      	movs	r1, #0
 8000cca:	2026      	movs	r0, #38	; 0x26
 8000ccc:	f000 f9a9 	bl	8001022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cd0:	2026      	movs	r0, #38	; 0x26
 8000cd2:	f000 f9c2 	bl	800105a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000cd6:	bf00      	nop
 8000cd8:	3728      	adds	r7, #40	; 0x28
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40004400 	.word	0x40004400
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40020000 	.word	0x40020000

08000cec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d24 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000cf0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000cf2:	e003      	b.n	8000cfc <LoopCopyDataInit>

08000cf4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000cf6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000cf8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000cfa:	3104      	adds	r1, #4

08000cfc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000cfc:	480b      	ldr	r0, [pc, #44]	; (8000d2c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d00:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d02:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d04:	d3f6      	bcc.n	8000cf4 <CopyDataInit>
  ldr  r2, =_sbss
 8000d06:	4a0b      	ldr	r2, [pc, #44]	; (8000d34 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d08:	e002      	b.n	8000d10 <LoopFillZerobss>

08000d0a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d0a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d0c:	f842 3b04 	str.w	r3, [r2], #4

08000d10 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d10:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d12:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d14:	d3f9      	bcc.n	8000d0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d16:	f7ff fe8b 	bl	8000a30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d1a:	f002 fd25 	bl	8003768 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d1e:	f7ff fcc1 	bl	80006a4 <main>
  bx  lr    
 8000d22:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d24:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000d28:	08004128 	.word	0x08004128
  ldr  r0, =_sdata
 8000d2c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d30:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000d34:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000d38:	20000138 	.word	0x20000138

08000d3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d3c:	e7fe      	b.n	8000d3c <ADC_IRQHandler>
	...

08000d40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d44:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <HAL_Init+0x40>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a0d      	ldr	r2, [pc, #52]	; (8000d80 <HAL_Init+0x40>)
 8000d4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d50:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <HAL_Init+0x40>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a0a      	ldr	r2, [pc, #40]	; (8000d80 <HAL_Init+0x40>)
 8000d56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d5c:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <HAL_Init+0x40>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a07      	ldr	r2, [pc, #28]	; (8000d80 <HAL_Init+0x40>)
 8000d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d68:	2003      	movs	r0, #3
 8000d6a:	f000 f94f 	bl	800100c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d6e:	2000      	movs	r0, #0
 8000d70:	f000 f808 	bl	8000d84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d74:	f7ff fda4 	bl	80008c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40023c00 	.word	0x40023c00

08000d84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d8c:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <HAL_InitTick+0x54>)
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <HAL_InitTick+0x58>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	4619      	mov	r1, r3
 8000d96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000da2:	4618      	mov	r0, r3
 8000da4:	f000 f967 	bl	8001076 <HAL_SYSTICK_Config>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e00e      	b.n	8000dd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2b0f      	cmp	r3, #15
 8000db6:	d80a      	bhi.n	8000dce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db8:	2200      	movs	r2, #0
 8000dba:	6879      	ldr	r1, [r7, #4]
 8000dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc0:	f000 f92f 	bl	8001022 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dc4:	4a06      	ldr	r2, [pc, #24]	; (8000de0 <HAL_InitTick+0x5c>)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	e000      	b.n	8000dd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20000000 	.word	0x20000000
 8000ddc:	20000008 	.word	0x20000008
 8000de0:	20000004 	.word	0x20000004

08000de4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de8:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <HAL_IncTick+0x20>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	461a      	mov	r2, r3
 8000dee:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <HAL_IncTick+0x24>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4413      	add	r3, r2
 8000df4:	4a04      	ldr	r2, [pc, #16]	; (8000e08 <HAL_IncTick+0x24>)
 8000df6:	6013      	str	r3, [r2, #0]
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	20000008 	.word	0x20000008
 8000e08:	20000124 	.word	0x20000124

08000e0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e10:	4b03      	ldr	r3, [pc, #12]	; (8000e20 <HAL_GetTick+0x14>)
 8000e12:	681b      	ldr	r3, [r3, #0]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	20000124 	.word	0x20000124

08000e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e2c:	f7ff ffee 	bl	8000e0c <HAL_GetTick>
 8000e30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e3c:	d005      	beq.n	8000e4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <HAL_Delay+0x44>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	461a      	mov	r2, r3
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	4413      	add	r3, r2
 8000e48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e4a:	bf00      	nop
 8000e4c:	f7ff ffde 	bl	8000e0c <HAL_GetTick>
 8000e50:	4602      	mov	r2, r0
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	68fa      	ldr	r2, [r7, #12]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d8f7      	bhi.n	8000e4c <HAL_Delay+0x28>
  {
  }
}
 8000e5c:	bf00      	nop
 8000e5e:	bf00      	nop
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000008 	.word	0x20000008

08000e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e82:	68ba      	ldr	r2, [r7, #8]
 8000e84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e88:	4013      	ands	r3, r2
 8000e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e9e:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	60d3      	str	r3, [r2, #12]
}
 8000ea4:	bf00      	nop
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb8:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <__NVIC_GetPriorityGrouping+0x18>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	0a1b      	lsrs	r3, r3, #8
 8000ebe:	f003 0307 	and.w	r3, r3, #7
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	db0b      	blt.n	8000efa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	f003 021f 	and.w	r2, r3, #31
 8000ee8:	4907      	ldr	r1, [pc, #28]	; (8000f08 <__NVIC_EnableIRQ+0x38>)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	095b      	lsrs	r3, r3, #5
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e000e100 	.word	0xe000e100

08000f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	6039      	str	r1, [r7, #0]
 8000f16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	db0a      	blt.n	8000f36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	490c      	ldr	r1, [pc, #48]	; (8000f58 <__NVIC_SetPriority+0x4c>)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	0112      	lsls	r2, r2, #4
 8000f2c:	b2d2      	uxtb	r2, r2
 8000f2e:	440b      	add	r3, r1
 8000f30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f34:	e00a      	b.n	8000f4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	4908      	ldr	r1, [pc, #32]	; (8000f5c <__NVIC_SetPriority+0x50>)
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	f003 030f 	and.w	r3, r3, #15
 8000f42:	3b04      	subs	r3, #4
 8000f44:	0112      	lsls	r2, r2, #4
 8000f46:	b2d2      	uxtb	r2, r2
 8000f48:	440b      	add	r3, r1
 8000f4a:	761a      	strb	r2, [r3, #24]
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000e100 	.word	0xe000e100
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b089      	sub	sp, #36	; 0x24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	f1c3 0307 	rsb	r3, r3, #7
 8000f7a:	2b04      	cmp	r3, #4
 8000f7c:	bf28      	it	cs
 8000f7e:	2304      	movcs	r3, #4
 8000f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3304      	adds	r3, #4
 8000f86:	2b06      	cmp	r3, #6
 8000f88:	d902      	bls.n	8000f90 <NVIC_EncodePriority+0x30>
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3b03      	subs	r3, #3
 8000f8e:	e000      	b.n	8000f92 <NVIC_EncodePriority+0x32>
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f94:	f04f 32ff 	mov.w	r2, #4294967295
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43da      	mvns	r2, r3
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	401a      	ands	r2, r3
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb2:	43d9      	mvns	r1, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb8:	4313      	orrs	r3, r2
         );
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3724      	adds	r7, #36	; 0x24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
	...

08000fc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fd8:	d301      	bcc.n	8000fde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e00f      	b.n	8000ffe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fde:	4a0a      	ldr	r2, [pc, #40]	; (8001008 <SysTick_Config+0x40>)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fe6:	210f      	movs	r1, #15
 8000fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fec:	f7ff ff8e 	bl	8000f0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff0:	4b05      	ldr	r3, [pc, #20]	; (8001008 <SysTick_Config+0x40>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ff6:	4b04      	ldr	r3, [pc, #16]	; (8001008 <SysTick_Config+0x40>)
 8000ff8:	2207      	movs	r2, #7
 8000ffa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	e000e010 	.word	0xe000e010

0800100c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f7ff ff29 	bl	8000e6c <__NVIC_SetPriorityGrouping>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001022:	b580      	push	{r7, lr}
 8001024:	b086      	sub	sp, #24
 8001026:	af00      	add	r7, sp, #0
 8001028:	4603      	mov	r3, r0
 800102a:	60b9      	str	r1, [r7, #8]
 800102c:	607a      	str	r2, [r7, #4]
 800102e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001034:	f7ff ff3e 	bl	8000eb4 <__NVIC_GetPriorityGrouping>
 8001038:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	68b9      	ldr	r1, [r7, #8]
 800103e:	6978      	ldr	r0, [r7, #20]
 8001040:	f7ff ff8e 	bl	8000f60 <NVIC_EncodePriority>
 8001044:	4602      	mov	r2, r0
 8001046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104a:	4611      	mov	r1, r2
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff5d 	bl	8000f0c <__NVIC_SetPriority>
}
 8001052:	bf00      	nop
 8001054:	3718      	adds	r7, #24
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	4603      	mov	r3, r0
 8001062:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff ff31 	bl	8000ed0 <__NVIC_EnableIRQ>
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff ffa2 	bl	8000fc8 <SysTick_Config>
 8001084:	4603      	mov	r3, r0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800108e:	b480      	push	{r7}
 8001090:	b083      	sub	sp, #12
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d004      	beq.n	80010ac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2280      	movs	r2, #128	; 0x80
 80010a6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e00c      	b.n	80010c6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2205      	movs	r2, #5
 80010b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f022 0201 	bic.w	r2, r2, #1
 80010c2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
	...

080010d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b089      	sub	sp, #36	; 0x24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010e2:	2300      	movs	r3, #0
 80010e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ea:	2300      	movs	r3, #0
 80010ec:	61fb      	str	r3, [r7, #28]
 80010ee:	e159      	b.n	80013a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010f0:	2201      	movs	r2, #1
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	697a      	ldr	r2, [r7, #20]
 8001100:	4013      	ands	r3, r2
 8001102:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	429a      	cmp	r2, r3
 800110a:	f040 8148 	bne.w	800139e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d00b      	beq.n	800112e <HAL_GPIO_Init+0x5a>
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	2b02      	cmp	r3, #2
 800111c:	d007      	beq.n	800112e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001122:	2b11      	cmp	r3, #17
 8001124:	d003      	beq.n	800112e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	2b12      	cmp	r3, #18
 800112c:	d130      	bne.n	8001190 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	2203      	movs	r2, #3
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43db      	mvns	r3, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4013      	ands	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	68da      	ldr	r2, [r3, #12]
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4313      	orrs	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001164:	2201      	movs	r2, #1
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	091b      	lsrs	r3, r3, #4
 800117a:	f003 0201 	and.w	r2, r3, #1
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4313      	orrs	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	2203      	movs	r2, #3
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	689a      	ldr	r2, [r3, #8]
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d003      	beq.n	80011d0 <HAL_GPIO_Init+0xfc>
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	2b12      	cmp	r3, #18
 80011ce:	d123      	bne.n	8001218 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	08da      	lsrs	r2, r3, #3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	3208      	adds	r2, #8
 80011d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	f003 0307 	and.w	r3, r3, #7
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	220f      	movs	r2, #15
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4013      	ands	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	691a      	ldr	r2, [r3, #16]
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4313      	orrs	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	08da      	lsrs	r2, r3, #3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	3208      	adds	r2, #8
 8001212:	69b9      	ldr	r1, [r7, #24]
 8001214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	2203      	movs	r2, #3
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f003 0203 	and.w	r2, r3, #3
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4313      	orrs	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001254:	2b00      	cmp	r3, #0
 8001256:	f000 80a2 	beq.w	800139e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	4b57      	ldr	r3, [pc, #348]	; (80013bc <HAL_GPIO_Init+0x2e8>)
 8001260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001262:	4a56      	ldr	r2, [pc, #344]	; (80013bc <HAL_GPIO_Init+0x2e8>)
 8001264:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001268:	6453      	str	r3, [r2, #68]	; 0x44
 800126a:	4b54      	ldr	r3, [pc, #336]	; (80013bc <HAL_GPIO_Init+0x2e8>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001276:	4a52      	ldr	r2, [pc, #328]	; (80013c0 <HAL_GPIO_Init+0x2ec>)
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	089b      	lsrs	r3, r3, #2
 800127c:	3302      	adds	r3, #2
 800127e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001282:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	f003 0303 	and.w	r3, r3, #3
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	220f      	movs	r2, #15
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43db      	mvns	r3, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4013      	ands	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a49      	ldr	r2, [pc, #292]	; (80013c4 <HAL_GPIO_Init+0x2f0>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d019      	beq.n	80012d6 <HAL_GPIO_Init+0x202>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a48      	ldr	r2, [pc, #288]	; (80013c8 <HAL_GPIO_Init+0x2f4>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d013      	beq.n	80012d2 <HAL_GPIO_Init+0x1fe>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a47      	ldr	r2, [pc, #284]	; (80013cc <HAL_GPIO_Init+0x2f8>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d00d      	beq.n	80012ce <HAL_GPIO_Init+0x1fa>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a46      	ldr	r2, [pc, #280]	; (80013d0 <HAL_GPIO_Init+0x2fc>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d007      	beq.n	80012ca <HAL_GPIO_Init+0x1f6>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a45      	ldr	r2, [pc, #276]	; (80013d4 <HAL_GPIO_Init+0x300>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d101      	bne.n	80012c6 <HAL_GPIO_Init+0x1f2>
 80012c2:	2304      	movs	r3, #4
 80012c4:	e008      	b.n	80012d8 <HAL_GPIO_Init+0x204>
 80012c6:	2307      	movs	r3, #7
 80012c8:	e006      	b.n	80012d8 <HAL_GPIO_Init+0x204>
 80012ca:	2303      	movs	r3, #3
 80012cc:	e004      	b.n	80012d8 <HAL_GPIO_Init+0x204>
 80012ce:	2302      	movs	r3, #2
 80012d0:	e002      	b.n	80012d8 <HAL_GPIO_Init+0x204>
 80012d2:	2301      	movs	r3, #1
 80012d4:	e000      	b.n	80012d8 <HAL_GPIO_Init+0x204>
 80012d6:	2300      	movs	r3, #0
 80012d8:	69fa      	ldr	r2, [r7, #28]
 80012da:	f002 0203 	and.w	r2, r2, #3
 80012de:	0092      	lsls	r2, r2, #2
 80012e0:	4093      	lsls	r3, r2
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012e8:	4935      	ldr	r1, [pc, #212]	; (80013c0 <HAL_GPIO_Init+0x2ec>)
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	089b      	lsrs	r3, r3, #2
 80012ee:	3302      	adds	r3, #2
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012f6:	4b38      	ldr	r3, [pc, #224]	; (80013d8 <HAL_GPIO_Init+0x304>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	43db      	mvns	r3, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4013      	ands	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d003      	beq.n	800131a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	4313      	orrs	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800131a:	4a2f      	ldr	r2, [pc, #188]	; (80013d8 <HAL_GPIO_Init+0x304>)
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001320:	4b2d      	ldr	r3, [pc, #180]	; (80013d8 <HAL_GPIO_Init+0x304>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	43db      	mvns	r3, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4013      	ands	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d003      	beq.n	8001344 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	4313      	orrs	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001344:	4a24      	ldr	r2, [pc, #144]	; (80013d8 <HAL_GPIO_Init+0x304>)
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800134a:	4b23      	ldr	r3, [pc, #140]	; (80013d8 <HAL_GPIO_Init+0x304>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	43db      	mvns	r3, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4013      	ands	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d003      	beq.n	800136e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	4313      	orrs	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800136e:	4a1a      	ldr	r2, [pc, #104]	; (80013d8 <HAL_GPIO_Init+0x304>)
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001374:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <HAL_GPIO_Init+0x304>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	43db      	mvns	r3, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d003      	beq.n	8001398 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	4313      	orrs	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001398:	4a0f      	ldr	r2, [pc, #60]	; (80013d8 <HAL_GPIO_Init+0x304>)
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3301      	adds	r3, #1
 80013a2:	61fb      	str	r3, [r7, #28]
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	2b0f      	cmp	r3, #15
 80013a8:	f67f aea2 	bls.w	80010f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013ac:	bf00      	nop
 80013ae:	bf00      	nop
 80013b0:	3724      	adds	r7, #36	; 0x24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40013800 	.word	0x40013800
 80013c4:	40020000 	.word	0x40020000
 80013c8:	40020400 	.word	0x40020400
 80013cc:	40020800 	.word	0x40020800
 80013d0:	40020c00 	.word	0x40020c00
 80013d4:	40021000 	.word	0x40021000
 80013d8:	40013c00 	.word	0x40013c00

080013dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	460b      	mov	r3, r1
 80013e6:	807b      	strh	r3, [r7, #2]
 80013e8:	4613      	mov	r3, r2
 80013ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013ec:	787b      	ldrb	r3, [r7, #1]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013f2:	887a      	ldrh	r2, [r7, #2]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013f8:	e003      	b.n	8001402 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013fa:	887b      	ldrh	r3, [r7, #2]
 80013fc:	041a      	lsls	r2, r3, #16
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	619a      	str	r2, [r3, #24]
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
	...

08001410 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800141a:	4b08      	ldr	r3, [pc, #32]	; (800143c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800141c:	695a      	ldr	r2, [r3, #20]
 800141e:	88fb      	ldrh	r3, [r7, #6]
 8001420:	4013      	ands	r3, r2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d006      	beq.n	8001434 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001426:	4a05      	ldr	r2, [pc, #20]	; (800143c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001428:	88fb      	ldrh	r3, [r7, #6]
 800142a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800142c:	88fb      	ldrh	r3, [r7, #6]
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff fa2c 	bl	800088c <HAL_GPIO_EXTI_Callback>
  }
}
 8001434:	bf00      	nop
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40013c00 	.word	0x40013c00

08001440 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <HAL_PWR_PVD_IRQHandler+0x20>)
 8001446:	695b      	ldr	r3, [r3, #20]
 8001448:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d005      	beq.n	800145c <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8001450:	f000 f808 	bl	8001464 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8001454:	4b02      	ldr	r3, [pc, #8]	; (8001460 <HAL_PWR_PVD_IRQHandler+0x20>)
 8001456:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800145a:	615a      	str	r2, [r3, #20]
  }
}
 800145c:	bf00      	nop
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40013c00 	.word	0x40013c00

08001464 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
	...

08001474 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d101      	bne.n	8001486 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e25b      	b.n	800193e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	2b00      	cmp	r3, #0
 8001490:	d075      	beq.n	800157e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001492:	4ba3      	ldr	r3, [pc, #652]	; (8001720 <HAL_RCC_OscConfig+0x2ac>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f003 030c 	and.w	r3, r3, #12
 800149a:	2b04      	cmp	r3, #4
 800149c:	d00c      	beq.n	80014b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800149e:	4ba0      	ldr	r3, [pc, #640]	; (8001720 <HAL_RCC_OscConfig+0x2ac>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014a6:	2b08      	cmp	r3, #8
 80014a8:	d112      	bne.n	80014d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014aa:	4b9d      	ldr	r3, [pc, #628]	; (8001720 <HAL_RCC_OscConfig+0x2ac>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014b6:	d10b      	bne.n	80014d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b8:	4b99      	ldr	r3, [pc, #612]	; (8001720 <HAL_RCC_OscConfig+0x2ac>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d05b      	beq.n	800157c <HAL_RCC_OscConfig+0x108>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d157      	bne.n	800157c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e236      	b.n	800193e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014d8:	d106      	bne.n	80014e8 <HAL_RCC_OscConfig+0x74>
 80014da:	4b91      	ldr	r3, [pc, #580]	; (8001720 <HAL_RCC_OscConfig+0x2ac>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a90      	ldr	r2, [pc, #576]	; (8001720 <HAL_RCC_OscConfig+0x2ac>)
 80014e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014e4:	6013      	str	r3, [r2, #0]
 80014e6:	e01d      	b.n	8001524 <HAL_RCC_OscConfig+0xb0>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014f0:	d10c      	bne.n	800150c <HAL_RCC_OscConfig+0x98>
 80014f2:	4b8b      	ldr	r3, [pc, #556]	; (8001720 <HAL_RCC_OscConfig+0x2ac>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a8a      	ldr	r2, [pc, #552]	; (8001720 <HAL_RCC_OscConfig+0x2ac>)
 80014f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014fc:	6013      	str	r3, [r2, #0]
 80014fe:	4b88      	ldr	r3, [pc, #544]	; (8001720 <HAL_RCC_OscConfig+0x2ac>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a87      	ldr	r2, [pc, #540]	; (8001720 <HAL_RCC_OscConfig+0x2ac>)
 8001504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001508:	6013      	str	r3, [r2, #0]
 800150a:	e00b      	b.n	8001524 <HAL_RCC_OscConfig+0xb0>
 800150c:	4b84      	ldr	r3, [pc, #528]	; (8001720 <HAL_RCC_OscConfig+0x2ac>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a83      	ldr	r2, [pc, #524]	; (8001720 <HAL_RCC_OscConfig+0x2ac>)
 8001512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001516:	6013      	str	r3, [r2, #0]
 8001518:	4b81      	ldr	r3, [pc, #516]	; (8001720 <HAL_RCC_OscConfig+0x2ac>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a80      	ldr	r2, [pc, #512]	; (8001720 <HAL_RCC_OscConfig+0x2ac>)
 800151e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001522:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d013      	beq.n	8001554 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152c:	f7ff fc6e 	bl	8000e0c <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001534:	f7ff fc6a 	bl	8000e0c <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b64      	cmp	r3, #100	; 0x64
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e1fb      	b.n	800193e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001546:	4b76      	ldr	r3, [pc, #472]	; (8001720 <HAL_RCC_OscConfig+0x2ac>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d0f0      	beq.n	8001534 <HAL_RCC_OscConfig+0xc0>
 8001552:	e014      	b.n	800157e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001554:	f7ff fc5a 	bl	8000e0c <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800155c:	f7ff fc56 	bl	8000e0c <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b64      	cmp	r3, #100	; 0x64
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e1e7      	b.n	800193e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800156e:	4b6c      	ldr	r3, [pc, #432]	; (8001720 <HAL_RCC_OscConfig+0x2ac>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1f0      	bne.n	800155c <HAL_RCC_OscConfig+0xe8>
 800157a:	e000      	b.n	800157e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800157c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d063      	beq.n	8001652 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800158a:	4b65      	ldr	r3, [pc, #404]	; (8001720 <HAL_RCC_OscConfig+0x2ac>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f003 030c 	and.w	r3, r3, #12
 8001592:	2b00      	cmp	r3, #0
 8001594:	d00b      	beq.n	80015ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001596:	4b62      	ldr	r3, [pc, #392]	; (8001720 <HAL_RCC_OscConfig+0x2ac>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800159e:	2b08      	cmp	r3, #8
 80015a0:	d11c      	bne.n	80015dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015a2:	4b5f      	ldr	r3, [pc, #380]	; (8001720 <HAL_RCC_OscConfig+0x2ac>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d116      	bne.n	80015dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ae:	4b5c      	ldr	r3, [pc, #368]	; (8001720 <HAL_RCC_OscConfig+0x2ac>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d005      	beq.n	80015c6 <HAL_RCC_OscConfig+0x152>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d001      	beq.n	80015c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e1bb      	b.n	800193e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c6:	4b56      	ldr	r3, [pc, #344]	; (8001720 <HAL_RCC_OscConfig+0x2ac>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	4952      	ldr	r1, [pc, #328]	; (8001720 <HAL_RCC_OscConfig+0x2ac>)
 80015d6:	4313      	orrs	r3, r2
 80015d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015da:	e03a      	b.n	8001652 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d020      	beq.n	8001626 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015e4:	4b4f      	ldr	r3, [pc, #316]	; (8001724 <HAL_RCC_OscConfig+0x2b0>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ea:	f7ff fc0f 	bl	8000e0c <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f0:	e008      	b.n	8001604 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015f2:	f7ff fc0b 	bl	8000e0c <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e19c      	b.n	800193e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001604:	4b46      	ldr	r3, [pc, #280]	; (8001720 <HAL_RCC_OscConfig+0x2ac>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0f0      	beq.n	80015f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001610:	4b43      	ldr	r3, [pc, #268]	; (8001720 <HAL_RCC_OscConfig+0x2ac>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	4940      	ldr	r1, [pc, #256]	; (8001720 <HAL_RCC_OscConfig+0x2ac>)
 8001620:	4313      	orrs	r3, r2
 8001622:	600b      	str	r3, [r1, #0]
 8001624:	e015      	b.n	8001652 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001626:	4b3f      	ldr	r3, [pc, #252]	; (8001724 <HAL_RCC_OscConfig+0x2b0>)
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800162c:	f7ff fbee 	bl	8000e0c <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001634:	f7ff fbea 	bl	8000e0c <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e17b      	b.n	800193e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001646:	4b36      	ldr	r3, [pc, #216]	; (8001720 <HAL_RCC_OscConfig+0x2ac>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1f0      	bne.n	8001634 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0308 	and.w	r3, r3, #8
 800165a:	2b00      	cmp	r3, #0
 800165c:	d030      	beq.n	80016c0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d016      	beq.n	8001694 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001666:	4b30      	ldr	r3, [pc, #192]	; (8001728 <HAL_RCC_OscConfig+0x2b4>)
 8001668:	2201      	movs	r2, #1
 800166a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800166c:	f7ff fbce 	bl	8000e0c <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001674:	f7ff fbca 	bl	8000e0c <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e15b      	b.n	800193e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001686:	4b26      	ldr	r3, [pc, #152]	; (8001720 <HAL_RCC_OscConfig+0x2ac>)
 8001688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d0f0      	beq.n	8001674 <HAL_RCC_OscConfig+0x200>
 8001692:	e015      	b.n	80016c0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001694:	4b24      	ldr	r3, [pc, #144]	; (8001728 <HAL_RCC_OscConfig+0x2b4>)
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800169a:	f7ff fbb7 	bl	8000e0c <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016a0:	e008      	b.n	80016b4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016a2:	f7ff fbb3 	bl	8000e0c <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e144      	b.n	800193e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016b4:	4b1a      	ldr	r3, [pc, #104]	; (8001720 <HAL_RCC_OscConfig+0x2ac>)
 80016b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1f0      	bne.n	80016a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	f000 80a0 	beq.w	800180e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ce:	2300      	movs	r3, #0
 80016d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016d2:	4b13      	ldr	r3, [pc, #76]	; (8001720 <HAL_RCC_OscConfig+0x2ac>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d10f      	bne.n	80016fe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	60bb      	str	r3, [r7, #8]
 80016e2:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <HAL_RCC_OscConfig+0x2ac>)
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	4a0e      	ldr	r2, [pc, #56]	; (8001720 <HAL_RCC_OscConfig+0x2ac>)
 80016e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ec:	6413      	str	r3, [r2, #64]	; 0x40
 80016ee:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <HAL_RCC_OscConfig+0x2ac>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f6:	60bb      	str	r3, [r7, #8]
 80016f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016fa:	2301      	movs	r3, #1
 80016fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016fe:	4b0b      	ldr	r3, [pc, #44]	; (800172c <HAL_RCC_OscConfig+0x2b8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001706:	2b00      	cmp	r3, #0
 8001708:	d121      	bne.n	800174e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800170a:	4b08      	ldr	r3, [pc, #32]	; (800172c <HAL_RCC_OscConfig+0x2b8>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a07      	ldr	r2, [pc, #28]	; (800172c <HAL_RCC_OscConfig+0x2b8>)
 8001710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001714:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001716:	f7ff fb79 	bl	8000e0c <HAL_GetTick>
 800171a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800171c:	e011      	b.n	8001742 <HAL_RCC_OscConfig+0x2ce>
 800171e:	bf00      	nop
 8001720:	40023800 	.word	0x40023800
 8001724:	42470000 	.word	0x42470000
 8001728:	42470e80 	.word	0x42470e80
 800172c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001730:	f7ff fb6c 	bl	8000e0c <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e0fd      	b.n	800193e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001742:	4b81      	ldr	r3, [pc, #516]	; (8001948 <HAL_RCC_OscConfig+0x4d4>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800174a:	2b00      	cmp	r3, #0
 800174c:	d0f0      	beq.n	8001730 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d106      	bne.n	8001764 <HAL_RCC_OscConfig+0x2f0>
 8001756:	4b7d      	ldr	r3, [pc, #500]	; (800194c <HAL_RCC_OscConfig+0x4d8>)
 8001758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800175a:	4a7c      	ldr	r2, [pc, #496]	; (800194c <HAL_RCC_OscConfig+0x4d8>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6713      	str	r3, [r2, #112]	; 0x70
 8001762:	e01c      	b.n	800179e <HAL_RCC_OscConfig+0x32a>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	2b05      	cmp	r3, #5
 800176a:	d10c      	bne.n	8001786 <HAL_RCC_OscConfig+0x312>
 800176c:	4b77      	ldr	r3, [pc, #476]	; (800194c <HAL_RCC_OscConfig+0x4d8>)
 800176e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001770:	4a76      	ldr	r2, [pc, #472]	; (800194c <HAL_RCC_OscConfig+0x4d8>)
 8001772:	f043 0304 	orr.w	r3, r3, #4
 8001776:	6713      	str	r3, [r2, #112]	; 0x70
 8001778:	4b74      	ldr	r3, [pc, #464]	; (800194c <HAL_RCC_OscConfig+0x4d8>)
 800177a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800177c:	4a73      	ldr	r2, [pc, #460]	; (800194c <HAL_RCC_OscConfig+0x4d8>)
 800177e:	f043 0301 	orr.w	r3, r3, #1
 8001782:	6713      	str	r3, [r2, #112]	; 0x70
 8001784:	e00b      	b.n	800179e <HAL_RCC_OscConfig+0x32a>
 8001786:	4b71      	ldr	r3, [pc, #452]	; (800194c <HAL_RCC_OscConfig+0x4d8>)
 8001788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800178a:	4a70      	ldr	r2, [pc, #448]	; (800194c <HAL_RCC_OscConfig+0x4d8>)
 800178c:	f023 0301 	bic.w	r3, r3, #1
 8001790:	6713      	str	r3, [r2, #112]	; 0x70
 8001792:	4b6e      	ldr	r3, [pc, #440]	; (800194c <HAL_RCC_OscConfig+0x4d8>)
 8001794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001796:	4a6d      	ldr	r2, [pc, #436]	; (800194c <HAL_RCC_OscConfig+0x4d8>)
 8001798:	f023 0304 	bic.w	r3, r3, #4
 800179c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d015      	beq.n	80017d2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a6:	f7ff fb31 	bl	8000e0c <HAL_GetTick>
 80017aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ac:	e00a      	b.n	80017c4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017ae:	f7ff fb2d 	bl	8000e0c <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017bc:	4293      	cmp	r3, r2
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e0bc      	b.n	800193e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017c4:	4b61      	ldr	r3, [pc, #388]	; (800194c <HAL_RCC_OscConfig+0x4d8>)
 80017c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d0ee      	beq.n	80017ae <HAL_RCC_OscConfig+0x33a>
 80017d0:	e014      	b.n	80017fc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d2:	f7ff fb1b 	bl	8000e0c <HAL_GetTick>
 80017d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017d8:	e00a      	b.n	80017f0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017da:	f7ff fb17 	bl	8000e0c <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e0a6      	b.n	800193e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017f0:	4b56      	ldr	r3, [pc, #344]	; (800194c <HAL_RCC_OscConfig+0x4d8>)
 80017f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d1ee      	bne.n	80017da <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017fc:	7dfb      	ldrb	r3, [r7, #23]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d105      	bne.n	800180e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001802:	4b52      	ldr	r3, [pc, #328]	; (800194c <HAL_RCC_OscConfig+0x4d8>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	4a51      	ldr	r2, [pc, #324]	; (800194c <HAL_RCC_OscConfig+0x4d8>)
 8001808:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800180c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	2b00      	cmp	r3, #0
 8001814:	f000 8092 	beq.w	800193c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001818:	4b4c      	ldr	r3, [pc, #304]	; (800194c <HAL_RCC_OscConfig+0x4d8>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f003 030c 	and.w	r3, r3, #12
 8001820:	2b08      	cmp	r3, #8
 8001822:	d05c      	beq.n	80018de <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	2b02      	cmp	r3, #2
 800182a:	d141      	bne.n	80018b0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800182c:	4b48      	ldr	r3, [pc, #288]	; (8001950 <HAL_RCC_OscConfig+0x4dc>)
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001832:	f7ff faeb 	bl	8000e0c <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800183a:	f7ff fae7 	bl	8000e0c <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e078      	b.n	800193e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800184c:	4b3f      	ldr	r3, [pc, #252]	; (800194c <HAL_RCC_OscConfig+0x4d8>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1f0      	bne.n	800183a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	69da      	ldr	r2, [r3, #28]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a1b      	ldr	r3, [r3, #32]
 8001860:	431a      	orrs	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001866:	019b      	lsls	r3, r3, #6
 8001868:	431a      	orrs	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186e:	085b      	lsrs	r3, r3, #1
 8001870:	3b01      	subs	r3, #1
 8001872:	041b      	lsls	r3, r3, #16
 8001874:	431a      	orrs	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187a:	061b      	lsls	r3, r3, #24
 800187c:	4933      	ldr	r1, [pc, #204]	; (800194c <HAL_RCC_OscConfig+0x4d8>)
 800187e:	4313      	orrs	r3, r2
 8001880:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001882:	4b33      	ldr	r3, [pc, #204]	; (8001950 <HAL_RCC_OscConfig+0x4dc>)
 8001884:	2201      	movs	r2, #1
 8001886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001888:	f7ff fac0 	bl	8000e0c <HAL_GetTick>
 800188c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001890:	f7ff fabc 	bl	8000e0c <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b02      	cmp	r3, #2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e04d      	b.n	800193e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018a2:	4b2a      	ldr	r3, [pc, #168]	; (800194c <HAL_RCC_OscConfig+0x4d8>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d0f0      	beq.n	8001890 <HAL_RCC_OscConfig+0x41c>
 80018ae:	e045      	b.n	800193c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018b0:	4b27      	ldr	r3, [pc, #156]	; (8001950 <HAL_RCC_OscConfig+0x4dc>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b6:	f7ff faa9 	bl	8000e0c <HAL_GetTick>
 80018ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018bc:	e008      	b.n	80018d0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018be:	f7ff faa5 	bl	8000e0c <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e036      	b.n	800193e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018d0:	4b1e      	ldr	r3, [pc, #120]	; (800194c <HAL_RCC_OscConfig+0x4d8>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1f0      	bne.n	80018be <HAL_RCC_OscConfig+0x44a>
 80018dc:	e02e      	b.n	800193c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d101      	bne.n	80018ea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e029      	b.n	800193e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018ea:	4b18      	ldr	r3, [pc, #96]	; (800194c <HAL_RCC_OscConfig+0x4d8>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	69db      	ldr	r3, [r3, #28]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d11c      	bne.n	8001938 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001908:	429a      	cmp	r2, r3
 800190a:	d115      	bne.n	8001938 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800190c:	68fa      	ldr	r2, [r7, #12]
 800190e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001912:	4013      	ands	r3, r2
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001918:	4293      	cmp	r3, r2
 800191a:	d10d      	bne.n	8001938 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001926:	429a      	cmp	r2, r3
 8001928:	d106      	bne.n	8001938 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001934:	429a      	cmp	r2, r3
 8001936:	d001      	beq.n	800193c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e000      	b.n	800193e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40007000 	.word	0x40007000
 800194c:	40023800 	.word	0x40023800
 8001950:	42470060 	.word	0x42470060

08001954 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e0cc      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001968:	4b68      	ldr	r3, [pc, #416]	; (8001b0c <HAL_RCC_ClockConfig+0x1b8>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 030f 	and.w	r3, r3, #15
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	429a      	cmp	r2, r3
 8001974:	d90c      	bls.n	8001990 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001976:	4b65      	ldr	r3, [pc, #404]	; (8001b0c <HAL_RCC_ClockConfig+0x1b8>)
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	b2d2      	uxtb	r2, r2
 800197c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800197e:	4b63      	ldr	r3, [pc, #396]	; (8001b0c <HAL_RCC_ClockConfig+0x1b8>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 030f 	and.w	r3, r3, #15
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	429a      	cmp	r2, r3
 800198a:	d001      	beq.n	8001990 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e0b8      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d020      	beq.n	80019de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d005      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019a8:	4b59      	ldr	r3, [pc, #356]	; (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	4a58      	ldr	r2, [pc, #352]	; (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 80019ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0308 	and.w	r3, r3, #8
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d005      	beq.n	80019cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019c0:	4b53      	ldr	r3, [pc, #332]	; (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	4a52      	ldr	r2, [pc, #328]	; (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 80019c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019cc:	4b50      	ldr	r3, [pc, #320]	; (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	494d      	ldr	r1, [pc, #308]	; (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d044      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d107      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019f2:	4b47      	ldr	r3, [pc, #284]	; (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d119      	bne.n	8001a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e07f      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d003      	beq.n	8001a12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a0e:	2b03      	cmp	r3, #3
 8001a10:	d107      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a12:	4b3f      	ldr	r3, [pc, #252]	; (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d109      	bne.n	8001a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e06f      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a22:	4b3b      	ldr	r3, [pc, #236]	; (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e067      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a32:	4b37      	ldr	r3, [pc, #220]	; (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f023 0203 	bic.w	r2, r3, #3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	4934      	ldr	r1, [pc, #208]	; (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 8001a40:	4313      	orrs	r3, r2
 8001a42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a44:	f7ff f9e2 	bl	8000e0c <HAL_GetTick>
 8001a48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a4a:	e00a      	b.n	8001a62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a4c:	f7ff f9de 	bl	8000e0c <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e04f      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a62:	4b2b      	ldr	r3, [pc, #172]	; (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 020c 	and.w	r2, r3, #12
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d1eb      	bne.n	8001a4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a74:	4b25      	ldr	r3, [pc, #148]	; (8001b0c <HAL_RCC_ClockConfig+0x1b8>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 030f 	and.w	r3, r3, #15
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d20c      	bcs.n	8001a9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a82:	4b22      	ldr	r3, [pc, #136]	; (8001b0c <HAL_RCC_ClockConfig+0x1b8>)
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a8a:	4b20      	ldr	r3, [pc, #128]	; (8001b0c <HAL_RCC_ClockConfig+0x1b8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 030f 	and.w	r3, r3, #15
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d001      	beq.n	8001a9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e032      	b.n	8001b02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0304 	and.w	r3, r3, #4
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d008      	beq.n	8001aba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aa8:	4b19      	ldr	r3, [pc, #100]	; (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	4916      	ldr	r1, [pc, #88]	; (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0308 	and.w	r3, r3, #8
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d009      	beq.n	8001ada <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ac6:	4b12      	ldr	r3, [pc, #72]	; (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	490e      	ldr	r1, [pc, #56]	; (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ada:	f000 f821 	bl	8001b20 <HAL_RCC_GetSysClockFreq>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	091b      	lsrs	r3, r3, #4
 8001ae6:	f003 030f 	and.w	r3, r3, #15
 8001aea:	490a      	ldr	r1, [pc, #40]	; (8001b14 <HAL_RCC_ClockConfig+0x1c0>)
 8001aec:	5ccb      	ldrb	r3, [r1, r3]
 8001aee:	fa22 f303 	lsr.w	r3, r2, r3
 8001af2:	4a09      	ldr	r2, [pc, #36]	; (8001b18 <HAL_RCC_ClockConfig+0x1c4>)
 8001af4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001af6:	4b09      	ldr	r3, [pc, #36]	; (8001b1c <HAL_RCC_ClockConfig+0x1c8>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff f942 	bl	8000d84 <HAL_InitTick>

  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40023c00 	.word	0x40023c00
 8001b10:	40023800 	.word	0x40023800
 8001b14:	080040cc 	.word	0x080040cc
 8001b18:	20000000 	.word	0x20000000
 8001b1c:	20000004 	.word	0x20000004

08001b20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b20:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b24:	b084      	sub	sp, #16
 8001b26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	607b      	str	r3, [r7, #4]
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	2300      	movs	r3, #0
 8001b32:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001b34:	2300      	movs	r3, #0
 8001b36:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b38:	4b67      	ldr	r3, [pc, #412]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f003 030c 	and.w	r3, r3, #12
 8001b40:	2b08      	cmp	r3, #8
 8001b42:	d00d      	beq.n	8001b60 <HAL_RCC_GetSysClockFreq+0x40>
 8001b44:	2b08      	cmp	r3, #8
 8001b46:	f200 80bd 	bhi.w	8001cc4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d002      	beq.n	8001b54 <HAL_RCC_GetSysClockFreq+0x34>
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	d003      	beq.n	8001b5a <HAL_RCC_GetSysClockFreq+0x3a>
 8001b52:	e0b7      	b.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b54:	4b61      	ldr	r3, [pc, #388]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001b56:	60bb      	str	r3, [r7, #8]
       break;
 8001b58:	e0b7      	b.n	8001cca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b5a:	4b61      	ldr	r3, [pc, #388]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001b5c:	60bb      	str	r3, [r7, #8]
      break;
 8001b5e:	e0b4      	b.n	8001cca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b60:	4b5d      	ldr	r3, [pc, #372]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b68:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b6a:	4b5b      	ldr	r3, [pc, #364]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d04d      	beq.n	8001c12 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b76:	4b58      	ldr	r3, [pc, #352]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	099b      	lsrs	r3, r3, #6
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	f04f 0300 	mov.w	r3, #0
 8001b82:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b86:	f04f 0100 	mov.w	r1, #0
 8001b8a:	ea02 0800 	and.w	r8, r2, r0
 8001b8e:	ea03 0901 	and.w	r9, r3, r1
 8001b92:	4640      	mov	r0, r8
 8001b94:	4649      	mov	r1, r9
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	f04f 0300 	mov.w	r3, #0
 8001b9e:	014b      	lsls	r3, r1, #5
 8001ba0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ba4:	0142      	lsls	r2, r0, #5
 8001ba6:	4610      	mov	r0, r2
 8001ba8:	4619      	mov	r1, r3
 8001baa:	ebb0 0008 	subs.w	r0, r0, r8
 8001bae:	eb61 0109 	sbc.w	r1, r1, r9
 8001bb2:	f04f 0200 	mov.w	r2, #0
 8001bb6:	f04f 0300 	mov.w	r3, #0
 8001bba:	018b      	lsls	r3, r1, #6
 8001bbc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001bc0:	0182      	lsls	r2, r0, #6
 8001bc2:	1a12      	subs	r2, r2, r0
 8001bc4:	eb63 0301 	sbc.w	r3, r3, r1
 8001bc8:	f04f 0000 	mov.w	r0, #0
 8001bcc:	f04f 0100 	mov.w	r1, #0
 8001bd0:	00d9      	lsls	r1, r3, #3
 8001bd2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001bd6:	00d0      	lsls	r0, r2, #3
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	eb12 0208 	adds.w	r2, r2, r8
 8001be0:	eb43 0309 	adc.w	r3, r3, r9
 8001be4:	f04f 0000 	mov.w	r0, #0
 8001be8:	f04f 0100 	mov.w	r1, #0
 8001bec:	0259      	lsls	r1, r3, #9
 8001bee:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001bf2:	0250      	lsls	r0, r2, #9
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	4610      	mov	r0, r2
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	f04f 0300 	mov.w	r3, #0
 8001c04:	f7fe fb3c 	bl	8000280 <__aeabi_uldivmod>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	e04a      	b.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c12:	4b31      	ldr	r3, [pc, #196]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	099b      	lsrs	r3, r3, #6
 8001c18:	461a      	mov	r2, r3
 8001c1a:	f04f 0300 	mov.w	r3, #0
 8001c1e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c22:	f04f 0100 	mov.w	r1, #0
 8001c26:	ea02 0400 	and.w	r4, r2, r0
 8001c2a:	ea03 0501 	and.w	r5, r3, r1
 8001c2e:	4620      	mov	r0, r4
 8001c30:	4629      	mov	r1, r5
 8001c32:	f04f 0200 	mov.w	r2, #0
 8001c36:	f04f 0300 	mov.w	r3, #0
 8001c3a:	014b      	lsls	r3, r1, #5
 8001c3c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c40:	0142      	lsls	r2, r0, #5
 8001c42:	4610      	mov	r0, r2
 8001c44:	4619      	mov	r1, r3
 8001c46:	1b00      	subs	r0, r0, r4
 8001c48:	eb61 0105 	sbc.w	r1, r1, r5
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	f04f 0300 	mov.w	r3, #0
 8001c54:	018b      	lsls	r3, r1, #6
 8001c56:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c5a:	0182      	lsls	r2, r0, #6
 8001c5c:	1a12      	subs	r2, r2, r0
 8001c5e:	eb63 0301 	sbc.w	r3, r3, r1
 8001c62:	f04f 0000 	mov.w	r0, #0
 8001c66:	f04f 0100 	mov.w	r1, #0
 8001c6a:	00d9      	lsls	r1, r3, #3
 8001c6c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c70:	00d0      	lsls	r0, r2, #3
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	1912      	adds	r2, r2, r4
 8001c78:	eb45 0303 	adc.w	r3, r5, r3
 8001c7c:	f04f 0000 	mov.w	r0, #0
 8001c80:	f04f 0100 	mov.w	r1, #0
 8001c84:	0299      	lsls	r1, r3, #10
 8001c86:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001c8a:	0290      	lsls	r0, r2, #10
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	4610      	mov	r0, r2
 8001c92:	4619      	mov	r1, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	461a      	mov	r2, r3
 8001c98:	f04f 0300 	mov.w	r3, #0
 8001c9c:	f7fe faf0 	bl	8000280 <__aeabi_uldivmod>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ca8:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	0c1b      	lsrs	r3, r3, #16
 8001cae:	f003 0303 	and.w	r3, r3, #3
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc0:	60bb      	str	r3, [r7, #8]
      break;
 8001cc2:	e002      	b.n	8001cca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cc4:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001cc6:	60bb      	str	r3, [r7, #8]
      break;
 8001cc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cca:	68bb      	ldr	r3, [r7, #8]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	00f42400 	.word	0x00f42400
 8001ce0:	007a1200 	.word	0x007a1200

08001ce4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ce8:	4b03      	ldr	r3, [pc, #12]	; (8001cf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cea:	681b      	ldr	r3, [r3, #0]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	20000000 	.word	0x20000000

08001cfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d00:	f7ff fff0 	bl	8001ce4 <HAL_RCC_GetHCLKFreq>
 8001d04:	4602      	mov	r2, r0
 8001d06:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	0a9b      	lsrs	r3, r3, #10
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	4903      	ldr	r1, [pc, #12]	; (8001d20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d12:	5ccb      	ldrb	r3, [r1, r3]
 8001d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	080040dc 	.word	0x080040dc

08001d24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d28:	f7ff ffdc 	bl	8001ce4 <HAL_RCC_GetHCLKFreq>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	0b5b      	lsrs	r3, r3, #13
 8001d34:	f003 0307 	and.w	r3, r3, #7
 8001d38:	4903      	ldr	r1, [pc, #12]	; (8001d48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d3a:	5ccb      	ldrb	r3, [r1, r3]
 8001d3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40023800 	.word	0x40023800
 8001d48:	080040dc 	.word	0x080040dc

08001d4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e01d      	b.n	8001d9a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d106      	bne.n	8001d78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7fe fee8 	bl	8000b48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3304      	adds	r3, #4
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4610      	mov	r0, r2
 8001d8c:	f000 f9fa 	bl	8002184 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d101      	bne.n	8001db4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e01d      	b.n	8001df0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d106      	bne.n	8001dce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f000 f815 	bl	8001df8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	3304      	adds	r3, #4
 8001dde:	4619      	mov	r1, r3
 8001de0:	4610      	mov	r0, r2
 8001de2:	f000 f9cf 	bl	8002184 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2201      	movs	r2, #1
 8001dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	6839      	ldr	r1, [r7, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f000 fc56 	bl	80026d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a10      	ldr	r2, [pc, #64]	; (8001e6c <HAL_TIM_PWM_Start+0x60>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d107      	bne.n	8001e3e <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e3c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f003 0307 	and.w	r3, r3, #7
 8001e48:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2b06      	cmp	r3, #6
 8001e4e:	d007      	beq.n	8001e60 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f042 0201 	orr.w	r2, r2, #1
 8001e5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40010000 	.word	0x40010000

08001e70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d101      	bne.n	8001e8a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001e86:	2302      	movs	r3, #2
 8001e88:	e0b4      	b.n	8001ff4 <HAL_TIM_PWM_ConfigChannel+0x184>
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2202      	movs	r2, #2
 8001e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2b0c      	cmp	r3, #12
 8001e9e:	f200 809f 	bhi.w	8001fe0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8001ea2:	a201      	add	r2, pc, #4	; (adr r2, 8001ea8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ea8:	08001edd 	.word	0x08001edd
 8001eac:	08001fe1 	.word	0x08001fe1
 8001eb0:	08001fe1 	.word	0x08001fe1
 8001eb4:	08001fe1 	.word	0x08001fe1
 8001eb8:	08001f1d 	.word	0x08001f1d
 8001ebc:	08001fe1 	.word	0x08001fe1
 8001ec0:	08001fe1 	.word	0x08001fe1
 8001ec4:	08001fe1 	.word	0x08001fe1
 8001ec8:	08001f5f 	.word	0x08001f5f
 8001ecc:	08001fe1 	.word	0x08001fe1
 8001ed0:	08001fe1 	.word	0x08001fe1
 8001ed4:	08001fe1 	.word	0x08001fe1
 8001ed8:	08001f9f 	.word	0x08001f9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68b9      	ldr	r1, [r7, #8]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f000 f9ce 	bl	8002284 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	699a      	ldr	r2, [r3, #24]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f042 0208 	orr.w	r2, r2, #8
 8001ef6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	699a      	ldr	r2, [r3, #24]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 0204 	bic.w	r2, r2, #4
 8001f06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6999      	ldr	r1, [r3, #24]
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	691a      	ldr	r2, [r3, #16]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	619a      	str	r2, [r3, #24]
      break;
 8001f1a:	e062      	b.n	8001fe2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68b9      	ldr	r1, [r7, #8]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f000 fa14 	bl	8002350 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	699a      	ldr	r2, [r3, #24]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	699a      	ldr	r2, [r3, #24]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6999      	ldr	r1, [r3, #24]
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	021a      	lsls	r2, r3, #8
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	619a      	str	r2, [r3, #24]
      break;
 8001f5c:	e041      	b.n	8001fe2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68b9      	ldr	r1, [r7, #8]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f000 fa5f 	bl	8002428 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	69da      	ldr	r2, [r3, #28]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f042 0208 	orr.w	r2, r2, #8
 8001f78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	69da      	ldr	r2, [r3, #28]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f022 0204 	bic.w	r2, r2, #4
 8001f88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	69d9      	ldr	r1, [r3, #28]
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	691a      	ldr	r2, [r3, #16]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	61da      	str	r2, [r3, #28]
      break;
 8001f9c:	e021      	b.n	8001fe2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68b9      	ldr	r1, [r7, #8]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f000 faa9 	bl	80024fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	69da      	ldr	r2, [r3, #28]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	69da      	ldr	r2, [r3, #28]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	69d9      	ldr	r1, [r3, #28]
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	021a      	lsls	r2, r3, #8
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	61da      	str	r2, [r3, #28]
      break;
 8001fde:	e000      	b.n	8001fe2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8001fe0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3710      	adds	r7, #16
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800200c:	2b01      	cmp	r3, #1
 800200e:	d101      	bne.n	8002014 <HAL_TIM_ConfigClockSource+0x18>
 8002010:	2302      	movs	r3, #2
 8002012:	e0b3      	b.n	800217c <HAL_TIM_ConfigClockSource+0x180>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2202      	movs	r2, #2
 8002020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002032:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800203a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800204c:	d03e      	beq.n	80020cc <HAL_TIM_ConfigClockSource+0xd0>
 800204e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002052:	f200 8087 	bhi.w	8002164 <HAL_TIM_ConfigClockSource+0x168>
 8002056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800205a:	f000 8085 	beq.w	8002168 <HAL_TIM_ConfigClockSource+0x16c>
 800205e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002062:	d87f      	bhi.n	8002164 <HAL_TIM_ConfigClockSource+0x168>
 8002064:	2b70      	cmp	r3, #112	; 0x70
 8002066:	d01a      	beq.n	800209e <HAL_TIM_ConfigClockSource+0xa2>
 8002068:	2b70      	cmp	r3, #112	; 0x70
 800206a:	d87b      	bhi.n	8002164 <HAL_TIM_ConfigClockSource+0x168>
 800206c:	2b60      	cmp	r3, #96	; 0x60
 800206e:	d050      	beq.n	8002112 <HAL_TIM_ConfigClockSource+0x116>
 8002070:	2b60      	cmp	r3, #96	; 0x60
 8002072:	d877      	bhi.n	8002164 <HAL_TIM_ConfigClockSource+0x168>
 8002074:	2b50      	cmp	r3, #80	; 0x50
 8002076:	d03c      	beq.n	80020f2 <HAL_TIM_ConfigClockSource+0xf6>
 8002078:	2b50      	cmp	r3, #80	; 0x50
 800207a:	d873      	bhi.n	8002164 <HAL_TIM_ConfigClockSource+0x168>
 800207c:	2b40      	cmp	r3, #64	; 0x40
 800207e:	d058      	beq.n	8002132 <HAL_TIM_ConfigClockSource+0x136>
 8002080:	2b40      	cmp	r3, #64	; 0x40
 8002082:	d86f      	bhi.n	8002164 <HAL_TIM_ConfigClockSource+0x168>
 8002084:	2b30      	cmp	r3, #48	; 0x30
 8002086:	d064      	beq.n	8002152 <HAL_TIM_ConfigClockSource+0x156>
 8002088:	2b30      	cmp	r3, #48	; 0x30
 800208a:	d86b      	bhi.n	8002164 <HAL_TIM_ConfigClockSource+0x168>
 800208c:	2b20      	cmp	r3, #32
 800208e:	d060      	beq.n	8002152 <HAL_TIM_ConfigClockSource+0x156>
 8002090:	2b20      	cmp	r3, #32
 8002092:	d867      	bhi.n	8002164 <HAL_TIM_ConfigClockSource+0x168>
 8002094:	2b00      	cmp	r3, #0
 8002096:	d05c      	beq.n	8002152 <HAL_TIM_ConfigClockSource+0x156>
 8002098:	2b10      	cmp	r3, #16
 800209a:	d05a      	beq.n	8002152 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800209c:	e062      	b.n	8002164 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6818      	ldr	r0, [r3, #0]
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	6899      	ldr	r1, [r3, #8]
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685a      	ldr	r2, [r3, #4]
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	f000 faef 	bl	8002690 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80020c0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	609a      	str	r2, [r3, #8]
      break;
 80020ca:	e04e      	b.n	800216a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6818      	ldr	r0, [r3, #0]
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	6899      	ldr	r1, [r3, #8]
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685a      	ldr	r2, [r3, #4]
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	f000 fad8 	bl	8002690 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020ee:	609a      	str	r2, [r3, #8]
      break;
 80020f0:	e03b      	b.n	800216a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6818      	ldr	r0, [r3, #0]
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	6859      	ldr	r1, [r3, #4]
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	461a      	mov	r2, r3
 8002100:	f000 fa4c 	bl	800259c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2150      	movs	r1, #80	; 0x50
 800210a:	4618      	mov	r0, r3
 800210c:	f000 faa5 	bl	800265a <TIM_ITRx_SetConfig>
      break;
 8002110:	e02b      	b.n	800216a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6818      	ldr	r0, [r3, #0]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	6859      	ldr	r1, [r3, #4]
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	461a      	mov	r2, r3
 8002120:	f000 fa6b 	bl	80025fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2160      	movs	r1, #96	; 0x60
 800212a:	4618      	mov	r0, r3
 800212c:	f000 fa95 	bl	800265a <TIM_ITRx_SetConfig>
      break;
 8002130:	e01b      	b.n	800216a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6818      	ldr	r0, [r3, #0]
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	6859      	ldr	r1, [r3, #4]
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	461a      	mov	r2, r3
 8002140:	f000 fa2c 	bl	800259c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2140      	movs	r1, #64	; 0x40
 800214a:	4618      	mov	r0, r3
 800214c:	f000 fa85 	bl	800265a <TIM_ITRx_SetConfig>
      break;
 8002150:	e00b      	b.n	800216a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4619      	mov	r1, r3
 800215c:	4610      	mov	r0, r2
 800215e:	f000 fa7c 	bl	800265a <TIM_ITRx_SetConfig>
      break;
 8002162:	e002      	b.n	800216a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002164:	bf00      	nop
 8002166:	e000      	b.n	800216a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002168:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2201      	movs	r2, #1
 800216e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a34      	ldr	r2, [pc, #208]	; (8002268 <TIM_Base_SetConfig+0xe4>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d00f      	beq.n	80021bc <TIM_Base_SetConfig+0x38>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021a2:	d00b      	beq.n	80021bc <TIM_Base_SetConfig+0x38>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4a31      	ldr	r2, [pc, #196]	; (800226c <TIM_Base_SetConfig+0xe8>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d007      	beq.n	80021bc <TIM_Base_SetConfig+0x38>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a30      	ldr	r2, [pc, #192]	; (8002270 <TIM_Base_SetConfig+0xec>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d003      	beq.n	80021bc <TIM_Base_SetConfig+0x38>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a2f      	ldr	r2, [pc, #188]	; (8002274 <TIM_Base_SetConfig+0xf0>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d108      	bne.n	80021ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a25      	ldr	r2, [pc, #148]	; (8002268 <TIM_Base_SetConfig+0xe4>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d01b      	beq.n	800220e <TIM_Base_SetConfig+0x8a>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021dc:	d017      	beq.n	800220e <TIM_Base_SetConfig+0x8a>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a22      	ldr	r2, [pc, #136]	; (800226c <TIM_Base_SetConfig+0xe8>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d013      	beq.n	800220e <TIM_Base_SetConfig+0x8a>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a21      	ldr	r2, [pc, #132]	; (8002270 <TIM_Base_SetConfig+0xec>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d00f      	beq.n	800220e <TIM_Base_SetConfig+0x8a>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a20      	ldr	r2, [pc, #128]	; (8002274 <TIM_Base_SetConfig+0xf0>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d00b      	beq.n	800220e <TIM_Base_SetConfig+0x8a>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a1f      	ldr	r2, [pc, #124]	; (8002278 <TIM_Base_SetConfig+0xf4>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d007      	beq.n	800220e <TIM_Base_SetConfig+0x8a>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a1e      	ldr	r2, [pc, #120]	; (800227c <TIM_Base_SetConfig+0xf8>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d003      	beq.n	800220e <TIM_Base_SetConfig+0x8a>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a1d      	ldr	r2, [pc, #116]	; (8002280 <TIM_Base_SetConfig+0xfc>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d108      	bne.n	8002220 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002214:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	4313      	orrs	r3, r2
 800221e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	4313      	orrs	r3, r2
 800222c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4a08      	ldr	r2, [pc, #32]	; (8002268 <TIM_Base_SetConfig+0xe4>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d103      	bne.n	8002254 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	691a      	ldr	r2, [r3, #16]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	615a      	str	r2, [r3, #20]
}
 800225a:	bf00      	nop
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	40010000 	.word	0x40010000
 800226c:	40000400 	.word	0x40000400
 8002270:	40000800 	.word	0x40000800
 8002274:	40000c00 	.word	0x40000c00
 8002278:	40014000 	.word	0x40014000
 800227c:	40014400 	.word	0x40014400
 8002280:	40014800 	.word	0x40014800

08002284 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002284:	b480      	push	{r7}
 8002286:	b087      	sub	sp, #28
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	f023 0201 	bic.w	r2, r3, #1
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f023 0303 	bic.w	r3, r3, #3
 80022ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	f023 0302 	bic.w	r3, r3, #2
 80022cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4a1c      	ldr	r2, [pc, #112]	; (800234c <TIM_OC1_SetConfig+0xc8>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d10c      	bne.n	80022fa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	f023 0308 	bic.w	r3, r3, #8
 80022e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	f023 0304 	bic.w	r3, r3, #4
 80022f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a13      	ldr	r2, [pc, #76]	; (800234c <TIM_OC1_SetConfig+0xc8>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d111      	bne.n	8002326 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002308:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002310:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	4313      	orrs	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	4313      	orrs	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685a      	ldr	r2, [r3, #4]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	697a      	ldr	r2, [r7, #20]
 800233e:	621a      	str	r2, [r3, #32]
}
 8002340:	bf00      	nop
 8002342:	371c      	adds	r7, #28
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	40010000 	.word	0x40010000

08002350 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002350:	b480      	push	{r7}
 8002352:	b087      	sub	sp, #28
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	f023 0210 	bic.w	r2, r3, #16
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800237e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002386:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	021b      	lsls	r3, r3, #8
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	4313      	orrs	r3, r2
 8002392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	f023 0320 	bic.w	r3, r3, #32
 800239a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	011b      	lsls	r3, r3, #4
 80023a2:	697a      	ldr	r2, [r7, #20]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a1e      	ldr	r2, [pc, #120]	; (8002424 <TIM_OC2_SetConfig+0xd4>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d10d      	bne.n	80023cc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	011b      	lsls	r3, r3, #4
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a15      	ldr	r2, [pc, #84]	; (8002424 <TIM_OC2_SetConfig+0xd4>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d113      	bne.n	80023fc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80023e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	695b      	ldr	r3, [r3, #20]
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685a      	ldr	r2, [r3, #4]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	621a      	str	r2, [r3, #32]
}
 8002416:	bf00      	nop
 8002418:	371c      	adds	r7, #28
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	40010000 	.word	0x40010000

08002428 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002428:	b480      	push	{r7}
 800242a:	b087      	sub	sp, #28
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a1b      	ldr	r3, [r3, #32]
 8002442:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f023 0303 	bic.w	r3, r3, #3
 800245e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	4313      	orrs	r3, r2
 8002468:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002470:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	021b      	lsls	r3, r3, #8
 8002478:	697a      	ldr	r2, [r7, #20]
 800247a:	4313      	orrs	r3, r2
 800247c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a1d      	ldr	r2, [pc, #116]	; (80024f8 <TIM_OC3_SetConfig+0xd0>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d10d      	bne.n	80024a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800248c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	021b      	lsls	r3, r3, #8
 8002494:	697a      	ldr	r2, [r7, #20]
 8002496:	4313      	orrs	r3, r2
 8002498:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80024a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a14      	ldr	r2, [pc, #80]	; (80024f8 <TIM_OC3_SetConfig+0xd0>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d113      	bne.n	80024d2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80024b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80024b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	011b      	lsls	r3, r3, #4
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	011b      	lsls	r3, r3, #4
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	621a      	str	r2, [r3, #32]
}
 80024ec:	bf00      	nop
 80024ee:	371c      	adds	r7, #28
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr
 80024f8:	40010000 	.word	0x40010000

080024fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b087      	sub	sp, #28
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800252a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002532:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	021b      	lsls	r3, r3, #8
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	4313      	orrs	r3, r2
 800253e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002546:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	031b      	lsls	r3, r3, #12
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	4313      	orrs	r3, r2
 8002552:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a10      	ldr	r2, [pc, #64]	; (8002598 <TIM_OC4_SetConfig+0x9c>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d109      	bne.n	8002570 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002562:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	695b      	ldr	r3, [r3, #20]
 8002568:	019b      	lsls	r3, r3, #6
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	4313      	orrs	r3, r2
 800256e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	621a      	str	r2, [r3, #32]
}
 800258a:	bf00      	nop
 800258c:	371c      	adds	r7, #28
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	40010000 	.word	0x40010000

0800259c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800259c:	b480      	push	{r7}
 800259e:	b087      	sub	sp, #28
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6a1b      	ldr	r3, [r3, #32]
 80025ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	f023 0201 	bic.w	r2, r3, #1
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	011b      	lsls	r3, r3, #4
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	f023 030a 	bic.w	r3, r3, #10
 80025d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	4313      	orrs	r3, r2
 80025e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	621a      	str	r2, [r3, #32]
}
 80025ee:	bf00      	nop
 80025f0:	371c      	adds	r7, #28
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b087      	sub	sp, #28
 80025fe:	af00      	add	r7, sp, #0
 8002600:	60f8      	str	r0, [r7, #12]
 8002602:	60b9      	str	r1, [r7, #8]
 8002604:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	f023 0210 	bic.w	r2, r3, #16
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002624:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	031b      	lsls	r3, r3, #12
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	4313      	orrs	r3, r2
 800262e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002636:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	011b      	lsls	r3, r3, #4
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	4313      	orrs	r3, r2
 8002640:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	697a      	ldr	r2, [r7, #20]
 8002646:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	621a      	str	r2, [r3, #32]
}
 800264e:	bf00      	nop
 8002650:	371c      	adds	r7, #28
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800265a:	b480      	push	{r7}
 800265c:	b085      	sub	sp, #20
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
 8002662:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002670:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	4313      	orrs	r3, r2
 8002678:	f043 0307 	orr.w	r3, r3, #7
 800267c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	609a      	str	r2, [r3, #8]
}
 8002684:	bf00      	nop
 8002686:	3714      	adds	r7, #20
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002690:	b480      	push	{r7}
 8002692:	b087      	sub	sp, #28
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
 800269c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	021a      	lsls	r2, r3, #8
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	431a      	orrs	r2, r3
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	697a      	ldr	r2, [r7, #20]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	609a      	str	r2, [r3, #8]
}
 80026c4:	bf00      	nop
 80026c6:	371c      	adds	r7, #28
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b087      	sub	sp, #28
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	f003 031f 	and.w	r3, r3, #31
 80026e2:	2201      	movs	r2, #1
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6a1a      	ldr	r2, [r3, #32]
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	43db      	mvns	r3, r3
 80026f2:	401a      	ands	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6a1a      	ldr	r2, [r3, #32]
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	f003 031f 	and.w	r3, r3, #31
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	fa01 f303 	lsl.w	r3, r1, r3
 8002708:	431a      	orrs	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	621a      	str	r2, [r3, #32]
}
 800270e:	bf00      	nop
 8002710:	371c      	adds	r7, #28
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
	...

0800271c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800272c:	2b01      	cmp	r3, #1
 800272e:	d101      	bne.n	8002734 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002730:	2302      	movs	r3, #2
 8002732:	e050      	b.n	80027d6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2202      	movs	r2, #2
 8002740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800275a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	4313      	orrs	r3, r2
 8002764:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a1c      	ldr	r2, [pc, #112]	; (80027e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d018      	beq.n	80027aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002780:	d013      	beq.n	80027aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a18      	ldr	r2, [pc, #96]	; (80027e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d00e      	beq.n	80027aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a16      	ldr	r2, [pc, #88]	; (80027ec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d009      	beq.n	80027aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a15      	ldr	r2, [pc, #84]	; (80027f0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d004      	beq.n	80027aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a13      	ldr	r2, [pc, #76]	; (80027f4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d10c      	bne.n	80027c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68ba      	ldr	r2, [r7, #8]
 80027c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3714      	adds	r7, #20
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	40010000 	.word	0x40010000
 80027e8:	40000400 	.word	0x40000400
 80027ec:	40000800 	.word	0x40000800
 80027f0:	40000c00 	.word	0x40000c00
 80027f4:	40014000 	.word	0x40014000

080027f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e03f      	b.n	800288a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d106      	bne.n	8002824 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f7fe fa14 	bl	8000c4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2224      	movs	r2, #36	; 0x24
 8002828:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68da      	ldr	r2, [r3, #12]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800283a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f000 fbf1 	bl	8003024 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	691a      	ldr	r2, [r3, #16]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002850:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	695a      	ldr	r2, [r3, #20]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002860:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68da      	ldr	r2, [r3, #12]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002870:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2220      	movs	r2, #32
 800287c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2220      	movs	r2, #32
 8002884:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b088      	sub	sp, #32
 8002896:	af02      	add	r7, sp, #8
 8002898:	60f8      	str	r0, [r7, #12]
 800289a:	60b9      	str	r1, [r7, #8]
 800289c:	603b      	str	r3, [r7, #0]
 800289e:	4613      	mov	r3, r2
 80028a0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80028a2:	2300      	movs	r3, #0
 80028a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b20      	cmp	r3, #32
 80028b0:	f040 8083 	bne.w	80029ba <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d002      	beq.n	80028c0 <HAL_UART_Transmit+0x2e>
 80028ba:	88fb      	ldrh	r3, [r7, #6]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d101      	bne.n	80028c4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e07b      	b.n	80029bc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d101      	bne.n	80028d2 <HAL_UART_Transmit+0x40>
 80028ce:	2302      	movs	r3, #2
 80028d0:	e074      	b.n	80029bc <HAL_UART_Transmit+0x12a>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2221      	movs	r2, #33	; 0x21
 80028e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80028e8:	f7fe fa90 	bl	8000e0c <HAL_GetTick>
 80028ec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	88fa      	ldrh	r2, [r7, #6]
 80028f2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	88fa      	ldrh	r2, [r7, #6]
 80028f8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002902:	e042      	b.n	800298a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002908:	b29b      	uxth	r3, r3
 800290a:	3b01      	subs	r3, #1
 800290c:	b29a      	uxth	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800291a:	d122      	bne.n	8002962 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	9300      	str	r3, [sp, #0]
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	2200      	movs	r2, #0
 8002924:	2180      	movs	r1, #128	; 0x80
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f000 fa10 	bl	8002d4c <UART_WaitOnFlagUntilTimeout>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e042      	b.n	80029bc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	881b      	ldrh	r3, [r3, #0]
 800293e:	461a      	mov	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002948:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d103      	bne.n	800295a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	3302      	adds	r3, #2
 8002956:	60bb      	str	r3, [r7, #8]
 8002958:	e017      	b.n	800298a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	3301      	adds	r3, #1
 800295e:	60bb      	str	r3, [r7, #8]
 8002960:	e013      	b.n	800298a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	2200      	movs	r2, #0
 800296a:	2180      	movs	r1, #128	; 0x80
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f000 f9ed 	bl	8002d4c <UART_WaitOnFlagUntilTimeout>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e01f      	b.n	80029bc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	1c5a      	adds	r2, r3, #1
 8002980:	60ba      	str	r2, [r7, #8]
 8002982:	781a      	ldrb	r2, [r3, #0]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800298e:	b29b      	uxth	r3, r3
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1b7      	bne.n	8002904 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	2200      	movs	r2, #0
 800299c:	2140      	movs	r1, #64	; 0x40
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f000 f9d4 	bl	8002d4c <UART_WaitOnFlagUntilTimeout>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e006      	b.n	80029bc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2220      	movs	r2, #32
 80029b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80029b6:	2300      	movs	r3, #0
 80029b8:	e000      	b.n	80029bc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80029ba:	2302      	movs	r3, #2
  }
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3718      	adds	r7, #24
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b088      	sub	sp, #32
 80029c8:	af02      	add	r7, sp, #8
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	603b      	str	r3, [r7, #0]
 80029d0:	4613      	mov	r3, r2
 80029d2:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80029d4:	2300      	movs	r3, #0
 80029d6:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b20      	cmp	r3, #32
 80029e2:	f040 8090 	bne.w	8002b06 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d002      	beq.n	80029f2 <HAL_UART_Receive+0x2e>
 80029ec:	88fb      	ldrh	r3, [r7, #6]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e088      	b.n	8002b08 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d101      	bne.n	8002a04 <HAL_UART_Receive+0x40>
 8002a00:	2302      	movs	r3, #2
 8002a02:	e081      	b.n	8002b08 <HAL_UART_Receive+0x144>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2222      	movs	r2, #34	; 0x22
 8002a16:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002a1a:	f7fe f9f7 	bl	8000e0c <HAL_GetTick>
 8002a1e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	88fa      	ldrh	r2, [r7, #6]
 8002a24:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	88fa      	ldrh	r2, [r7, #6]
 8002a2a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002a34:	e05c      	b.n	8002af0 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a4c:	d12b      	bne.n	8002aa6 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	2200      	movs	r2, #0
 8002a56:	2120      	movs	r1, #32
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f000 f977 	bl	8002d4c <UART_WaitOnFlagUntilTimeout>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e04f      	b.n	8002b08 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d10c      	bne.n	8002a8e <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	3302      	adds	r3, #2
 8002a8a:	60bb      	str	r3, [r7, #8]
 8002a8c:	e030      	b.n	8002af0 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	60bb      	str	r3, [r7, #8]
 8002aa4:	e024      	b.n	8002af0 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	9300      	str	r3, [sp, #0]
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	2200      	movs	r2, #0
 8002aae:	2120      	movs	r1, #32
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f000 f94b 	bl	8002d4c <UART_WaitOnFlagUntilTimeout>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e023      	b.n	8002b08 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d108      	bne.n	8002ada <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6859      	ldr	r1, [r3, #4]
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	1c5a      	adds	r2, r3, #1
 8002ad2:	60ba      	str	r2, [r7, #8]
 8002ad4:	b2ca      	uxtb	r2, r1
 8002ad6:	701a      	strb	r2, [r3, #0]
 8002ad8:	e00a      	b.n	8002af0 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	b2da      	uxtb	r2, r3
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	1c59      	adds	r1, r3, #1
 8002ae6:	60b9      	str	r1, [r7, #8]
 8002ae8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002aec:	b2d2      	uxtb	r2, r2
 8002aee:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d19d      	bne.n	8002a36 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2220      	movs	r2, #32
 8002afe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	e000      	b.n	8002b08 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8002b06:	2302      	movs	r3, #2
  }
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3718      	adds	r7, #24
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b088      	sub	sp, #32
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002b30:	2300      	movs	r3, #0
 8002b32:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002b34:	2300      	movs	r3, #0
 8002b36:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d10d      	bne.n	8002b62 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	f003 0320 	and.w	r3, r3, #32
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d008      	beq.n	8002b62 <HAL_UART_IRQHandler+0x52>
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	f003 0320 	and.w	r3, r3, #32
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 f9e0 	bl	8002f20 <UART_Receive_IT>
      return;
 8002b60:	e0d0      	b.n	8002d04 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f000 80b0 	beq.w	8002cca <HAL_UART_IRQHandler+0x1ba>
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d105      	bne.n	8002b80 <HAL_UART_IRQHandler+0x70>
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f000 80a5 	beq.w	8002cca <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00a      	beq.n	8002ba0 <HAL_UART_IRQHandler+0x90>
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d005      	beq.n	8002ba0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b98:	f043 0201 	orr.w	r2, r3, #1
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	f003 0304 	and.w	r3, r3, #4
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00a      	beq.n	8002bc0 <HAL_UART_IRQHandler+0xb0>
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d005      	beq.n	8002bc0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb8:	f043 0202 	orr.w	r2, r3, #2
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00a      	beq.n	8002be0 <HAL_UART_IRQHandler+0xd0>
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d005      	beq.n	8002be0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd8:	f043 0204 	orr.w	r2, r3, #4
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	f003 0308 	and.w	r3, r3, #8
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00f      	beq.n	8002c0a <HAL_UART_IRQHandler+0xfa>
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	f003 0320 	and.w	r3, r3, #32
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d104      	bne.n	8002bfe <HAL_UART_IRQHandler+0xee>
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d005      	beq.n	8002c0a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c02:	f043 0208 	orr.w	r2, r3, #8
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d077      	beq.n	8002d02 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	f003 0320 	and.w	r3, r3, #32
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d007      	beq.n	8002c2c <HAL_UART_IRQHandler+0x11c>
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	f003 0320 	and.w	r3, r3, #32
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d002      	beq.n	8002c2c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f97a 	bl	8002f20 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c36:	2b40      	cmp	r3, #64	; 0x40
 8002c38:	bf0c      	ite	eq
 8002c3a:	2301      	moveq	r3, #1
 8002c3c:	2300      	movne	r3, #0
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c46:	f003 0308 	and.w	r3, r3, #8
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d102      	bne.n	8002c54 <HAL_UART_IRQHandler+0x144>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d031      	beq.n	8002cb8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f000 f8c3 	bl	8002de0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c64:	2b40      	cmp	r3, #64	; 0x40
 8002c66:	d123      	bne.n	8002cb0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	695a      	ldr	r2, [r3, #20]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c76:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d013      	beq.n	8002ca8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c84:	4a21      	ldr	r2, [pc, #132]	; (8002d0c <HAL_UART_IRQHandler+0x1fc>)
 8002c86:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7fe f9fe 	bl	800108e <HAL_DMA_Abort_IT>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d016      	beq.n	8002cc6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ca2:	4610      	mov	r0, r2
 8002ca4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ca6:	e00e      	b.n	8002cc6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 f845 	bl	8002d38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cae:	e00a      	b.n	8002cc6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 f841 	bl	8002d38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cb6:	e006      	b.n	8002cc6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 f83d 	bl	8002d38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002cc4:	e01d      	b.n	8002d02 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cc6:	bf00      	nop
    return;
 8002cc8:	e01b      	b.n	8002d02 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d008      	beq.n	8002ce6 <HAL_UART_IRQHandler+0x1d6>
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 f8b0 	bl	8002e44 <UART_Transmit_IT>
    return;
 8002ce4:	e00e      	b.n	8002d04 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d009      	beq.n	8002d04 <HAL_UART_IRQHandler+0x1f4>
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d004      	beq.n	8002d04 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f8f8 	bl	8002ef0 <UART_EndTransmit_IT>
    return;
 8002d00:	e000      	b.n	8002d04 <HAL_UART_IRQHandler+0x1f4>
    return;
 8002d02:	bf00      	nop
  }
}
 8002d04:	3720      	adds	r7, #32
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	08002e1d 	.word	0x08002e1d

08002d10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	603b      	str	r3, [r7, #0]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d5c:	e02c      	b.n	8002db8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d64:	d028      	beq.n	8002db8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d007      	beq.n	8002d7c <UART_WaitOnFlagUntilTimeout+0x30>
 8002d6c:	f7fe f84e 	bl	8000e0c <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d21d      	bcs.n	8002db8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68da      	ldr	r2, [r3, #12]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002d8a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	695a      	ldr	r2, [r3, #20]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f022 0201 	bic.w	r2, r2, #1
 8002d9a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2220      	movs	r2, #32
 8002da0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2220      	movs	r2, #32
 8002da8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e00f      	b.n	8002dd8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	68ba      	ldr	r2, [r7, #8]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	bf0c      	ite	eq
 8002dc8:	2301      	moveq	r3, #1
 8002dca:	2300      	movne	r3, #0
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	461a      	mov	r2, r3
 8002dd0:	79fb      	ldrb	r3, [r7, #7]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d0c3      	beq.n	8002d5e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3710      	adds	r7, #16
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68da      	ldr	r2, [r3, #12]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002df6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	695a      	ldr	r2, [r3, #20]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f022 0201 	bic.w	r2, r2, #1
 8002e06:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e28:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f7ff ff7e 	bl	8002d38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e3c:	bf00      	nop
 8002e3e:	3710      	adds	r7, #16
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b21      	cmp	r3, #33	; 0x21
 8002e56:	d144      	bne.n	8002ee2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e60:	d11a      	bne.n	8002e98 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	881b      	ldrh	r3, [r3, #0]
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e76:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d105      	bne.n	8002e8c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	1c9a      	adds	r2, r3, #2
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	621a      	str	r2, [r3, #32]
 8002e8a:	e00e      	b.n	8002eaa <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	1c5a      	adds	r2, r3, #1
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	621a      	str	r2, [r3, #32]
 8002e96:	e008      	b.n	8002eaa <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	1c59      	adds	r1, r3, #1
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	6211      	str	r1, [r2, #32]
 8002ea2:	781a      	ldrb	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10f      	bne.n	8002ede <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68da      	ldr	r2, [r3, #12]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ecc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68da      	ldr	r2, [r3, #12]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002edc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	e000      	b.n	8002ee4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002ee2:	2302      	movs	r3, #2
  }
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3714      	adds	r7, #20
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68da      	ldr	r2, [r3, #12]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f06:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f7ff fefd 	bl	8002d10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2b22      	cmp	r3, #34	; 0x22
 8002f32:	d171      	bne.n	8003018 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f3c:	d123      	bne.n	8002f86 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f42:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d10e      	bne.n	8002f6a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f62:	1c9a      	adds	r2, r3, #2
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	629a      	str	r2, [r3, #40]	; 0x28
 8002f68:	e029      	b.n	8002fbe <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	b29a      	uxth	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7e:	1c5a      	adds	r2, r3, #1
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	629a      	str	r2, [r3, #40]	; 0x28
 8002f84:	e01b      	b.n	8002fbe <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10a      	bne.n	8002fa4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	6858      	ldr	r0, [r3, #4]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f98:	1c59      	adds	r1, r3, #1
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	6291      	str	r1, [r2, #40]	; 0x28
 8002f9e:	b2c2      	uxtb	r2, r0
 8002fa0:	701a      	strb	r2, [r3, #0]
 8002fa2:	e00c      	b.n	8002fbe <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	b2da      	uxtb	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb0:	1c58      	adds	r0, r3, #1
 8002fb2:	6879      	ldr	r1, [r7, #4]
 8002fb4:	6288      	str	r0, [r1, #40]	; 0x28
 8002fb6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002fba:	b2d2      	uxtb	r2, r2
 8002fbc:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	4619      	mov	r1, r3
 8002fcc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d120      	bne.n	8003014 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68da      	ldr	r2, [r3, #12]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f022 0220 	bic.w	r2, r2, #32
 8002fe0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68da      	ldr	r2, [r3, #12]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ff0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	695a      	ldr	r2, [r3, #20]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 0201 	bic.w	r2, r2, #1
 8003000:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2220      	movs	r2, #32
 8003006:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7ff fe8a 	bl	8002d24 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003010:	2300      	movs	r3, #0
 8003012:	e002      	b.n	800301a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003014:	2300      	movs	r3, #0
 8003016:	e000      	b.n	800301a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003018:	2302      	movs	r3, #2
  }
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
	...

08003024 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003028:	b0bd      	sub	sp, #244	; 0xf4
 800302a:	af00      	add	r7, sp, #0
 800302c:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003030:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800303c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003040:	68d9      	ldr	r1, [r3, #12]
 8003042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	ea40 0301 	orr.w	r3, r0, r1
 800304c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800304e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	431a      	orrs	r2, r3
 800305c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	431a      	orrs	r2, r3
 8003064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	4313      	orrs	r3, r2
 800306c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8003070:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800307c:	f021 010c 	bic.w	r1, r1, #12
 8003080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800308a:	430b      	orrs	r3, r1
 800308c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800308e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800309a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800309e:	6999      	ldr	r1, [r3, #24]
 80030a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	ea40 0301 	orr.w	r3, r0, r1
 80030aa:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030b6:	f040 81a5 	bne.w	8003404 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	4bcd      	ldr	r3, [pc, #820]	; (80033f8 <UART_SetConfig+0x3d4>)
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d006      	beq.n	80030d4 <UART_SetConfig+0xb0>
 80030c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	4bcb      	ldr	r3, [pc, #812]	; (80033fc <UART_SetConfig+0x3d8>)
 80030ce:	429a      	cmp	r2, r3
 80030d0:	f040 80cb 	bne.w	800326a <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80030d4:	f7fe fe26 	bl	8001d24 <HAL_RCC_GetPCLK2Freq>
 80030d8:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030dc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80030e0:	461c      	mov	r4, r3
 80030e2:	f04f 0500 	mov.w	r5, #0
 80030e6:	4622      	mov	r2, r4
 80030e8:	462b      	mov	r3, r5
 80030ea:	1891      	adds	r1, r2, r2
 80030ec:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80030f0:	415b      	adcs	r3, r3
 80030f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80030f6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80030fa:	1912      	adds	r2, r2, r4
 80030fc:	eb45 0303 	adc.w	r3, r5, r3
 8003100:	f04f 0000 	mov.w	r0, #0
 8003104:	f04f 0100 	mov.w	r1, #0
 8003108:	00d9      	lsls	r1, r3, #3
 800310a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800310e:	00d0      	lsls	r0, r2, #3
 8003110:	4602      	mov	r2, r0
 8003112:	460b      	mov	r3, r1
 8003114:	1911      	adds	r1, r2, r4
 8003116:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800311a:	416b      	adcs	r3, r5
 800311c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	461a      	mov	r2, r3
 8003128:	f04f 0300 	mov.w	r3, #0
 800312c:	1891      	adds	r1, r2, r2
 800312e:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8003132:	415b      	adcs	r3, r3
 8003134:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003138:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800313c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8003140:	f7fd f89e 	bl	8000280 <__aeabi_uldivmod>
 8003144:	4602      	mov	r2, r0
 8003146:	460b      	mov	r3, r1
 8003148:	4bad      	ldr	r3, [pc, #692]	; (8003400 <UART_SetConfig+0x3dc>)
 800314a:	fba3 2302 	umull	r2, r3, r3, r2
 800314e:	095b      	lsrs	r3, r3, #5
 8003150:	011e      	lsls	r6, r3, #4
 8003152:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003156:	461c      	mov	r4, r3
 8003158:	f04f 0500 	mov.w	r5, #0
 800315c:	4622      	mov	r2, r4
 800315e:	462b      	mov	r3, r5
 8003160:	1891      	adds	r1, r2, r2
 8003162:	67b9      	str	r1, [r7, #120]	; 0x78
 8003164:	415b      	adcs	r3, r3
 8003166:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003168:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800316c:	1912      	adds	r2, r2, r4
 800316e:	eb45 0303 	adc.w	r3, r5, r3
 8003172:	f04f 0000 	mov.w	r0, #0
 8003176:	f04f 0100 	mov.w	r1, #0
 800317a:	00d9      	lsls	r1, r3, #3
 800317c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003180:	00d0      	lsls	r0, r2, #3
 8003182:	4602      	mov	r2, r0
 8003184:	460b      	mov	r3, r1
 8003186:	1911      	adds	r1, r2, r4
 8003188:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800318c:	416b      	adcs	r3, r5
 800318e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	461a      	mov	r2, r3
 800319a:	f04f 0300 	mov.w	r3, #0
 800319e:	1891      	adds	r1, r2, r2
 80031a0:	6739      	str	r1, [r7, #112]	; 0x70
 80031a2:	415b      	adcs	r3, r3
 80031a4:	677b      	str	r3, [r7, #116]	; 0x74
 80031a6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80031aa:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80031ae:	f7fd f867 	bl	8000280 <__aeabi_uldivmod>
 80031b2:	4602      	mov	r2, r0
 80031b4:	460b      	mov	r3, r1
 80031b6:	4b92      	ldr	r3, [pc, #584]	; (8003400 <UART_SetConfig+0x3dc>)
 80031b8:	fba3 1302 	umull	r1, r3, r3, r2
 80031bc:	095b      	lsrs	r3, r3, #5
 80031be:	2164      	movs	r1, #100	; 0x64
 80031c0:	fb01 f303 	mul.w	r3, r1, r3
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	3332      	adds	r3, #50	; 0x32
 80031ca:	4a8d      	ldr	r2, [pc, #564]	; (8003400 <UART_SetConfig+0x3dc>)
 80031cc:	fba2 2303 	umull	r2, r3, r2, r3
 80031d0:	095b      	lsrs	r3, r3, #5
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80031d8:	441e      	add	r6, r3
 80031da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80031de:	4618      	mov	r0, r3
 80031e0:	f04f 0100 	mov.w	r1, #0
 80031e4:	4602      	mov	r2, r0
 80031e6:	460b      	mov	r3, r1
 80031e8:	1894      	adds	r4, r2, r2
 80031ea:	66bc      	str	r4, [r7, #104]	; 0x68
 80031ec:	415b      	adcs	r3, r3
 80031ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031f0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80031f4:	1812      	adds	r2, r2, r0
 80031f6:	eb41 0303 	adc.w	r3, r1, r3
 80031fa:	f04f 0400 	mov.w	r4, #0
 80031fe:	f04f 0500 	mov.w	r5, #0
 8003202:	00dd      	lsls	r5, r3, #3
 8003204:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003208:	00d4      	lsls	r4, r2, #3
 800320a:	4622      	mov	r2, r4
 800320c:	462b      	mov	r3, r5
 800320e:	1814      	adds	r4, r2, r0
 8003210:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8003214:	414b      	adcs	r3, r1
 8003216:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800321a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	461a      	mov	r2, r3
 8003222:	f04f 0300 	mov.w	r3, #0
 8003226:	1891      	adds	r1, r2, r2
 8003228:	6639      	str	r1, [r7, #96]	; 0x60
 800322a:	415b      	adcs	r3, r3
 800322c:	667b      	str	r3, [r7, #100]	; 0x64
 800322e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003232:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003236:	f7fd f823 	bl	8000280 <__aeabi_uldivmod>
 800323a:	4602      	mov	r2, r0
 800323c:	460b      	mov	r3, r1
 800323e:	4b70      	ldr	r3, [pc, #448]	; (8003400 <UART_SetConfig+0x3dc>)
 8003240:	fba3 1302 	umull	r1, r3, r3, r2
 8003244:	095b      	lsrs	r3, r3, #5
 8003246:	2164      	movs	r1, #100	; 0x64
 8003248:	fb01 f303 	mul.w	r3, r1, r3
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	3332      	adds	r3, #50	; 0x32
 8003252:	4a6b      	ldr	r2, [pc, #428]	; (8003400 <UART_SetConfig+0x3dc>)
 8003254:	fba2 2303 	umull	r2, r3, r2, r3
 8003258:	095b      	lsrs	r3, r3, #5
 800325a:	f003 0207 	and.w	r2, r3, #7
 800325e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4432      	add	r2, r6
 8003266:	609a      	str	r2, [r3, #8]
 8003268:	e26d      	b.n	8003746 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800326a:	f7fe fd47 	bl	8001cfc <HAL_RCC_GetPCLK1Freq>
 800326e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003272:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003276:	461c      	mov	r4, r3
 8003278:	f04f 0500 	mov.w	r5, #0
 800327c:	4622      	mov	r2, r4
 800327e:	462b      	mov	r3, r5
 8003280:	1891      	adds	r1, r2, r2
 8003282:	65b9      	str	r1, [r7, #88]	; 0x58
 8003284:	415b      	adcs	r3, r3
 8003286:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003288:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800328c:	1912      	adds	r2, r2, r4
 800328e:	eb45 0303 	adc.w	r3, r5, r3
 8003292:	f04f 0000 	mov.w	r0, #0
 8003296:	f04f 0100 	mov.w	r1, #0
 800329a:	00d9      	lsls	r1, r3, #3
 800329c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032a0:	00d0      	lsls	r0, r2, #3
 80032a2:	4602      	mov	r2, r0
 80032a4:	460b      	mov	r3, r1
 80032a6:	1911      	adds	r1, r2, r4
 80032a8:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80032ac:	416b      	adcs	r3, r5
 80032ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80032b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	461a      	mov	r2, r3
 80032ba:	f04f 0300 	mov.w	r3, #0
 80032be:	1891      	adds	r1, r2, r2
 80032c0:	6539      	str	r1, [r7, #80]	; 0x50
 80032c2:	415b      	adcs	r3, r3
 80032c4:	657b      	str	r3, [r7, #84]	; 0x54
 80032c6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80032ca:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80032ce:	f7fc ffd7 	bl	8000280 <__aeabi_uldivmod>
 80032d2:	4602      	mov	r2, r0
 80032d4:	460b      	mov	r3, r1
 80032d6:	4b4a      	ldr	r3, [pc, #296]	; (8003400 <UART_SetConfig+0x3dc>)
 80032d8:	fba3 2302 	umull	r2, r3, r3, r2
 80032dc:	095b      	lsrs	r3, r3, #5
 80032de:	011e      	lsls	r6, r3, #4
 80032e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80032e4:	461c      	mov	r4, r3
 80032e6:	f04f 0500 	mov.w	r5, #0
 80032ea:	4622      	mov	r2, r4
 80032ec:	462b      	mov	r3, r5
 80032ee:	1891      	adds	r1, r2, r2
 80032f0:	64b9      	str	r1, [r7, #72]	; 0x48
 80032f2:	415b      	adcs	r3, r3
 80032f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032f6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80032fa:	1912      	adds	r2, r2, r4
 80032fc:	eb45 0303 	adc.w	r3, r5, r3
 8003300:	f04f 0000 	mov.w	r0, #0
 8003304:	f04f 0100 	mov.w	r1, #0
 8003308:	00d9      	lsls	r1, r3, #3
 800330a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800330e:	00d0      	lsls	r0, r2, #3
 8003310:	4602      	mov	r2, r0
 8003312:	460b      	mov	r3, r1
 8003314:	1911      	adds	r1, r2, r4
 8003316:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800331a:	416b      	adcs	r3, r5
 800331c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	461a      	mov	r2, r3
 8003328:	f04f 0300 	mov.w	r3, #0
 800332c:	1891      	adds	r1, r2, r2
 800332e:	6439      	str	r1, [r7, #64]	; 0x40
 8003330:	415b      	adcs	r3, r3
 8003332:	647b      	str	r3, [r7, #68]	; 0x44
 8003334:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003338:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800333c:	f7fc ffa0 	bl	8000280 <__aeabi_uldivmod>
 8003340:	4602      	mov	r2, r0
 8003342:	460b      	mov	r3, r1
 8003344:	4b2e      	ldr	r3, [pc, #184]	; (8003400 <UART_SetConfig+0x3dc>)
 8003346:	fba3 1302 	umull	r1, r3, r3, r2
 800334a:	095b      	lsrs	r3, r3, #5
 800334c:	2164      	movs	r1, #100	; 0x64
 800334e:	fb01 f303 	mul.w	r3, r1, r3
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	3332      	adds	r3, #50	; 0x32
 8003358:	4a29      	ldr	r2, [pc, #164]	; (8003400 <UART_SetConfig+0x3dc>)
 800335a:	fba2 2303 	umull	r2, r3, r2, r3
 800335e:	095b      	lsrs	r3, r3, #5
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003366:	441e      	add	r6, r3
 8003368:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800336c:	4618      	mov	r0, r3
 800336e:	f04f 0100 	mov.w	r1, #0
 8003372:	4602      	mov	r2, r0
 8003374:	460b      	mov	r3, r1
 8003376:	1894      	adds	r4, r2, r2
 8003378:	63bc      	str	r4, [r7, #56]	; 0x38
 800337a:	415b      	adcs	r3, r3
 800337c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800337e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003382:	1812      	adds	r2, r2, r0
 8003384:	eb41 0303 	adc.w	r3, r1, r3
 8003388:	f04f 0400 	mov.w	r4, #0
 800338c:	f04f 0500 	mov.w	r5, #0
 8003390:	00dd      	lsls	r5, r3, #3
 8003392:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003396:	00d4      	lsls	r4, r2, #3
 8003398:	4622      	mov	r2, r4
 800339a:	462b      	mov	r3, r5
 800339c:	1814      	adds	r4, r2, r0
 800339e:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 80033a2:	414b      	adcs	r3, r1
 80033a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	461a      	mov	r2, r3
 80033b0:	f04f 0300 	mov.w	r3, #0
 80033b4:	1891      	adds	r1, r2, r2
 80033b6:	6339      	str	r1, [r7, #48]	; 0x30
 80033b8:	415b      	adcs	r3, r3
 80033ba:	637b      	str	r3, [r7, #52]	; 0x34
 80033bc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80033c0:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80033c4:	f7fc ff5c 	bl	8000280 <__aeabi_uldivmod>
 80033c8:	4602      	mov	r2, r0
 80033ca:	460b      	mov	r3, r1
 80033cc:	4b0c      	ldr	r3, [pc, #48]	; (8003400 <UART_SetConfig+0x3dc>)
 80033ce:	fba3 1302 	umull	r1, r3, r3, r2
 80033d2:	095b      	lsrs	r3, r3, #5
 80033d4:	2164      	movs	r1, #100	; 0x64
 80033d6:	fb01 f303 	mul.w	r3, r1, r3
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	3332      	adds	r3, #50	; 0x32
 80033e0:	4a07      	ldr	r2, [pc, #28]	; (8003400 <UART_SetConfig+0x3dc>)
 80033e2:	fba2 2303 	umull	r2, r3, r2, r3
 80033e6:	095b      	lsrs	r3, r3, #5
 80033e8:	f003 0207 	and.w	r2, r3, #7
 80033ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4432      	add	r2, r6
 80033f4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80033f6:	e1a6      	b.n	8003746 <UART_SetConfig+0x722>
 80033f8:	40011000 	.word	0x40011000
 80033fc:	40011400 	.word	0x40011400
 8003400:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	4bd1      	ldr	r3, [pc, #836]	; (8003750 <UART_SetConfig+0x72c>)
 800340c:	429a      	cmp	r2, r3
 800340e:	d006      	beq.n	800341e <UART_SetConfig+0x3fa>
 8003410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	4bcf      	ldr	r3, [pc, #828]	; (8003754 <UART_SetConfig+0x730>)
 8003418:	429a      	cmp	r2, r3
 800341a:	f040 80ca 	bne.w	80035b2 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 800341e:	f7fe fc81 	bl	8001d24 <HAL_RCC_GetPCLK2Freq>
 8003422:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003426:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800342a:	461c      	mov	r4, r3
 800342c:	f04f 0500 	mov.w	r5, #0
 8003430:	4622      	mov	r2, r4
 8003432:	462b      	mov	r3, r5
 8003434:	1891      	adds	r1, r2, r2
 8003436:	62b9      	str	r1, [r7, #40]	; 0x28
 8003438:	415b      	adcs	r3, r3
 800343a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800343c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003440:	1912      	adds	r2, r2, r4
 8003442:	eb45 0303 	adc.w	r3, r5, r3
 8003446:	f04f 0000 	mov.w	r0, #0
 800344a:	f04f 0100 	mov.w	r1, #0
 800344e:	00d9      	lsls	r1, r3, #3
 8003450:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003454:	00d0      	lsls	r0, r2, #3
 8003456:	4602      	mov	r2, r0
 8003458:	460b      	mov	r3, r1
 800345a:	eb12 0a04 	adds.w	sl, r2, r4
 800345e:	eb43 0b05 	adc.w	fp, r3, r5
 8003462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	4618      	mov	r0, r3
 800346a:	f04f 0100 	mov.w	r1, #0
 800346e:	f04f 0200 	mov.w	r2, #0
 8003472:	f04f 0300 	mov.w	r3, #0
 8003476:	008b      	lsls	r3, r1, #2
 8003478:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800347c:	0082      	lsls	r2, r0, #2
 800347e:	4650      	mov	r0, sl
 8003480:	4659      	mov	r1, fp
 8003482:	f7fc fefd 	bl	8000280 <__aeabi_uldivmod>
 8003486:	4602      	mov	r2, r0
 8003488:	460b      	mov	r3, r1
 800348a:	4bb3      	ldr	r3, [pc, #716]	; (8003758 <UART_SetConfig+0x734>)
 800348c:	fba3 2302 	umull	r2, r3, r3, r2
 8003490:	095b      	lsrs	r3, r3, #5
 8003492:	011e      	lsls	r6, r3, #4
 8003494:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003498:	4618      	mov	r0, r3
 800349a:	f04f 0100 	mov.w	r1, #0
 800349e:	4602      	mov	r2, r0
 80034a0:	460b      	mov	r3, r1
 80034a2:	1894      	adds	r4, r2, r2
 80034a4:	623c      	str	r4, [r7, #32]
 80034a6:	415b      	adcs	r3, r3
 80034a8:	627b      	str	r3, [r7, #36]	; 0x24
 80034aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80034ae:	1812      	adds	r2, r2, r0
 80034b0:	eb41 0303 	adc.w	r3, r1, r3
 80034b4:	f04f 0400 	mov.w	r4, #0
 80034b8:	f04f 0500 	mov.w	r5, #0
 80034bc:	00dd      	lsls	r5, r3, #3
 80034be:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80034c2:	00d4      	lsls	r4, r2, #3
 80034c4:	4622      	mov	r2, r4
 80034c6:	462b      	mov	r3, r5
 80034c8:	1814      	adds	r4, r2, r0
 80034ca:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80034ce:	414b      	adcs	r3, r1
 80034d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80034d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	4618      	mov	r0, r3
 80034dc:	f04f 0100 	mov.w	r1, #0
 80034e0:	f04f 0200 	mov.w	r2, #0
 80034e4:	f04f 0300 	mov.w	r3, #0
 80034e8:	008b      	lsls	r3, r1, #2
 80034ea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80034ee:	0082      	lsls	r2, r0, #2
 80034f0:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80034f4:	f7fc fec4 	bl	8000280 <__aeabi_uldivmod>
 80034f8:	4602      	mov	r2, r0
 80034fa:	460b      	mov	r3, r1
 80034fc:	4b96      	ldr	r3, [pc, #600]	; (8003758 <UART_SetConfig+0x734>)
 80034fe:	fba3 1302 	umull	r1, r3, r3, r2
 8003502:	095b      	lsrs	r3, r3, #5
 8003504:	2164      	movs	r1, #100	; 0x64
 8003506:	fb01 f303 	mul.w	r3, r1, r3
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	011b      	lsls	r3, r3, #4
 800350e:	3332      	adds	r3, #50	; 0x32
 8003510:	4a91      	ldr	r2, [pc, #580]	; (8003758 <UART_SetConfig+0x734>)
 8003512:	fba2 2303 	umull	r2, r3, r2, r3
 8003516:	095b      	lsrs	r3, r3, #5
 8003518:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800351c:	441e      	add	r6, r3
 800351e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003522:	4618      	mov	r0, r3
 8003524:	f04f 0100 	mov.w	r1, #0
 8003528:	4602      	mov	r2, r0
 800352a:	460b      	mov	r3, r1
 800352c:	1894      	adds	r4, r2, r2
 800352e:	61bc      	str	r4, [r7, #24]
 8003530:	415b      	adcs	r3, r3
 8003532:	61fb      	str	r3, [r7, #28]
 8003534:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003538:	1812      	adds	r2, r2, r0
 800353a:	eb41 0303 	adc.w	r3, r1, r3
 800353e:	f04f 0400 	mov.w	r4, #0
 8003542:	f04f 0500 	mov.w	r5, #0
 8003546:	00dd      	lsls	r5, r3, #3
 8003548:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800354c:	00d4      	lsls	r4, r2, #3
 800354e:	4622      	mov	r2, r4
 8003550:	462b      	mov	r3, r5
 8003552:	1814      	adds	r4, r2, r0
 8003554:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8003558:	414b      	adcs	r3, r1
 800355a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800355e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	4618      	mov	r0, r3
 8003566:	f04f 0100 	mov.w	r1, #0
 800356a:	f04f 0200 	mov.w	r2, #0
 800356e:	f04f 0300 	mov.w	r3, #0
 8003572:	008b      	lsls	r3, r1, #2
 8003574:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003578:	0082      	lsls	r2, r0, #2
 800357a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800357e:	f7fc fe7f 	bl	8000280 <__aeabi_uldivmod>
 8003582:	4602      	mov	r2, r0
 8003584:	460b      	mov	r3, r1
 8003586:	4b74      	ldr	r3, [pc, #464]	; (8003758 <UART_SetConfig+0x734>)
 8003588:	fba3 1302 	umull	r1, r3, r3, r2
 800358c:	095b      	lsrs	r3, r3, #5
 800358e:	2164      	movs	r1, #100	; 0x64
 8003590:	fb01 f303 	mul.w	r3, r1, r3
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	011b      	lsls	r3, r3, #4
 8003598:	3332      	adds	r3, #50	; 0x32
 800359a:	4a6f      	ldr	r2, [pc, #444]	; (8003758 <UART_SetConfig+0x734>)
 800359c:	fba2 2303 	umull	r2, r3, r2, r3
 80035a0:	095b      	lsrs	r3, r3, #5
 80035a2:	f003 020f 	and.w	r2, r3, #15
 80035a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4432      	add	r2, r6
 80035ae:	609a      	str	r2, [r3, #8]
 80035b0:	e0c9      	b.n	8003746 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 80035b2:	f7fe fba3 	bl	8001cfc <HAL_RCC_GetPCLK1Freq>
 80035b6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80035be:	461c      	mov	r4, r3
 80035c0:	f04f 0500 	mov.w	r5, #0
 80035c4:	4622      	mov	r2, r4
 80035c6:	462b      	mov	r3, r5
 80035c8:	1891      	adds	r1, r2, r2
 80035ca:	6139      	str	r1, [r7, #16]
 80035cc:	415b      	adcs	r3, r3
 80035ce:	617b      	str	r3, [r7, #20]
 80035d0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80035d4:	1912      	adds	r2, r2, r4
 80035d6:	eb45 0303 	adc.w	r3, r5, r3
 80035da:	f04f 0000 	mov.w	r0, #0
 80035de:	f04f 0100 	mov.w	r1, #0
 80035e2:	00d9      	lsls	r1, r3, #3
 80035e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035e8:	00d0      	lsls	r0, r2, #3
 80035ea:	4602      	mov	r2, r0
 80035ec:	460b      	mov	r3, r1
 80035ee:	eb12 0804 	adds.w	r8, r2, r4
 80035f2:	eb43 0905 	adc.w	r9, r3, r5
 80035f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f04f 0100 	mov.w	r1, #0
 8003602:	f04f 0200 	mov.w	r2, #0
 8003606:	f04f 0300 	mov.w	r3, #0
 800360a:	008b      	lsls	r3, r1, #2
 800360c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003610:	0082      	lsls	r2, r0, #2
 8003612:	4640      	mov	r0, r8
 8003614:	4649      	mov	r1, r9
 8003616:	f7fc fe33 	bl	8000280 <__aeabi_uldivmod>
 800361a:	4602      	mov	r2, r0
 800361c:	460b      	mov	r3, r1
 800361e:	4b4e      	ldr	r3, [pc, #312]	; (8003758 <UART_SetConfig+0x734>)
 8003620:	fba3 2302 	umull	r2, r3, r3, r2
 8003624:	095b      	lsrs	r3, r3, #5
 8003626:	011e      	lsls	r6, r3, #4
 8003628:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800362c:	4618      	mov	r0, r3
 800362e:	f04f 0100 	mov.w	r1, #0
 8003632:	4602      	mov	r2, r0
 8003634:	460b      	mov	r3, r1
 8003636:	1894      	adds	r4, r2, r2
 8003638:	60bc      	str	r4, [r7, #8]
 800363a:	415b      	adcs	r3, r3
 800363c:	60fb      	str	r3, [r7, #12]
 800363e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003642:	1812      	adds	r2, r2, r0
 8003644:	eb41 0303 	adc.w	r3, r1, r3
 8003648:	f04f 0400 	mov.w	r4, #0
 800364c:	f04f 0500 	mov.w	r5, #0
 8003650:	00dd      	lsls	r5, r3, #3
 8003652:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003656:	00d4      	lsls	r4, r2, #3
 8003658:	4622      	mov	r2, r4
 800365a:	462b      	mov	r3, r5
 800365c:	1814      	adds	r4, r2, r0
 800365e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8003662:	414b      	adcs	r3, r1
 8003664:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	4618      	mov	r0, r3
 8003670:	f04f 0100 	mov.w	r1, #0
 8003674:	f04f 0200 	mov.w	r2, #0
 8003678:	f04f 0300 	mov.w	r3, #0
 800367c:	008b      	lsls	r3, r1, #2
 800367e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003682:	0082      	lsls	r2, r0, #2
 8003684:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003688:	f7fc fdfa 	bl	8000280 <__aeabi_uldivmod>
 800368c:	4602      	mov	r2, r0
 800368e:	460b      	mov	r3, r1
 8003690:	4b31      	ldr	r3, [pc, #196]	; (8003758 <UART_SetConfig+0x734>)
 8003692:	fba3 1302 	umull	r1, r3, r3, r2
 8003696:	095b      	lsrs	r3, r3, #5
 8003698:	2164      	movs	r1, #100	; 0x64
 800369a:	fb01 f303 	mul.w	r3, r1, r3
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	011b      	lsls	r3, r3, #4
 80036a2:	3332      	adds	r3, #50	; 0x32
 80036a4:	4a2c      	ldr	r2, [pc, #176]	; (8003758 <UART_SetConfig+0x734>)
 80036a6:	fba2 2303 	umull	r2, r3, r2, r3
 80036aa:	095b      	lsrs	r3, r3, #5
 80036ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036b0:	441e      	add	r6, r3
 80036b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80036b6:	4618      	mov	r0, r3
 80036b8:	f04f 0100 	mov.w	r1, #0
 80036bc:	4602      	mov	r2, r0
 80036be:	460b      	mov	r3, r1
 80036c0:	1894      	adds	r4, r2, r2
 80036c2:	603c      	str	r4, [r7, #0]
 80036c4:	415b      	adcs	r3, r3
 80036c6:	607b      	str	r3, [r7, #4]
 80036c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036cc:	1812      	adds	r2, r2, r0
 80036ce:	eb41 0303 	adc.w	r3, r1, r3
 80036d2:	f04f 0400 	mov.w	r4, #0
 80036d6:	f04f 0500 	mov.w	r5, #0
 80036da:	00dd      	lsls	r5, r3, #3
 80036dc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80036e0:	00d4      	lsls	r4, r2, #3
 80036e2:	4622      	mov	r2, r4
 80036e4:	462b      	mov	r3, r5
 80036e6:	1814      	adds	r4, r2, r0
 80036e8:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 80036ec:	414b      	adcs	r3, r1
 80036ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80036f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f04f 0100 	mov.w	r1, #0
 80036fe:	f04f 0200 	mov.w	r2, #0
 8003702:	f04f 0300 	mov.w	r3, #0
 8003706:	008b      	lsls	r3, r1, #2
 8003708:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800370c:	0082      	lsls	r2, r0, #2
 800370e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8003712:	f7fc fdb5 	bl	8000280 <__aeabi_uldivmod>
 8003716:	4602      	mov	r2, r0
 8003718:	460b      	mov	r3, r1
 800371a:	4b0f      	ldr	r3, [pc, #60]	; (8003758 <UART_SetConfig+0x734>)
 800371c:	fba3 1302 	umull	r1, r3, r3, r2
 8003720:	095b      	lsrs	r3, r3, #5
 8003722:	2164      	movs	r1, #100	; 0x64
 8003724:	fb01 f303 	mul.w	r3, r1, r3
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	011b      	lsls	r3, r3, #4
 800372c:	3332      	adds	r3, #50	; 0x32
 800372e:	4a0a      	ldr	r2, [pc, #40]	; (8003758 <UART_SetConfig+0x734>)
 8003730:	fba2 2303 	umull	r2, r3, r2, r3
 8003734:	095b      	lsrs	r3, r3, #5
 8003736:	f003 020f 	and.w	r2, r3, #15
 800373a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4432      	add	r2, r6
 8003742:	609a      	str	r2, [r3, #8]
}
 8003744:	e7ff      	b.n	8003746 <UART_SetConfig+0x722>
 8003746:	bf00      	nop
 8003748:	37f4      	adds	r7, #244	; 0xf4
 800374a:	46bd      	mov	sp, r7
 800374c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003750:	40011000 	.word	0x40011000
 8003754:	40011400 	.word	0x40011400
 8003758:	51eb851f 	.word	0x51eb851f

0800375c <__errno>:
 800375c:	4b01      	ldr	r3, [pc, #4]	; (8003764 <__errno+0x8>)
 800375e:	6818      	ldr	r0, [r3, #0]
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	2000000c 	.word	0x2000000c

08003768 <__libc_init_array>:
 8003768:	b570      	push	{r4, r5, r6, lr}
 800376a:	4d0d      	ldr	r5, [pc, #52]	; (80037a0 <__libc_init_array+0x38>)
 800376c:	4c0d      	ldr	r4, [pc, #52]	; (80037a4 <__libc_init_array+0x3c>)
 800376e:	1b64      	subs	r4, r4, r5
 8003770:	10a4      	asrs	r4, r4, #2
 8003772:	2600      	movs	r6, #0
 8003774:	42a6      	cmp	r6, r4
 8003776:	d109      	bne.n	800378c <__libc_init_array+0x24>
 8003778:	4d0b      	ldr	r5, [pc, #44]	; (80037a8 <__libc_init_array+0x40>)
 800377a:	4c0c      	ldr	r4, [pc, #48]	; (80037ac <__libc_init_array+0x44>)
 800377c:	f000 fc4e 	bl	800401c <_init>
 8003780:	1b64      	subs	r4, r4, r5
 8003782:	10a4      	asrs	r4, r4, #2
 8003784:	2600      	movs	r6, #0
 8003786:	42a6      	cmp	r6, r4
 8003788:	d105      	bne.n	8003796 <__libc_init_array+0x2e>
 800378a:	bd70      	pop	{r4, r5, r6, pc}
 800378c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003790:	4798      	blx	r3
 8003792:	3601      	adds	r6, #1
 8003794:	e7ee      	b.n	8003774 <__libc_init_array+0xc>
 8003796:	f855 3b04 	ldr.w	r3, [r5], #4
 800379a:	4798      	blx	r3
 800379c:	3601      	adds	r6, #1
 800379e:	e7f2      	b.n	8003786 <__libc_init_array+0x1e>
 80037a0:	08004120 	.word	0x08004120
 80037a4:	08004120 	.word	0x08004120
 80037a8:	08004120 	.word	0x08004120
 80037ac:	08004124 	.word	0x08004124

080037b0 <memset>:
 80037b0:	4402      	add	r2, r0
 80037b2:	4603      	mov	r3, r0
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d100      	bne.n	80037ba <memset+0xa>
 80037b8:	4770      	bx	lr
 80037ba:	f803 1b01 	strb.w	r1, [r3], #1
 80037be:	e7f9      	b.n	80037b4 <memset+0x4>

080037c0 <siprintf>:
 80037c0:	b40e      	push	{r1, r2, r3}
 80037c2:	b500      	push	{lr}
 80037c4:	b09c      	sub	sp, #112	; 0x70
 80037c6:	ab1d      	add	r3, sp, #116	; 0x74
 80037c8:	9002      	str	r0, [sp, #8]
 80037ca:	9006      	str	r0, [sp, #24]
 80037cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80037d0:	4809      	ldr	r0, [pc, #36]	; (80037f8 <siprintf+0x38>)
 80037d2:	9107      	str	r1, [sp, #28]
 80037d4:	9104      	str	r1, [sp, #16]
 80037d6:	4909      	ldr	r1, [pc, #36]	; (80037fc <siprintf+0x3c>)
 80037d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80037dc:	9105      	str	r1, [sp, #20]
 80037de:	6800      	ldr	r0, [r0, #0]
 80037e0:	9301      	str	r3, [sp, #4]
 80037e2:	a902      	add	r1, sp, #8
 80037e4:	f000 f868 	bl	80038b8 <_svfiprintf_r>
 80037e8:	9b02      	ldr	r3, [sp, #8]
 80037ea:	2200      	movs	r2, #0
 80037ec:	701a      	strb	r2, [r3, #0]
 80037ee:	b01c      	add	sp, #112	; 0x70
 80037f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80037f4:	b003      	add	sp, #12
 80037f6:	4770      	bx	lr
 80037f8:	2000000c 	.word	0x2000000c
 80037fc:	ffff0208 	.word	0xffff0208

08003800 <__ssputs_r>:
 8003800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003804:	688e      	ldr	r6, [r1, #8]
 8003806:	429e      	cmp	r6, r3
 8003808:	4682      	mov	sl, r0
 800380a:	460c      	mov	r4, r1
 800380c:	4690      	mov	r8, r2
 800380e:	461f      	mov	r7, r3
 8003810:	d838      	bhi.n	8003884 <__ssputs_r+0x84>
 8003812:	898a      	ldrh	r2, [r1, #12]
 8003814:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003818:	d032      	beq.n	8003880 <__ssputs_r+0x80>
 800381a:	6825      	ldr	r5, [r4, #0]
 800381c:	6909      	ldr	r1, [r1, #16]
 800381e:	eba5 0901 	sub.w	r9, r5, r1
 8003822:	6965      	ldr	r5, [r4, #20]
 8003824:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003828:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800382c:	3301      	adds	r3, #1
 800382e:	444b      	add	r3, r9
 8003830:	106d      	asrs	r5, r5, #1
 8003832:	429d      	cmp	r5, r3
 8003834:	bf38      	it	cc
 8003836:	461d      	movcc	r5, r3
 8003838:	0553      	lsls	r3, r2, #21
 800383a:	d531      	bpl.n	80038a0 <__ssputs_r+0xa0>
 800383c:	4629      	mov	r1, r5
 800383e:	f000 fb47 	bl	8003ed0 <_malloc_r>
 8003842:	4606      	mov	r6, r0
 8003844:	b950      	cbnz	r0, 800385c <__ssputs_r+0x5c>
 8003846:	230c      	movs	r3, #12
 8003848:	f8ca 3000 	str.w	r3, [sl]
 800384c:	89a3      	ldrh	r3, [r4, #12]
 800384e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003852:	81a3      	strh	r3, [r4, #12]
 8003854:	f04f 30ff 	mov.w	r0, #4294967295
 8003858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800385c:	6921      	ldr	r1, [r4, #16]
 800385e:	464a      	mov	r2, r9
 8003860:	f000 fabe 	bl	8003de0 <memcpy>
 8003864:	89a3      	ldrh	r3, [r4, #12]
 8003866:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800386a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800386e:	81a3      	strh	r3, [r4, #12]
 8003870:	6126      	str	r6, [r4, #16]
 8003872:	6165      	str	r5, [r4, #20]
 8003874:	444e      	add	r6, r9
 8003876:	eba5 0509 	sub.w	r5, r5, r9
 800387a:	6026      	str	r6, [r4, #0]
 800387c:	60a5      	str	r5, [r4, #8]
 800387e:	463e      	mov	r6, r7
 8003880:	42be      	cmp	r6, r7
 8003882:	d900      	bls.n	8003886 <__ssputs_r+0x86>
 8003884:	463e      	mov	r6, r7
 8003886:	4632      	mov	r2, r6
 8003888:	6820      	ldr	r0, [r4, #0]
 800388a:	4641      	mov	r1, r8
 800388c:	f000 fab6 	bl	8003dfc <memmove>
 8003890:	68a3      	ldr	r3, [r4, #8]
 8003892:	6822      	ldr	r2, [r4, #0]
 8003894:	1b9b      	subs	r3, r3, r6
 8003896:	4432      	add	r2, r6
 8003898:	60a3      	str	r3, [r4, #8]
 800389a:	6022      	str	r2, [r4, #0]
 800389c:	2000      	movs	r0, #0
 800389e:	e7db      	b.n	8003858 <__ssputs_r+0x58>
 80038a0:	462a      	mov	r2, r5
 80038a2:	f000 fb6f 	bl	8003f84 <_realloc_r>
 80038a6:	4606      	mov	r6, r0
 80038a8:	2800      	cmp	r0, #0
 80038aa:	d1e1      	bne.n	8003870 <__ssputs_r+0x70>
 80038ac:	6921      	ldr	r1, [r4, #16]
 80038ae:	4650      	mov	r0, sl
 80038b0:	f000 fabe 	bl	8003e30 <_free_r>
 80038b4:	e7c7      	b.n	8003846 <__ssputs_r+0x46>
	...

080038b8 <_svfiprintf_r>:
 80038b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038bc:	4698      	mov	r8, r3
 80038be:	898b      	ldrh	r3, [r1, #12]
 80038c0:	061b      	lsls	r3, r3, #24
 80038c2:	b09d      	sub	sp, #116	; 0x74
 80038c4:	4607      	mov	r7, r0
 80038c6:	460d      	mov	r5, r1
 80038c8:	4614      	mov	r4, r2
 80038ca:	d50e      	bpl.n	80038ea <_svfiprintf_r+0x32>
 80038cc:	690b      	ldr	r3, [r1, #16]
 80038ce:	b963      	cbnz	r3, 80038ea <_svfiprintf_r+0x32>
 80038d0:	2140      	movs	r1, #64	; 0x40
 80038d2:	f000 fafd 	bl	8003ed0 <_malloc_r>
 80038d6:	6028      	str	r0, [r5, #0]
 80038d8:	6128      	str	r0, [r5, #16]
 80038da:	b920      	cbnz	r0, 80038e6 <_svfiprintf_r+0x2e>
 80038dc:	230c      	movs	r3, #12
 80038de:	603b      	str	r3, [r7, #0]
 80038e0:	f04f 30ff 	mov.w	r0, #4294967295
 80038e4:	e0d1      	b.n	8003a8a <_svfiprintf_r+0x1d2>
 80038e6:	2340      	movs	r3, #64	; 0x40
 80038e8:	616b      	str	r3, [r5, #20]
 80038ea:	2300      	movs	r3, #0
 80038ec:	9309      	str	r3, [sp, #36]	; 0x24
 80038ee:	2320      	movs	r3, #32
 80038f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80038f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80038f8:	2330      	movs	r3, #48	; 0x30
 80038fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003aa4 <_svfiprintf_r+0x1ec>
 80038fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003902:	f04f 0901 	mov.w	r9, #1
 8003906:	4623      	mov	r3, r4
 8003908:	469a      	mov	sl, r3
 800390a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800390e:	b10a      	cbz	r2, 8003914 <_svfiprintf_r+0x5c>
 8003910:	2a25      	cmp	r2, #37	; 0x25
 8003912:	d1f9      	bne.n	8003908 <_svfiprintf_r+0x50>
 8003914:	ebba 0b04 	subs.w	fp, sl, r4
 8003918:	d00b      	beq.n	8003932 <_svfiprintf_r+0x7a>
 800391a:	465b      	mov	r3, fp
 800391c:	4622      	mov	r2, r4
 800391e:	4629      	mov	r1, r5
 8003920:	4638      	mov	r0, r7
 8003922:	f7ff ff6d 	bl	8003800 <__ssputs_r>
 8003926:	3001      	adds	r0, #1
 8003928:	f000 80aa 	beq.w	8003a80 <_svfiprintf_r+0x1c8>
 800392c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800392e:	445a      	add	r2, fp
 8003930:	9209      	str	r2, [sp, #36]	; 0x24
 8003932:	f89a 3000 	ldrb.w	r3, [sl]
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 80a2 	beq.w	8003a80 <_svfiprintf_r+0x1c8>
 800393c:	2300      	movs	r3, #0
 800393e:	f04f 32ff 	mov.w	r2, #4294967295
 8003942:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003946:	f10a 0a01 	add.w	sl, sl, #1
 800394a:	9304      	str	r3, [sp, #16]
 800394c:	9307      	str	r3, [sp, #28]
 800394e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003952:	931a      	str	r3, [sp, #104]	; 0x68
 8003954:	4654      	mov	r4, sl
 8003956:	2205      	movs	r2, #5
 8003958:	f814 1b01 	ldrb.w	r1, [r4], #1
 800395c:	4851      	ldr	r0, [pc, #324]	; (8003aa4 <_svfiprintf_r+0x1ec>)
 800395e:	f7fc fc3f 	bl	80001e0 <memchr>
 8003962:	9a04      	ldr	r2, [sp, #16]
 8003964:	b9d8      	cbnz	r0, 800399e <_svfiprintf_r+0xe6>
 8003966:	06d0      	lsls	r0, r2, #27
 8003968:	bf44      	itt	mi
 800396a:	2320      	movmi	r3, #32
 800396c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003970:	0711      	lsls	r1, r2, #28
 8003972:	bf44      	itt	mi
 8003974:	232b      	movmi	r3, #43	; 0x2b
 8003976:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800397a:	f89a 3000 	ldrb.w	r3, [sl]
 800397e:	2b2a      	cmp	r3, #42	; 0x2a
 8003980:	d015      	beq.n	80039ae <_svfiprintf_r+0xf6>
 8003982:	9a07      	ldr	r2, [sp, #28]
 8003984:	4654      	mov	r4, sl
 8003986:	2000      	movs	r0, #0
 8003988:	f04f 0c0a 	mov.w	ip, #10
 800398c:	4621      	mov	r1, r4
 800398e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003992:	3b30      	subs	r3, #48	; 0x30
 8003994:	2b09      	cmp	r3, #9
 8003996:	d94e      	bls.n	8003a36 <_svfiprintf_r+0x17e>
 8003998:	b1b0      	cbz	r0, 80039c8 <_svfiprintf_r+0x110>
 800399a:	9207      	str	r2, [sp, #28]
 800399c:	e014      	b.n	80039c8 <_svfiprintf_r+0x110>
 800399e:	eba0 0308 	sub.w	r3, r0, r8
 80039a2:	fa09 f303 	lsl.w	r3, r9, r3
 80039a6:	4313      	orrs	r3, r2
 80039a8:	9304      	str	r3, [sp, #16]
 80039aa:	46a2      	mov	sl, r4
 80039ac:	e7d2      	b.n	8003954 <_svfiprintf_r+0x9c>
 80039ae:	9b03      	ldr	r3, [sp, #12]
 80039b0:	1d19      	adds	r1, r3, #4
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	9103      	str	r1, [sp, #12]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	bfbb      	ittet	lt
 80039ba:	425b      	neglt	r3, r3
 80039bc:	f042 0202 	orrlt.w	r2, r2, #2
 80039c0:	9307      	strge	r3, [sp, #28]
 80039c2:	9307      	strlt	r3, [sp, #28]
 80039c4:	bfb8      	it	lt
 80039c6:	9204      	strlt	r2, [sp, #16]
 80039c8:	7823      	ldrb	r3, [r4, #0]
 80039ca:	2b2e      	cmp	r3, #46	; 0x2e
 80039cc:	d10c      	bne.n	80039e8 <_svfiprintf_r+0x130>
 80039ce:	7863      	ldrb	r3, [r4, #1]
 80039d0:	2b2a      	cmp	r3, #42	; 0x2a
 80039d2:	d135      	bne.n	8003a40 <_svfiprintf_r+0x188>
 80039d4:	9b03      	ldr	r3, [sp, #12]
 80039d6:	1d1a      	adds	r2, r3, #4
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	9203      	str	r2, [sp, #12]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	bfb8      	it	lt
 80039e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80039e4:	3402      	adds	r4, #2
 80039e6:	9305      	str	r3, [sp, #20]
 80039e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003ab4 <_svfiprintf_r+0x1fc>
 80039ec:	7821      	ldrb	r1, [r4, #0]
 80039ee:	2203      	movs	r2, #3
 80039f0:	4650      	mov	r0, sl
 80039f2:	f7fc fbf5 	bl	80001e0 <memchr>
 80039f6:	b140      	cbz	r0, 8003a0a <_svfiprintf_r+0x152>
 80039f8:	2340      	movs	r3, #64	; 0x40
 80039fa:	eba0 000a 	sub.w	r0, r0, sl
 80039fe:	fa03 f000 	lsl.w	r0, r3, r0
 8003a02:	9b04      	ldr	r3, [sp, #16]
 8003a04:	4303      	orrs	r3, r0
 8003a06:	3401      	adds	r4, #1
 8003a08:	9304      	str	r3, [sp, #16]
 8003a0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a0e:	4826      	ldr	r0, [pc, #152]	; (8003aa8 <_svfiprintf_r+0x1f0>)
 8003a10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a14:	2206      	movs	r2, #6
 8003a16:	f7fc fbe3 	bl	80001e0 <memchr>
 8003a1a:	2800      	cmp	r0, #0
 8003a1c:	d038      	beq.n	8003a90 <_svfiprintf_r+0x1d8>
 8003a1e:	4b23      	ldr	r3, [pc, #140]	; (8003aac <_svfiprintf_r+0x1f4>)
 8003a20:	bb1b      	cbnz	r3, 8003a6a <_svfiprintf_r+0x1b2>
 8003a22:	9b03      	ldr	r3, [sp, #12]
 8003a24:	3307      	adds	r3, #7
 8003a26:	f023 0307 	bic.w	r3, r3, #7
 8003a2a:	3308      	adds	r3, #8
 8003a2c:	9303      	str	r3, [sp, #12]
 8003a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a30:	4433      	add	r3, r6
 8003a32:	9309      	str	r3, [sp, #36]	; 0x24
 8003a34:	e767      	b.n	8003906 <_svfiprintf_r+0x4e>
 8003a36:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a3a:	460c      	mov	r4, r1
 8003a3c:	2001      	movs	r0, #1
 8003a3e:	e7a5      	b.n	800398c <_svfiprintf_r+0xd4>
 8003a40:	2300      	movs	r3, #0
 8003a42:	3401      	adds	r4, #1
 8003a44:	9305      	str	r3, [sp, #20]
 8003a46:	4619      	mov	r1, r3
 8003a48:	f04f 0c0a 	mov.w	ip, #10
 8003a4c:	4620      	mov	r0, r4
 8003a4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a52:	3a30      	subs	r2, #48	; 0x30
 8003a54:	2a09      	cmp	r2, #9
 8003a56:	d903      	bls.n	8003a60 <_svfiprintf_r+0x1a8>
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d0c5      	beq.n	80039e8 <_svfiprintf_r+0x130>
 8003a5c:	9105      	str	r1, [sp, #20]
 8003a5e:	e7c3      	b.n	80039e8 <_svfiprintf_r+0x130>
 8003a60:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a64:	4604      	mov	r4, r0
 8003a66:	2301      	movs	r3, #1
 8003a68:	e7f0      	b.n	8003a4c <_svfiprintf_r+0x194>
 8003a6a:	ab03      	add	r3, sp, #12
 8003a6c:	9300      	str	r3, [sp, #0]
 8003a6e:	462a      	mov	r2, r5
 8003a70:	4b0f      	ldr	r3, [pc, #60]	; (8003ab0 <_svfiprintf_r+0x1f8>)
 8003a72:	a904      	add	r1, sp, #16
 8003a74:	4638      	mov	r0, r7
 8003a76:	f3af 8000 	nop.w
 8003a7a:	1c42      	adds	r2, r0, #1
 8003a7c:	4606      	mov	r6, r0
 8003a7e:	d1d6      	bne.n	8003a2e <_svfiprintf_r+0x176>
 8003a80:	89ab      	ldrh	r3, [r5, #12]
 8003a82:	065b      	lsls	r3, r3, #25
 8003a84:	f53f af2c 	bmi.w	80038e0 <_svfiprintf_r+0x28>
 8003a88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a8a:	b01d      	add	sp, #116	; 0x74
 8003a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a90:	ab03      	add	r3, sp, #12
 8003a92:	9300      	str	r3, [sp, #0]
 8003a94:	462a      	mov	r2, r5
 8003a96:	4b06      	ldr	r3, [pc, #24]	; (8003ab0 <_svfiprintf_r+0x1f8>)
 8003a98:	a904      	add	r1, sp, #16
 8003a9a:	4638      	mov	r0, r7
 8003a9c:	f000 f87a 	bl	8003b94 <_printf_i>
 8003aa0:	e7eb      	b.n	8003a7a <_svfiprintf_r+0x1c2>
 8003aa2:	bf00      	nop
 8003aa4:	080040e4 	.word	0x080040e4
 8003aa8:	080040ee 	.word	0x080040ee
 8003aac:	00000000 	.word	0x00000000
 8003ab0:	08003801 	.word	0x08003801
 8003ab4:	080040ea 	.word	0x080040ea

08003ab8 <_printf_common>:
 8003ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003abc:	4616      	mov	r6, r2
 8003abe:	4699      	mov	r9, r3
 8003ac0:	688a      	ldr	r2, [r1, #8]
 8003ac2:	690b      	ldr	r3, [r1, #16]
 8003ac4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	bfb8      	it	lt
 8003acc:	4613      	movlt	r3, r2
 8003ace:	6033      	str	r3, [r6, #0]
 8003ad0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ad4:	4607      	mov	r7, r0
 8003ad6:	460c      	mov	r4, r1
 8003ad8:	b10a      	cbz	r2, 8003ade <_printf_common+0x26>
 8003ada:	3301      	adds	r3, #1
 8003adc:	6033      	str	r3, [r6, #0]
 8003ade:	6823      	ldr	r3, [r4, #0]
 8003ae0:	0699      	lsls	r1, r3, #26
 8003ae2:	bf42      	ittt	mi
 8003ae4:	6833      	ldrmi	r3, [r6, #0]
 8003ae6:	3302      	addmi	r3, #2
 8003ae8:	6033      	strmi	r3, [r6, #0]
 8003aea:	6825      	ldr	r5, [r4, #0]
 8003aec:	f015 0506 	ands.w	r5, r5, #6
 8003af0:	d106      	bne.n	8003b00 <_printf_common+0x48>
 8003af2:	f104 0a19 	add.w	sl, r4, #25
 8003af6:	68e3      	ldr	r3, [r4, #12]
 8003af8:	6832      	ldr	r2, [r6, #0]
 8003afa:	1a9b      	subs	r3, r3, r2
 8003afc:	42ab      	cmp	r3, r5
 8003afe:	dc26      	bgt.n	8003b4e <_printf_common+0x96>
 8003b00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b04:	1e13      	subs	r3, r2, #0
 8003b06:	6822      	ldr	r2, [r4, #0]
 8003b08:	bf18      	it	ne
 8003b0a:	2301      	movne	r3, #1
 8003b0c:	0692      	lsls	r2, r2, #26
 8003b0e:	d42b      	bmi.n	8003b68 <_printf_common+0xb0>
 8003b10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b14:	4649      	mov	r1, r9
 8003b16:	4638      	mov	r0, r7
 8003b18:	47c0      	blx	r8
 8003b1a:	3001      	adds	r0, #1
 8003b1c:	d01e      	beq.n	8003b5c <_printf_common+0xa4>
 8003b1e:	6823      	ldr	r3, [r4, #0]
 8003b20:	68e5      	ldr	r5, [r4, #12]
 8003b22:	6832      	ldr	r2, [r6, #0]
 8003b24:	f003 0306 	and.w	r3, r3, #6
 8003b28:	2b04      	cmp	r3, #4
 8003b2a:	bf08      	it	eq
 8003b2c:	1aad      	subeq	r5, r5, r2
 8003b2e:	68a3      	ldr	r3, [r4, #8]
 8003b30:	6922      	ldr	r2, [r4, #16]
 8003b32:	bf0c      	ite	eq
 8003b34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b38:	2500      	movne	r5, #0
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	bfc4      	itt	gt
 8003b3e:	1a9b      	subgt	r3, r3, r2
 8003b40:	18ed      	addgt	r5, r5, r3
 8003b42:	2600      	movs	r6, #0
 8003b44:	341a      	adds	r4, #26
 8003b46:	42b5      	cmp	r5, r6
 8003b48:	d11a      	bne.n	8003b80 <_printf_common+0xc8>
 8003b4a:	2000      	movs	r0, #0
 8003b4c:	e008      	b.n	8003b60 <_printf_common+0xa8>
 8003b4e:	2301      	movs	r3, #1
 8003b50:	4652      	mov	r2, sl
 8003b52:	4649      	mov	r1, r9
 8003b54:	4638      	mov	r0, r7
 8003b56:	47c0      	blx	r8
 8003b58:	3001      	adds	r0, #1
 8003b5a:	d103      	bne.n	8003b64 <_printf_common+0xac>
 8003b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b64:	3501      	adds	r5, #1
 8003b66:	e7c6      	b.n	8003af6 <_printf_common+0x3e>
 8003b68:	18e1      	adds	r1, r4, r3
 8003b6a:	1c5a      	adds	r2, r3, #1
 8003b6c:	2030      	movs	r0, #48	; 0x30
 8003b6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b72:	4422      	add	r2, r4
 8003b74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b7c:	3302      	adds	r3, #2
 8003b7e:	e7c7      	b.n	8003b10 <_printf_common+0x58>
 8003b80:	2301      	movs	r3, #1
 8003b82:	4622      	mov	r2, r4
 8003b84:	4649      	mov	r1, r9
 8003b86:	4638      	mov	r0, r7
 8003b88:	47c0      	blx	r8
 8003b8a:	3001      	adds	r0, #1
 8003b8c:	d0e6      	beq.n	8003b5c <_printf_common+0xa4>
 8003b8e:	3601      	adds	r6, #1
 8003b90:	e7d9      	b.n	8003b46 <_printf_common+0x8e>
	...

08003b94 <_printf_i>:
 8003b94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b98:	460c      	mov	r4, r1
 8003b9a:	4691      	mov	r9, r2
 8003b9c:	7e27      	ldrb	r7, [r4, #24]
 8003b9e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003ba0:	2f78      	cmp	r7, #120	; 0x78
 8003ba2:	4680      	mov	r8, r0
 8003ba4:	469a      	mov	sl, r3
 8003ba6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003baa:	d807      	bhi.n	8003bbc <_printf_i+0x28>
 8003bac:	2f62      	cmp	r7, #98	; 0x62
 8003bae:	d80a      	bhi.n	8003bc6 <_printf_i+0x32>
 8003bb0:	2f00      	cmp	r7, #0
 8003bb2:	f000 80d8 	beq.w	8003d66 <_printf_i+0x1d2>
 8003bb6:	2f58      	cmp	r7, #88	; 0x58
 8003bb8:	f000 80a3 	beq.w	8003d02 <_printf_i+0x16e>
 8003bbc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003bc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003bc4:	e03a      	b.n	8003c3c <_printf_i+0xa8>
 8003bc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003bca:	2b15      	cmp	r3, #21
 8003bcc:	d8f6      	bhi.n	8003bbc <_printf_i+0x28>
 8003bce:	a001      	add	r0, pc, #4	; (adr r0, 8003bd4 <_printf_i+0x40>)
 8003bd0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003bd4:	08003c2d 	.word	0x08003c2d
 8003bd8:	08003c41 	.word	0x08003c41
 8003bdc:	08003bbd 	.word	0x08003bbd
 8003be0:	08003bbd 	.word	0x08003bbd
 8003be4:	08003bbd 	.word	0x08003bbd
 8003be8:	08003bbd 	.word	0x08003bbd
 8003bec:	08003c41 	.word	0x08003c41
 8003bf0:	08003bbd 	.word	0x08003bbd
 8003bf4:	08003bbd 	.word	0x08003bbd
 8003bf8:	08003bbd 	.word	0x08003bbd
 8003bfc:	08003bbd 	.word	0x08003bbd
 8003c00:	08003d4d 	.word	0x08003d4d
 8003c04:	08003c71 	.word	0x08003c71
 8003c08:	08003d2f 	.word	0x08003d2f
 8003c0c:	08003bbd 	.word	0x08003bbd
 8003c10:	08003bbd 	.word	0x08003bbd
 8003c14:	08003d6f 	.word	0x08003d6f
 8003c18:	08003bbd 	.word	0x08003bbd
 8003c1c:	08003c71 	.word	0x08003c71
 8003c20:	08003bbd 	.word	0x08003bbd
 8003c24:	08003bbd 	.word	0x08003bbd
 8003c28:	08003d37 	.word	0x08003d37
 8003c2c:	680b      	ldr	r3, [r1, #0]
 8003c2e:	1d1a      	adds	r2, r3, #4
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	600a      	str	r2, [r1, #0]
 8003c34:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003c38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e0a3      	b.n	8003d88 <_printf_i+0x1f4>
 8003c40:	6825      	ldr	r5, [r4, #0]
 8003c42:	6808      	ldr	r0, [r1, #0]
 8003c44:	062e      	lsls	r6, r5, #24
 8003c46:	f100 0304 	add.w	r3, r0, #4
 8003c4a:	d50a      	bpl.n	8003c62 <_printf_i+0xce>
 8003c4c:	6805      	ldr	r5, [r0, #0]
 8003c4e:	600b      	str	r3, [r1, #0]
 8003c50:	2d00      	cmp	r5, #0
 8003c52:	da03      	bge.n	8003c5c <_printf_i+0xc8>
 8003c54:	232d      	movs	r3, #45	; 0x2d
 8003c56:	426d      	negs	r5, r5
 8003c58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c5c:	485e      	ldr	r0, [pc, #376]	; (8003dd8 <_printf_i+0x244>)
 8003c5e:	230a      	movs	r3, #10
 8003c60:	e019      	b.n	8003c96 <_printf_i+0x102>
 8003c62:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003c66:	6805      	ldr	r5, [r0, #0]
 8003c68:	600b      	str	r3, [r1, #0]
 8003c6a:	bf18      	it	ne
 8003c6c:	b22d      	sxthne	r5, r5
 8003c6e:	e7ef      	b.n	8003c50 <_printf_i+0xbc>
 8003c70:	680b      	ldr	r3, [r1, #0]
 8003c72:	6825      	ldr	r5, [r4, #0]
 8003c74:	1d18      	adds	r0, r3, #4
 8003c76:	6008      	str	r0, [r1, #0]
 8003c78:	0628      	lsls	r0, r5, #24
 8003c7a:	d501      	bpl.n	8003c80 <_printf_i+0xec>
 8003c7c:	681d      	ldr	r5, [r3, #0]
 8003c7e:	e002      	b.n	8003c86 <_printf_i+0xf2>
 8003c80:	0669      	lsls	r1, r5, #25
 8003c82:	d5fb      	bpl.n	8003c7c <_printf_i+0xe8>
 8003c84:	881d      	ldrh	r5, [r3, #0]
 8003c86:	4854      	ldr	r0, [pc, #336]	; (8003dd8 <_printf_i+0x244>)
 8003c88:	2f6f      	cmp	r7, #111	; 0x6f
 8003c8a:	bf0c      	ite	eq
 8003c8c:	2308      	moveq	r3, #8
 8003c8e:	230a      	movne	r3, #10
 8003c90:	2100      	movs	r1, #0
 8003c92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c96:	6866      	ldr	r6, [r4, #4]
 8003c98:	60a6      	str	r6, [r4, #8]
 8003c9a:	2e00      	cmp	r6, #0
 8003c9c:	bfa2      	ittt	ge
 8003c9e:	6821      	ldrge	r1, [r4, #0]
 8003ca0:	f021 0104 	bicge.w	r1, r1, #4
 8003ca4:	6021      	strge	r1, [r4, #0]
 8003ca6:	b90d      	cbnz	r5, 8003cac <_printf_i+0x118>
 8003ca8:	2e00      	cmp	r6, #0
 8003caa:	d04d      	beq.n	8003d48 <_printf_i+0x1b4>
 8003cac:	4616      	mov	r6, r2
 8003cae:	fbb5 f1f3 	udiv	r1, r5, r3
 8003cb2:	fb03 5711 	mls	r7, r3, r1, r5
 8003cb6:	5dc7      	ldrb	r7, [r0, r7]
 8003cb8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003cbc:	462f      	mov	r7, r5
 8003cbe:	42bb      	cmp	r3, r7
 8003cc0:	460d      	mov	r5, r1
 8003cc2:	d9f4      	bls.n	8003cae <_printf_i+0x11a>
 8003cc4:	2b08      	cmp	r3, #8
 8003cc6:	d10b      	bne.n	8003ce0 <_printf_i+0x14c>
 8003cc8:	6823      	ldr	r3, [r4, #0]
 8003cca:	07df      	lsls	r7, r3, #31
 8003ccc:	d508      	bpl.n	8003ce0 <_printf_i+0x14c>
 8003cce:	6923      	ldr	r3, [r4, #16]
 8003cd0:	6861      	ldr	r1, [r4, #4]
 8003cd2:	4299      	cmp	r1, r3
 8003cd4:	bfde      	ittt	le
 8003cd6:	2330      	movle	r3, #48	; 0x30
 8003cd8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003cdc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003ce0:	1b92      	subs	r2, r2, r6
 8003ce2:	6122      	str	r2, [r4, #16]
 8003ce4:	f8cd a000 	str.w	sl, [sp]
 8003ce8:	464b      	mov	r3, r9
 8003cea:	aa03      	add	r2, sp, #12
 8003cec:	4621      	mov	r1, r4
 8003cee:	4640      	mov	r0, r8
 8003cf0:	f7ff fee2 	bl	8003ab8 <_printf_common>
 8003cf4:	3001      	adds	r0, #1
 8003cf6:	d14c      	bne.n	8003d92 <_printf_i+0x1fe>
 8003cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cfc:	b004      	add	sp, #16
 8003cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d02:	4835      	ldr	r0, [pc, #212]	; (8003dd8 <_printf_i+0x244>)
 8003d04:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003d08:	6823      	ldr	r3, [r4, #0]
 8003d0a:	680e      	ldr	r6, [r1, #0]
 8003d0c:	061f      	lsls	r7, r3, #24
 8003d0e:	f856 5b04 	ldr.w	r5, [r6], #4
 8003d12:	600e      	str	r6, [r1, #0]
 8003d14:	d514      	bpl.n	8003d40 <_printf_i+0x1ac>
 8003d16:	07d9      	lsls	r1, r3, #31
 8003d18:	bf44      	itt	mi
 8003d1a:	f043 0320 	orrmi.w	r3, r3, #32
 8003d1e:	6023      	strmi	r3, [r4, #0]
 8003d20:	b91d      	cbnz	r5, 8003d2a <_printf_i+0x196>
 8003d22:	6823      	ldr	r3, [r4, #0]
 8003d24:	f023 0320 	bic.w	r3, r3, #32
 8003d28:	6023      	str	r3, [r4, #0]
 8003d2a:	2310      	movs	r3, #16
 8003d2c:	e7b0      	b.n	8003c90 <_printf_i+0xfc>
 8003d2e:	6823      	ldr	r3, [r4, #0]
 8003d30:	f043 0320 	orr.w	r3, r3, #32
 8003d34:	6023      	str	r3, [r4, #0]
 8003d36:	2378      	movs	r3, #120	; 0x78
 8003d38:	4828      	ldr	r0, [pc, #160]	; (8003ddc <_printf_i+0x248>)
 8003d3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d3e:	e7e3      	b.n	8003d08 <_printf_i+0x174>
 8003d40:	065e      	lsls	r6, r3, #25
 8003d42:	bf48      	it	mi
 8003d44:	b2ad      	uxthmi	r5, r5
 8003d46:	e7e6      	b.n	8003d16 <_printf_i+0x182>
 8003d48:	4616      	mov	r6, r2
 8003d4a:	e7bb      	b.n	8003cc4 <_printf_i+0x130>
 8003d4c:	680b      	ldr	r3, [r1, #0]
 8003d4e:	6826      	ldr	r6, [r4, #0]
 8003d50:	6960      	ldr	r0, [r4, #20]
 8003d52:	1d1d      	adds	r5, r3, #4
 8003d54:	600d      	str	r5, [r1, #0]
 8003d56:	0635      	lsls	r5, r6, #24
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	d501      	bpl.n	8003d60 <_printf_i+0x1cc>
 8003d5c:	6018      	str	r0, [r3, #0]
 8003d5e:	e002      	b.n	8003d66 <_printf_i+0x1d2>
 8003d60:	0671      	lsls	r1, r6, #25
 8003d62:	d5fb      	bpl.n	8003d5c <_printf_i+0x1c8>
 8003d64:	8018      	strh	r0, [r3, #0]
 8003d66:	2300      	movs	r3, #0
 8003d68:	6123      	str	r3, [r4, #16]
 8003d6a:	4616      	mov	r6, r2
 8003d6c:	e7ba      	b.n	8003ce4 <_printf_i+0x150>
 8003d6e:	680b      	ldr	r3, [r1, #0]
 8003d70:	1d1a      	adds	r2, r3, #4
 8003d72:	600a      	str	r2, [r1, #0]
 8003d74:	681e      	ldr	r6, [r3, #0]
 8003d76:	6862      	ldr	r2, [r4, #4]
 8003d78:	2100      	movs	r1, #0
 8003d7a:	4630      	mov	r0, r6
 8003d7c:	f7fc fa30 	bl	80001e0 <memchr>
 8003d80:	b108      	cbz	r0, 8003d86 <_printf_i+0x1f2>
 8003d82:	1b80      	subs	r0, r0, r6
 8003d84:	6060      	str	r0, [r4, #4]
 8003d86:	6863      	ldr	r3, [r4, #4]
 8003d88:	6123      	str	r3, [r4, #16]
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d90:	e7a8      	b.n	8003ce4 <_printf_i+0x150>
 8003d92:	6923      	ldr	r3, [r4, #16]
 8003d94:	4632      	mov	r2, r6
 8003d96:	4649      	mov	r1, r9
 8003d98:	4640      	mov	r0, r8
 8003d9a:	47d0      	blx	sl
 8003d9c:	3001      	adds	r0, #1
 8003d9e:	d0ab      	beq.n	8003cf8 <_printf_i+0x164>
 8003da0:	6823      	ldr	r3, [r4, #0]
 8003da2:	079b      	lsls	r3, r3, #30
 8003da4:	d413      	bmi.n	8003dce <_printf_i+0x23a>
 8003da6:	68e0      	ldr	r0, [r4, #12]
 8003da8:	9b03      	ldr	r3, [sp, #12]
 8003daa:	4298      	cmp	r0, r3
 8003dac:	bfb8      	it	lt
 8003dae:	4618      	movlt	r0, r3
 8003db0:	e7a4      	b.n	8003cfc <_printf_i+0x168>
 8003db2:	2301      	movs	r3, #1
 8003db4:	4632      	mov	r2, r6
 8003db6:	4649      	mov	r1, r9
 8003db8:	4640      	mov	r0, r8
 8003dba:	47d0      	blx	sl
 8003dbc:	3001      	adds	r0, #1
 8003dbe:	d09b      	beq.n	8003cf8 <_printf_i+0x164>
 8003dc0:	3501      	adds	r5, #1
 8003dc2:	68e3      	ldr	r3, [r4, #12]
 8003dc4:	9903      	ldr	r1, [sp, #12]
 8003dc6:	1a5b      	subs	r3, r3, r1
 8003dc8:	42ab      	cmp	r3, r5
 8003dca:	dcf2      	bgt.n	8003db2 <_printf_i+0x21e>
 8003dcc:	e7eb      	b.n	8003da6 <_printf_i+0x212>
 8003dce:	2500      	movs	r5, #0
 8003dd0:	f104 0619 	add.w	r6, r4, #25
 8003dd4:	e7f5      	b.n	8003dc2 <_printf_i+0x22e>
 8003dd6:	bf00      	nop
 8003dd8:	080040f5 	.word	0x080040f5
 8003ddc:	08004106 	.word	0x08004106

08003de0 <memcpy>:
 8003de0:	440a      	add	r2, r1
 8003de2:	4291      	cmp	r1, r2
 8003de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8003de8:	d100      	bne.n	8003dec <memcpy+0xc>
 8003dea:	4770      	bx	lr
 8003dec:	b510      	push	{r4, lr}
 8003dee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003df2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003df6:	4291      	cmp	r1, r2
 8003df8:	d1f9      	bne.n	8003dee <memcpy+0xe>
 8003dfa:	bd10      	pop	{r4, pc}

08003dfc <memmove>:
 8003dfc:	4288      	cmp	r0, r1
 8003dfe:	b510      	push	{r4, lr}
 8003e00:	eb01 0402 	add.w	r4, r1, r2
 8003e04:	d902      	bls.n	8003e0c <memmove+0x10>
 8003e06:	4284      	cmp	r4, r0
 8003e08:	4623      	mov	r3, r4
 8003e0a:	d807      	bhi.n	8003e1c <memmove+0x20>
 8003e0c:	1e43      	subs	r3, r0, #1
 8003e0e:	42a1      	cmp	r1, r4
 8003e10:	d008      	beq.n	8003e24 <memmove+0x28>
 8003e12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e1a:	e7f8      	b.n	8003e0e <memmove+0x12>
 8003e1c:	4402      	add	r2, r0
 8003e1e:	4601      	mov	r1, r0
 8003e20:	428a      	cmp	r2, r1
 8003e22:	d100      	bne.n	8003e26 <memmove+0x2a>
 8003e24:	bd10      	pop	{r4, pc}
 8003e26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003e2e:	e7f7      	b.n	8003e20 <memmove+0x24>

08003e30 <_free_r>:
 8003e30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e32:	2900      	cmp	r1, #0
 8003e34:	d048      	beq.n	8003ec8 <_free_r+0x98>
 8003e36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e3a:	9001      	str	r0, [sp, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f1a1 0404 	sub.w	r4, r1, #4
 8003e42:	bfb8      	it	lt
 8003e44:	18e4      	addlt	r4, r4, r3
 8003e46:	f000 f8d3 	bl	8003ff0 <__malloc_lock>
 8003e4a:	4a20      	ldr	r2, [pc, #128]	; (8003ecc <_free_r+0x9c>)
 8003e4c:	9801      	ldr	r0, [sp, #4]
 8003e4e:	6813      	ldr	r3, [r2, #0]
 8003e50:	4615      	mov	r5, r2
 8003e52:	b933      	cbnz	r3, 8003e62 <_free_r+0x32>
 8003e54:	6063      	str	r3, [r4, #4]
 8003e56:	6014      	str	r4, [r2, #0]
 8003e58:	b003      	add	sp, #12
 8003e5a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e5e:	f000 b8cd 	b.w	8003ffc <__malloc_unlock>
 8003e62:	42a3      	cmp	r3, r4
 8003e64:	d90b      	bls.n	8003e7e <_free_r+0x4e>
 8003e66:	6821      	ldr	r1, [r4, #0]
 8003e68:	1862      	adds	r2, r4, r1
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	bf04      	itt	eq
 8003e6e:	681a      	ldreq	r2, [r3, #0]
 8003e70:	685b      	ldreq	r3, [r3, #4]
 8003e72:	6063      	str	r3, [r4, #4]
 8003e74:	bf04      	itt	eq
 8003e76:	1852      	addeq	r2, r2, r1
 8003e78:	6022      	streq	r2, [r4, #0]
 8003e7a:	602c      	str	r4, [r5, #0]
 8003e7c:	e7ec      	b.n	8003e58 <_free_r+0x28>
 8003e7e:	461a      	mov	r2, r3
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	b10b      	cbz	r3, 8003e88 <_free_r+0x58>
 8003e84:	42a3      	cmp	r3, r4
 8003e86:	d9fa      	bls.n	8003e7e <_free_r+0x4e>
 8003e88:	6811      	ldr	r1, [r2, #0]
 8003e8a:	1855      	adds	r5, r2, r1
 8003e8c:	42a5      	cmp	r5, r4
 8003e8e:	d10b      	bne.n	8003ea8 <_free_r+0x78>
 8003e90:	6824      	ldr	r4, [r4, #0]
 8003e92:	4421      	add	r1, r4
 8003e94:	1854      	adds	r4, r2, r1
 8003e96:	42a3      	cmp	r3, r4
 8003e98:	6011      	str	r1, [r2, #0]
 8003e9a:	d1dd      	bne.n	8003e58 <_free_r+0x28>
 8003e9c:	681c      	ldr	r4, [r3, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	6053      	str	r3, [r2, #4]
 8003ea2:	4421      	add	r1, r4
 8003ea4:	6011      	str	r1, [r2, #0]
 8003ea6:	e7d7      	b.n	8003e58 <_free_r+0x28>
 8003ea8:	d902      	bls.n	8003eb0 <_free_r+0x80>
 8003eaa:	230c      	movs	r3, #12
 8003eac:	6003      	str	r3, [r0, #0]
 8003eae:	e7d3      	b.n	8003e58 <_free_r+0x28>
 8003eb0:	6825      	ldr	r5, [r4, #0]
 8003eb2:	1961      	adds	r1, r4, r5
 8003eb4:	428b      	cmp	r3, r1
 8003eb6:	bf04      	itt	eq
 8003eb8:	6819      	ldreq	r1, [r3, #0]
 8003eba:	685b      	ldreq	r3, [r3, #4]
 8003ebc:	6063      	str	r3, [r4, #4]
 8003ebe:	bf04      	itt	eq
 8003ec0:	1949      	addeq	r1, r1, r5
 8003ec2:	6021      	streq	r1, [r4, #0]
 8003ec4:	6054      	str	r4, [r2, #4]
 8003ec6:	e7c7      	b.n	8003e58 <_free_r+0x28>
 8003ec8:	b003      	add	sp, #12
 8003eca:	bd30      	pop	{r4, r5, pc}
 8003ecc:	20000094 	.word	0x20000094

08003ed0 <_malloc_r>:
 8003ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ed2:	1ccd      	adds	r5, r1, #3
 8003ed4:	f025 0503 	bic.w	r5, r5, #3
 8003ed8:	3508      	adds	r5, #8
 8003eda:	2d0c      	cmp	r5, #12
 8003edc:	bf38      	it	cc
 8003ede:	250c      	movcc	r5, #12
 8003ee0:	2d00      	cmp	r5, #0
 8003ee2:	4606      	mov	r6, r0
 8003ee4:	db01      	blt.n	8003eea <_malloc_r+0x1a>
 8003ee6:	42a9      	cmp	r1, r5
 8003ee8:	d903      	bls.n	8003ef2 <_malloc_r+0x22>
 8003eea:	230c      	movs	r3, #12
 8003eec:	6033      	str	r3, [r6, #0]
 8003eee:	2000      	movs	r0, #0
 8003ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ef2:	f000 f87d 	bl	8003ff0 <__malloc_lock>
 8003ef6:	4921      	ldr	r1, [pc, #132]	; (8003f7c <_malloc_r+0xac>)
 8003ef8:	680a      	ldr	r2, [r1, #0]
 8003efa:	4614      	mov	r4, r2
 8003efc:	b99c      	cbnz	r4, 8003f26 <_malloc_r+0x56>
 8003efe:	4f20      	ldr	r7, [pc, #128]	; (8003f80 <_malloc_r+0xb0>)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	b923      	cbnz	r3, 8003f0e <_malloc_r+0x3e>
 8003f04:	4621      	mov	r1, r4
 8003f06:	4630      	mov	r0, r6
 8003f08:	f000 f862 	bl	8003fd0 <_sbrk_r>
 8003f0c:	6038      	str	r0, [r7, #0]
 8003f0e:	4629      	mov	r1, r5
 8003f10:	4630      	mov	r0, r6
 8003f12:	f000 f85d 	bl	8003fd0 <_sbrk_r>
 8003f16:	1c43      	adds	r3, r0, #1
 8003f18:	d123      	bne.n	8003f62 <_malloc_r+0x92>
 8003f1a:	230c      	movs	r3, #12
 8003f1c:	6033      	str	r3, [r6, #0]
 8003f1e:	4630      	mov	r0, r6
 8003f20:	f000 f86c 	bl	8003ffc <__malloc_unlock>
 8003f24:	e7e3      	b.n	8003eee <_malloc_r+0x1e>
 8003f26:	6823      	ldr	r3, [r4, #0]
 8003f28:	1b5b      	subs	r3, r3, r5
 8003f2a:	d417      	bmi.n	8003f5c <_malloc_r+0x8c>
 8003f2c:	2b0b      	cmp	r3, #11
 8003f2e:	d903      	bls.n	8003f38 <_malloc_r+0x68>
 8003f30:	6023      	str	r3, [r4, #0]
 8003f32:	441c      	add	r4, r3
 8003f34:	6025      	str	r5, [r4, #0]
 8003f36:	e004      	b.n	8003f42 <_malloc_r+0x72>
 8003f38:	6863      	ldr	r3, [r4, #4]
 8003f3a:	42a2      	cmp	r2, r4
 8003f3c:	bf0c      	ite	eq
 8003f3e:	600b      	streq	r3, [r1, #0]
 8003f40:	6053      	strne	r3, [r2, #4]
 8003f42:	4630      	mov	r0, r6
 8003f44:	f000 f85a 	bl	8003ffc <__malloc_unlock>
 8003f48:	f104 000b 	add.w	r0, r4, #11
 8003f4c:	1d23      	adds	r3, r4, #4
 8003f4e:	f020 0007 	bic.w	r0, r0, #7
 8003f52:	1ac2      	subs	r2, r0, r3
 8003f54:	d0cc      	beq.n	8003ef0 <_malloc_r+0x20>
 8003f56:	1a1b      	subs	r3, r3, r0
 8003f58:	50a3      	str	r3, [r4, r2]
 8003f5a:	e7c9      	b.n	8003ef0 <_malloc_r+0x20>
 8003f5c:	4622      	mov	r2, r4
 8003f5e:	6864      	ldr	r4, [r4, #4]
 8003f60:	e7cc      	b.n	8003efc <_malloc_r+0x2c>
 8003f62:	1cc4      	adds	r4, r0, #3
 8003f64:	f024 0403 	bic.w	r4, r4, #3
 8003f68:	42a0      	cmp	r0, r4
 8003f6a:	d0e3      	beq.n	8003f34 <_malloc_r+0x64>
 8003f6c:	1a21      	subs	r1, r4, r0
 8003f6e:	4630      	mov	r0, r6
 8003f70:	f000 f82e 	bl	8003fd0 <_sbrk_r>
 8003f74:	3001      	adds	r0, #1
 8003f76:	d1dd      	bne.n	8003f34 <_malloc_r+0x64>
 8003f78:	e7cf      	b.n	8003f1a <_malloc_r+0x4a>
 8003f7a:	bf00      	nop
 8003f7c:	20000094 	.word	0x20000094
 8003f80:	20000098 	.word	0x20000098

08003f84 <_realloc_r>:
 8003f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f86:	4607      	mov	r7, r0
 8003f88:	4614      	mov	r4, r2
 8003f8a:	460e      	mov	r6, r1
 8003f8c:	b921      	cbnz	r1, 8003f98 <_realloc_r+0x14>
 8003f8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003f92:	4611      	mov	r1, r2
 8003f94:	f7ff bf9c 	b.w	8003ed0 <_malloc_r>
 8003f98:	b922      	cbnz	r2, 8003fa4 <_realloc_r+0x20>
 8003f9a:	f7ff ff49 	bl	8003e30 <_free_r>
 8003f9e:	4625      	mov	r5, r4
 8003fa0:	4628      	mov	r0, r5
 8003fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fa4:	f000 f830 	bl	8004008 <_malloc_usable_size_r>
 8003fa8:	42a0      	cmp	r0, r4
 8003faa:	d20f      	bcs.n	8003fcc <_realloc_r+0x48>
 8003fac:	4621      	mov	r1, r4
 8003fae:	4638      	mov	r0, r7
 8003fb0:	f7ff ff8e 	bl	8003ed0 <_malloc_r>
 8003fb4:	4605      	mov	r5, r0
 8003fb6:	2800      	cmp	r0, #0
 8003fb8:	d0f2      	beq.n	8003fa0 <_realloc_r+0x1c>
 8003fba:	4631      	mov	r1, r6
 8003fbc:	4622      	mov	r2, r4
 8003fbe:	f7ff ff0f 	bl	8003de0 <memcpy>
 8003fc2:	4631      	mov	r1, r6
 8003fc4:	4638      	mov	r0, r7
 8003fc6:	f7ff ff33 	bl	8003e30 <_free_r>
 8003fca:	e7e9      	b.n	8003fa0 <_realloc_r+0x1c>
 8003fcc:	4635      	mov	r5, r6
 8003fce:	e7e7      	b.n	8003fa0 <_realloc_r+0x1c>

08003fd0 <_sbrk_r>:
 8003fd0:	b538      	push	{r3, r4, r5, lr}
 8003fd2:	4d06      	ldr	r5, [pc, #24]	; (8003fec <_sbrk_r+0x1c>)
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	4604      	mov	r4, r0
 8003fd8:	4608      	mov	r0, r1
 8003fda:	602b      	str	r3, [r5, #0]
 8003fdc:	f7fc fcf2 	bl	80009c4 <_sbrk>
 8003fe0:	1c43      	adds	r3, r0, #1
 8003fe2:	d102      	bne.n	8003fea <_sbrk_r+0x1a>
 8003fe4:	682b      	ldr	r3, [r5, #0]
 8003fe6:	b103      	cbz	r3, 8003fea <_sbrk_r+0x1a>
 8003fe8:	6023      	str	r3, [r4, #0]
 8003fea:	bd38      	pop	{r3, r4, r5, pc}
 8003fec:	20000128 	.word	0x20000128

08003ff0 <__malloc_lock>:
 8003ff0:	4801      	ldr	r0, [pc, #4]	; (8003ff8 <__malloc_lock+0x8>)
 8003ff2:	f000 b811 	b.w	8004018 <__retarget_lock_acquire_recursive>
 8003ff6:	bf00      	nop
 8003ff8:	20000130 	.word	0x20000130

08003ffc <__malloc_unlock>:
 8003ffc:	4801      	ldr	r0, [pc, #4]	; (8004004 <__malloc_unlock+0x8>)
 8003ffe:	f000 b80c 	b.w	800401a <__retarget_lock_release_recursive>
 8004002:	bf00      	nop
 8004004:	20000130 	.word	0x20000130

08004008 <_malloc_usable_size_r>:
 8004008:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800400c:	1f18      	subs	r0, r3, #4
 800400e:	2b00      	cmp	r3, #0
 8004010:	bfbc      	itt	lt
 8004012:	580b      	ldrlt	r3, [r1, r0]
 8004014:	18c0      	addlt	r0, r0, r3
 8004016:	4770      	bx	lr

08004018 <__retarget_lock_acquire_recursive>:
 8004018:	4770      	bx	lr

0800401a <__retarget_lock_release_recursive>:
 800401a:	4770      	bx	lr

0800401c <_init>:
 800401c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800401e:	bf00      	nop
 8004020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004022:	bc08      	pop	{r3}
 8004024:	469e      	mov	lr, r3
 8004026:	4770      	bx	lr

08004028 <_fini>:
 8004028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800402a:	bf00      	nop
 800402c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800402e:	bc08      	pop	{r3}
 8004030:	469e      	mov	lr, r3
 8004032:	4770      	bx	lr
